import { Optional } from '../common/optional';
import { DomainEventBus } from '../core/domain/event/domain-event.bus';
import { CoreContainer } from '../core/api/core.container';
export function assertDomainEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length);
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equalsByType(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
        expect(actualEvent.equalsByType(expectedEvent)).toBeTruthy();
        // expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');
        expect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');
    }
}
export function assertAggregateEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equals(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
    }
}
export function testEventRepositoryIsEmptyOnStart(createStream, desc) {
    it('should be no ' + desc + ' events on start', () => {
        expect.assertions(3);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe(() => nextFn(), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).not.toHaveBeenCalled();
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function onDefaultValuesWarehouseTest(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function onceDefaultValuesWarehouseTest(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).toHaveBeenCalledTimes(1);
    });
}
export function findDefaultValuesWarehouseTest(createValue, defaultValue, desc) {
    it('should find default value' + desc, function () {
        expect.assertions(1);
        expect(createValue()).toEqual(Optional.of(defaultValue));
    });
}
export function commandInterceptedByHandlerTest(dispatch, handlerType) {
    it('should trigger command handler', () => {
        expect.assertions(1);
        // given
        const handler = CoreContainer.resolve(handlerType), handlerSpy = jest.spyOn(handler, 'handle');
        // when
        dispatch();
        // then
        expect(handlerSpy).toHaveBeenCalled();
    });
}
export function commandPublishEventTest(dispatch, eventType) {
    it('should dispatch event', () => {
        expect.assertions(1);
        // given
        CoreContainer.resolve(DomainEventBus)
            .subscribe((event) => {
            // then
            if (event instanceof eventType) {
                expect(event instanceof eventType).toEqual(true);
            }
        });
        // when
        dispatch();
    });
}
export function commandTriggersHandlerAndPublishEventTest(dispatch, handlerType, eventType) {
    commandInterceptedByHandlerTest(dispatch, handlerType);
    commandPublishEventTest(dispatch, eventType);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy90ZXN0aW5nL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFNM0QsTUFBTSxVQUFVLGtCQUFrQixDQUF3QixZQUEyQyxFQUFFLGNBQXFDO0lBRTNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUzRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtRQUV2QyxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBcUIsRUFBRSxFQUFFO1lBQ25FLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzdELCtHQUErRztRQUMvRyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0tBQzFHO0FBRUYsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBd0IsWUFBOEMsRUFBRSxjQUF3QztJQUVwSixNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FB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LENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckIsUUFBUTtRQUNSLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQ2pELFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUU1QyxPQUFPO1FBQ1AsUUFBUSxFQUFFLENBQUM7UUFFWCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFFBQW9CLEVBQUUsU0FBYztJQUUzRSxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBRWhDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckIsUUFBUTtRQUNSLGFBQWEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO2FBQ2hDLFNBQVMsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBRXpCLE9BQU87WUFDUCxJQUFJLEtBQUssWUFBWSxTQUFTLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxLQUFLLFlBQVksU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pEO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFUCxPQUFPO1FBQ1AsUUFBUSxFQUFFLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUseUNBQXlDLENBQUMsUUFBb0IsRUFBRSxXQUFnQixFQUFFLFNBQWM7SUFFL0csK0JBQStCLENBQzlCLFFBQVEsRUFDUixXQUFXLENBQ1gsQ0FBQztJQUVGLHVCQUF1QixDQUN0QixRQUFRLEVBQ1IsU0FBUyxDQUNULENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlSWQgfSBmcm9tICcuLi9jb3JlL2FwaS90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcblxuaW1wb3J0IHsgQWdncmVnYXRlRXZlbnQgfSBmcm9tICcuLi9jb3JlL2FwaS90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWV2ZW50JztcbmltcG9ydCB7IERvbWFpbkV2ZW50IH0gZnJvbSAnLi4vY29yZS9hcGkvZXZlbnQvZG9tYWluLWV2ZW50JztcbmltcG9ydCB7IEhlcm1lc09ic2VydmFibGUgfSBmcm9tICcuLi9jb21tb24vc3RyZWFtL2NvcmUvb2JzZXJ2YWJsZS9oZXJtZXMub2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBPcHRpb25hbCB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25hbCc7XG5pbXBvcnQgeyBEb21haW5FdmVudEJ1cyB9IGZyb20gJy4uL2NvcmUvZG9tYWluL2V2ZW50L2RvbWFpbi1ldmVudC5idXMnO1xuaW1wb3J0IHsgQ29yZUNvbnRhaW5lciB9IGZyb20gJy4uL2NvcmUvYXBpL2NvcmUuY29udGFpbmVyJztcblxuZGVjbGFyZSBjb25zdCBleHBlY3Q6IGFueTtcbmRlY2xhcmUgY29uc3QgaXQ6IGFueTtcbmRlY2xhcmUgY29uc3QgamVzdDogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RG9tYWluRXZlbnRzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZD4oYWN0dWFsRXZlbnRzOiBSZWFkb25seUFycmF5PERvbWFpbkV2ZW50PEk+PiwgZXhwZWN0ZWRFdmVudHM6IEFycmF5PERvbWFpbkV2ZW50PEk+Pik6IHZvaWQge1xuXG5cdGV4cGVjdChhY3R1YWxFdmVudHMubGVuZ3RoKS50b0VxdWFsKGV4cGVjdGVkRXZlbnRzLmxlbmd0aCk7XG5cblx0Zm9yIChjb25zdCBhY3R1YWxFdmVudCBvZiBhY3R1YWxFdmVudHMpIHtcblxuXHRcdGNvbnN0IGV4cGVjdGVkRXZlbnQgPSBleHBlY3RlZEV2ZW50cy5maW5kKChldmVudDogRG9tYWluRXZlbnQ8ST4pID0+IHtcblx0XHRcdHJldHVybiBldmVudC5lcXVhbHNCeVR5cGUoYWN0dWFsRXZlbnQpO1xuXHRcdH0pO1xuXG5cdFx0ZXhwZWN0KGV4cGVjdGVkRXZlbnQpLnRvQmVEZWZpbmVkKCk7XG5cdFx0ZXhwZWN0KGFjdHVhbEV2ZW50LmVxdWFsc0J5VHlwZShleHBlY3RlZEV2ZW50KSkudG9CZVRydXRoeSgpO1xuXHRcdC8vIGV4cGVjdChhY3R1YWxFdmVudC5hZ2dyZWdhdGVJZCkudG9FcXVhbChleHBlY3RlZEV2ZW50LmFnZ3JlZ2F0ZUlkLCAnRXZlbnRzIGFnZ3JlZ2F0ZUlkIHNob3VsZCBiZSB0aGUgc2FtZScpO1xuXHRcdGV4cGVjdChhY3R1YWxFdmVudC5nZXRQYXlsb2FkKCkpLnRvRXF1YWwoZXhwZWN0ZWRFdmVudC5nZXRQYXlsb2FkKCksICdFdmVudHMgcGF5bG9hZCBzaG91bGQgYmUgdGhlIHNhbWUnKTtcblx0fVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBZ2dyZWdhdGVFdmVudHM8VCBleHRlbmRzIEFnZ3JlZ2F0ZUlkPihhY3R1YWxFdmVudHM6IFJlYWRvbmx5QXJyYXk8QWdncmVnYXRlRXZlbnQ8VD4+LCBleHBlY3RlZEV2ZW50czogQXJyYXk8QWdncmVnYXRlRXZlbnQ8VD4+KTogdm9pZCB7XG5cblx0ZXhwZWN0KGFjdHVhbEV2ZW50cy5sZW5ndGgpLnRvRXF1YWwoZXhwZWN0ZWRFdmVudHMubGVuZ3RoLCAnQWdncmVnYXRlIGV2ZW50cycpO1xuXG5cdGZvciAoY29uc3QgYWN0dWFsRXZlbnQgb2YgYWN0dWFsRXZlbnRzKSB7XG5cblx0XHRjb25zdCBleHBlY3RlZEV2ZW50ID0gZXhwZWN0ZWRFdmVudHMuZmluZCgoZXZlbnQ6IEFnZ3JlZ2F0ZUV2ZW50PFQ+KSA9PiB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuZXF1YWxzKGFjdHVhbEV2ZW50KTtcblx0XHR9KTtcblxuXHRcdGV4cGVjdChleHBlY3RlZEV2ZW50KS50b0JlRGVmaW5lZCgpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0RXZlbnRSZXBvc2l0b3J5SXNFbXB0eU9uU3RhcnQ8VD4oY3JlYXRlU3RyZWFtOiAoKSA9PiBIZXJtZXNPYnNlcnZhYmxlPFQ+LCBkZXNjOiBzdHJpbmcpOiB2b2lkIHtcblxuXHRpdCgnc2hvdWxkIGJlIG5vICcgKyBkZXNjICsgJyBldmVudHMgb24gc3RhcnQnLCAoKSA9PiB7XG5cblx0XHRleHBlY3QuYXNzZXJ0aW9ucygzKTtcblxuXHRcdC8vIGdpdmVuXG5cdFx0Y29uc3QgbmV4dEZuID0gamVzdC5mbigpLFxuXHRcdFx0ZXJyb3JGbiA9IGplc3QuZm4oKSxcblx0XHRcdGNvbXBsZXRlRm4gPSBqZXN0LmZuKCk7XG5cblx0XHQvLyB3aGVuXG5cdFx0Y3JlYXRlU3RyZWFtKClcblx0XHRcdC5zdWJzY3JpYmUoXG5cdFx0XHRcdCgpID0+IG5leHRGbigpLFxuXHRcdFx0XHQoZXJyOiBhbnkpID0+IGVycm9yRm4oZXJyKSxcblx0XHRcdFx0KCkgPT4gY29tcGxldGVGbigpXG5cdFx0XHQpO1xuXG5cdFx0Ly8gdGhlblxuXHRcdGV4cGVjdChuZXh0Rm4pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cdFx0ZXhwZWN0KGVycm9yRm4pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cdFx0ZXhwZWN0KGNvbXBsZXRlRm4pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25EZWZhdWx0VmFsdWVzV2FyZWhvdXNlVGVzdDxUPihjcmVhdGVTdHJlYW06ICgpID0+IEhlcm1lc09ic2VydmFibGU8VD4sIGRlZmF1bHRWYWx1ZTogVCwgZGVzYzogc3RyaW5nKTogdm9pZCB7XG5cblx0aXQoJ3Nob3VsZCBoYXZlIGRlZmF1bHQgdmFsdWUgJyArIGRlc2MsICgpID0+IHtcblxuXHRcdGV4cGVjdC5hc3NlcnRpb25zKDQpO1xuXG5cdFx0Ly8gZ2l2ZW5cblx0XHRjb25zdCBuZXh0Rm4gPSBqZXN0LmZuKCksXG5cdFx0XHRlcnJvckZuID0gamVzdC5mbigpLFxuXHRcdFx0Y29tcGxldGVGbiA9IGplc3QuZm4oKTtcblxuXHRcdC8vIHdoZW5cblx0XHRjcmVhdGVTdHJlYW0oKVxuXHRcdFx0LnN1YnNjcmliZShcblx0XHRcdFx0KHZhbHVlKSA9PiBuZXh0Rm4odmFsdWUpLFxuXHRcdFx0XHQoZXJyOiBhbnkpID0+IGVycm9yRm4oZXJyKSxcblx0XHRcdFx0KCkgPT4gY29tcGxldGVGbigpXG5cdFx0XHQpO1xuXG5cdFx0Ly8gdGhlblxuXHRcdGV4cGVjdChuZXh0Rm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGRlZmF1bHRWYWx1ZSk7XG5cdFx0ZXhwZWN0KG5leHRGbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXHRcdGV4cGVjdChlcnJvckZuKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXHRcdGV4cGVjdChjb21wbGV0ZUZuKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uY2VEZWZhdWx0VmFsdWVzV2FyZWhvdXNlVGVzdDxUPihjcmVhdGVTdHJlYW06ICgpID0+IEhlcm1lc09ic2VydmFibGU8VD4sIGRlZmF1bHRWYWx1ZTogVCwgZGVzYzogc3RyaW5nKTogdm9pZCB7XG5cblx0aXQoJ3Nob3VsZCBoYXZlIGRlZmF1bHQgdmFsdWUgJyArIGRlc2MsICgpID0+IHtcblxuXHRcdGV4cGVjdC5hc3NlcnRpb25zKDQpO1xuXG5cdFx0Ly8gZ2l2ZW5cblx0XHRjb25zdCBuZXh0Rm4gPSBqZXN0LmZuKCksXG5cdFx0XHRlcnJvckZuID0gamVzdC5mbigpLFxuXHRcdFx0Y29tcGxldGVGbiA9IGplc3QuZm4oKTtcblxuXHRcdC8vIHdoZW5cblx0XHRjcmVhdGVTdHJlYW0oKVxuXHRcdFx0LnN1YnNjcmliZShcblx0XHRcdFx0KHZhbHVlKSA9PiBuZXh0Rm4odmFsdWUpLFxuXHRcdFx0XHQoZXJyOiBhbnkpID0+IGVycm9yRm4oZXJyKSxcblx0XHRcdFx0KCkgPT4gY29tcGxldGVGbigpXG5cdFx0XHQpO1xuXG5cdFx0Ly8gdGhlblxuXHRcdGV4cGVjdChuZXh0Rm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGRlZmF1bHRWYWx1ZSk7XG5cdFx0ZXhwZWN0KG5leHRGbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXHRcdGV4cGVjdChlcnJvckZuKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXHRcdGV4cGVjdChjb21wbGV0ZUZuKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZERlZmF1bHRWYWx1ZXNXYXJlaG91c2VUZXN0PFQ+KGNyZWF0ZVZhbHVlOiAoKSA9PiBPcHRpb25hbDxUPiwgZGVmYXVsdFZhbHVlOiBULCBkZXNjOiBzdHJpbmcpIHtcblxuXHRpdCgnc2hvdWxkIGZpbmQgZGVmYXVsdCB2YWx1ZScgKyBkZXNjLCBmdW5jdGlvbigpIHtcblxuXHRcdGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuXG5cdFx0ZXhwZWN0KGNyZWF0ZVZhbHVlKCkpLnRvRXF1YWwoT3B0aW9uYWwub2YoZGVmYXVsdFZhbHVlKSk7XG5cdH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjb21tYW5kSW50ZXJjZXB0ZWRCeUhhbmRsZXJUZXN0KGRpc3BhdGNoOiAoKSA9PiB2b2lkLCBoYW5kbGVyVHlwZTogYW55KTogdm9pZCB7XG5cblx0aXQoJ3Nob3VsZCB0cmlnZ2VyIGNvbW1hbmQgaGFuZGxlcicsICgpID0+IHtcblxuXHRcdGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuXG5cdFx0Ly8gZ2l2ZW5cblx0XHRjb25zdCBoYW5kbGVyID0gQ29yZUNvbnRhaW5lci5yZXNvbHZlKGhhbmRsZXJUeXBlKSxcblx0XHRcdGhhbmRsZXJTcHkgPSBqZXN0LnNweU9uKGhhbmRsZXIsICdoYW5kbGUnKTtcblxuXHRcdC8vIHdoZW5cblx0XHRkaXNwYXRjaCgpO1xuXG5cdFx0Ly8gdGhlblxuXHRcdGV4cGVjdChoYW5kbGVyU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZFB1Ymxpc2hFdmVudFRlc3QoZGlzcGF0Y2g6ICgpID0+IHZvaWQsIGV2ZW50VHlwZTogYW55KTogdm9pZCB7XG5cblx0aXQoJ3Nob3VsZCBkaXNwYXRjaCBldmVudCcsICgpID0+IHtcblxuXHRcdGV4cGVjdC5hc3NlcnRpb25zKDEpO1xuXG5cdFx0Ly8gZ2l2ZW5cblx0XHRDb3JlQ29udGFpbmVyLnJlc29sdmUoRG9tYWluRXZlbnRCdXMpXG5cdFx0XHRcdFx0IC5zdWJzY3JpYmUoKGV2ZW50OiBhbnkpID0+IHtcblxuXHRcdFx0XHRcdFx0IC8vIHRoZW5cblx0XHRcdFx0XHRcdCBpZiAoZXZlbnQgaW5zdGFuY2VvZiBldmVudFR5cGUpIHtcblx0XHRcdFx0XHRcdFx0IGV4cGVjdChldmVudCBpbnN0YW5jZW9mIGV2ZW50VHlwZSkudG9FcXVhbCh0cnVlKTtcblx0XHRcdFx0XHRcdCB9XG5cdFx0XHRcdFx0IH0pO1xuXG5cdFx0Ly8gd2hlblxuXHRcdGRpc3BhdGNoKCk7XG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tbWFuZFRyaWdnZXJzSGFuZGxlckFuZFB1Ymxpc2hFdmVudFRlc3QoZGlzcGF0Y2g6ICgpID0+IHZvaWQsIGhhbmRsZXJUeXBlOiBhbnksIGV2ZW50VHlwZTogYW55KTogdm9pZCB7XG5cblx0Y29tbWFuZEludGVyY2VwdGVkQnlIYW5kbGVyVGVzdChcblx0XHRkaXNwYXRjaCxcblx0XHRoYW5kbGVyVHlwZVxuXHQpO1xuXG5cdGNvbW1hbmRQdWJsaXNoRXZlbnRUZXN0KFxuXHRcdGRpc3BhdGNoLFxuXHRcdGV2ZW50VHlwZVxuXHQpO1xufVxuIl19