import { Optional } from '../common/optional';
import { DomainEventBus } from '../core/domain/event/domain-event.bus';
import { CoreContainer } from '../core/api/core.container';
export function assertDomainEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length);
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equalsByType(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
        expect(actualEvent.equalsByType(expectedEvent)).toBeTruthy();
        // expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');
        expect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');
    }
}
export function assertAggregateEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equals(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
    }
}
export function testEventRepositoryIsEmptyOnStart(createStream, desc) {
    it('should be no ' + desc + ' events on start', () => {
        expect.assertions(3);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe(() => nextFn(), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).not.toHaveBeenCalled();
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function onDefaultValuesWarehouseTest(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function onceDefaultValuesWarehouseTest(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).toHaveBeenCalledTimes(1);
    });
}
export function onWarehouseEmpty(createStream, desc) {
    it('should be empty ' + desc, () => {
        expect.assertions(3);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).not.toHaveBeenCalled();
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function findDefaultValuesWarehouseTest(createValue, defaultValue, desc) {
    it('should find default value' + desc, function () {
        expect.assertions(1);
        expect(createValue()).toEqual(Optional.of(defaultValue));
    });
}
export function commandInterceptedByHandlerTest(dispatch, handlerType) {
    it('should trigger command handler', () => {
        expect.assertions(1);
        // given
        const handler = CoreContainer.resolve(handlerType), handlerSpy = jest.spyOn(handler, 'handle');
        // when
        dispatch();
        // then
        expect(handlerSpy).toHaveBeenCalled();
    });
}
export function commandPublishEventTest(dispatch, eventType) {
    it('should dispatch event', () => {
        expect.assertions(1);
        // given
        CoreContainer.resolve(DomainEventBus)
            .subscribe((event) => {
            // then
            if (event instanceof eventType) {
                expect(event instanceof eventType).toEqual(true);
            }
        });
        // when
        dispatch();
    });
}
export function commandTriggersHandlerAndPublishEventTest(dispatch, handlerType, eventType) {
    commandInterceptedByHandlerTest(dispatch, handlerType);
    commandPublishEventTest(dispatch, eventType);
}
//# sourceMappingURL=data:application/json;base64,