import { KeyRegister } from '../key/key.register';
import { ContainerProvider } from './container-provider';
import { ContainerRecord } from './container-record';
export class ContainerFacade {
    constructor() {
        this.keyRegister = new KeyRegister();
        this.containerProvider = new ContainerProvider(this.keyRegister);
        this.containerRecord = new ContainerRecord(this.keyRegister, this.containerProvider);
    }
    resolve(token) {
        return this.containerRecord.resolve(token);
    }
    resolveCollection(token) {
        return this.containerRecord.resolveCollection(token);
    }
    provide(token, provider) {
        this.containerProvider.provide(token, provider);
        return this;
    }
    provideClass(token, provider) {
        this.containerProvider.provideClass(token, provider);
        return this;
    }
    provideValue(token, provider) {
        this.containerProvider.provideValue(token, provider);
        return this;
    }
    provideFactory(token, provider) {
        this.containerProvider.provideFactory(token, provider);
        return this;
    }
    provideCollection(token, provider) {
        this.containerProvider.provideCollection(token, provider);
        return this;
    }
    provideFactoryCollection(token, provider) {
        this.containerProvider.provideFactoryCollection(token, provider);
        return this;
    }
    provideValueCollection(token, provider) {
        this.containerProvider.provideValueCollection(token, provider);
        return this;
    }
    clear() {
        this.keyRegister.clear();
        this.containerProvider.clear();
        this.containerRecord.clear();
    }
    clearOnlyRecords() {
        this.containerRecord.clear();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb21tb24vZGkvbGliL2NvbnRhaW5lci9jb250YWluZXItZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQU16RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsTUFBTSxPQUFPLGVBQWU7SUFBNUI7UUFFa0IsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRWhDLHNCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTVELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQXlEbEcsQ0FBQztJQXZEQSxPQUFPLENBQUksS0FBZTtRQUN6QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxpQkFBaUIsQ0FBSSxLQUFlO1FBQ25DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBSUQsT0FBTyxDQUFJLEtBQWUsRUFBRSxRQUF5QztRQUNwRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFTLENBQUMsQ0FBQztRQUNqRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxZQUFZLENBQUksS0FBZSxFQUFFLFFBQXVCO1FBQ3ZELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFlBQVksQ0FBSSxLQUFlLEVBQUUsUUFBdUI7UUFDdkQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsY0FBYyxDQUFJLEtBQWUsRUFBRSxRQUF5QjtRQUMzRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxpQkFBaUIsQ0FBSSxLQUFlLEVBQUUsUUFBdUI7UUFDNUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMxRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCx3QkFBd0IsQ0FBSSxLQUFlLEVBQUUsUUFBeUI7UUFDckUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxzQkFBc0IsQ0FBSSxLQUFlLEVBQUUsUUFBdUI7UUFDakUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXlSZWdpc3RlciB9IGZyb20gJy4uL2tleS9rZXkucmVnaXN0ZXInO1xuaW1wb3J0IHsgQ29udGFpbmVyUHJvdmlkZXIgfSBmcm9tICcuL2NvbnRhaW5lci1wcm92aWRlcic7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvciwgVG9rZW4gfSBmcm9tICcuLi90b2tlbic7XG5pbXBvcnQgeyBDbGFzc1Byb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXIvY2xhc3MvY2xhc3MtcHJvdmlkZXInO1xuaW1wb3J0IHsgVmFsdWVQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVyL3ZhbHVlL3ZhbHVlLXByb3ZpZGVyJztcbmltcG9ydCB7IEZhY3RvcnlQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVyL2ZhY3RvcnkvZmFjdG9yeS1wcm92aWRlcic7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBDb250YWluZXJSZWNvcmQgfSBmcm9tICcuL2NvbnRhaW5lci1yZWNvcmQnO1xuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyRmFjYWRlIGltcGxlbWVudHMgQ29udGFpbmVyIHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGtleVJlZ2lzdGVyID0gbmV3IEtleVJlZ2lzdGVyKCk7XG5cblx0cHJpdmF0ZSByZWFkb25seSBjb250YWluZXJQcm92aWRlciA9IG5ldyBDb250YWluZXJQcm92aWRlcih0aGlzLmtleVJlZ2lzdGVyKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lclJlY29yZCA9IG5ldyBDb250YWluZXJSZWNvcmQodGhpcy5rZXlSZWdpc3RlciwgdGhpcy5jb250YWluZXJQcm92aWRlcik7XG5cblx0cmVzb2x2ZTxUPih0b2tlbjogVG9rZW48VD4pOiBUIHtcblx0XHRyZXR1cm4gdGhpcy5jb250YWluZXJSZWNvcmQucmVzb2x2ZSh0b2tlbik7XG5cdH1cblxuXHRyZXNvbHZlQ29sbGVjdGlvbjxUPih0b2tlbjogVG9rZW48VD4pOiBSZWFkb25seUFycmF5PFQ+IHtcblx0XHRyZXR1cm4gdGhpcy5jb250YWluZXJSZWNvcmQucmVzb2x2ZUNvbGxlY3Rpb24odG9rZW4pO1xuXHR9XG5cblx0cHJvdmlkZTxUPihjbGF6ejogQ29uc3RydWN0b3I8VD4pOiBDb250YWluZXI7XG5cdHByb3ZpZGU8VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogQ2xhc3NQcm92aWRlcik6IENvbnRhaW5lcjtcblx0cHJvdmlkZTxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyPzogQ29uc3RydWN0b3I8VD4gfCBDbGFzc1Byb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGUodG9rZW4sIHByb3ZpZGVyISk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwcm92aWRlQ2xhc3M8VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogQ2xhc3NQcm92aWRlcik6IENvbnRhaW5lciB7XG5cdFx0dGhpcy5jb250YWluZXJQcm92aWRlci5wcm92aWRlQ2xhc3ModG9rZW4sIHByb3ZpZGVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdHByb3ZpZGVWYWx1ZTxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBWYWx1ZVByb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGVWYWx1ZSh0b2tlbiwgcHJvdmlkZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHJvdmlkZUZhY3Rvcnk8VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGVGYWN0b3J5KHRva2VuLCBwcm92aWRlcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwcm92aWRlQ29sbGVjdGlvbjxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGVDb2xsZWN0aW9uKHRva2VuLCBwcm92aWRlcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRwcm92aWRlRmFjdG9yeUNvbGxlY3Rpb248VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGVGYWN0b3J5Q29sbGVjdGlvbih0b2tlbiwgcHJvdmlkZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHJvdmlkZVZhbHVlQ29sbGVjdGlvbjxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBWYWx1ZVByb3ZpZGVyKTogQ29udGFpbmVyIHtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLnByb3ZpZGVWYWx1ZUNvbGxlY3Rpb24odG9rZW4sIHByb3ZpZGVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGNsZWFyKCk6IHZvaWQge1xuXHRcdHRoaXMua2V5UmVnaXN0ZXIuY2xlYXIoKTtcblx0XHR0aGlzLmNvbnRhaW5lclByb3ZpZGVyLmNsZWFyKCk7XG5cdFx0dGhpcy5jb250YWluZXJSZWNvcmQuY2xlYXIoKTtcblx0fVxuXG5cdGNsZWFyT25seVJlY29yZHMoKTogdm9pZCB7XG5cdFx0dGhpcy5jb250YWluZXJSZWNvcmQuY2xlYXIoKTtcblx0fVxuXG59XG4iXX0=