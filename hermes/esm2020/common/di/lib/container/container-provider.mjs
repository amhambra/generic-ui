import { ProviderManager } from '../provider/provider.manager';
import { ClassRecordFactory } from '../provider/class/class-record.factory';
import { ValueRecordFactory } from '../provider/value/value-record.factory';
import { FactoryRecordFactory } from '../provider/factory/factory-record.factory';
import { ClassCollectionRecordFactory } from '../provider/collection/class-collection-record.factory';
import { FactoryCollectionRecordFactory } from '../provider/collection/factory-collection-record.factory';
import { ValueCollectionRecordFactory } from '../provider/collection/value-collection-record.factory';
export class ContainerProvider {
    constructor(keyRegister) {
        this.keyRegister = keyRegister;
        this.providerManager = new ProviderManager();
        this.collectionProviders = new Map();
    }
    provide(token, provider) {
        if (provider === undefined) {
            return this.provide(token, token);
        }
        else {
            return this.provideClass(token, provider);
        }
    }
    provideClass(token, provider) {
        return this.addProvider(token, provider, (provider) => new ClassRecordFactory(provider));
    }
    provideValue(token, provider) {
        return this.addProvider(token, provider, (provider) => new ValueRecordFactory(provider));
    }
    provideFactory(token, provider) {
        return this.addProvider(token, provider, (provider) => new FactoryRecordFactory(provider));
    }
    provideCollection(token, provider) {
        return this.addCollectionProvider(token, provider, () => new ClassCollectionRecordFactory());
    }
    provideFactoryCollection(token, provider) {
        return this.addCollectionProvider(token, provider, () => new FactoryCollectionRecordFactory());
    }
    provideValueCollection(token, provider) {
        return this.addCollectionProvider(token, provider, () => new ValueCollectionRecordFactory());
    }
    clear() {
        this.providerManager.clear();
        this.collectionProviders.clear();
    }
    getRecordFactory(key) {
        return this.providerManager.get(key);
    }
    getCollectionRecordFactory(key) {
        return this.collectionProviders.get(key);
    }
    addProvider(token, provider, provideMethod) {
        const key = this.keyRegister.getKeyAndTryRegister(token, provider);
        this.providerManager.set(key, provideMethod(provider));
    }
    addCollectionProvider(token, provider, createFactory) {
        const key = this.keyRegister.getKeyAndTryRegister(token, provider);
        if (this.collectionProviders.has(key)) {
            const multiFactory = this.collectionProviders.get(key);
            if (multiFactory) {
                multiFactory.addProvider(provider);
            }
        }
        else {
            const multiFactory = createFactory();
            multiFactory.addProvider(provider);
            this.collectionProviders.set(key, multiFactory);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL2d1aS1oZXJtZXMvc3JjL2NvbW1vbi9kaS9saWIvY29udGFpbmVyL2NvbnRhaW5lci1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDMUcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFNdEcsTUFBTSxPQUFPLGlCQUFpQjtJQU03QixZQUNrQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUx6QixvQkFBZSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7UUFFeEMsd0JBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQXFDLENBQUM7SUFLcEYsQ0FBQztJQUlELE9BQU8sQ0FBSSxLQUFlLEVBQUUsUUFBeUM7UUFFcEUsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQzNCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNOLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDMUM7SUFDRixDQUFDO0lBRUQsWUFBWSxDQUFJLEtBQWUsRUFBRSxRQUF1QjtRQUV2RCxP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QVksQ0FBQyxDQUFDO1NBQ2hEO0lBQ0YsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0b3IsIFRva2VuIH0gZnJvbSAnLi4vdG9rZW4nO1xuaW1wb3J0IHsgQ2xhc3NQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVyL2NsYXNzL2NsYXNzLXByb3ZpZGVyJztcbmltcG9ydCB7IFByb3ZpZGVyTWFuYWdlciB9IGZyb20gJy4uL3Byb3ZpZGVyL3Byb3ZpZGVyLm1hbmFnZXInO1xuaW1wb3J0IHsgVmFsdWVQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVyL3ZhbHVlL3ZhbHVlLXByb3ZpZGVyJztcbmltcG9ydCB7IENsYXNzUmVjb3JkRmFjdG9yeSB9IGZyb20gJy4uL3Byb3ZpZGVyL2NsYXNzL2NsYXNzLXJlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IFZhbHVlUmVjb3JkRmFjdG9yeSB9IGZyb20gJy4uL3Byb3ZpZGVyL3ZhbHVlL3ZhbHVlLXJlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IEZhY3RvcnlQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVyL2ZhY3RvcnkvZmFjdG9yeS1wcm92aWRlcic7XG5pbXBvcnQgeyBGYWN0b3J5UmVjb3JkRmFjdG9yeSB9IGZyb20gJy4uL3Byb3ZpZGVyL2ZhY3RvcnkvZmFjdG9yeS1yZWNvcmQuZmFjdG9yeSc7XG5pbXBvcnQgeyBDbGFzc0NvbGxlY3Rpb25SZWNvcmRGYWN0b3J5IH0gZnJvbSAnLi4vcHJvdmlkZXIvY29sbGVjdGlvbi9jbGFzcy1jb2xsZWN0aW9uLXJlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IEZhY3RvcnlDb2xsZWN0aW9uUmVjb3JkRmFjdG9yeSB9IGZyb20gJy4uL3Byb3ZpZGVyL2NvbGxlY3Rpb24vZmFjdG9yeS1jb2xsZWN0aW9uLXJlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IFZhbHVlQ29sbGVjdGlvblJlY29yZEZhY3RvcnkgfSBmcm9tICcuLi9wcm92aWRlci9jb2xsZWN0aW9uL3ZhbHVlLWNvbGxlY3Rpb24tcmVjb3JkLmZhY3RvcnknO1xuaW1wb3J0IHsgUmVjb3JkRmFjdG9yeSB9IGZyb20gJy4uL3Byb3ZpZGVyL3JlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IENvbGxlY3Rpb25SZWNvcmRGYWN0b3J5IH0gZnJvbSAnLi4vcHJvdmlkZXIvY29sbGVjdGlvbi9jb2xsZWN0aW9uLXJlY29yZC5mYWN0b3J5JztcbmltcG9ydCB7IEtleVJlZ2lzdGVyIH0gZnJvbSAnLi4va2V5L2tleS5yZWdpc3Rlcic7XG5pbXBvcnQgeyBLZXkgfSBmcm9tICcuLi9rZXkva2V5JztcblxuZXhwb3J0IGNsYXNzIENvbnRhaW5lclByb3ZpZGVyIHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IHByb3ZpZGVyTWFuYWdlciA9IG5ldyBQcm92aWRlck1hbmFnZXIoKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGNvbGxlY3Rpb25Qcm92aWRlcnMgPSBuZXcgTWFwPEtleTxhbnk+LCBDb2xsZWN0aW9uUmVjb3JkRmFjdG9yeT4oKTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IGtleVJlZ2lzdGVyOiBLZXlSZWdpc3RlclxuXHQpIHtcblx0fVxuXG5cdHByb3ZpZGU8VD4oY2xheno6IENvbnN0cnVjdG9yPFQ+KTogdm9pZDtcblx0cHJvdmlkZTxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKTogdm9pZDtcblx0cHJvdmlkZTxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyPzogQ29uc3RydWN0b3I8VD4gfCBDbGFzc1Byb3ZpZGVyKTogdm9pZCB7XG5cblx0XHRpZiAocHJvdmlkZXIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJvdmlkZSh0b2tlbiwgdG9rZW4pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm92aWRlQ2xhc3ModG9rZW4sIHByb3ZpZGVyKTtcblx0XHR9XG5cdH1cblxuXHRwcm92aWRlQ2xhc3M8VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogQ2xhc3NQcm92aWRlcik6IHZvaWQge1xuXG5cdFx0cmV0dXJuIHRoaXMuYWRkUHJvdmlkZXIoXG5cdFx0XHR0b2tlbixcblx0XHRcdHByb3ZpZGVyLFxuXHRcdFx0KHByb3ZpZGVyOiBWYWx1ZVByb3ZpZGVyKSA9PiBuZXcgQ2xhc3NSZWNvcmRGYWN0b3J5KHByb3ZpZGVyKVxuXHRcdCk7XG5cdH1cblxuXHRwcm92aWRlVmFsdWU8VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogVmFsdWVQcm92aWRlcik6IHZvaWQge1xuXG5cdFx0cmV0dXJuIHRoaXMuYWRkUHJvdmlkZXIoXG5cdFx0XHR0b2tlbixcblx0XHRcdHByb3ZpZGVyLFxuXHRcdFx0KHByb3ZpZGVyOiBWYWx1ZVByb3ZpZGVyKSA9PiBuZXcgVmFsdWVSZWNvcmRGYWN0b3J5KHByb3ZpZGVyKVxuXHRcdCk7XG5cdH1cblxuXHRwcm92aWRlRmFjdG9yeTxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBGYWN0b3J5UHJvdmlkZXIpOiB2b2lkIHtcblxuXHRcdHJldHVybiB0aGlzLmFkZFByb3ZpZGVyKFxuXHRcdFx0dG9rZW4sXG5cdFx0XHRwcm92aWRlcixcblx0XHRcdChwcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKSA9PiBuZXcgRmFjdG9yeVJlY29yZEZhY3RvcnkocHJvdmlkZXIgYXMgRmFjdG9yeVByb3ZpZGVyKVxuXHRcdCk7XG5cdH1cblxuXHRwcm92aWRlQ29sbGVjdGlvbjxUPih0b2tlbjogVG9rZW48VD4sIHByb3ZpZGVyOiBDbGFzc1Byb3ZpZGVyKTogdm9pZCB7XG5cblx0XHRyZXR1cm4gdGhpcy5hZGRDb2xsZWN0aW9uUHJvdmlkZXIoXG5cdFx0XHR0b2tlbixcblx0XHRcdHByb3ZpZGVyLFxuXHRcdFx0KCkgPT4gbmV3IENsYXNzQ29sbGVjdGlvblJlY29yZEZhY3RvcnkoKVxuXHRcdCk7XG5cdH1cblxuXHRwcm92aWRlRmFjdG9yeUNvbGxlY3Rpb248VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogRmFjdG9yeVByb3ZpZGVyKTogdm9pZCB7XG5cblx0XHRyZXR1cm4gdGhpcy5hZGRDb2xsZWN0aW9uUHJvdmlkZXIoXG5cdFx0XHR0b2tlbixcblx0XHRcdHByb3ZpZGVyLFxuXHRcdFx0KCkgPT4gbmV3IEZhY3RvcnlDb2xsZWN0aW9uUmVjb3JkRmFjdG9yeSgpXG5cdFx0KTtcblx0fVxuXG5cdHByb3ZpZGVWYWx1ZUNvbGxlY3Rpb248VD4odG9rZW46IFRva2VuPFQ+LCBwcm92aWRlcjogVmFsdWVQcm92aWRlcik6IHZvaWQge1xuXG5cdFx0cmV0dXJuIHRoaXMuYWRkQ29sbGVjdGlvblByb3ZpZGVyKFxuXHRcdFx0dG9rZW4sXG5cdFx0XHRwcm92aWRlcixcblx0XHRcdCgpID0+IG5ldyBWYWx1ZUNvbGxlY3Rpb25SZWNvcmRGYWN0b3J5KClcblx0XHQpO1xuXHR9XG5cblx0Y2xlYXIoKTogdm9pZCB7XG5cdFx0dGhpcy5wcm92aWRlck1hbmFnZXIuY2xlYXIoKTtcblx0XHR0aGlzLmNvbGxlY3Rpb25Qcm92aWRlcnMuY2xlYXIoKTtcblx0fVxuXG5cdGdldFJlY29yZEZhY3Rvcnk8VD4oa2V5OiBLZXk8VD4pOiBSZWNvcmRGYWN0b3J5IHtcblx0XHRyZXR1cm4gdGhpcy5wcm92aWRlck1hbmFnZXIuZ2V0KGtleSk7XG5cdH1cblxuXHRnZXRDb2xsZWN0aW9uUmVjb3JkRmFjdG9yeTxUPihrZXk6IEtleTxUPik6IENvbGxlY3Rpb25SZWNvcmRGYWN0b3J5IHtcblx0XHRyZXR1cm4gdGhpcy5jb2xsZWN0aW9uUHJvdmlkZXJzLmdldChrZXkpITtcblx0fVxuXG5cdHByaXZhdGUgYWRkUHJvdmlkZXI8VD4oXG5cdFx0dG9rZW46IFRva2VuPFQ+LFxuXHRcdHByb3ZpZGVyOiBhbnksXG5cdFx0cHJvdmlkZU1ldGhvZDogKHByb3ZpZGVyOiBhbnkpID0+IFJlY29yZEZhY3Rvcnlcblx0KTogdm9pZCB7XG5cblx0XHRjb25zdCBrZXkgPSB0aGlzLmtleVJlZ2lzdGVyLmdldEtleUFuZFRyeVJlZ2lzdGVyKHRva2VuLCBwcm92aWRlcik7XG5cblx0XHR0aGlzLnByb3ZpZGVyTWFuYWdlci5zZXQoa2V5LCBwcm92aWRlTWV0aG9kKHByb3ZpZGVyKSk7XG5cdH1cblxuXHRwcml2YXRlIGFkZENvbGxlY3Rpb25Qcm92aWRlcjxUPihcblx0XHR0b2tlbjogVG9rZW48VD4sXG5cdFx0cHJvdmlkZXI6IENsYXNzUHJvdmlkZXIsXG5cdFx0Y3JlYXRlRmFjdG9yeTogKCkgPT4gQ29sbGVjdGlvblJlY29yZEZhY3Rvcnlcblx0KTogdm9pZCB7XG5cblx0XHRjb25zdCBrZXkgPSB0aGlzLmtleVJlZ2lzdGVyLmdldEtleUFuZFRyeVJlZ2lzdGVyKHRva2VuLCBwcm92aWRlcik7XG5cblx0XHRpZiAodGhpcy5jb2xsZWN0aW9uUHJvdmlkZXJzLmhhcyhrZXkpKSB7XG5cblx0XHRcdGNvbnN0IG11bHRpRmFjdG9yeSA9IHRoaXMuY29sbGVjdGlvblByb3ZpZGVycy5nZXQoa2V5KTtcblxuXHRcdFx0aWYgKG11bHRpRmFjdG9yeSkge1xuXHRcdFx0XHRtdWx0aUZhY3RvcnkuYWRkUHJvdmlkZXIocHJvdmlkZXIpO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgbXVsdGlGYWN0b3J5ID0gY3JlYXRlRmFjdG9yeSgpO1xuXG5cdFx0XHRtdWx0aUZhY3RvcnkuYWRkUHJvdmlkZXIocHJvdmlkZXIpO1xuXG5cdFx0XHR0aGlzLmNvbGxlY3Rpb25Qcm92aWRlcnMuc2V0KGtleSwgbXVsdGlGYWN0b3J5KTtcblx0XHR9XG5cdH1cblxufVxuIl19