import { ReactiveService } from '../reactive/reactive.service';
import { KeyMap } from '../collection/key-map';
import { Optional } from '../optional';
import { hermesFilter } from '../stream/core/operator/hermes.filter';
import { hermesMap } from '../stream/core/operator/hermes.map';
import { hermesDistinctUntilChanged } from '../stream/core/operator/hermes.distinct-until-changed';
import { HermesArchiveSubject } from '../stream/core/observable/hermes.archive-subject';
import { singleFromObservable } from '../stream/core/observable/single/hermes.single-from-observable';
export class KeyArchive extends ReactiveService {
    constructor(defaultValue) {
        super();
        this.archive = new KeyMap();
        this.defaultValue = Optional.empty();
        this.archive$ = HermesArchiveSubject.of();
        if (defaultValue !== undefined && defaultValue !== null) {
            this.defaultValue = Optional.of(defaultValue);
        }
    }
    on(key) {
        this.tryToInitDefault(key);
        return this.archive$
            .toObservable()
            .pipe(hermesFilter(() => this.isNotStopped()), hermesMap((map) => {
            return map.find(key);
        }), hermesFilter((value) => value.isPresent()), hermesMap((value) => value.getValueOrNullOrThrowError()), hermesDistinctUntilChanged(this.equals), this.hermesTakeUntil());
    }
    once(key) {
        return singleFromObservable(this.on(key));
    }
    find(key) {
        this.tryToInitDefault(key);
        return this.archive.find(key);
    }
    next(key, value) {
        this.archive.set(key, value);
        this.archive$.next(this.archive);
    }
    equals(a, b) {
        return a === b;
    }
    createDefaultValue(defaultValue) {
        return defaultValue;
    }
    tryToInitDefault(key) {
        this.defaultValue
            .ifPresent((value) => {
            if (!this.archive.has(key)) {
                this.next(key, value);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LmFyY2hpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29tbW9uL2FyY2hpdmUva2V5LmFyY2hpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDbkcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFJeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFHdEcsTUFBTSxPQUFnQixVQUE2QixTQUFRLGVBQWU7SUFRekUsWUFBc0IsWUFBZ0I7UUFDckMsS0FBSyxFQUFFLENBQUM7UUFQUSxZQUFPLEdBQUcsSUFBSSxNQUFNLEVBQVEsQ0FBQztRQUl0QyxpQkFBWSxHQUFnQixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFLcEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUUxQyxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtZQUN4RCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDOUM7SUFDRixDQUFDO0lBRUQsRUFBRSxDQUFDLEdBQU07UUFFUixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFM0IsT0FBTyxJQUFJLENBQUMsUUFBUTthQUNkLFlBQVksRUFBRTthQUNkLElBQUksQ0FDSixZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQ3ZDLFNBQVMsQ0FBQyxDQUFDLEdBQWlCLEVBQUUsRUFBRTtZQUMvQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLEVBQ0YsWUFBWSxDQUFDLENBQUMsS0FBa0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQ3ZELFNBQVMsQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxDQUFDLEVBQ3JFLDBCQUEwQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDdkMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUN0QixDQUFDO0lBQ1IsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFNO1FBQ1YsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFNO1FBRVYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksQ0FBQyxHQUFNLEVBQUUsS0FBUTtRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFUyxNQUFNLENBQUMsQ0FBSSxFQUFFLENBQUk7UUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxZQUFlO1FBQzNDLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxHQUFNO1FBQzlCLElBQUksQ0FBQyxZQUFZO2FBQ2YsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFFcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN0QjtRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RpdmVTZXJ2aWNlIH0gZnJvbSAnLi4vcmVhY3RpdmUvcmVhY3RpdmUuc2VydmljZSc7XG5pbXBvcnQgeyBLZXlNYXAgfSBmcm9tICcuLi9jb2xsZWN0aW9uL2tleS1tYXAnO1xuaW1wb3J0IHsgT3B0aW9uYWwgfSBmcm9tICcuLi9vcHRpb25hbCc7XG5pbXBvcnQgeyBoZXJtZXNGaWx0ZXIgfSBmcm9tICcuLi9zdHJlYW0vY29yZS9vcGVyYXRvci9oZXJtZXMuZmlsdGVyJztcbmltcG9ydCB7IGhlcm1lc01hcCB9IGZyb20gJy4uL3N0cmVhbS9jb3JlL29wZXJhdG9yL2hlcm1lcy5tYXAnO1xuaW1wb3J0IHsgaGVybWVzRGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICcuLi9zdHJlYW0vY29yZS9vcGVyYXRvci9oZXJtZXMuZGlzdGluY3QtdW50aWwtY2hhbmdlZCc7XG5pbXBvcnQgeyBIZXJtZXNBcmNoaXZlU3ViamVjdCB9IGZyb20gJy4uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvaGVybWVzLmFyY2hpdmUtc3ViamVjdCc7XG5pbXBvcnQgeyBIZXJtZXNPYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3RyZWFtL2NvcmUvb2JzZXJ2YWJsZS9oZXJtZXMub2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBLZXkgfSBmcm9tICcuLi9jb2xsZWN0aW9uL2tleSc7XG5pbXBvcnQgeyBIZXJtZXNTaW5nbGUgfSBmcm9tICcuLi9zdHJlYW0vY29yZS9vYnNlcnZhYmxlL3NpbmdsZS9oZXJtZXMuc2luZ2xlJztcbmltcG9ydCB7IHNpbmdsZUZyb21PYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3RyZWFtL2NvcmUvb2JzZXJ2YWJsZS9zaW5nbGUvaGVybWVzLnNpbmdsZS1mcm9tLW9ic2VydmFibGUnO1xuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBLZXlBcmNoaXZlPEsgZXh0ZW5kcyBLZXksIFQ+IGV4dGVuZHMgUmVhY3RpdmVTZXJ2aWNlIHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGFyY2hpdmUgPSBuZXcgS2V5TWFwPEssIFQ+KCk7XG5cblx0cHJpdmF0ZSByZWFkb25seSBhcmNoaXZlJDogSGVybWVzQXJjaGl2ZVN1YmplY3Q8S2V5TWFwPEssIFQ+PjtcblxuXHRwcml2YXRlIGRlZmF1bHRWYWx1ZTogT3B0aW9uYWw8VD4gPSBPcHRpb25hbC5lbXB0eSgpO1xuXG5cdHByb3RlY3RlZCBjb25zdHJ1Y3RvcihkZWZhdWx0VmFsdWU/OiBUKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuYXJjaGl2ZSQgPSBIZXJtZXNBcmNoaXZlU3ViamVjdC5vZigpO1xuXG5cdFx0aWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5kZWZhdWx0VmFsdWUgPSBPcHRpb25hbC5vZihkZWZhdWx0VmFsdWUpO1xuXHRcdH1cblx0fVxuXG5cdG9uKGtleTogSyk6IEhlcm1lc09ic2VydmFibGU8VD4ge1xuXG5cdFx0dGhpcy50cnlUb0luaXREZWZhdWx0KGtleSk7XG5cblx0XHRyZXR1cm4gdGhpcy5hcmNoaXZlJFxuXHRcdFx0XHQgICAudG9PYnNlcnZhYmxlKClcblx0XHRcdFx0ICAgLnBpcGUoXG5cdFx0XHRcdFx0ICAgaGVybWVzRmlsdGVyKCgpID0+IHRoaXMuaXNOb3RTdG9wcGVkKCkpLFxuXHRcdFx0XHRcdCAgIGhlcm1lc01hcCgobWFwOiBLZXlNYXA8SywgVD4pID0+IHtcblx0XHRcdFx0XHRcdCAgIHJldHVybiBtYXAuZmluZChrZXkpO1xuXHRcdFx0XHRcdCAgIH0pLFxuXHRcdFx0XHRcdCAgIGhlcm1lc0ZpbHRlcigodmFsdWU6IE9wdGlvbmFsPFQ+KSA9PiB2YWx1ZS5pc1ByZXNlbnQoKSksXG5cdFx0XHRcdFx0ICAgaGVybWVzTWFwKCh2YWx1ZTogT3B0aW9uYWw8VD4pID0+IHZhbHVlLmdldFZhbHVlT3JOdWxsT3JUaHJvd0Vycm9yKCkpLFxuXHRcdFx0XHRcdCAgIGhlcm1lc0Rpc3RpbmN0VW50aWxDaGFuZ2VkKHRoaXMuZXF1YWxzKSxcblx0XHRcdFx0XHQgICB0aGlzLmhlcm1lc1Rha2VVbnRpbCgpXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRvbmNlKGtleTogSyk6IEhlcm1lc1NpbmdsZTxUPiB7XG5cdFx0cmV0dXJuIHNpbmdsZUZyb21PYnNlcnZhYmxlKHRoaXMub24oa2V5KSk7XG5cdH1cblxuXHRmaW5kKGtleTogSyk6IE9wdGlvbmFsPFQ+IHtcblxuXHRcdHRoaXMudHJ5VG9Jbml0RGVmYXVsdChrZXkpO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJjaGl2ZS5maW5kKGtleSk7XG5cdH1cblxuXHRuZXh0KGtleTogSywgdmFsdWU6IFQpOiB2b2lkIHtcblx0XHR0aGlzLmFyY2hpdmUuc2V0KGtleSwgdmFsdWUpO1xuXHRcdHRoaXMuYXJjaGl2ZSQubmV4dCh0aGlzLmFyY2hpdmUpO1xuXHR9XG5cblx0cHJvdGVjdGVkIGVxdWFscyhhOiBULCBiOiBUKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGEgPT09IGI7XG5cdH1cblxuXHRwcm90ZWN0ZWQgY3JlYXRlRGVmYXVsdFZhbHVlKGRlZmF1bHRWYWx1ZTogVCk6IFQge1xuXHRcdHJldHVybiBkZWZhdWx0VmFsdWU7XG5cdH1cblxuXHRwcml2YXRlIHRyeVRvSW5pdERlZmF1bHQoa2V5OiBLKTogdm9pZCB7XG5cdFx0dGhpcy5kZWZhdWx0VmFsdWVcblx0XHRcdC5pZlByZXNlbnQoKHZhbHVlKSA9PiB7XG5cblx0XHRcdFx0aWYgKCF0aGlzLmFyY2hpdmUuaGFzKGtleSkpIHtcblx0XHRcdFx0XHR0aGlzLm5leHQoa2V5LCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG5cbn1cbiJdfQ==