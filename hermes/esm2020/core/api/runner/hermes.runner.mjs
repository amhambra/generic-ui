import { AggregateDefinitionInitializer } from '../../domain/command/config/aggregate-definition.initializer';
import { CommandHandlerInitializer } from '../../domain/command/init/command-handler.initializer';
import { DomainEventHandlerInitializer } from '../../domain/event/init/domain-event-handler.initializer';
import { CommandBus } from '../../domain/command/command.bus';
import { aggregateDefinitionToken } from '../../domain/command/config/aggregate-definition.token';
import { DOMAIN_EVENT_HANDLERS } from '../event/domain-event-handlers';
import { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../../domain/command/create-aggregate/create-aggregate.command-handlers-token';
import { COMMAND_HANDLERS } from '../../domain/command/handler/command-handlers';
import { Reactive } from '../../../common/reactive/reactive';
export class HermesRunner extends Reactive {
    constructor(aggregateDefinitionInitializer, commandHandlerInitializer, domainEventHandlerInitializer, commandBus, definedAggregate, eventHandlers, aggregateCommandHandlers, commandHandlers) {
        super();
        this.aggregateDefinitionInitializer = aggregateDefinitionInitializer;
        this.commandHandlerInitializer = commandHandlerInitializer;
        this.domainEventHandlerInitializer = domainEventHandlerInitializer;
        this.commandBus = commandBus;
        this.definedAggregate = definedAggregate;
        this.eventHandlers = eventHandlers;
        this.aggregateCommandHandlers = aggregateCommandHandlers;
        this.commandHandlers = commandHandlers;
        this.started = false;
        if (this.eventHandlers === null) {
            this.eventHandlers = [];
        }
        if (this.aggregateCommandHandlers === null) {
            this.aggregateCommandHandlers = [];
        }
        if (this.commandHandlers === null) {
            this.commandHandlers = [];
        }
    }
    run() {
        if (this.started) {
            return;
        }
        this.checkNullCommand(this.commandHandlers, this.aggregateCommandHandlers);
        this.checkCommandHandlerIsCollection(this.commandHandlers);
        this.checkDomainEventHandlerIsCollection(this.eventHandlers);
        this.aggregateDefinitionInitializer.register(this.definedAggregate);
        this.commandHandlerInitializer.register(this.commandHandlers);
        this.commandHandlerInitializer.registerAggregateCommandHandlers(this.aggregateCommandHandlers);
        this.domainEventHandlerInitializer.init(this.eventHandlers);
        this.started = true;
    }
    destroy() {
        this.commandHandlerInitializer.ngOnDestroy();
        this.domainEventHandlerInitializer.ngOnDestroy();
    }
    checkNullCommand(commandHandlers, aggregateCommandHandlers) {
        this.commandBus
            .ofNullHandler(commandHandlers, aggregateCommandHandlers)
            .pipe(this.hermesTakeUntil())
            .subscribe((command) => {
            // eslint-disable-next-line no-console
            console.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);
        });
    }
    checkCommandHandlerIsCollection(commandHandlers) {
        if (commandHandlers && !Array.isArray(commandHandlers)) {
            // eslint-disable-next-line no-console
            console.warn('You might provided commandHandler without specifying "multi: true".');
        }
    }
    checkDomainEventHandlerIsCollection(eventHandlers) {
        if (eventHandlers && !Array.isArray(eventHandlers)) {
            // eslint-disable-next-line no-console
            console.warn('You might provided eventHandler without specifying "multi: true".');
        }
    }
}
HermesRunner.services = [
    AggregateDefinitionInitializer,
    CommandHandlerInitializer,
    DomainEventHandlerInitializer,
    CommandBus,
    { inject: aggregateDefinitionToken, collection: true },
    { inject: DOMAIN_EVENT_HANDLERS, collection: true, optional: true },
    { inject: CREATE_AGGREGATE_COMMAND_HANDLERS, collection: true, optional: true },
    { inject: COMMAND_HANDLERS, collection: true, optional: true }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLnJ1bm5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2FwaS9ydW5uZXIvaGVybWVzLnJ1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUM5RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNsRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFFbEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdkUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sK0VBQStFLENBQUM7QUFFbEksT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFNakYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRTdELE1BQU0sT0FBTyxZQUNaLFNBQVEsUUFBUTtJQUloQixZQUNrQiw4QkFBb0UsRUFDcEUseUJBQTZELEVBQzdELDZCQUFrRSxFQUNsRSxVQUFzQixFQUN0QixnQkFBa0QsRUFDbEQsYUFBa0QsRUFDbEQsd0JBQTJFLEVBQzNFLGVBQW1EO1FBRXBFLEtBQUssRUFBRSxDQUFDO1FBVFMsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFzQztRQUNwRSw4QkFBeUIsR0FBekIseUJBQXlCLENBQW9DO1FBQzdELGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBcUM7UUFDbEUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ2xELGtCQUFhLEdB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bkUsRUFBRSxNQUFNLEVBQUUsaUNBQWlDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQy9FLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtDQUNyRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlRGVmaW5pdGlvbkluaXRpYWxpemVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvY29uZmlnL2FnZ3JlZ2F0ZS1kZWZpbml0aW9uLmluaXRpYWxpemVyJztcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVySW5pdGlhbGl6ZXIgfSBmcm9tICcuLi8uLi9kb21haW4vY29tbWFuZC9pbml0L2NvbW1hbmQtaGFuZGxlci5pbml0aWFsaXplcic7XG5pbXBvcnQgeyBEb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplciB9IGZyb20gJy4uLy4uL2RvbWFpbi9ldmVudC9pbml0L2RvbWFpbi1ldmVudC1oYW5kbGVyLmluaXRpYWxpemVyJztcbmltcG9ydCB7IENvbW1hbmRCdXMgfSBmcm9tICcuLi8uLi9kb21haW4vY29tbWFuZC9jb21tYW5kLmJ1cyc7XG5pbXBvcnQgeyBhZ2dyZWdhdGVEZWZpbml0aW9uVG9rZW4gfSBmcm9tICcuLi8uLi9kb21haW4vY29tbWFuZC9jb25maWcvYWdncmVnYXRlLWRlZmluaXRpb24udG9rZW4nO1xuaW1wb3J0IHsgQWdncmVnYXRlRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb21tYW5kL2NvbmZpZy9hZ2dyZWdhdGUtZGVmaW5pdGlvbic7XG5pbXBvcnQgeyBET01BSU5fRVZFTlRfSEFORExFUlMgfSBmcm9tICcuLi9ldmVudC9kb21haW4tZXZlbnQtaGFuZGxlcnMnO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRIYW5kbGVySW1wbCB9IGZyb20gJy4uLy4uL2RvbWFpbi9ldmVudC9oYW5kbGVyL2RvbWFpbi1ldmVudC1oYW5kbGVyLWltcGwnO1xuaW1wb3J0IHsgQ1JFQVRFX0FHR1JFR0FURV9DT01NQU5EX0hBTkRMRVJTIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvY3JlYXRlLWFnZ3JlZ2F0ZS9jcmVhdGUtYWdncmVnYXRlLmNvbW1hbmQtaGFuZGxlcnMtdG9rZW4nO1xuaW1wb3J0IHsgQ3JlYXRlQWdncmVnYXRlQ29tbWFuZEhhbmRsZXJJbXBsIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvY3JlYXRlLWFnZ3JlZ2F0ZS9jcmVhdGUtYWdncmVnYXRlLmNvbW1hbmQtaGFuZGxlci1pbXBsJztcbmltcG9ydCB7IENPTU1BTkRfSEFORExFUlMgfSBmcm9tICcuLi8uLi9kb21haW4vY29tbWFuZC9oYW5kbGVyL2NvbW1hbmQtaGFuZGxlcnMnO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJJbXBsIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvaGFuZGxlci9jb21tYW5kLWhhbmRsZXItaW1wbCc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVJZCB9IGZyb20gJy4uL3RhY3RpY2FsL2FnZ3JlZ2F0ZS9hZ2dyZWdhdGUtaWQnO1xuaW1wb3J0IHsgQWdncmVnYXRlUm9vdCB9IGZyb20gJy4uL3RhY3RpY2FsL2FnZ3JlZ2F0ZS9hZ2dyZWdhdGUtcm9vdCc7XG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi4vY29tbWFuZC9jb21tYW5kJztcbmltcG9ydCB7IERvbWFpbkV2ZW50IH0gZnJvbSAnLi4vZXZlbnQvZG9tYWluLWV2ZW50JztcbmltcG9ydCB7IFJlYWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3JlYWN0aXZlL3JlYWN0aXZlJztcblxuZXhwb3J0IGNsYXNzIEhlcm1lc1J1bm5lcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEEgZXh0ZW5kcyBBZ2dyZWdhdGVSb290PEk+LCBDIGV4dGVuZHMgQ29tbWFuZDxJPiwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+PlxuXHRleHRlbmRzIFJlYWN0aXZlIHtcblxuXHRwcml2YXRlIHN0YXJ0ZWQgPSBmYWxzZTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IGFnZ3JlZ2F0ZURlZmluaXRpb25Jbml0aWFsaXplcjogQWdncmVnYXRlRGVmaW5pdGlvbkluaXRpYWxpemVyPEksIEE+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgY29tbWFuZEhhbmRsZXJJbml0aWFsaXplcjogQ29tbWFuZEhhbmRsZXJJbml0aWFsaXplcjxJLCBBLCBDPixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGRvbWFpbkV2ZW50SGFuZGxlckluaXRpYWxpemVyOiBEb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplcjxJLCBFPixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGNvbW1hbmRCdXM6IENvbW1hbmRCdXMsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBkZWZpbmVkQWdncmVnYXRlOiBBcnJheTxBZ2dyZWdhdGVEZWZpbml0aW9uPEksIEE+Pixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGV2ZW50SGFuZGxlcnM6IEFycmF5PERvbWFpbkV2ZW50SGFuZGxlckltcGw8SSwgRT4+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzOiBBcnJheTxDcmVhdGVBZ2dyZWdhdGVDb21tYW5kSGFuZGxlckltcGw8SSwgQSwgQz4+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgY29tbWFuZEhhbmRsZXJzOiBBcnJheTxDb21tYW5kSGFuZGxlckltcGw8SSwgQSwgQz4+XG5cdCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHRpZiAodGhpcy5ldmVudEhhbmRsZXJzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmV2ZW50SGFuZGxlcnMgPSBbXTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5hZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnMgPT09IG51bGwpIHtcblx0XHRcdHRoaXMuYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY29tbWFuZEhhbmRsZXJzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRIYW5kbGVycyA9IFtdO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyByZWFkb25seSBzZXJ2aWNlcyA9IFtcblx0XHRBZ2dyZWdhdGVEZWZpbml0aW9uSW5pdGlhbGl6ZXIsXG5cdFx0Q29tbWFuZEhhbmRsZXJJbml0aWFsaXplcixcblx0XHREb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplcixcblx0XHRDb21tYW5kQnVzLFxuXHRcdHsgaW5qZWN0OiBhZ2dyZWdhdGVEZWZpbml0aW9uVG9rZW4sIGNvbGxlY3Rpb246IHRydWUgfSxcblx0XHR7IGluamVjdDogRE9NQUlOX0VWRU5UX0hBTkRMRVJTLCBjb2xsZWN0aW9uOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9LFxuXHRcdHsgaW5qZWN0OiBDUkVBVEVfQUdHUkVHQVRFX0NPTU1BTkRfSEFORExFUlMsIGNvbGxlY3Rpb246IHRydWUsIG9wdGlvbmFsOiB0cnVlIH0sXG5cdFx0eyBpbmplY3Q6IENPTU1BTkRfSEFORExFUlMsIGNvbGxlY3Rpb246IHRydWUsIG9wdGlvbmFsOiB0cnVlIH1cblx0XSBhcyBjb25zdDtcblxuXHRydW4oKTogdm9pZCB7XG5cblx0XHRpZih0aGlzLnN0YXJ0ZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmNoZWNrTnVsbENvbW1hbmQodGhpcy5jb21tYW5kSGFuZGxlcnMsIHRoaXMuYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKTtcblx0XHR0aGlzLmNoZWNrQ29tbWFuZEhhbmRsZXJJc0NvbGxlY3Rpb24odGhpcy5jb21tYW5kSGFuZGxlcnMpO1xuXHRcdHRoaXMuY2hlY2tEb21haW5FdmVudEhhbmRsZXJJc0NvbGxlY3Rpb24odGhpcy5ldmVudEhhbmRsZXJzKTtcblxuXHRcdHRoaXMuYWdncmVnYXRlRGVmaW5pdGlvbkluaXRpYWxpemVyLnJlZ2lzdGVyKHRoaXMuZGVmaW5lZEFnZ3JlZ2F0ZSk7XG5cdFx0dGhpcy5jb21tYW5kSGFuZGxlckluaXRpYWxpemVyLnJlZ2lzdGVyKHRoaXMuY29tbWFuZEhhbmRsZXJzKTtcblx0XHR0aGlzLmNvbW1hbmRIYW5kbGVySW5pdGlhbGl6ZXIucmVnaXN0ZXJBZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnModGhpcy5hZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnMpO1xuXHRcdHRoaXMuZG9tYWluRXZlbnRIYW5kbGVySW5pdGlhbGl6ZXIuaW5pdCh0aGlzLmV2ZW50SGFuZGxlcnMpO1xuXG5cdFx0dGhpcy5zdGFydGVkID0gdHJ1ZTtcblx0fVxuXG5cdGRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5jb21tYW5kSGFuZGxlckluaXRpYWxpemVyLm5nT25EZXN0cm95KCk7XG5cdFx0dGhpcy5kb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplci5uZ09uRGVzdHJveSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBjaGVja051bGxDb21tYW5kKFxuXHRcdGNvbW1hbmRIYW5kbGVyczogQXJyYXk8Q29tbWFuZEhhbmRsZXJJbXBsPEksIEEsIEM+Pixcblx0XHRhZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnM6IEFycmF5PENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbDxJLCBBLCBDPj5cblx0KTogdm9pZCB7XG5cblx0XHR0aGlzLmNvbW1hbmRCdXNcblx0XHRcdC5vZk51bGxIYW5kbGVyKGNvbW1hbmRIYW5kbGVycywgYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKVxuXHRcdFx0LnBpcGUodGhpcy5oZXJtZXNUYWtlVW50aWwoKSlcblx0XHRcdC5zdWJzY3JpYmUoKGNvbW1hbmQ6IEMpID0+IHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgQ29tbWFuZCAke2NvbW1hbmQudG9TdHJpbmcoKX0gd2FzIG5vdCBpbnRlcmNlcHRlZCBieSBhbnkgQ29tbWFuZEhhbmRsZXIuYCk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgY2hlY2tDb21tYW5kSGFuZGxlcklzQ29sbGVjdGlvbihjb21tYW5kSGFuZGxlcnM6IEFycmF5PENvbW1hbmRIYW5kbGVySW1wbDxJLCBBLCBDPj4pOiB2b2lkIHtcblx0XHRpZiAoY29tbWFuZEhhbmRsZXJzICYmICFBcnJheS5pc0FycmF5KGNvbW1hbmRIYW5kbGVycykpIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLndhcm4oJ1lvdSBtaWdodCBwcm92aWRlZCBjb21tYW5kSGFuZGxlciB3aXRob3V0IHNwZWNpZnlpbmcgXCJtdWx0aTogdHJ1ZVwiLicpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY2hlY2tEb21haW5FdmVudEhhbmRsZXJJc0NvbGxlY3Rpb24oZXZlbnRIYW5kbGVyczogQXJyYXk8RG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPj4pOiB2b2lkIHtcblx0XHRpZiAoZXZlbnRIYW5kbGVycyAmJiAhQXJyYXkuaXNBcnJheShldmVudEhhbmRsZXJzKSkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUud2FybignWW91IG1pZ2h0IHByb3ZpZGVkIGV2ZW50SGFuZGxlciB3aXRob3V0IHNwZWNpZnlpbmcgXCJtdWx0aTogdHJ1ZVwiLicpO1xuXHRcdH1cblx0fVxufVxuIl19