import { CoreContainer } from '../../index';
import { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';
import { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/create-aggregate/create-aggregate.command-handlers-token';
import { createAggregateCommandHandlerFactory } from '../domain/command/create-aggregate/create-aggregate.command-handler-impl';
import { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';
import { commandHandlerFactory } from '../domain/command/handler/command-handler-impl';
import { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';
import { domainEventHandlerFactory, multiDomainEventHandlerFactory } from '../domain/event/handler/domain-event-handler-impl';
export class DomainInitializer {
    constructor(api, domain) {
        this.api = api;
        this.domain = domain;
        this.container = CoreContainer;
        this.initialized = false;
    }
    init() {
        if (this.initialized) {
            return;
        }
        this.defineAggregate();
        this.registerApiProviders();
        this.registerDomainProviders();
        this.registerCommandHandlers();
        this.registerEventHandlers();
        this.registerMultiEventHandlers();
        this.initialized = true;
    }
    defineAggregate() {
        const definition = this.domain.defineAggregate();
        if (definition) {
            this.container.provide(definition.factory);
            this.container.provide(definition.repository);
            this.container.provideValue(definition.aggregateKey, definition.aggregateKey);
            this.container.provideValueCollection(aggregateDefinitionToken, {
                key: definition.aggregateKey,
                factory: definition.factory,
                repository: definition.repository
            });
            this.container.provide(definition.createCommandHandler);
            this.container.provideFactoryCollection(CREATE_AGGREGATE_COMMAND_HANDLERS, {
                create: createAggregateCommandHandlerFactory,
                deps: [
                    definition.createCommandHandler,
                    definition.aggregateKey
                ]
            });
        }
    }
    registerApiProviders() {
        this.api.registerProviders(this.container);
    }
    registerDomainProviders() {
        this.domain.registerProviders(this.container);
    }
    registerCommandHandlers() {
        this.domain
            .registerCommandHandlers()
            .forEach((ch) => {
            this.container.provide(ch);
            this.container.provideFactoryCollection(COMMAND_HANDLERS, {
                create: commandHandlerFactory,
                deps: [
                    ch,
                    this.domain.registerKey(this.container)
                ]
            });
        });
    }
    registerEventHandlers() {
        this.domain
            .registerDomainEventHandler()
            .forEach((eh) => {
            this.container.provide(eh);
            this.container.provideFactoryCollection(DOMAIN_EVENT_HANDLERS, {
                create: domainEventHandlerFactory,
                deps: [
                    eh
                ]
            });
        });
    }
    registerMultiEventHandlers() {
        this.domain
            .registerMultiDomainEventHandler()
            .forEach((eh) => {
            this.container.provide(eh);
            this.container.provideFactoryCollection(DOMAIN_EVENT_HANDLERS, {
                create: multiDomainEventHandlerFactory,
                deps: [
                    eh
                ]
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,