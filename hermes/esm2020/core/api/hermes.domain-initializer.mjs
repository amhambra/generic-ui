import { HermesModule } from './hermes.module';
import { CoreContainer } from '../../index';
export class DomainInitializer {
    constructor(api, domain) {
        this.api = api;
        this.domain = domain;
        this.container = CoreContainer;
        this.initialized = false;
    }
    init() {
        if (this.initialized) {
            return;
        }
        this.defineAggregate();
        this.registerApiProviders();
        this.registerDomainProviders();
        this.registerCommandHandlers();
        this.registerEventHandlers();
        this.registerMultiEventHandlers();
        this.initialized = true;
    }
    defineAggregate() {
        const definition = this.domain.defineAggregate();
        if (definition) {
            HermesModule.defineAggregate(definition.aggregateKey, definition.createCommandHandler, definition.factory, definition.repository);
        }
    }
    registerApiProviders() {
        this.api.registerProviders(this.container);
    }
    registerDomainProviders() {
        this.domain.registerProviders(this.container);
    }
    registerCommandHandlers() {
        this.domain
            .registerCommandHandlers()
            .forEach((ch) => {
            HermesModule.registerCommandHandler(ch, this.domain.registerKey(this.container));
        });
    }
    registerEventHandlers() {
        this.domain
            .registerDomainEventHandler()
            .forEach((dh) => {
            HermesModule.registerDomainEventHandler(dh);
        });
    }
    registerMultiEventHandlers() {
        this.domain
            .registerMultiDomainEventHandler()
            .forEach((dh) => {
            HermesModule.registerMultiDomainEventHandler(dh);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLmRvbWFpbi1pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2FwaS9oZXJtZXMuZG9tYWluLWluaXRpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBR04sYUFBYSxFQUtiLE1BQU0sYUFBYSxDQUFDO0FBb0NyQixNQUFNLE9BQU8saUJBQWlCO0lBTTdCLFlBQTZCLEdBQWlCLEVBQzFCLE1BQXVCO1FBRGQsUUFBRyxHQUFILEdBQUcsQ0FBYztRQUMxQixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUwxQixjQUFTLEdBQWMsYUFBYSxDQUFDO1FBRTlDLGdCQUFXLEdBQUcsS0FBSyxDQUFDO0lBSTVCLENBQUM7SUFFRCxJQUFJO1FBRUgsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUDtRQUdELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUUvQixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUVsQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRU8sZUFBZTtRQUN0QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpELElBQUksVUFBVSxFQUFFO1lBQ2YsWUFBWSxDQUFDLGVBQWUsQ0FDM0IsVUFBVSxDQUFDLFlBQVksRUFDdkIsVUFBVSxDQUFDLG9CQUFvQixFQUMvQixVQUFVLENBQUMsT0FBTyxFQUNsQixVQUFVLENBQUMsVUFBVSxDQUNyQixDQUFDO1NBQ0Y7SUFDRixDQUFDO0lBRU8sb0JBQW9CO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyx1QkFBdUI7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVPLHVCQUF1QjtRQUM5QixJQUFJLENBQUMsTUFBTTthQUNULHVCQUF1QixFQUFFO2FBQ3pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2YsWUFBWSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxxQkFBcUI7UUFDNUIsSUFBSSxDQUFDLE1BQU07YUFDVCwwQkFBMEIsRUFBRTthQUM1QixPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTywwQkFBMEI7UUFDakMsSUFBSSxDQUFDLE1BQU07YUFDVCwrQkFBK0IsRUFBRTthQUNqQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFnZ3JlZ2F0ZUlkIH0gZnJvbSAnLi90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZVJvb3QgfSBmcm9tICcuL3RhY3RpY2FsL2FnZ3JlZ2F0ZS9hZ2dyZWdhdGUtcm9vdCc7XG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kL2NvbW1hbmQnO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi9kb21haW4vY29tbWFuZC9oYW5kbGVyL2NvbW1hbmQuaGFuZGxlcic7XG5pbXBvcnQgeyBIZXJtZXNNb2R1bGUgfSBmcm9tICcuL2hlcm1lcy5tb2R1bGUnO1xuaW1wb3J0IHtcblx0QWdncmVnYXRlRmFjdG9yeSwgQWdncmVnYXRlUmVwb3NpdG9yeSxcblx0Q29udGFpbmVyLFxuXHRDb3JlQ29udGFpbmVyLFxuXHRDcmVhdGVBZ2dyZWdhdGVDb21tYW5kSGFuZGxlcixcblx0RG9tYWluRXZlbnQsXG5cdERvbWFpbkV2ZW50SGFuZGxlcixcblx0TXVsdGlEb21haW5FdmVudEhhbmRsZXJcbn0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZTxUPiBleHRlbmRzIEZ1bmN0aW9uIHtcblx0bmV3KC4uLmFyZ3M6IGFueVtdKTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcGlQcm92aWRlcnMge1xuXG5cdHJlZ2lzdGVyUHJvdmlkZXJzKGNvbnRhaW5lcjogQ29udGFpbmVyKTogdm9pZDtcblxufVxuXG5leHBvcnQgdHlwZSBBZ2dyZWdhdGVEZWZpbml0aW9uPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PiA9IHtcblx0YWdncmVnYXRlS2V5OiBzdHJpbmcsXG5cdGNyZWF0ZUNvbW1hbmRIYW5kbGVyOiBUeXBlPENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVyPEM+Pixcblx0ZmFjdG9yeTogVHlwZTxBZ2dyZWdhdGVGYWN0b3J5PEksIEE+Pixcblx0cmVwb3NpdG9yeTogVHlwZTxBZ2dyZWdhdGVSZXBvc2l0b3J5PEksIEE+PlxufTtcblxuZXhwb3J0IGludGVyZmFjZSBEb21haW5Qcm92aWRlcnMge1xuXG5cdGRlZmluZUFnZ3JlZ2F0ZTxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEEgZXh0ZW5kcyBBZ2dyZWdhdGVSb290PEk+LCBDIGV4dGVuZHMgQ29tbWFuZDxJPj4oKTogQWdncmVnYXRlRGVmaW5pdGlvbjxJLCBBLCBDPiB8IG51bGw7XG5cblx0cmVnaXN0ZXJLZXkoY29udGFpbmVyOiBDb250YWluZXIpOiBzdHJpbmc7XG5cblx0cmVnaXN0ZXJQcm92aWRlcnMoY29udGFpbmVyOiBDb250YWluZXIpOiB2b2lkO1xuXG5cdHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PigpOiBBcnJheTxUeXBlPENvbW1hbmRIYW5kbGVyPEEsIEM+Pj47XG5cblx0cmVnaXN0ZXJEb21haW5FdmVudEhhbmRsZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KCk6IEFycmF5PFR5cGU8RG9tYWluRXZlbnRIYW5kbGVyPEksIEU+Pj47XG5cblx0cmVnaXN0ZXJNdWx0aURvbWFpbkV2ZW50SGFuZGxlcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4oKTogQXJyYXk8VHlwZTxNdWx0aURvbWFpbkV2ZW50SGFuZGxlcjxJLCBFPj4+O1xuXG59XG5cbmV4cG9ydCBjbGFzcyBEb21haW5Jbml0aWFsaXplciB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IENvbnRhaW5lciA9IENvcmVDb250YWluZXI7XG5cblx0cHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBpOiBBcGlQcm92aWRlcnMsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZG9tYWluOiBEb21haW5Qcm92aWRlcnMpIHtcblx0fVxuXG5cdGluaXQoKTogdm9pZCB7XG5cblx0XHRpZiAodGhpcy5pbml0aWFsaXplZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXG5cdFx0dGhpcy5kZWZpbmVBZ2dyZWdhdGUoKTtcblxuXHRcdHRoaXMucmVnaXN0ZXJBcGlQcm92aWRlcnMoKTtcblx0XHR0aGlzLnJlZ2lzdGVyRG9tYWluUHJvdmlkZXJzKCk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzKCk7XG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcblx0XHR0aGlzLnJlZ2lzdGVyTXVsdGlFdmVudEhhbmRsZXJzKCk7XG5cblx0XHR0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblx0fVxuXG5cdHByaXZhdGUgZGVmaW5lQWdncmVnYXRlKCk6IHZvaWQge1xuXHRcdGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLmRvbWFpbi5kZWZpbmVBZ2dyZWdhdGUoKTtcblxuXHRcdGlmIChkZWZpbml0aW9uKSB7XG5cdFx0XHRIZXJtZXNNb2R1bGUuZGVmaW5lQWdncmVnYXRlKFxuXHRcdFx0XHRkZWZpbml0aW9uLmFnZ3JlZ2F0ZUtleSxcblx0XHRcdFx0ZGVmaW5pdGlvbi5jcmVhdGVDb21tYW5kSGFuZGxlcixcblx0XHRcdFx0ZGVmaW5pdGlvbi5mYWN0b3J5LFxuXHRcdFx0XHRkZWZpbml0aW9uLnJlcG9zaXRvcnlcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSByZWdpc3RlckFwaVByb3ZpZGVycygpIHtcblx0XHR0aGlzLmFwaS5yZWdpc3RlclByb3ZpZGVycyh0aGlzLmNvbnRhaW5lcik7XG5cdH1cblxuXHRwcml2YXRlIHJlZ2lzdGVyRG9tYWluUHJvdmlkZXJzKCkge1xuXHRcdHRoaXMuZG9tYWluLnJlZ2lzdGVyUHJvdmlkZXJzKHRoaXMuY29udGFpbmVyKTtcblx0fVxuXG5cdHByaXZhdGUgcmVnaXN0ZXJDb21tYW5kSGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5kb21haW5cblx0XHRcdC5yZWdpc3RlckNvbW1hbmRIYW5kbGVycygpXG5cdFx0XHQuZm9yRWFjaCgoY2gpID0+IHtcblx0XHRcdFx0SGVybWVzTW9kdWxlLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoY2gsIHRoaXMuZG9tYWluLnJlZ2lzdGVyS2V5KHRoaXMuY29udGFpbmVyKSk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgcmVnaXN0ZXJFdmVudEhhbmRsZXJzKCkge1xuXHRcdHRoaXMuZG9tYWluXG5cdFx0XHQucmVnaXN0ZXJEb21haW5FdmVudEhhbmRsZXIoKVxuXHRcdFx0LmZvckVhY2goKGRoKSA9PiB7XG5cdFx0XHRcdEhlcm1lc01vZHVsZS5yZWdpc3RlckRvbWFpbkV2ZW50SGFuZGxlcihkaCk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgcmVnaXN0ZXJNdWx0aUV2ZW50SGFuZGxlcnMoKSB7XG5cdFx0dGhpcy5kb21haW5cblx0XHRcdC5yZWdpc3Rlck11bHRpRG9tYWluRXZlbnRIYW5kbGVyKClcblx0XHRcdC5mb3JFYWNoKChkaCkgPT4ge1xuXHRcdFx0XHRIZXJtZXNNb2R1bGUucmVnaXN0ZXJNdWx0aURvbWFpbkV2ZW50SGFuZGxlcihkaCk7XG5cdFx0XHR9KTtcblx0fVxuXG59XG4iXX0=