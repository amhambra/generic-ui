import { DomainEventStream } from '../domain/event/domain-event.stream';
import { DomainEventStore } from '../domain/event/domain-event.store';
import { CommandBus } from '../domain/command/command.bus';
import { CommandStream } from '../domain/command/command.stream';
import { AggregateDefinitionInitializer } from '../domain/command/config/aggregate-definition.initializer';
import { CommandHandlerInitializer } from '../domain/command/init/command-handler.initializer';
import { DomainEventHandlerInitializer } from '../domain/event/init/domain-event-handler.initializer';
import { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';
import { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from './hermes-tokens';
import { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';
import { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';
import { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';
import { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';
import { CommandLogger } from '../domain/command/command.logger';
import { commandLoggerFactory, eventLoggerFactory } from './hermes.module';
import { DomainEventLogger } from '../domain/event/domain-event.logger';
import { DomainEventBus } from '../domain/event/domain-event.bus';
import { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';
import { CommandDispatcher } from '../domain/command/command.dispatcher';
import { DomainEventPublisher } from '../domain/event/domain-event.publisher';
import { HermesRunner } from './runner/hermes.runner';
import { createContainer } from '../../common/di/index';
export const CoreContainer = createContainer();
CoreContainer.provideValue(EVENT_LOGGER_ENABLED, true);
CoreContainer.provideValue(COMMAND_LOGGER_ENABLED, true);
CoreContainer.provide(ConsoleCommandLogger);
CoreContainer.provide(NoopCommandLogger);
CoreContainer.provide(NoopEventLogger);
CoreContainer.provide(ConsoleEventLogger);
CoreContainer.provide(DomainEventBus);
CoreContainer.provide(AggregateStoreRegister);
CoreContainer.provideFactory(CommandLogger, { create: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] });
CoreContainer.provideFactory(DomainEventLogger, { create: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] });
CoreContainer.provide(AggregateFactoryArchive, AggregateFactoryArchive);
CoreContainer.provide(DomainEventPublisher);
CoreContainer.provide(AggregateRepositoryArchive);
CoreContainer.provide(DomainEventStream, DomainEventStream);
CoreContainer.provide(DomainEventStore, DomainEventStore);
CoreContainer.provide(CommandBus, CommandBus);
CoreContainer.provide(CommandStream);
CoreContainer.provide(CommandDispatcher);
CoreContainer.provide(AggregateDefinitionInitializer, AggregateDefinitionInitializer);
CoreContainer.provide(CommandHandlerInitializer, CommandHandlerInitializer);
CoreContainer.provide(DomainEventHandlerInitializer, DomainEventHandlerInitializer);
CoreContainer.provide(HermesRunner);
export const resetCoreContainer = () => {
    CoreContainer.clearOnlyRecords();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5jb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29yZS9hcGkvY29yZS5jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUMzRyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN0RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUMvRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUN6RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDbkYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDekYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUMxRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxlQUFlLEVBQUUsQ0FBQztBQUUvQyxhQUFhLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZELGFBQWEsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVDLGFBQWEsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN6QyxhQUFhLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZDLGFBQWEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUUxQyxhQUFhLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RDLGFBQWEsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM5QyxhQUFhLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV2SixhQUFhLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuSixhQUFhLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFFeEUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBRTVDLGFBQWEsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUNsRCxhQUFhLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDNUQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzFELGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzlDLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pDLGFBQWEsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsOEJBQThCLENBQUMsQ0FBQztBQUN0RixhQUFhLENBQUMsT0FBTyxDQUFDLHlCQUF5QixFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDNUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0FBRXBGLGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFO0lBQ3RDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbWFpbkV2ZW50U3RyZWFtIH0gZnJvbSAnLi4vZG9tYWluL2V2ZW50L2RvbWFpbi1ldmVudC5zdHJlYW0nO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRTdG9yZSB9IGZyb20gJy4uL2RvbWFpbi9ldmVudC9kb21haW4tZXZlbnQuc3RvcmUnO1xuaW1wb3J0IHsgQ29tbWFuZEJ1cyB9IGZyb20gJy4uL2RvbWFpbi9jb21tYW5kL2NvbW1hbmQuYnVzJztcbmltcG9ydCB7IENvbW1hbmRTdHJlYW0gfSBmcm9tICcuLi9kb21haW4vY29tbWFuZC9jb21tYW5kLnN0cmVhbSc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVEZWZpbml0aW9uSW5pdGlhbGl6ZXIgfSBmcm9tICcuLi9kb21haW4vY29tbWFuZC9jb25maWcvYWdncmVnYXRlLWRlZmluaXRpb24uaW5pdGlhbGl6ZXInO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJJbml0aWFsaXplciB9IGZyb20gJy4uL2RvbWFpbi9jb21tYW5kL2luaXQvY29tbWFuZC1oYW5kbGVyLmluaXRpYWxpemVyJztcbmltcG9ydCB7IERvbWFpbkV2ZW50SGFuZGxlckluaXRpYWxpemVyIH0gZnJvbSAnLi4vZG9tYWluL2V2ZW50L2luaXQvZG9tYWluLWV2ZW50LWhhbmRsZXIuaW5pdGlhbGl6ZXInO1xuaW1wb3J0IHsgQWdncmVnYXRlRmFjdG9yeUFyY2hpdmUsIEFnZ3JlZ2F0ZVJlcG9zaXRvcnlBcmNoaXZlIH0gZnJvbSAnLi4vZG9tYWluL2NvbW1hbmQvY29uZmlnL2RlZmluZSc7XG5pbXBvcnQgeyBDT01NQU5EX0xPR0dFUl9FTkFCTEVELCBFVkVOVF9MT0dHRVJfRU5BQkxFRCB9IGZyb20gJy4vaGVybWVzLXRva2Vucyc7XG5pbXBvcnQgeyBDb25zb2xlQ29tbWFuZExvZ2dlciB9IGZyb20gJy4uL2luZnJhc3RydWN0dXJlL2xvZ2dlci9jb21tYW5kL2NvbnNvbGUuY29tbWFuZC5sb2dnZXInO1xuaW1wb3J0IHsgTm9vcENvbW1hbmRMb2dnZXIgfSBmcm9tICcuLi9pbmZyYXN0cnVjdHVyZS9sb2dnZXIvY29tbWFuZC9ub29wLmNvbW1hbmQubG9nZ2VyJztcbmltcG9ydCB7IE5vb3BFdmVudExvZ2dlciB9IGZyb20gJy4uL2luZnJhc3RydWN0dXJlL2xvZ2dlci9ldmVudC9ub29wLmV2ZW50LmxvZ2dlcic7XG5pbXBvcnQgeyBDb25zb2xlRXZlbnRMb2dnZXIgfSBmcm9tICcuLi9pbmZyYXN0cnVjdHVyZS9sb2dnZXIvZXZlbnQvY29uc29sZS5ldmVudC5sb2dnZXInO1xuaW1wb3J0IHsgQ29tbWFuZExvZ2dlciB9IGZyb20gJy4uL2RvbWFpbi9jb21tYW5kL2NvbW1hbmQubG9nZ2VyJztcbmltcG9ydCB7IGNvbW1hbmRMb2dnZXJGYWN0b3J5LCBldmVudExvZ2dlckZhY3RvcnkgfSBmcm9tICcuL2hlcm1lcy5tb2R1bGUnO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRMb2dnZXIgfSBmcm9tICcuLi9kb21haW4vZXZlbnQvZG9tYWluLWV2ZW50LmxvZ2dlcic7XG5pbXBvcnQgeyBEb21haW5FdmVudEJ1cyB9IGZyb20gJy4uL2RvbWFpbi9ldmVudC9kb21haW4tZXZlbnQuYnVzJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZVN0b3JlUmVnaXN0ZXIgfSBmcm9tICcuLi9kb21haW4vY29tbWFuZC9zdG9yZS9hZ2dyZWdhdGUtc3RvcmUucmVnaXN0ZXInO1xuaW1wb3J0IHsgQ29tbWFuZERpc3BhdGNoZXIgfSBmcm9tICcuLi9kb21haW4vY29tbWFuZC9jb21tYW5kLmRpc3BhdGNoZXInO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRQdWJsaXNoZXIgfSBmcm9tICcuLi9kb21haW4vZXZlbnQvZG9tYWluLWV2ZW50LnB1Ymxpc2hlcic7XG5pbXBvcnQgeyBIZXJtZXNSdW5uZXIgfSBmcm9tICcuL3J1bm5lci9oZXJtZXMucnVubmVyJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRhaW5lciB9IGZyb20gJy4uLy4uL2NvbW1vbi9kaS9pbmRleCc7XG5cbmV4cG9ydCBjb25zdCBDb3JlQ29udGFpbmVyID0gY3JlYXRlQ29udGFpbmVyKCk7XG5cbkNvcmVDb250YWluZXIucHJvdmlkZVZhbHVlKEVWRU5UX0xPR0dFUl9FTkFCTEVELCB0cnVlKTtcbkNvcmVDb250YWluZXIucHJvdmlkZVZhbHVlKENPTU1BTkRfTE9HR0VSX0VOQUJMRUQsIHRydWUpO1xuQ29yZUNvbnRhaW5lci5wcm92aWRlKENvbnNvbGVDb21tYW5kTG9nZ2VyKTtcbkNvcmVDb250YWluZXIucHJvdmlkZShOb29wQ29tbWFuZExvZ2dlcik7XG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoTm9vcEV2ZW50TG9nZ2VyKTtcbkNvcmVDb250YWluZXIucHJvdmlkZShDb25zb2xlRXZlbnRMb2dnZXIpO1xuXG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoRG9tYWluRXZlbnRCdXMpO1xuQ29yZUNvbnRhaW5lci5wcm92aWRlKEFnZ3JlZ2F0ZVN0b3JlUmVnaXN0ZXIpO1xuQ29yZUNvbnRhaW5lci5wcm92aWRlRmFjdG9yeShDb21tYW5kTG9nZ2VyLCB7IGNyZWF0ZTogY29tbWFuZExvZ2dlckZhY3RvcnksIGRlcHM6IFtDT01NQU5EX0xPR0dFUl9FTkFCTEVELCBDb25zb2xlQ29tbWFuZExvZ2dlciwgTm9vcENvbW1hbmRMb2dnZXJdIH0pO1xuXG5Db3JlQ29udGFpbmVyLnByb3ZpZGVGYWN0b3J5KERvbWFpbkV2ZW50TG9nZ2VyLCB7IGNyZWF0ZTogZXZlbnRMb2dnZXJGYWN0b3J5LCBkZXBzOiBbRVZFTlRfTE9HR0VSX0VOQUJMRUQsIENvbnNvbGVFdmVudExvZ2dlciwgTm9vcEV2ZW50TG9nZ2VyXSB9KTtcbkNvcmVDb250YWluZXIucHJvdmlkZShBZ2dyZWdhdGVGYWN0b3J5QXJjaGl2ZSwgQWdncmVnYXRlRmFjdG9yeUFyY2hpdmUpO1xuXG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoRG9tYWluRXZlbnRQdWJsaXNoZXIpO1xuXG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoQWdncmVnYXRlUmVwb3NpdG9yeUFyY2hpdmUpO1xuQ29yZUNvbnRhaW5lci5wcm92aWRlKERvbWFpbkV2ZW50U3RyZWFtLCBEb21haW5FdmVudFN0cmVhbSk7XG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoRG9tYWluRXZlbnRTdG9yZSwgRG9tYWluRXZlbnRTdG9yZSk7XG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoQ29tbWFuZEJ1cywgQ29tbWFuZEJ1cyk7XG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoQ29tbWFuZFN0cmVhbSk7XG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoQ29tbWFuZERpc3BhdGNoZXIpO1xuQ29yZUNvbnRhaW5lci5wcm92aWRlKEFnZ3JlZ2F0ZURlZmluaXRpb25Jbml0aWFsaXplciwgQWdncmVnYXRlRGVmaW5pdGlvbkluaXRpYWxpemVyKTtcbkNvcmVDb250YWluZXIucHJvdmlkZShDb21tYW5kSGFuZGxlckluaXRpYWxpemVyLCBDb21tYW5kSGFuZGxlckluaXRpYWxpemVyKTtcbkNvcmVDb250YWluZXIucHJvdmlkZShEb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplciwgRG9tYWluRXZlbnRIYW5kbGVySW5pdGlhbGl6ZXIpO1xuXG5Db3JlQ29udGFpbmVyLnByb3ZpZGUoSGVybWVzUnVubmVyKTtcblxuZXhwb3J0IGNvbnN0IHJlc2V0Q29yZUNvbnRhaW5lciA9ICgpID0+IHtcblx0Q29yZUNvbnRhaW5lci5jbGVhck9ubHlSZWNvcmRzKCk7XG59O1xuIl19