import { CoreContainer } from '../../../api/core.container';
export function domainEventHandlerFactoryAsFactory(domainEventHandlerType) {
    return CoreContainer.resolve(domainEventHandlerType);
}
export function domainEventHandlerFactory(domainEventHandler) {
    return new DomainEventHandlerImpl(domainEventHandler, [domainEventHandler.forEvent()]);
}
export function multiDomainEventHandlerFactory(domainEventHandler) {
    return new DomainEventHandlerImpl(domainEventHandler, domainEventHandler.forEvents());
}
export class DomainEventHandlerImpl {
    constructor(domainEventHandler, events) {
        this.domainEventHandler = domainEventHandler;
        this.events = events;
        this.eventTypes = this.createDomainEventTypes();
    }
    handleEvent(event) {
        this.domainEventHandler.handle(event);
    }
    forEvents(events) {
        return events.some((event) => {
            return this.eventTypes.some((type) => {
                return type === event.getMessageType();
            });
        });
    }
    createDomainEventTypes() {
        const types = [];
        for (const event of this.events) {
            const instance = this.createDomainEventInstance(event);
            types.push(instance.getMessageType());
        }
        return types;
    }
    createDomainEventInstance(eventType) {
        const args = [], argumentLength = eventType.constructor.length;
        args.fill(undefined, 0, argumentLength);
        if (args.length === 0) {
            return (new eventType());
        }
        else if (args.length === 1) {
            return (new eventType(args[0]));
        }
        else if (args.length === 2) {
            return (new eventType(args[0], args[1]));
        }
        else if (args.length === 3) {
            return (new eventType(args[0], args[1], args[2]));
        }
        else if (args.length === 4) {
            return (new eventType(args[0], args[1], args[2], args[3]));
        }
        else if (args.length === 5) {
            return (new eventType(args[0], args[1], args[2], args[3], args[4]));
        }
        else {
            throw new Error('DomainEventHandler constructor out of arguments');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLWV2ZW50LWhhbmRsZXItaW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2RvbWFpbi9ldmVudC9oYW5kbGVyL2RvbWFpbi1ldmVudC1oYW5kbGVyLWltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTVELE1BQU0sVUFBVSxrQ0FBa0MsQ0FDakQsc0JBQWdEO0lBRWhELE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQyxzQkFBNkIsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQ3hDLGtCQUE0QztJQUU1QyxPQUFPLElBQUksc0JBQXNCLENBQU8sa0JBQWtCLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUdELE1BQU0sVUFBVSw4QkFBOEIsQ0FDN0Msa0JBQWlEO0lBRWpELE9BQU8sSUFBSSxzQkFBc0IsQ0FBTyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdGLENBQUM7QUFHRCxNQUFNLE9BQU8sc0JBQXNCO0lBSWxDLFlBQTZCLGtCQUE0RSxFQUNyRixNQUFpQztRQUR4Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTBEO1FBQ3JGLFdBQU0sR0FBTixNQUFNLENBQTJCO1FBQ3BELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFRO1FBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUFnQjtRQUN6QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFRLEVBQUUsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7Z0JBQzVDLE9BQU8sSUFBSSxLQUFLLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN4QyxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVPLHNCQUFzQjtRQUU3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFakIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2RCxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRU8seUJBQXlCLENBQUMsU0FBNkI7UUFDOUQsTUFBTSxJQUFJLEdBQWdCLEVBQUUsRUFDM0IsY0FBYyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxJQUFLLFNBQWlCLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxTQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFLLFNBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFLLFNBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNEO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxTQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEU7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdCLE9BQU8sQ0FBQyxJQUFLLFNBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0U7YUFBTTtZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztTQUNuRTtJQUNGLENBQUM7Q0FHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbWFpbkV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2FwaS9ldmVudC9kb21haW4tZXZlbnQuaGFuZGxlcic7XG5pbXBvcnQgeyBBZ2dyZWdhdGVJZCB9IGZyb20gJy4uLy4uLy4uL2FwaS90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcbmltcG9ydCB7IERvbWFpbkV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vYXBpL2V2ZW50L2RvbWFpbi1ldmVudCc7XG5pbXBvcnQgeyBNdWx0aURvbWFpbkV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2FwaS9ldmVudC9tdWx0aS1kb21haW4tZXZlbnQuaGFuZGxlcic7XG5pbXBvcnQgeyBEb21haW5FdmVudFR5cGUgfSBmcm9tICcuLi8uLi8uLi9hcGkvZXZlbnQvZG9tYWluLWV2ZW50LXR5cGUnO1xuaW1wb3J0IHsgQ29yZUNvbnRhaW5lciB9IGZyb20gJy4uLy4uLy4uL2FwaS9jb3JlLmNvbnRhaW5lcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW5FdmVudEhhbmRsZXJGYWN0b3J5QXNGYWN0b3J5PEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+Pihcblx0ZG9tYWluRXZlbnRIYW5kbGVyVHlwZTogRG9tYWluRXZlbnRIYW5kbGVyPEksIEU+XG4pIHtcblx0cmV0dXJuIENvcmVDb250YWluZXIucmVzb2x2ZShkb21haW5FdmVudEhhbmRsZXJUeXBlIGFzIGFueSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW5FdmVudEhhbmRsZXJGYWN0b3J5PEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+Pihcblx0ZG9tYWluRXZlbnRIYW5kbGVyOiBEb21haW5FdmVudEhhbmRsZXI8SSwgRT5cbik6IERvbWFpbkV2ZW50SGFuZGxlckltcGw8SSwgRT4ge1xuXHRyZXR1cm4gbmV3IERvbWFpbkV2ZW50SGFuZGxlckltcGw8SSwgRT4oZG9tYWluRXZlbnRIYW5kbGVyLCBbZG9tYWluRXZlbnRIYW5kbGVyLmZvckV2ZW50KCldKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlEb21haW5FdmVudEhhbmRsZXJGYWN0b3J5PEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+Pihcblx0ZG9tYWluRXZlbnRIYW5kbGVyOiBNdWx0aURvbWFpbkV2ZW50SGFuZGxlcjxJLCBFPlxuKTogRG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPiB7XG5cdHJldHVybiBuZXcgRG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPihkb21haW5FdmVudEhhbmRsZXIsIGRvbWFpbkV2ZW50SGFuZGxlci5mb3JFdmVudHMoKSk7XG59XG5cblxuZXhwb3J0IGNsYXNzIERvbWFpbkV2ZW50SGFuZGxlckltcGw8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+IHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGV2ZW50VHlwZXM6IEFycmF5PHN0cmluZz47XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkb21haW5FdmVudEhhbmRsZXI6IERvbWFpbkV2ZW50SGFuZGxlcjxJLCBFPiB8IE11bHRpRG9tYWluRXZlbnRIYW5kbGVyPEksIEU+LFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGV2ZW50czogQXJyYXk8RG9tYWluRXZlbnRUeXBlPEU+Pikge1xuXHRcdHRoaXMuZXZlbnRUeXBlcyA9IHRoaXMuY3JlYXRlRG9tYWluRXZlbnRUeXBlcygpO1xuXHR9XG5cblx0aGFuZGxlRXZlbnQoZXZlbnQ6IEUpOiB2b2lkIHtcblx0XHR0aGlzLmRvbWFpbkV2ZW50SGFuZGxlci5oYW5kbGUoZXZlbnQpO1xuXHR9XG5cblx0Zm9yRXZlbnRzKGV2ZW50czogQXJyYXk8RT4pOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZXZlbnRzLnNvbWUoKGV2ZW50OiBFKSA9PiB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ldmVudFR5cGVzLnNvbWUoKHR5cGU6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdHlwZSA9PT0gZXZlbnQuZ2V0TWVzc2FnZVR5cGUoKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVEb21haW5FdmVudFR5cGVzKCk6IEFycmF5PHN0cmluZz4ge1xuXG5cdFx0Y29uc3QgdHlwZXMgPSBbXTtcblxuXHRcdGZvciAoY29uc3QgZXZlbnQgb2YgdGhpcy5ldmVudHMpIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gdGhpcy5jcmVhdGVEb21haW5FdmVudEluc3RhbmNlKGV2ZW50KTtcblx0XHRcdHR5cGVzLnB1c2goaW5zdGFuY2UuZ2V0TWVzc2FnZVR5cGUoKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHR5cGVzO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVEb21haW5FdmVudEluc3RhbmNlKGV2ZW50VHlwZTogRG9tYWluRXZlbnRUeXBlPEU+KTogRSB7XG5cdFx0Y29uc3QgYXJnczogQXJyYXk8dm9pZD4gPSBbXSxcblx0XHRcdGFyZ3VtZW50TGVuZ3RoID0gZXZlbnRUeXBlLmNvbnN0cnVjdG9yLmxlbmd0aDtcblxuXHRcdGFyZ3MuZmlsbCh1bmRlZmluZWQsIDAsIGFyZ3VtZW50TGVuZ3RoKTtcblxuXHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50VHlwZSBhcyBhbnkpKCkpO1xuXHRcdH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHJldHVybiAobmV3IChldmVudFR5cGUgYXMgYW55KShhcmdzWzBdKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50VHlwZSBhcyBhbnkpKGFyZ3NbMF0sIGFyZ3NbMV0pKTtcblx0XHR9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnRUeXBlIGFzIGFueSkoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSkpO1xuXHRcdH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDQpIHtcblx0XHRcdHJldHVybiAobmV3IChldmVudFR5cGUgYXMgYW55KShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gNSkge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50VHlwZSBhcyBhbnkpKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdEb21haW5FdmVudEhhbmRsZXIgY29uc3RydWN0b3Igb3V0IG9mIGFyZ3VtZW50cycpO1xuXHRcdH1cblx0fVxuXG5cbn1cbiJdfQ==