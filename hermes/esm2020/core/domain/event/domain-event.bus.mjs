import { DomainEventStream } from './domain-event.stream';
import { HermesObservable } from '../../../common/stream/core/observable/hermes.observable';
import { hermesFilter } from '../../../common/stream/core/operator/hermes.filter';
export class DomainEventBus extends HermesObservable {
    constructor(eventStream) {
        super();
        this.eventStream = eventStream;
    }
    subscribe() {
        return this.eventStream.toObservable().subscribe(arguments[0], arguments[1], arguments[2]);
    }
    ofEvents(events) {
        return this
            .eventStream
            .toObservable()
            .pipe(hermesFilter((domainEvent) => {
            return events.some((event) => {
                const eventInstance = this.createEventInstance(event);
                return eventInstance.equalsByType(domainEvent);
            });
        }));
    }
    ofEventHandlers(handlers) {
        return this
            .eventStream
            .toObservable()
            .pipe(hermesFilter((event) => {
            return handlers.some((handler) => handler.forEvents([event]));
        }));
    }
    createEventInstance(event) {
        const args = [], argumentLength = event.constructor.length;
        args.fill(undefined, 0, argumentLength);
        if (args.length === 0) {
            return (new event());
        }
        else if (args.length === 1) {
            return (new event(args[0]));
        }
        else if (args.length === 2) {
            return (new event(args[0], args[1]));
        }
        else if (args.length === 3) {
            return (new event(args[0], args[1], args[2]));
        }
        else if (args.length === 4) {
            return (new event(args[0], args[1], args[2], args[3]));
        }
        else if (args.length === 5) {
            return (new event(args[0], args[1], args[2], args[3], args[4]));
        }
        else {
            throw new Error('DomainEventBus constructor out of arguments');
        }
    }
}
DomainEventBus.services = [DomainEventStream];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLWV2ZW50LmJ1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2RvbWFpbi9ldmVudC9kb21haW4tZXZlbnQuYnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzFELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzVGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUlsRixNQUFNLE9BQU8sY0FBNkMsU0FBUSxnQkFBbUI7SUFFcEYsWUFBNkIsV0FBOEI7UUFDMUQsS0FBSyxFQUFFLENBQUM7UUFEb0IsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO0lBRTNELENBQUM7SUFZUSxTQUFTO1FBRWpCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQWlDO1FBQ3pDLE9BQVEsSUFBNEI7YUFDbEMsV0FBVzthQUNYLFlBQVksRUFBRTthQUNkLElBQUksQ0FDSixZQUFZLENBQUMsQ0FBQyxXQUFxQyxFQUFFLEVBQUU7WUFDdEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBeUIsRUFBRSxFQUFFO2dCQUNoRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RELE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoRCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQThFO1FBQzdGLE9BQVEsSUFBNEI7YUFDbEMsV0FBVzthQUNYLFlBQVksRUFBRTthQUNkLElBQUksQ0FDSixZQUFZLENBQUMsQ0FBQyxLQUErQixFQUFFLEVBQUU7WUFDaEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBc0UsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5SCxDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLG1CQUFtQixDQUFDLEtBQXlCO1FBQ3BELE1BQU0sSUFBSSxHQUFnQixFQUFFLEVBQzNCLGNBQWMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUUzQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLENBQUMsSUFBSyxLQUFhLEVBQUUsQ0FBQyxDQUFDO1NBQzlCO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxLQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQzthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxDQUFDLElBQUssS0FBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlDO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxLQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxLQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRTthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxDQUFDLElBQUssS0FBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pFO2FBQU07WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7U0FDL0Q7SUFDRixDQUFDOztBQTdEZSx1QkFBUSxHQUFHLENBQUMsaUJBQWlCLENBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbWFpbkV2ZW50IH0gZnJvbSAnLi4vLi4vYXBpL2V2ZW50L2RvbWFpbi1ldmVudCc7XG5pbXBvcnQgeyBEb21haW5FdmVudFN0cmVhbSB9IGZyb20gJy4vZG9tYWluLWV2ZW50LnN0cmVhbSc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVJZCB9IGZyb20gJy4uLy4uL2FwaS90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcbmltcG9ydCB7IERvbWFpbkV2ZW50SGFuZGxlckltcGwgfSBmcm9tICcuL2hhbmRsZXIvZG9tYWluLWV2ZW50LWhhbmRsZXItaW1wbCc7XG5pbXBvcnQgeyBIZXJtZXNPYnNlcnZhYmxlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvaGVybWVzLm9ic2VydmFibGUnO1xuaW1wb3J0IHsgaGVybWVzRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL29wZXJhdG9yL2hlcm1lcy5maWx0ZXInO1xuaW1wb3J0IHsgSGVybWVzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL3N1YnNjcmlwdGlvbi9oZXJtZXMuc3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IEhlcm1lc1N1YnNjcmliZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vc3RyZWFtL2NvcmUvb2JzZXJ2YWJsZS9zdWJzY3JpYmVyL2hlcm1lcy5zdWJzY3JpYmVyJztcblxuZXhwb3J0IGNsYXNzIERvbWFpbkV2ZW50QnVzPEUgPSBEb21haW5FdmVudDxBZ2dyZWdhdGVJZD4+IGV4dGVuZHMgSGVybWVzT2JzZXJ2YWJsZTxFPiB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBldmVudFN0cmVhbTogRG9tYWluRXZlbnRTdHJlYW0pIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0c3RhdGljIHJlYWRvbmx5IHNlcnZpY2VzID0gW0RvbWFpbkV2ZW50U3RyZWFtXSBhcyBjb25zdDtcblxuXHRvdmVycmlkZSBzdWJzY3JpYmUoXG5cdFx0bmV4dD86ICh2YWx1ZTogRSkgPT4gdm9pZCxcblx0XHRlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuXHRcdGNvbXBsZXRlPzogKCkgPT4gdm9pZFxuXHQpOiBIZXJtZXNTdWJzY3JpcHRpb247XG5cdG92ZXJyaWRlIHN1YnNjcmliZShcblx0XHRzdWJzY3JpYmVyOiBIZXJtZXNTdWJzY3JpYmVyPEU+XG5cdCk6IEhlcm1lc1N1YnNjcmlwdGlvbjtcblx0b3ZlcnJpZGUgc3Vic2NyaWJlKCk6IEhlcm1lc1N1YnNjcmlwdGlvbiB7XG5cblx0XHRyZXR1cm4gdGhpcy5ldmVudFN0cmVhbS50b09ic2VydmFibGUoKS5zdWJzY3JpYmUoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG5cdH1cblxuXHRvZkV2ZW50cyhldmVudHM6IEFycmF5PHR5cGVvZiBEb21haW5FdmVudD4pOiBIZXJtZXNPYnNlcnZhYmxlPGFueT4ge1xuXHRcdHJldHVybiAodGhpcyBhcyBEb21haW5FdmVudEJ1czxhbnk+KVxuXHRcdFx0LmV2ZW50U3RyZWFtXG5cdFx0XHQudG9PYnNlcnZhYmxlKClcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRoZXJtZXNGaWx0ZXIoKGRvbWFpbkV2ZW50OiBEb21haW5FdmVudDxBZ2dyZWdhdGVJZD4pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gZXZlbnRzLnNvbWUoKGV2ZW50OiB0eXBlb2YgRG9tYWluRXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGV2ZW50SW5zdGFuY2UgPSB0aGlzLmNyZWF0ZUV2ZW50SW5zdGFuY2UoZXZlbnQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGV2ZW50SW5zdGFuY2UuZXF1YWxzQnlUeXBlKGRvbWFpbkV2ZW50KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdH1cblxuXHRvZkV2ZW50SGFuZGxlcnMoaGFuZGxlcnM6IEFycmF5PERvbWFpbkV2ZW50SGFuZGxlckltcGw8QWdncmVnYXRlSWQsIERvbWFpbkV2ZW50PEFnZ3JlZ2F0ZUlkPj4+KTogYW55IHtcblx0XHRyZXR1cm4gKHRoaXMgYXMgRG9tYWluRXZlbnRCdXM8YW55Pilcblx0XHRcdC5ldmVudFN0cmVhbVxuXHRcdFx0LnRvT2JzZXJ2YWJsZSgpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0aGVybWVzRmlsdGVyKChldmVudDogRG9tYWluRXZlbnQ8QWdncmVnYXRlSWQ+KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZXJzLnNvbWUoKGhhbmRsZXI6IERvbWFpbkV2ZW50SGFuZGxlckltcGw8QWdncmVnYXRlSWQsIERvbWFpbkV2ZW50PEFnZ3JlZ2F0ZUlkPj4pID0+IGhhbmRsZXIuZm9yRXZlbnRzKFtldmVudF0pKTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUV2ZW50SW5zdGFuY2UoZXZlbnQ6IHR5cGVvZiBEb21haW5FdmVudCk6IERvbWFpbkV2ZW50PEFnZ3JlZ2F0ZUlkPiB7XG5cdFx0Y29uc3QgYXJnczogQXJyYXk8dm9pZD4gPSBbXSxcblx0XHRcdGFyZ3VtZW50TGVuZ3RoID0gZXZlbnQuY29uc3RydWN0b3IubGVuZ3RoO1xuXG5cdFx0YXJncy5maWxsKHVuZGVmaW5lZCwgMCwgYXJndW1lbnRMZW5ndGgpO1xuXG5cdFx0aWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnQgYXMgYW55KSgpKTtcblx0XHR9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnQgYXMgYW55KShhcmdzWzBdKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50IGFzIGFueSkoYXJnc1swXSwgYXJnc1sxXSkpO1xuXHRcdH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDMpIHtcblx0XHRcdHJldHVybiAobmV3IChldmVudCBhcyBhbnkpKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pKTtcblx0XHR9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnQgYXMgYW55KShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gNSkge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50IGFzIGFueSkoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbkV2ZW50QnVzIGNvbnN0cnVjdG9yIG91dCBvZiBhcmd1bWVudHMnKTtcblx0XHR9XG5cdH1cblxufVxuIl19