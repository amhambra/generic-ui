import { AggregateDefinitionInitializer } from '../../domain/command/config/aggregate-definition.initializer';
import { CommandHandlerInitializer } from '../../domain/command/init/command-handler.initializer';
import { DomainEventHandlerInitializer } from '../../domain/event/init/domain-event-handler.initializer';
import { CommandBus } from '../../domain/command/command.bus';
import { aggregateDefinitionToken } from '../../domain/command/config/aggregate-definition.token';
import { DOMAIN_EVENT_HANDLERS } from '../event/domain-event-handlers';
import { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../../domain/command/create-aggregate/create-aggregate.command-handlers-token';
import { COMMAND_HANDLERS } from '../../domain/command/handler/command-handlers';
import { Reactive } from '../../../common/reactive/reactive';
export class HermesRunner extends Reactive {
    aggregateDefinitionInitializer;
    commandHandlerInitializer;
    domainEventHandlerInitializer;
    commandBus;
    definedAggregate;
    eventHandlers;
    aggregateCommandHandlers;
    commandHandlers;
    started = false;
    constructor(aggregateDefinitionInitializer, commandHandlerInitializer, domainEventHandlerInitializer, commandBus, definedAggregate, eventHandlers, aggregateCommandHandlers, commandHandlers) {
        super();
        this.aggregateDefinitionInitializer = aggregateDefinitionInitializer;
        this.commandHandlerInitializer = commandHandlerInitializer;
        this.domainEventHandlerInitializer = domainEventHandlerInitializer;
        this.commandBus = commandBus;
        this.definedAggregate = definedAggregate;
        this.eventHandlers = eventHandlers;
        this.aggregateCommandHandlers = aggregateCommandHandlers;
        this.commandHandlers = commandHandlers;
        if (this.eventHandlers === null) {
            this.eventHandlers = [];
        }
        if (this.aggregateCommandHandlers === null) {
            this.aggregateCommandHandlers = [];
        }
        if (this.commandHandlers === null) {
            this.commandHandlers = [];
        }
    }
    static services = [
        AggregateDefinitionInitializer,
        CommandHandlerInitializer,
        DomainEventHandlerInitializer,
        CommandBus,
        { inject: aggregateDefinitionToken, collection: true },
        { inject: DOMAIN_EVENT_HANDLERS, collection: true, optional: true },
        { inject: CREATE_AGGREGATE_COMMAND_HANDLERS, collection: true, optional: true },
        { inject: COMMAND_HANDLERS, collection: true, optional: true }
    ];
    run() {
        if (this.started) {
            return;
        }
        this.checkNullCommand(this.commandHandlers, this.aggregateCommandHandlers);
        this.checkCommandHandlerIsCollection(this.commandHandlers);
        this.checkDomainEventHandlerIsCollection(this.eventHandlers);
        this.aggregateDefinitionInitializer.register(this.definedAggregate);
        this.commandHandlerInitializer.register(this.commandHandlers);
        this.commandHandlerInitializer.registerAggregateCommandHandlers(this.aggregateCommandHandlers);
        this.domainEventHandlerInitializer.init(this.eventHandlers);
        this.started = true;
    }
    destroy() {
        this.commandHandlerInitializer.onDestroy();
        this.domainEventHandlerInitializer.onDestroy();
    }
    checkNullCommand(commandHandlers, aggregateCommandHandlers) {
        this.commandBus
            .ofNullHandler(commandHandlers, aggregateCommandHandlers)
            .pipe(this.hermesTakeUntil())
            .subscribe((command) => {
            // eslint-disable-next-line no-console
            console.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);
        });
    }
    checkCommandHandlerIsCollection(commandHandlers) {
        if (commandHandlers && !Array.isArray(commandHandlers)) {
            // eslint-disable-next-line no-console
            console.warn('You might provided commandHandler without specifying "multi: true".');
        }
    }
    checkDomainEventHandlerIsCollection(eventHandlers) {
        if (eventHandlers && !Array.isArray(eventHandlers)) {
            // eslint-disable-next-line no-console
            console.warn('You might provided eventHandler without specifying "multi: true".');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLnJ1bm5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2FwaS9ydW5uZXIvaGVybWVzLnJ1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUM5RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNsRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFFbEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdkUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sK0VBQStFLENBQUM7QUFFbEksT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFNakYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRTdELE1BQU0sT0FBTyxZQUNaLFNBQVEsUUFBUTtJQUtFO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFWVixPQUFPLEdBQUcsS0FBSyxDQUFDO0lBRXhCLFlBQ2tCLDhCQUFvRSxFQUNwRSx5QkFBNkQsRUFDN0QsNkJBQWtFLEVBQ2xFLFVBQXNCLEVBQ3RCLGdCQUFrRCxFQUNsRCxhQUFrRCxFQUNsRCx3QkFBMkUsRUFDM0UsZUFBbUQ7UUFFcEUsS0FBSyxFQUFFLENBQUM7UUFUUyxtQ0FBOEIsR0FBOUIsOEJBQThCLENBQXNDO1FBQ3BFLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBb0M7UUFDN0Qsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUFxQztRQUNsRSxl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LElBQUksQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO1NBQ3BGO0lBQ0YsQ0FBQztJQUVPLG1DQUFtQyxDQUFDLGFBQWtEO1FBQzdGLElBQUksYUFBYSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNuRCxzQ0FBc0M7WUFDdEMsT0FBTyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFnZ3JlZ2F0ZURlZmluaXRpb25Jbml0aWFsaXplciB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb21tYW5kL2NvbmZpZy9hZ2dyZWdhdGUtZGVmaW5pdGlvbi5pbml0aWFsaXplcic7XG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlckluaXRpYWxpemVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvaW5pdC9jb21tYW5kLWhhbmRsZXIuaW5pdGlhbGl6ZXInO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRIYW5kbGVySW5pdGlhbGl6ZXIgfSBmcm9tICcuLi8uLi9kb21haW4vZXZlbnQvaW5pdC9kb21haW4tZXZlbnQtaGFuZGxlci5pbml0aWFsaXplcic7XG5pbXBvcnQgeyBDb21tYW5kQnVzIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvY29tbWFuZC5idXMnO1xuaW1wb3J0IHsgYWdncmVnYXRlRGVmaW5pdGlvblRva2VuIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvY29uZmlnL2FnZ3JlZ2F0ZS1kZWZpbml0aW9uLnRva2VuJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZURlZmluaXRpb24gfSBmcm9tICcuLi8uLi9kb21haW4vY29tbWFuZC9jb25maWcvYWdncmVnYXRlLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgRE9NQUlOX0VWRU5UX0hBTkRMRVJTIH0gZnJvbSAnLi4vZXZlbnQvZG9tYWluLWV2ZW50LWhhbmRsZXJzJztcbmltcG9ydCB7IERvbWFpbkV2ZW50SGFuZGxlckltcGwgfSBmcm9tICcuLi8uLi9kb21haW4vZXZlbnQvaGFuZGxlci9kb21haW4tZXZlbnQtaGFuZGxlci1pbXBsJztcbmltcG9ydCB7IENSRUFURV9BR0dSRUdBVEVfQ09NTUFORF9IQU5ETEVSUyB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb21tYW5kL2NyZWF0ZS1hZ2dyZWdhdGUvY3JlYXRlLWFnZ3JlZ2F0ZS5jb21tYW5kLWhhbmRsZXJzLXRva2VuJztcbmltcG9ydCB7IENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbCB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb21tYW5kL2NyZWF0ZS1hZ2dyZWdhdGUvY3JlYXRlLWFnZ3JlZ2F0ZS5jb21tYW5kLWhhbmRsZXItaW1wbCc7XG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJTIH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvbW1hbmQvaGFuZGxlci9jb21tYW5kLWhhbmRsZXJzJztcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVySW1wbCB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb21tYW5kL2hhbmRsZXIvY29tbWFuZC1oYW5kbGVyLWltcGwnO1xuaW1wb3J0IHsgQWdncmVnYXRlSWQgfSBmcm9tICcuLi90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZVJvb3QgfSBmcm9tICcuLi90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLXJvb3QnO1xuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJy4uL2NvbW1hbmQvY29tbWFuZCc7XG5pbXBvcnQgeyBEb21haW5FdmVudCB9IGZyb20gJy4uL2V2ZW50L2RvbWFpbi1ldmVudCc7XG5pbXBvcnQgeyBSZWFjdGl2ZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9yZWFjdGl2ZS9yZWFjdGl2ZSc7XG5cbmV4cG9ydCBjbGFzcyBIZXJtZXNSdW5uZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBBIGV4dGVuZHMgQWdncmVnYXRlUm9vdDxJPiwgQyBleHRlbmRzIENvbW1hbmQ8ST4sIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj5cblx0ZXh0ZW5kcyBSZWFjdGl2ZSB7XG5cblx0cHJpdmF0ZSBzdGFydGVkID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBhZ2dyZWdhdGVEZWZpbml0aW9uSW5pdGlhbGl6ZXI6IEFnZ3JlZ2F0ZURlZmluaXRpb25Jbml0aWFsaXplcjxJLCBBPixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGNvbW1hbmRIYW5kbGVySW5pdGlhbGl6ZXI6IENvbW1hbmRIYW5kbGVySW5pdGlhbGl6ZXI8SSwgQSwgQz4sXG5cdFx0cHJpdmF0ZSByZWFkb25seSBkb21haW5FdmVudEhhbmRsZXJJbml0aWFsaXplcjogRG9tYWluRXZlbnRIYW5kbGVySW5pdGlhbGl6ZXI8SSwgRT4sXG5cdFx0cHJpdmF0ZSByZWFkb25seSBjb21tYW5kQnVzOiBDb21tYW5kQnVzLFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgZGVmaW5lZEFnZ3JlZ2F0ZTogQXJyYXk8QWdncmVnYXRlRGVmaW5pdGlvbjxJLCBBPj4sXG5cdFx0cHJpdmF0ZSByZWFkb25seSBldmVudEhhbmRsZXJzOiBBcnJheTxEb21haW5FdmVudEhhbmRsZXJJbXBsPEksIEU+Pixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVyczogQXJyYXk8Q3JlYXRlQWdncmVnYXRlQ29tbWFuZEhhbmRsZXJJbXBsPEksIEEsIEM+Pixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGNvbW1hbmRIYW5kbGVyczogQXJyYXk8Q29tbWFuZEhhbmRsZXJJbXBsPEksIEEsIEM+PlxuXHQpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0aWYgKHRoaXMuZXZlbnRIYW5kbGVycyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5ldmVudEhhbmRsZXJzID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzID09PSBudWxsKSB7XG5cdFx0XHR0aGlzLmFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVycyA9IFtdO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNvbW1hbmRIYW5kbGVycyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5jb21tYW5kSGFuZGxlcnMgPSBbXTtcblx0XHR9XG5cdH1cblxuXHRzdGF0aWMgcmVhZG9ubHkgc2VydmljZXMgPSBbXG5cdFx0QWdncmVnYXRlRGVmaW5pdGlvbkluaXRpYWxpemVyLFxuXHRcdENvbW1hbmRIYW5kbGVySW5pdGlhbGl6ZXIsXG5cdFx0RG9tYWluRXZlbnRIYW5kbGVySW5pdGlhbGl6ZXIsXG5cdFx0Q29tbWFuZEJ1cyxcblx0XHR7IGluamVjdDogYWdncmVnYXRlRGVmaW5pdGlvblRva2VuLCBjb2xsZWN0aW9uOiB0cnVlIH0sXG5cdFx0eyBpbmplY3Q6IERPTUFJTl9FVkVOVF9IQU5ETEVSUywgY29sbGVjdGlvbjogdHJ1ZSwgb3B0aW9uYWw6IHRydWUgfSxcblx0XHR7IGluamVjdDogQ1JFQVRFX0FHR1JFR0FURV9DT01NQU5EX0hBTkRMRVJTLCBjb2xsZWN0aW9uOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9LFxuXHRcdHsgaW5qZWN0OiBDT01NQU5EX0hBTkRMRVJTLCBjb2xsZWN0aW9uOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9XG5cdF0gYXMgY29uc3Q7XG5cblx0cnVuKCk6IHZvaWQge1xuXG5cdFx0aWYodGhpcy5zdGFydGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5jaGVja051bGxDb21tYW5kKHRoaXMuY29tbWFuZEhhbmRsZXJzLCB0aGlzLmFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVycyk7XG5cdFx0dGhpcy5jaGVja0NvbW1hbmRIYW5kbGVySXNDb2xsZWN0aW9uKHRoaXMuY29tbWFuZEhhbmRsZXJzKTtcblx0XHR0aGlzLmNoZWNrRG9tYWluRXZlbnRIYW5kbGVySXNDb2xsZWN0aW9uKHRoaXMuZXZlbnRIYW5kbGVycyk7XG5cblx0XHR0aGlzLmFnZ3JlZ2F0ZURlZmluaXRpb25Jbml0aWFsaXplci5yZWdpc3Rlcih0aGlzLmRlZmluZWRBZ2dyZWdhdGUpO1xuXHRcdHRoaXMuY29tbWFuZEhhbmRsZXJJbml0aWFsaXplci5yZWdpc3Rlcih0aGlzLmNvbW1hbmRIYW5kbGVycyk7XG5cdFx0dGhpcy5jb21tYW5kSGFuZGxlckluaXRpYWxpemVyLnJlZ2lzdGVyQWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKHRoaXMuYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKTtcblx0XHR0aGlzLmRvbWFpbkV2ZW50SGFuZGxlckluaXRpYWxpemVyLmluaXQodGhpcy5ldmVudEhhbmRsZXJzKTtcblxuXHRcdHRoaXMuc3RhcnRlZCA9IHRydWU7XG5cdH1cblxuXHRkZXN0cm95KCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZEhhbmRsZXJJbml0aWFsaXplci5vbkRlc3Ryb3koKTtcblx0XHR0aGlzLmRvbWFpbkV2ZW50SGFuZGxlckluaXRpYWxpemVyLm9uRGVzdHJveSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBjaGVja051bGxDb21tYW5kKFxuXHRcdGNvbW1hbmRIYW5kbGVyczogQXJyYXk8Q29tbWFuZEhhbmRsZXJJbXBsPEksIEEsIEM+Pixcblx0XHRhZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnM6IEFycmF5PENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbDxJLCBBLCBDPj5cblx0KTogdm9pZCB7XG5cblx0XHR0aGlzLmNvbW1hbmRCdXNcblx0XHRcdC5vZk51bGxIYW5kbGVyKGNvbW1hbmRIYW5kbGVycywgYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKVxuXHRcdFx0LnBpcGUodGhpcy5oZXJtZXNUYWtlVW50aWwoKSlcblx0XHRcdC5zdWJzY3JpYmUoKGNvbW1hbmQ6IEMpID0+IHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdFx0Y29uc29sZS5lcnJvcihgQ29tbWFuZCAke2NvbW1hbmQudG9TdHJpbmcoKX0gd2FzIG5vdCBpbnRlcmNlcHRlZCBieSBhbnkgQ29tbWFuZEhhbmRsZXIuYCk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgY2hlY2tDb21tYW5kSGFuZGxlcklzQ29sbGVjdGlvbihjb21tYW5kSGFuZGxlcnM6IEFycmF5PENvbW1hbmRIYW5kbGVySW1wbDxJLCBBLCBDPj4pOiB2b2lkIHtcblx0XHRpZiAoY29tbWFuZEhhbmRsZXJzICYmICFBcnJheS5pc0FycmF5KGNvbW1hbmRIYW5kbGVycykpIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cdFx0XHRjb25zb2xlLndhcm4oJ1lvdSBtaWdodCBwcm92aWRlZCBjb21tYW5kSGFuZGxlciB3aXRob3V0IHNwZWNpZnlpbmcgXCJtdWx0aTogdHJ1ZVwiLicpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY2hlY2tEb21haW5FdmVudEhhbmRsZXJJc0NvbGxlY3Rpb24oZXZlbnRIYW5kbGVyczogQXJyYXk8RG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPj4pOiB2b2lkIHtcblx0XHRpZiAoZXZlbnRIYW5kbGVycyAmJiAhQXJyYXkuaXNBcnJheShldmVudEhhbmRsZXJzKSkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdGNvbnNvbGUud2FybignWW91IG1pZ2h0IHByb3ZpZGVkIGV2ZW50SGFuZGxlciB3aXRob3V0IHNwZWNpZnlpbmcgXCJtdWx0aTogdHJ1ZVwiLicpO1xuXHRcdH1cblx0fVxufVxuIl19