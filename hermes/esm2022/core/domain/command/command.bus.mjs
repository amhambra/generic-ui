import { CommandStream } from './command.stream';
import { HermesObservable } from '../../../common/stream/core/observable/hermes.observable';
import { hermesFilter } from '../../../common/stream/core/operator/hermes.filter';
export class CommandBus extends HermesObservable {
    commandsStream;
    constructor(commandsStream) {
        super();
        this.commandsStream = commandsStream;
    }
    static services = [CommandStream];
    subscribe() {
        return this.commandsStream.toObservable().subscribe(arguments[0], arguments[1], arguments[2]);
    }
    ofCommandHandler(...handlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            return handlers.some((handler) => {
                return handler.forCommand(command);
            });
        }));
    }
    ofCreateAggregateHandler(...handlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            return handlers.some((handler) => {
                return handler.forCommand(command);
            });
        }));
    }
    ofNullHandler(handlers, aggregateCommandHandlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            if (!handlers && !aggregateCommandHandlers) {
                return true;
            }
            let foundHandlerForCommand = true;
            if (handlers) {
                foundHandlerForCommand =
                    !handlers.some((handler) => {
                        return handler.forCommand(command);
                    });
            }
            if (aggregateCommandHandlers) {
                foundHandlerForCommand = foundHandlerForCommand &&
                    !aggregateCommandHandlers.some((handler) => {
                        return handler.forCommand(command);
                    });
            }
            return foundHandlerForCommand;
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5idXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29yZS9kb21haW4vY29tbWFuZC9jb21tYW5kLmJ1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDNUYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBRWxGLE1BQU0sT0FBTyxVQUFxQyxTQUFRLGdCQUFtQjtJQUUvQztJQUE3QixZQUE2QixjQUE2QjtRQUN6RCxLQUFLLEVBQUUsQ0FBQztRQURvQixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtJQUUxRCxDQUFDO0lBRUQsTUFBTSxDQUFVLFFBQVEsR0FBRyxDQUFDLGFBQWEsQ0FBVSxDQUFDO0lBVTNDLFNBQVM7UUFDakIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxHQUFHLFFBQWtHO1FBQ3JILE9BQVEsSUFBd0I7YUFDOUIsY0FBYzthQUNkLFlBQVksRUFBRTthQUNkLElBQUksQ0FDSixZQUFZLENBQUMsQ0FBQyxPQUE2QixFQUFFLEVBQUU7WUFDOUMsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBMEYsRUFBRSxFQUFFO2dCQUNuSCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QixDQUN2QixHQUFHLFFBQTJHO1FBRzlHLE9BQVEsSUFBd0I7YUFDOUIsY0FBYzthQUNkLFlBQVksRUFBRTthQUNkLElBQUksQ0FDSixZQUFZLENBQUMsQ0FBQyxPQUErQixFQUFFLEVBQUU7WUFDaEQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBbUcsRUFBRSxFQUFFO2dCQUM1SCxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELGFBQWEsQ0FDWixRQUFrRyxFQUNsRyx3QkFBbUk7UUFHbkksT0FBUSxJQUF3QjthQUM5QixjQUFjO2FBQ2QsWUFBWSxFQUFFO2FBQ2QsSUFBSSxDQUNKLFlBQVksQ0FBQyxDQUFDLE9BQTZCLEVBQUUsRUFBRTtZQUU5QyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Z0JBQzNDLE9BQU8sSUFBSSxDQUFDO2FBQ1o7WUFFRCxJQUFJLHNCQUFzQixHQUFHLElBQUksQ0FBQztZQUVsQyxJQUFJLFFBQVEsRUFBRTtnQkFDYixzQkFBc0I7b0JBQ3JCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQTBGLEVBQUUsRUFBRTt3QkFDN0csT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNwQyxDQUFDLENBQUMsQ0FBQzthQUNKO1lBRUQsSUFBSSx3QkFBd0IsRUFBRTtnQkFDN0Isc0JBQXNCLEdBQUcsc0JBQXNCO29CQUM5QyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLE9BQXdGLEVBQUUsRUFBRTt3QkFDM0gsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNwQyxDQUFDLENBQUMsQ0FBQzthQUNKO1lBRUQsT0FBTyxzQkFBc0IsQ0FBQztRQUUvQixDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tICcuLi8uLi9hcGkvY29tbWFuZC9jb21tYW5kJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZVJvb3QgfSBmcm9tICcuLi8uLi9hcGkvdGFjdGljYWwvYWdncmVnYXRlL2FnZ3JlZ2F0ZS1yb290JztcbmltcG9ydCB7IENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbCB9IGZyb20gJy4vY3JlYXRlLWFnZ3JlZ2F0ZS9jcmVhdGUtYWdncmVnYXRlLmNvbW1hbmQtaGFuZGxlci1pbXBsJztcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVySW1wbCB9IGZyb20gJy4vaGFuZGxlci9jb21tYW5kLWhhbmRsZXItaW1wbCc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVJZCB9IGZyb20gJy4uLy4uL2FwaS90YWN0aWNhbC9hZ2dyZWdhdGUvYWdncmVnYXRlLWlkJztcbmltcG9ydCB7IENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmQgfSBmcm9tICcuL2NyZWF0ZS1hZ2dyZWdhdGUvY3JlYXRlLWFnZ3JlZ2F0ZS5jb21tYW5kJztcbmltcG9ydCB7IENvbW1hbmRTdHJlYW0gfSBmcm9tICcuL2NvbW1hbmQuc3RyZWFtJztcbmltcG9ydCB7IEhlcm1lc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9zdHJlYW0vY29yZS9zdWJzY3JpcHRpb24vaGVybWVzLnN1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBIZXJtZXNTdWJzY3JpYmVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvc3Vic2NyaWJlci9oZXJtZXMuc3Vic2NyaWJlcic7XG5pbXBvcnQgeyBIZXJtZXNPYnNlcnZhYmxlIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvaGVybWVzLm9ic2VydmFibGUnO1xuaW1wb3J0IHsgaGVybWVzRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3N0cmVhbS9jb3JlL29wZXJhdG9yL2hlcm1lcy5maWx0ZXInO1xuXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJ1czxDID0gQ29tbWFuZDxBZ2dyZWdhdGVJZD4+IGV4dGVuZHMgSGVybWVzT2JzZXJ2YWJsZTxDPiB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb21tYW5kc1N0cmVhbTogQ29tbWFuZFN0cmVhbSkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRzdGF0aWMgcmVhZG9ubHkgc2VydmljZXMgPSBbQ29tbWFuZFN0cmVhbV0gYXMgY29uc3Q7XG5cblx0b3ZlcnJpZGUgc3Vic2NyaWJlKFxuXHRcdG5leHQ/OiAodmFsdWU6IEMpID0+IHZvaWQsXG5cdFx0ZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCxcblx0XHRjb21wbGV0ZT86ICgpID0+IHZvaWRcblx0KTogSGVybWVzU3Vic2NyaXB0aW9uO1xuXHRvdmVycmlkZSBzdWJzY3JpYmUoXG5cdFx0c3Vic2NyaWJlcjogSGVybWVzU3Vic2NyaWJlcjxDPlxuXHQpOiBIZXJtZXNTdWJzY3JpcHRpb247XG5cdG92ZXJyaWRlIHN1YnNjcmliZSgpOiBIZXJtZXNTdWJzY3JpcHRpb24ge1xuXHRcdHJldHVybiB0aGlzLmNvbW1hbmRzU3RyZWFtLnRvT2JzZXJ2YWJsZSgpLnN1YnNjcmliZShhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcblx0fVxuXG5cdG9mQ29tbWFuZEhhbmRsZXIoLi4uaGFuZGxlcnM6IEFycmF5PENvbW1hbmRIYW5kbGVySW1wbDxBZ2dyZWdhdGVJZCwgQWdncmVnYXRlUm9vdDxBZ2dyZWdhdGVJZD4sIENvbW1hbmQ8QWdncmVnYXRlSWQ+Pj4pOiBhbnkge1xuXHRcdHJldHVybiAodGhpcyBhcyBDb21tYW5kQnVzPGFueT4pXG5cdFx0XHQuY29tbWFuZHNTdHJlYW1cblx0XHRcdC50b09ic2VydmFibGUoKVxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdGhlcm1lc0ZpbHRlcigoY29tbWFuZDogQ29tbWFuZDxBZ2dyZWdhdGVJZD4pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlcnMuc29tZSgoaGFuZGxlcjogQ29tbWFuZEhhbmRsZXJJbXBsPEFnZ3JlZ2F0ZUlkLCBBZ2dyZWdhdGVSb290PEFnZ3JlZ2F0ZUlkPiwgQ29tbWFuZDxBZ2dyZWdhdGVJZD4+KSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlci5mb3JDb21tYW5kKGNvbW1hbmQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0fVxuXG5cdG9mQ3JlYXRlQWdncmVnYXRlSGFuZGxlcihcblx0XHQuLi5oYW5kbGVyczogQXJyYXk8Q3JlYXRlQWdncmVnYXRlQ29tbWFuZEhhbmRsZXJJbXBsPGFueSwgQWdncmVnYXRlUm9vdDxBZ2dyZWdhdGVJZD4sIENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmQ+PlxuXHQpOiBhbnkge1xuXG5cdFx0cmV0dXJuICh0aGlzIGFzIENvbW1hbmRCdXM8YW55Pilcblx0XHRcdC5jb21tYW5kc1N0cmVhbVxuXHRcdFx0LnRvT2JzZXJ2YWJsZSgpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0aGVybWVzRmlsdGVyKChjb21tYW5kOiBDcmVhdGVBZ2dyZWdhdGVDb21tYW5kKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGhhbmRsZXJzLnNvbWUoKGhhbmRsZXI6IENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbDxhbnksIEFnZ3JlZ2F0ZVJvb3Q8QWdncmVnYXRlSWQ+LCBDcmVhdGVBZ2dyZWdhdGVDb21tYW5kPikgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhhbmRsZXIuZm9yQ29tbWFuZChjb21tYW5kKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdH1cblxuXHRvZk51bGxIYW5kbGVyKFxuXHRcdGhhbmRsZXJzOiBBcnJheTxDb21tYW5kSGFuZGxlckltcGw8QWdncmVnYXRlSWQsIEFnZ3JlZ2F0ZVJvb3Q8QWdncmVnYXRlSWQ+LCBDb21tYW5kPEFnZ3JlZ2F0ZUlkPj4+LFxuXHRcdGFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVyczogQXJyYXk8Q3JlYXRlQWdncmVnYXRlQ29tbWFuZEhhbmRsZXJJbXBsPEFnZ3JlZ2F0ZUlkLCBBZ2dyZWdhdGVSb290PEFnZ3JlZ2F0ZUlkPiwgQ3JlYXRlQWdncmVnYXRlQ29tbWFuZD4+XG5cdCk6IGFueSB7XG5cblx0XHRyZXR1cm4gKHRoaXMgYXMgQ29tbWFuZEJ1czxhbnk+KVxuXHRcdFx0LmNvbW1hbmRzU3RyZWFtXG5cdFx0XHQudG9PYnNlcnZhYmxlKClcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRoZXJtZXNGaWx0ZXIoKGNvbW1hbmQ6IENvbW1hbmQ8QWdncmVnYXRlSWQ+KSA9PiB7XG5cblx0XHRcdFx0XHRpZiAoIWhhbmRsZXJzICYmICFhZ2dyZWdhdGVDb21tYW5kSGFuZGxlcnMpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxldCBmb3VuZEhhbmRsZXJGb3JDb21tYW5kID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmIChoYW5kbGVycykge1xuXHRcdFx0XHRcdFx0Zm91bmRIYW5kbGVyRm9yQ29tbWFuZCA9XG5cdFx0XHRcdFx0XHRcdCFoYW5kbGVycy5zb21lKChoYW5kbGVyOiBDb21tYW5kSGFuZGxlckltcGw8QWdncmVnYXRlSWQsIEFnZ3JlZ2F0ZVJvb3Q8QWdncmVnYXRlSWQ+LCBDb21tYW5kPEFnZ3JlZ2F0ZUlkPj4pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlci5mb3JDb21tYW5kKGNvbW1hbmQpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzKSB7XG5cdFx0XHRcdFx0XHRmb3VuZEhhbmRsZXJGb3JDb21tYW5kID0gZm91bmRIYW5kbGVyRm9yQ29tbWFuZCAmJlxuXHRcdFx0XHRcdFx0XHQhYWdncmVnYXRlQ29tbWFuZEhhbmRsZXJzLnNvbWUoKGhhbmRsZXI6IENyZWF0ZUFnZ3JlZ2F0ZUNvbW1hbmRIYW5kbGVySW1wbDxBZ2dyZWdhdGVJZCwgQWdncmVnYXRlUm9vdDxBZ2dyZWdhdGVJZD4sIGFueT4pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlci5mb3JDb21tYW5kKGNvbW1hbmQpO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gZm91bmRIYW5kbGVyRm9yQ29tbWFuZDtcblxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0fVxuXG59XG4iXX0=