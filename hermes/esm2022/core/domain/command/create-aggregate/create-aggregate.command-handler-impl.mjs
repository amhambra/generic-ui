import { AggregateFactoryArchive, AggregateRepositoryArchive } from '../config/define';
import { DomainEventPublisher } from '../../event/domain-event.publisher';
import { CoreContainer } from '../../../api/core.container';
export function createAggregateCommandHandlerFactory(createAggregateCommandHandler, aggregateName) {
    return new CreateAggregateCommandHandlerImpl(createAggregateCommandHandler, aggregateName);
}
export class CreateAggregateCommandHandlerImpl {
    createAggregateCommandHandler;
    aggregateType;
    aggregateFactoryArchive = CoreContainer.resolve(AggregateFactoryArchive);
    aggregateRepositoryArchive = CoreContainer.resolve(AggregateRepositoryArchive);
    domainEventPublisher = CoreContainer.resolve(DomainEventPublisher);
    commandType;
    constructor(createAggregateCommandHandler, aggregateType) {
        this.createAggregateCommandHandler = createAggregateCommandHandler;
        this.aggregateType = aggregateType;
        this.commandType = this.createCommandInstance().getMessageType();
    }
    handleCommand(command) {
        const aggregateId = command.getAggregateId();
        const optFactory = this.aggregateFactoryArchive.get(this.aggregateType);
        optFactory.ifPresent((factory) => {
            const aggregate = factory.create(aggregateId);
            const type = aggregate.getType(), createCommandConstructor = aggregate.createEvent();
            const createCommand = new createCommandConstructor(aggregateId, type);
            aggregate.addEvent(createCommand);
            const optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);
            optRepository.ifPresent((repo) => {
                repo.save(aggregate);
                this.domainEventPublisher.publishFromAggregate(aggregate);
            });
        });
    }
    forCommand(command) {
        return this.commandType === command.getMessageType();
    }
    createCommandInstance() {
        const args = [], argumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;
        args.fill(undefined, 0, argumentLength);
        if (args.length === 0) {
            return (new (this.createAggregateCommandHandler.forCommand())());
        }
        else if (args.length === 1) {
            return (new (this.createAggregateCommandHandler.forCommand())(args[0]));
        }
        else if (args.length === 2) {
            return (new (this.createAggregateCommandHandler.forCommand())(args[0], args[1]));
        }
        else if (args.length === 3) {
            return (new (this.createAggregateCommandHandler.forCommand())(args[0], args[1], args[2]));
        }
        else if (args.length === 4) {
            return (new (this.createAggregateCommandHandler.forCommand())(args[0], args[1], args[2], args[3]));
        }
        else if (args.length === 5) {
            return (new (this.createAggregateCommandHandler.forCommand())(args[0], args[1], args[2], args[3], args[4]));
        }
        else {
            throw new Error('CreateAggregateCommandHandlerImpl constructor out of arguments');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,