import { AggregateRepositoryArchive } from '../config/define';
import { CoreContainer } from '../../../api/core.container';
import { DomainEventPublisher } from '../../event/domain-event.publisher';
export function commandHandlerFactory(commandHandler, aggregateName) {
    return new CommandHandlerImpl(commandHandler, aggregateName);
}
export class CommandHandlerImpl {
    commandHandler;
    aggregateType;
    aggregateRepositoryArchive = CoreContainer.resolve(AggregateRepositoryArchive);
    domainEventPublisher = CoreContainer.resolve(DomainEventPublisher);
    commandType;
    constructor(commandHandler, aggregateType) {
        this.commandHandler = commandHandler;
        this.aggregateType = aggregateType;
        this.commandType = this.createCommandInstance().getMessageType();
    }
    publishDomainEvents(aggregate, command) {
        if (this.commandHandler.publish) {
            this.commandHandler.publish(aggregate, command);
        }
        else {
            this.domainEventPublisher.publishFromAggregate(aggregate);
        }
    }
    handleCommand(command) {
        const aggregateId = command.getAggregateId();
        const optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);
        optRepository.ifPresent((repo) => {
            const optAggregate = repo.findById(aggregateId);
            optAggregate.ifPresent((aggregate) => {
                this.commandHandler.handle(aggregate, command);
                this.publishDomainEvents(aggregate, command);
            });
        });
    }
    forCommand(command) {
        return this.commandType === command.getMessageType();
    }
    createCommandInstance() {
        const args = [], argumentLength = this.commandHandler.forCommand().constructor.length;
        args.fill(undefined, 0, argumentLength);
        if (args.length === 0) {
            return (new (this.commandHandler.forCommand())());
        }
        else if (args.length === 1) {
            return (new (this.commandHandler.forCommand())(args[0]));
        }
        else if (args.length === 2) {
            return (new (this.commandHandler.forCommand())(args[0], args[1]));
        }
        else if (args.length === 3) {
            return (new (this.commandHandler.forCommand())(args[0], args[1], args[2]));
        }
        else if (args.length === 4) {
            return (new (this.commandHandler.forCommand())(args[0], args[1], args[2], args[3]));
        }
        else if (args.length === 5) {
            return (new (this.commandHandler.forCommand())(args[0], args[1], args[2], args[3], args[4]));
        }
        else {
            throw new Error('CommandHandlerImpl constructor out of arguments');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,