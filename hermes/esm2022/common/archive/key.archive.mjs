import { ReactiveService } from '../reactive/reactive.service';
import { KeyMap } from '../collection/key-map';
import { Optional } from '../optional';
import { hermesFilter } from '../stream/core/operator/hermes.filter';
import { hermesMap } from '../stream/core/operator/hermes.map';
import { hermesDistinctUntilChanged } from '../stream/core/operator/hermes.distinct-until-changed';
import { HermesArchiveSubject } from '../stream/core/observable/hermes.archive-subject';
import { singleFromObservable } from '../stream/core/observable/single/hermes.single-from-observable';
export class KeyArchive extends ReactiveService {
    archive = new KeyMap();
    archive$;
    defaultValue = Optional.empty();
    constructor(defaultValue) {
        super();
        this.archive$ = HermesArchiveSubject.of();
        if (defaultValue !== undefined && defaultValue !== null) {
            this.defaultValue = Optional.of(defaultValue);
        }
    }
    on(key) {
        this.tryToInitDefault(key);
        return this.archive$
            .toObservable()
            .pipe(hermesFilter(() => this.isNotStopped()), hermesMap((map) => {
            return map.find(key);
        }), hermesFilter((value) => value.isPresent()), hermesMap((value) => value.getValueOrNullOrThrowError()), hermesDistinctUntilChanged(this.equals), this.hermesTakeUntil());
    }
    once(key) {
        return singleFromObservable(this.on(key));
    }
    find(key) {
        this.tryToInitDefault(key);
        return this.archive.find(key);
    }
    next(key, value) {
        this.archive.set(key, value);
        this.archive$.next(this.archive);
    }
    equals(a, b) {
        return a === b;
    }
    createDefaultValue(defaultValue) {
        return defaultValue;
    }
    tryToInitDefault(key) {
        this.defaultValue
            .ifPresent((value) => {
            if (!this.archive.has(key)) {
                this.next(key, value);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LmFyY2hpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29tbW9uL2FyY2hpdmUva2V5LmFyY2hpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDbkcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFJeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0VBQWdFLENBQUM7QUFHdEcsTUFBTSxPQUFnQixVQUE2QixTQUFRLGVBQWU7SUFFeEQsT0FBTyxHQUFHLElBQUksTUFBTSxFQUFRLENBQUM7SUFFN0IsUUFBUSxDQUFxQztJQUV0RCxZQUFZLEdBQWdCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVyRCxZQUFzQixZQUFnQjtRQUNyQyxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxRQUFRLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxFQUFFLENBQUM7UUFFMUMsSUFBSSxZQUFZLEtBQUssU0FBUyxJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzlDO0lBQ0YsQ0FBQztJQUVELEVBQUUsQ0FBQyxHQUFNO1FBRVIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDLFFBQVE7YUFDZCxZQUFZLEVBQUU7YUFDZCxJQUFJLENBQ0osWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUN2QyxTQUFTLENBQUMsQ0FBQyxHQUFpQixFQUFFLEVBQUU7WUFDL0IsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxFQUNGLFlBQVksQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUN2RCxTQUFTLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsQ0FBQyxFQUNyRSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FDdEIsQ0FBQztJQUNSLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBTTtRQUNWLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBTTtRQUVWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBTSxFQUFFLEtBQVE7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRVMsTUFBTSxDQUFDLENBQUksRUFBRSxDQUFJO1FBQzFCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRVMsa0JBQWtCLENBQUMsWUFBZTtRQUMzQyxPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsR0FBTTtRQUM5QixJQUFJLENBQUMsWUFBWTthQUNmLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBRXBCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDdEI7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0aXZlU2VydmljZSB9IGZyb20gJy4uL3JlYWN0aXZlL3JlYWN0aXZlLnNlcnZpY2UnO1xuaW1wb3J0IHsgS2V5TWFwIH0gZnJvbSAnLi4vY29sbGVjdGlvbi9rZXktbWFwJztcbmltcG9ydCB7IE9wdGlvbmFsIH0gZnJvbSAnLi4vb3B0aW9uYWwnO1xuaW1wb3J0IHsgaGVybWVzRmlsdGVyIH0gZnJvbSAnLi4vc3RyZWFtL2NvcmUvb3BlcmF0b3IvaGVybWVzLmZpbHRlcic7XG5pbXBvcnQgeyBoZXJtZXNNYXAgfSBmcm9tICcuLi9zdHJlYW0vY29yZS9vcGVyYXRvci9oZXJtZXMubWFwJztcbmltcG9ydCB7IGhlcm1lc0Rpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAnLi4vc3RyZWFtL2NvcmUvb3BlcmF0b3IvaGVybWVzLmRpc3RpbmN0LXVudGlsLWNoYW5nZWQnO1xuaW1wb3J0IHsgSGVybWVzQXJjaGl2ZVN1YmplY3QgfSBmcm9tICcuLi9zdHJlYW0vY29yZS9vYnNlcnZhYmxlL2hlcm1lcy5hcmNoaXZlLXN1YmplY3QnO1xuaW1wb3J0IHsgSGVybWVzT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvaGVybWVzLm9ic2VydmFibGUnO1xuaW1wb3J0IHsgS2V5IH0gZnJvbSAnLi4vY29sbGVjdGlvbi9rZXknO1xuaW1wb3J0IHsgSGVybWVzU2luZ2xlIH0gZnJvbSAnLi4vc3RyZWFtL2NvcmUvb2JzZXJ2YWJsZS9zaW5nbGUvaGVybWVzLnNpbmdsZSc7XG5pbXBvcnQgeyBzaW5nbGVGcm9tT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N0cmVhbS9jb3JlL29ic2VydmFibGUvc2luZ2xlL2hlcm1lcy5zaW5nbGUtZnJvbS1vYnNlcnZhYmxlJztcblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgS2V5QXJjaGl2ZTxLIGV4dGVuZHMgS2V5LCBUPiBleHRlbmRzIFJlYWN0aXZlU2VydmljZSB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBhcmNoaXZlID0gbmV3IEtleU1hcDxLLCBUPigpO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgYXJjaGl2ZSQ6IEhlcm1lc0FyY2hpdmVTdWJqZWN0PEtleU1hcDxLLCBUPj47XG5cblx0cHJpdmF0ZSBkZWZhdWx0VmFsdWU6IE9wdGlvbmFsPFQ+ID0gT3B0aW9uYWwuZW1wdHkoKTtcblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoZGVmYXVsdFZhbHVlPzogVCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmFyY2hpdmUkID0gSGVybWVzQXJjaGl2ZVN1YmplY3Qub2YoKTtcblxuXHRcdGlmIChkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0VmFsdWUgIT09IG51bGwpIHtcblx0XHRcdHRoaXMuZGVmYXVsdFZhbHVlID0gT3B0aW9uYWwub2YoZGVmYXVsdFZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHRvbihrZXk6IEspOiBIZXJtZXNPYnNlcnZhYmxlPFQ+IHtcblxuXHRcdHRoaXMudHJ5VG9Jbml0RGVmYXVsdChrZXkpO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJjaGl2ZSRcblx0XHRcdFx0ICAgLnRvT2JzZXJ2YWJsZSgpXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc0ZpbHRlcigoKSA9PiB0aGlzLmlzTm90U3RvcHBlZCgpKSxcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKG1hcDogS2V5TWFwPEssIFQ+KSA9PiB7XG5cdFx0XHRcdFx0XHQgICByZXR1cm4gbWFwLmZpbmQoa2V5KTtcblx0XHRcdFx0XHQgICB9KSxcblx0XHRcdFx0XHQgICBoZXJtZXNGaWx0ZXIoKHZhbHVlOiBPcHRpb25hbDxUPikgPT4gdmFsdWUuaXNQcmVzZW50KCkpLFxuXHRcdFx0XHRcdCAgIGhlcm1lc01hcCgodmFsdWU6IE9wdGlvbmFsPFQ+KSA9PiB2YWx1ZS5nZXRWYWx1ZU9yTnVsbE9yVGhyb3dFcnJvcigpKSxcblx0XHRcdFx0XHQgICBoZXJtZXNEaXN0aW5jdFVudGlsQ2hhbmdlZCh0aGlzLmVxdWFscyksXG5cdFx0XHRcdFx0ICAgdGhpcy5oZXJtZXNUYWtlVW50aWwoKVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0b25jZShrZXk6IEspOiBIZXJtZXNTaW5nbGU8VD4ge1xuXHRcdHJldHVybiBzaW5nbGVGcm9tT2JzZXJ2YWJsZSh0aGlzLm9uKGtleSkpO1xuXHR9XG5cblx0ZmluZChrZXk6IEspOiBPcHRpb25hbDxUPiB7XG5cblx0XHR0aGlzLnRyeVRvSW5pdERlZmF1bHQoa2V5KTtcblxuXHRcdHJldHVybiB0aGlzLmFyY2hpdmUuZmluZChrZXkpO1xuXHR9XG5cblx0bmV4dChrZXk6IEssIHZhbHVlOiBUKTogdm9pZCB7XG5cdFx0dGhpcy5hcmNoaXZlLnNldChrZXksIHZhbHVlKTtcblx0XHR0aGlzLmFyY2hpdmUkLm5leHQodGhpcy5hcmNoaXZlKTtcblx0fVxuXG5cdHByb3RlY3RlZCBlcXVhbHMoYTogVCwgYjogVCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBhID09PSBiO1xuXHR9XG5cblx0cHJvdGVjdGVkIGNyZWF0ZURlZmF1bHRWYWx1ZShkZWZhdWx0VmFsdWU6IFQpOiBUIHtcblx0XHRyZXR1cm4gZGVmYXVsdFZhbHVlO1xuXHR9XG5cblx0cHJpdmF0ZSB0cnlUb0luaXREZWZhdWx0KGtleTogSyk6IHZvaWQge1xuXHRcdHRoaXMuZGVmYXVsdFZhbHVlXG5cdFx0XHQuaWZQcmVzZW50KCh2YWx1ZSkgPT4ge1xuXG5cdFx0XHRcdGlmICghdGhpcy5hcmNoaXZlLmhhcyhrZXkpKSB7XG5cdFx0XHRcdFx0dGhpcy5uZXh0KGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxuXG59XG4iXX0=