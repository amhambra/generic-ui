import { Optional } from '../optional';
export class KeyMap {
    keys = new Map();
    values = new WeakMap();
    find(key) {
        const internalKey = this.getInternalKey(key);
        if (internalKey !== undefined) {
            return Optional.of(this.values.get(internalKey));
        }
        else {
            return Optional.empty();
        }
    }
    has(key) {
        const internalKey = this.getInternalKey(key);
        return this.values.has(internalKey);
    }
    set(key, value) {
        this.keys.set(key.toString(), key);
        this.values.set(key, value);
    }
    size() {
        return this.keys.size;
    }
    remove(key) {
        if (this.hasInternalKey(key)) {
            this.keys.delete(key.toString());
            this.values.delete(key);
        }
    }
    removeAll() {
        this.keys.forEach((value) => {
            this.values.delete(value);
        });
        this.keys.clear();
    }
    getInternalKey(key) {
        return this.keys.get(key.toString());
    }
    hasInternalKey(key) {
        return this.keys.has(key.toString());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LW1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb21tb24vY29sbGVjdGlvbi9rZXktbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdkMsTUFBTSxPQUFPLE1BQU07SUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWEsQ0FBQztJQUU1QixNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUU5QyxJQUFJLENBQUMsR0FBTTtRQUVWLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0MsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzlCLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDTixPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN4QjtJQUNGLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBTTtRQUVULE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQU0sRUFBRSxLQUFRO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUk7UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBTTtRQUNaLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtJQUNGLENBQUM7SUFFRCxTQUFTO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVPLGNBQWMsQ0FBQyxHQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVPLGNBQWMsQ0FBQyxHQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2V5IH0gZnJvbSAnLi9rZXknO1xuaW1wb3J0IHsgT3B0aW9uYWwgfSBmcm9tICcuLi9vcHRpb25hbCc7XG5cbmV4cG9ydCBjbGFzcyBLZXlNYXA8SyBleHRlbmRzIEtleSwgVD4ge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkga2V5cyA9IG5ldyBNYXA8c3RyaW5nLCBLPigpO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgdmFsdWVzID0gbmV3IFdlYWtNYXA8SywgVD4oKTtcblxuXHRmaW5kKGtleTogSyk6IE9wdGlvbmFsPFQ+IHtcblxuXHRcdGNvbnN0IGludGVybmFsS2V5ID0gdGhpcy5nZXRJbnRlcm5hbEtleShrZXkpO1xuXG5cdFx0aWYgKGludGVybmFsS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiBPcHRpb25hbC5vZih0aGlzLnZhbHVlcy5nZXQoaW50ZXJuYWxLZXkpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIE9wdGlvbmFsLmVtcHR5KCk7XG5cdFx0fVxuXHR9XG5cblx0aGFzKGtleTogSyk6IGJvb2xlYW4ge1xuXG5cdFx0Y29uc3QgaW50ZXJuYWxLZXkgPSB0aGlzLmdldEludGVybmFsS2V5KGtleSk7XG5cblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaGFzKGludGVybmFsS2V5KTtcblx0fVxuXG5cdHNldChrZXk6IEssIHZhbHVlOiBUKTogdm9pZCB7XG5cdFx0dGhpcy5rZXlzLnNldChrZXkudG9TdHJpbmcoKSwga2V5KTtcblx0XHR0aGlzLnZhbHVlcy5zZXQoa2V5LCB2YWx1ZSk7XG5cdH1cblxuXHRzaXplKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMua2V5cy5zaXplO1xuXHR9XG5cblx0cmVtb3ZlKGtleTogSyk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmhhc0ludGVybmFsS2V5KGtleSkpIHtcblx0XHRcdHRoaXMua2V5cy5kZWxldGUoa2V5LnRvU3RyaW5nKCkpO1xuXHRcdFx0dGhpcy52YWx1ZXMuZGVsZXRlKGtleSk7XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlQWxsKCk6IHZvaWQge1xuXHRcdHRoaXMua2V5cy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuXHRcdFx0dGhpcy52YWx1ZXMuZGVsZXRlKHZhbHVlKTtcblx0XHR9KTtcblx0XHR0aGlzLmtleXMuY2xlYXIoKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0SW50ZXJuYWxLZXkoa2V5OiBLKTogSyB7XG5cdFx0cmV0dXJuIHRoaXMua2V5cy5nZXQoa2V5LnRvU3RyaW5nKCkpO1xuXHR9XG5cblx0cHJpdmF0ZSBoYXNJbnRlcm5hbEtleShrZXk6IEspOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5rZXlzLmhhcyhrZXkudG9TdHJpbmcoKSk7XG5cdH1cblxufVxuIl19