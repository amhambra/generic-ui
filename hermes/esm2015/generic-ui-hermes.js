/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { HermesApi, enableHermesLoggers, disableHermesLoggers, provideEventHandlers, CommandDispatcher, Command, CommandType, AggregateFactory, CommandBus, CommandLogger, CommandStream, AggregateEvent, AggregateEventType, AggregateRepository, AggregateStore, AggregateStoreRegister, AggregateRoot, AggregateId, DomainEvent, DomainEventPublisher, DomainEventBus, DomainEventType, EventDrivenRepository, DomainEventLogger, DomainEventStream, ReadModelEntity, ReadModelEntityId, ReadModelRoot, ReadModelRootId, ReadModelRootRepository, ReadModelStore, EventRepository, Entity, EntityId, HermesId, ValueObject, DomainObject, ReadModelObject, DomainModule, ApiModule, FeatureModule, HermesArchiveSubject, HermesBehaviorSubject, HermesObservable, hermesOf, hermesNever, hermesEmpty, hermesInterval, hermesTimer, hermesFromEvent, HermesReplaySubject, HermesSingle, singleFromObservable, HermesSubject, hermesThrowError, hermesDistinctUntilChanged, hermesFilter, hermesMap, hermesSkip, hermesSwitchMap, hermesTake, hermesTakeUntil, hermesTap, hermesToArray, HermesSubscription, toRxJsObservable, fromRxJsObservable, AggregateArchive, Archive, RandomStringGenerator, Optional, ReactiveService, Reactive, KeyMap, PersistAnemia, PersistStateStore, PersistReadModelStore, PersistAggregateStore, InMemoryAggregateStore, InMemoryReadModelStore, InMemoryStore, HermesModule, COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, assertDomainEvents, assertAggregateEvents, testEventRepositoryIsEmptyOnStart, testWarehouseDefaultValueOnStart, testWarehouseDefaultValueOnStartOnce, CreateAggregateCommand } from './public-api';
export { KeyArchive as ɵh } from './common/key.archive';
export { HermesDomainModule as ɵu } from './core/api/hermes.domain.module';
export { HermesLoggersInitializer as ɵp } from './core/api/hermes.loggers.initializer';
export { HermesBaseModule as ɵc, commandLoggerFactory as ɵa, eventLoggerFactory as ɵb } from './core/api/hermes.module';
export { Logger as ɵd } from './core/api/logger/logger';
export { aggregateDefinitionToken as ɵl } from './core/domain/command/config/aggregate-definition.token';
export { AggregateFactoryArchive as ɵn, AggregateRepositoryArchive as ɵo } from './core/domain/command/config/define';
export { CreateAggregateCommandHandlerImpl as ɵbb, createAggregateCommandHandlerFactory as ɵba } from './core/domain/command/create-aggregate/create-aggregate.command-handler-impl';
export { CREATE_AGGREGATE_COMMAND_HANDLERS as ɵj } from './core/domain/command/create-aggregate/create-aggregate.command-handlers-token';
export { FILTERED_COMMAND_STREAM as ɵf } from './core/domain/command/filtered-command-stream';
export { CommandHandlerImpl as ɵw, commandHandlerFactory as ɵv } from './core/domain/command/handler/command-handler-impl';
export { COMMAND_HANDLERS as ɵk } from './core/domain/command/handler/command-handlers';
export { DomainEventStore as ɵg } from './core/domain/event/domain-event.store';
export { DomainEventHandlerImpl as ɵz, domainEventHandlerFactory as ɵx, multiDomainEventHandlerFactory as ɵy } from './core/domain/event/handler/domain-event-handler-impl';
export { DOMAIN_EVENT_HANDLERS as ɵi } from './core/domain/event/handler/domain-event-handlers';
export { Message as ɵe } from './core/domain/message/message';
export { ConsoleCommandLogger as ɵq } from './core/infrastructure/logger/command/console.command.logger';
export { NoopCommandLogger as ɵr } from './core/infrastructure/logger/command/noop.command.logger';
export { ConsoleEventLogger as ɵs } from './core/infrastructure/logger/event/console.event.logger';
export { NoopEventLogger as ɵt } from './core/infrastructure/logger/event/noop.event.logger';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy11aS1oZXJtZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ2VuZXJpYy11aS9oZXJtZXMvIiwic291cmNlcyI6WyJnZW5lcmljLXVpLWhlcm1lcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUEsa2pEQUFjLGNBQWMsQ0FBQztBQUU3QixPQUFPLEVBQUMsVUFBVSxJQUFJLEVBQUUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxrQkFBa0IsSUFBSSxFQUFFLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6RSxPQUFPLEVBQUMsd0JBQXdCLElBQUksRUFBRSxFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDckYsT0FBTyxFQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBQyxvQkFBb0IsSUFBSSxFQUFFLEVBQUMsa0JBQWtCLElBQUksRUFBRSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDcEgsT0FBTyxFQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUV0RCxPQUFPLEVBQUMsd0JBQXdCLElBQUksRUFBRSxFQUFDLE1BQU0seURBQXlELENBQUM7QUFDdkcsT0FBTyxFQUFDLHVCQUF1QixJQUFJLEVBQUUsRUFBQywwQkFBMEIsSUFBSSxFQUFFLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUNuSCxPQUFPLEVBQUMsaUNBQWlDLElBQUksR0FBRyxFQUFDLG9DQUFvQyxJQUFJLEdBQUcsRUFBQyxNQUFNLDhFQUE4RSxDQUFDO0FBQ2xMLE9BQU8sRUFBQyxpQ0FBaUMsSUFBSSxFQUFFLEVBQUMsTUFBTSxnRkFBZ0YsQ0FBQztBQUN2SSxPQUFPLEVBQUMsdUJBQXVCLElBQUksRUFBRSxFQUFDLE1BQU0sK0NBQStDLENBQUM7QUFDNUYsT0FBTyxFQUFDLGtCQUFrQixJQUFJLEVBQUUsRUFBQyxxQkFBcUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxvREFBb0QsQ0FBQztBQUN4SCxPQUFPLEVBQUMsZ0JBQWdCLElBQUksRUFBRSxFQUFDLE1BQU0sZ0RBQWdELENBQUM7QUFDdEYsT0FBTyxFQUFDLGdCQUFnQixJQUFJLEVBQUUsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyxzQkFBc0IsSUFBSSxFQUFFLEVBQUMseUJBQXlCLElBQUksRUFBRSxFQUFDLDhCQUE4QixJQUFJLEVBQUUsRUFBQyxNQUFNLHVEQUF1RCxDQUFDO0FBQ3hLLE9BQU8sRUFBQyxxQkFBcUIsSUFBSSxFQUFFLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUM5RixPQUFPLEVBQUMsT0FBTyxJQUFJLEVBQUUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBQyxvQkFBb0IsSUFBSSxFQUFFLEVBQUMsTUFBTSw2REFBNkQsQ0FBQztBQUN2RyxPQUFPLEVBQUMsaUJBQWlCLElBQUksRUFBRSxFQUFDLE1BQU0sMERBQTBELENBQUM7QUFDakcsT0FBTyxFQUFDLGtCQUFrQixJQUFJLEVBQUUsRUFBQyxNQUFNLHlEQUF5RCxDQUFDO0FBQ2pHLE9BQU8sRUFBQyxlQUFlLElBQUksRUFBRSxFQUFDLE1BQU0sc0RBQXNELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vcHVibGljLWFwaSc7XG5cbmV4cG9ydCB7S2V5QXJjaGl2ZSBhcyDJtWh9IGZyb20gJy4vY29tbW9uL2tleS5hcmNoaXZlJztcbmV4cG9ydCB7SGVybWVzRG9tYWluTW9kdWxlIGFzIMm1dX0gZnJvbSAnLi9jb3JlL2FwaS9oZXJtZXMuZG9tYWluLm1vZHVsZSc7XG5leHBvcnQge0hlcm1lc0xvZ2dlcnNJbml0aWFsaXplciBhcyDJtXB9IGZyb20gJy4vY29yZS9hcGkvaGVybWVzLmxvZ2dlcnMuaW5pdGlhbGl6ZXInO1xuZXhwb3J0IHtIZXJtZXNCYXNlTW9kdWxlIGFzIMm1Yyxjb21tYW5kTG9nZ2VyRmFjdG9yeSBhcyDJtWEsZXZlbnRMb2dnZXJGYWN0b3J5IGFzIMm1Yn0gZnJvbSAnLi9jb3JlL2FwaS9oZXJtZXMubW9kdWxlJztcbmV4cG9ydCB7TG9nZ2VyIGFzIMm1ZH0gZnJvbSAnLi9jb3JlL2FwaS9sb2dnZXIvbG9nZ2VyJztcbmV4cG9ydCB7QWdncmVnYXRlRGVmaW5pdGlvbiBhcyDJtW19IGZyb20gJy4vY29yZS9kb21haW4vY29tbWFuZC9jb25maWcvYWdncmVnYXRlLWRlZmluaXRpb24nO1xuZXhwb3J0IHthZ2dyZWdhdGVEZWZpbml0aW9uVG9rZW4gYXMgybVsfSBmcm9tICcuL2NvcmUvZG9tYWluL2NvbW1hbmQvY29uZmlnL2FnZ3JlZ2F0ZS1kZWZpbml0aW9uLnRva2VuJztcbmV4cG9ydCB7QWdncmVnYXRlRmFjdG9yeUFyY2hpdmUgYXMgybVuLEFnZ3JlZ2F0ZVJlcG9zaXRvcnlBcmNoaXZlIGFzIMm1b30gZnJvbSAnLi9jb3JlL2RvbWFpbi9jb21tYW5kL2NvbmZpZy9kZWZpbmUnO1xuZXhwb3J0IHtDcmVhdGVBZ2dyZWdhdGVDb21tYW5kSGFuZGxlckltcGwgYXMgybViYixjcmVhdGVBZ2dyZWdhdGVDb21tYW5kSGFuZGxlckZhY3RvcnkgYXMgybViYX0gZnJvbSAnLi9jb3JlL2RvbWFpbi9jb21tYW5kL2NyZWF0ZS1hZ2dyZWdhdGUvY3JlYXRlLWFnZ3JlZ2F0ZS5jb21tYW5kLWhhbmRsZXItaW1wbCc7XG5leHBvcnQge0NSRUFURV9BR0dSRUdBVEVfQ09NTUFORF9IQU5ETEVSUyBhcyDJtWp9IGZyb20gJy4vY29yZS9kb21haW4vY29tbWFuZC9jcmVhdGUtYWdncmVnYXRlL2NyZWF0ZS1hZ2dyZWdhdGUuY29tbWFuZC1oYW5kbGVycy10b2tlbic7XG5leHBvcnQge0ZJTFRFUkVEX0NPTU1BTkRfU1RSRUFNIGFzIMm1Zn0gZnJvbSAnLi9jb3JlL2RvbWFpbi9jb21tYW5kL2ZpbHRlcmVkLWNvbW1hbmQtc3RyZWFtJztcbmV4cG9ydCB7Q29tbWFuZEhhbmRsZXJJbXBsIGFzIMm1dyxjb21tYW5kSGFuZGxlckZhY3RvcnkgYXMgybV2fSBmcm9tICcuL2NvcmUvZG9tYWluL2NvbW1hbmQvaGFuZGxlci9jb21tYW5kLWhhbmRsZXItaW1wbCc7XG5leHBvcnQge0NPTU1BTkRfSEFORExFUlMgYXMgybVrfSBmcm9tICcuL2NvcmUvZG9tYWluL2NvbW1hbmQvaGFuZGxlci9jb21tYW5kLWhhbmRsZXJzJztcbmV4cG9ydCB7RG9tYWluRXZlbnRTdG9yZSBhcyDJtWd9IGZyb20gJy4vY29yZS9kb21haW4vZXZlbnQvZG9tYWluLWV2ZW50LnN0b3JlJztcbmV4cG9ydCB7RG9tYWluRXZlbnRIYW5kbGVySW1wbCBhcyDJtXosZG9tYWluRXZlbnRIYW5kbGVyRmFjdG9yeSBhcyDJtXgsbXVsdGlEb21haW5FdmVudEhhbmRsZXJGYWN0b3J5IGFzIMm1eX0gZnJvbSAnLi9jb3JlL2RvbWFpbi9ldmVudC9oYW5kbGVyL2RvbWFpbi1ldmVudC1oYW5kbGVyLWltcGwnO1xuZXhwb3J0IHtET01BSU5fRVZFTlRfSEFORExFUlMgYXMgybVpfSBmcm9tICcuL2NvcmUvZG9tYWluL2V2ZW50L2hhbmRsZXIvZG9tYWluLWV2ZW50LWhhbmRsZXJzJztcbmV4cG9ydCB7TWVzc2FnZSBhcyDJtWV9IGZyb20gJy4vY29yZS9kb21haW4vbWVzc2FnZS9tZXNzYWdlJztcbmV4cG9ydCB7Q29uc29sZUNvbW1hbmRMb2dnZXIgYXMgybVxfSBmcm9tICcuL2NvcmUvaW5mcmFzdHJ1Y3R1cmUvbG9nZ2VyL2NvbW1hbmQvY29uc29sZS5jb21tYW5kLmxvZ2dlcic7XG5leHBvcnQge05vb3BDb21tYW5kTG9nZ2VyIGFzIMm1cn0gZnJvbSAnLi9jb3JlL2luZnJhc3RydWN0dXJlL2xvZ2dlci9jb21tYW5kL25vb3AuY29tbWFuZC5sb2dnZXInO1xuZXhwb3J0IHtDb25zb2xlRXZlbnRMb2dnZXIgYXMgybVzfSBmcm9tICcuL2NvcmUvaW5mcmFzdHJ1Y3R1cmUvbG9nZ2VyL2V2ZW50L2NvbnNvbGUuZXZlbnQubG9nZ2VyJztcbmV4cG9ydCB7Tm9vcEV2ZW50TG9nZ2VyIGFzIMm1dH0gZnJvbSAnLi9jb3JlL2luZnJhc3RydWN0dXJlL2xvZ2dlci9ldmVudC9ub29wLmV2ZW50LmxvZ2dlcic7Il19