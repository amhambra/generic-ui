import { HermesObservable } from '../observable/hermes.observable';
import { subscriberForOperator } from './operator-utils';
export function hermesDistinctUntilChanged(compareFn) {
    const compare = compareFn ? compareFn : defaultCompareFn;
    return (source) => {
        return new HermesObservable((observer) => {
            let previousValue = null;
            const subscriber = subscriberForOperator(observer, (value) => {
                if (previousValue === null || !compare(previousValue, value)) {
                    previousValue = value;
                    observer.next(value);
                }
            });
            return source.subscribe(subscriber).getFinalize();
        });
    };
}
function defaultCompareFn(a, b) {
    return a === b;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLmRpc3RpbmN0LXVudGlsLWNoYW5nZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29tbW9uL3N0cmVhbS9vcGVyYXRvci9oZXJtZXMuZGlzdGluY3QtdW50aWwtY2hhbmdlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQTBCLE1BQU0saUNBQWlDLENBQUM7QUFFM0YsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHekQsTUFBTSxVQUFVLDBCQUEwQixDQUFJLFNBQXVDO0lBRXBGLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUV6RCxPQUFPLENBQUMsTUFBMkIsRUFBRSxFQUFFO1FBQ3RDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBSSxDQUFDLFFBQTZCLEVBQUUsRUFBRTtZQUVoRSxJQUFJLGFBQWEsR0FBTSxJQUFJLENBQUM7WUFFNUIsTUFBTSxVQUFVLEdBQUcscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBUSxFQUFFLEVBQUU7Z0JBRS9ELElBQUksYUFBYSxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7b0JBQzdELGFBQWEsR0FBRyxLQUFLLENBQUM7b0JBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3JCO1lBQ0YsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBSSxDQUFJLEVBQUUsQ0FBSTtJQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhlcm1lc09ic2VydmFibGUsIEhlcm1lc09wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2hlcm1lcy5vYnNlcnZhYmxlJztcbmltcG9ydCB7IEhlcm1lc09ic2VydmVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9oZXJtZXMub2JzZXJ2ZXInO1xuaW1wb3J0IHsgc3Vic2NyaWJlckZvck9wZXJhdG9yIH0gZnJvbSAnLi9vcGVyYXRvci11dGlscyc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhlcm1lc0Rpc3RpbmN0VW50aWxDaGFuZ2VkPFQ+KGNvbXBhcmVGbj86IChvbmU6IFQsIHR3bzogVCkgPT4gYm9vbGVhbik6IEhlcm1lc09wZXJhdG9yRnVuY3Rpb248VCwgVD4ge1xuXG5cdGNvbnN0IGNvbXBhcmUgPSBjb21wYXJlRm4gPyBjb21wYXJlRm4gOiBkZWZhdWx0Q29tcGFyZUZuO1xuXG5cdHJldHVybiAoc291cmNlOiBIZXJtZXNPYnNlcnZhYmxlPFQ+KSA9PiB7XG5cdFx0cmV0dXJuIG5ldyBIZXJtZXNPYnNlcnZhYmxlPFQ+KChvYnNlcnZlcjogSGVybWVzT2JzZXJ2ZXI8YW55PikgPT4ge1xuXG5cdFx0XHRsZXQgcHJldmlvdXNWYWx1ZTogVCA9IG51bGw7XG5cblx0XHRcdGNvbnN0IHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyRm9yT3BlcmF0b3Iob2JzZXJ2ZXIsICh2YWx1ZTogVCkgPT4ge1xuXG5cdFx0XHRcdGlmIChwcmV2aW91c1ZhbHVlID09PSBudWxsIHx8ICFjb21wYXJlKHByZXZpb3VzVmFsdWUsIHZhbHVlKSkge1xuXHRcdFx0XHRcdHByZXZpb3VzVmFsdWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRvYnNlcnZlci5uZXh0KHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpLmdldEZpbmFsaXplKCk7XG5cdFx0fSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlRm48VD4oYTogVCwgYjogVCk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gYSA9PT0gYjtcbn1cbiJdfQ==