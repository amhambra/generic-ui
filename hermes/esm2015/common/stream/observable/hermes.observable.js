import { HermesSubscription } from '../subscription/hermes.subscription';
import { HermesSubscriber } from './subscriber/hermes.subscriber';
export class HermesObservable {
    constructor(generator) {
        this.generatorFn = generator;
    }
    pipe(...operations) {
        this.source = this;
        for (const operation of operations) {
            this.source = this.innerPipe(operation, this.source);
        }
        return this.source;
    }
    subscribe(arg) {
        let subscriber;
        if (arg instanceof HermesSubscriber) {
            subscriber = arg;
        }
        else if (arg !== null && this.isObserver(arg)) {
            const { next, error, complete } = arg;
            subscriber = this.createSubscriber(next, error, complete);
        }
        else {
            subscriber = this.createSubscriber(arguments[0], arguments[1], arguments[2]);
        }
        if (this.generatorFn) {
            this.generatorFinalize = this.generatorFn(subscriber);
            subscriber.setFinalize(this.generatorFinalize);
        }
        return this.getSubscription();
    }
    createSubscriber(next, error, complete) {
        return new HermesSubscriber({
            next,
            error,
            complete
        });
    }
    getSubscription() {
        return new HermesSubscription(this.generatorFinalize);
    }
    innerPipe(operation, stream$) {
        return ((input) => {
            return operation(input);
        })(stream$);
    }
    isObserver(observer) {
        return typeof observer === 'object';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLm9ic2VydmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWhlcm1lcy9zcmMvY29tbW9uL3N0cmVhbS9vYnNlcnZhYmxlL2hlcm1lcy5vYnNlcnZhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBUWxFLE1BQU0sT0FBTyxnQkFBZ0I7SUFXNUIsWUFBWSxTQUFrRDtRQUM3RCxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxDQUFPLEdBQUcsVUFBbUQ7UUFDaEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFbkIsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUU7WUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckQ7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQWFELFNBQVMsQ0FDUixHQUFRO1FBR1IsSUFBSSxVQUErQixDQUFDO1FBRXBDLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFO1lBQ3BDLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDakI7YUFBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUVoRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFFdEMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFFTixVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEQsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUMvQztRQUVELE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFUyxnQkFBZ0IsQ0FDekIsSUFBeUIsRUFDekIsS0FBNEIsRUFDNUIsUUFBcUI7UUFFckIsT0FBTyxJQUFJLGdCQUFnQixDQUFDO1lBQzNCLElBQUk7WUFDSixLQUFLO1lBQ0wsUUFBUTtTQUNSLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFUyxlQUFlO1FBQ3hCLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU8sU0FBUyxDQUFPLFNBQXVDLEVBQUUsT0FBNEI7UUFDNUYsT0FBTyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDdEIsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRU8sVUFBVSxDQUFDLFFBQWE7UUFDL0IsT0FBTyxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUM7SUFDckMsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVybWVzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vc3Vic2NyaXB0aW9uL2hlcm1lcy5zdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgSGVybWVzU3Vic2NyaWJlciB9IGZyb20gJy4vc3Vic2NyaWJlci9oZXJtZXMuc3Vic2NyaWJlcic7XG5pbXBvcnQgeyBIZXJtZXNPYnNlcnZlciB9IGZyb20gJy4vaGVybWVzLm9ic2VydmVyJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIEhlcm1lc09wZXJhdG9yRnVuY3Rpb248VCwgUj4ge1xuXHQoc291cmNlOiBIZXJtZXNPYnNlcnZhYmxlPFQ+KTogSGVybWVzT2JzZXJ2YWJsZTxSPlxufVxuXG5leHBvcnQgY2xhc3MgSGVybWVzT2JzZXJ2YWJsZTxUPiB7XG5cblx0cHJvdGVjdGVkIHJlYWRvbmx5IGdlbmVyYXRvckZuOiBhbnk7XG5cblx0cHJpdmF0ZSBzb3VyY2U6IEhlcm1lc09ic2VydmFibGU8VD47XG5cblx0Ly8gcHJpdmF0ZSBvcGVyYXRvcjogSGVybWVzT2JzZXJ2YWJsZTxUPjtcblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0cHJpdmF0ZSBnZW5lcmF0b3JGaW5hbGl6ZTogKCkgPT4gdm9pZDtcblxuXHRjb25zdHJ1Y3RvcihnZW5lcmF0b3I/OiAob2JzZXJ2ZXI/OiBIZXJtZXNPYnNlcnZlcjxUPikgPT4gdm9pZCkge1xuXHRcdHRoaXMuZ2VuZXJhdG9yRm4gPSBnZW5lcmF0b3I7XG5cdH1cblxuXHRwaXBlPFQsIFI+KC4uLm9wZXJhdGlvbnM6IEFycmF5PEhlcm1lc09wZXJhdG9yRnVuY3Rpb248YW55LCBhbnk+Pik6IEhlcm1lc09ic2VydmFibGU8YW55PiB7XG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzO1xuXG5cdFx0Zm9yIChjb25zdCBvcGVyYXRpb24gb2Ygb3BlcmF0aW9ucykge1xuXHRcdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmlubmVyUGlwZShvcGVyYXRpb24sIHRoaXMuc291cmNlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuc291cmNlO1xuXHR9XG5cblx0c3Vic2NyaWJlKFxuXHRcdG5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsXG5cdFx0ZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCxcblx0XHRjb21wbGV0ZT86ICgpID0+IHZvaWRcblx0KTogSGVybWVzU3Vic2NyaXB0aW9uO1xuXHRzdWJzY3JpYmUoXG5cdFx0c3Vic2NyaWJlcjogSGVybWVzU3Vic2NyaWJlcjxUPlxuXHQpOiBIZXJtZXNTdWJzY3JpcHRpb247XG5cdHN1YnNjcmliZShcblx0XHRvYnNlcnZlcjogUGFydGlhbDxIZXJtZXNPYnNlcnZlcjxUPj5cblx0KTogSGVybWVzU3Vic2NyaXB0aW9uO1xuXHRzdWJzY3JpYmUoXG5cdFx0YXJnOiBhbnlcblx0KTogSGVybWVzU3Vic2NyaXB0aW9uIHtcblxuXHRcdGxldCBzdWJzY3JpYmVyOiBIZXJtZXNTdWJzY3JpYmVyPFQ+O1xuXG5cdFx0aWYgKGFyZyBpbnN0YW5jZW9mIEhlcm1lc1N1YnNjcmliZXIpIHtcblx0XHRcdHN1YnNjcmliZXIgPSBhcmc7XG5cdFx0fSBlbHNlIGlmIChhcmcgIT09IG51bGwgJiYgdGhpcy5pc09ic2VydmVyKGFyZykpIHtcblxuXHRcdFx0Y29uc3QgeyBuZXh0LCBlcnJvciwgY29tcGxldGUgfSA9IGFyZztcblxuXHRcdFx0c3Vic2NyaWJlciA9IHRoaXMuY3JlYXRlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHN1YnNjcmliZXIgPSB0aGlzLmNyZWF0ZVN1YnNjcmliZXIoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuZ2VuZXJhdG9yRm4pIHtcblx0XHRcdHRoaXMuZ2VuZXJhdG9yRmluYWxpemUgPSB0aGlzLmdlbmVyYXRvckZuKHN1YnNjcmliZXIpO1xuXHRcdFx0c3Vic2NyaWJlci5zZXRGaW5hbGl6ZSh0aGlzLmdlbmVyYXRvckZpbmFsaXplKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTdWJzY3JpcHRpb24oKTtcblx0fVxuXG5cdHByb3RlY3RlZCBjcmVhdGVTdWJzY3JpYmVyKFxuXHRcdG5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsXG5cdFx0ZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCxcblx0XHRjb21wbGV0ZT86ICgpID0+IHZvaWRcblx0KTogSGVybWVzU3Vic2NyaWJlcjxUPiB7XG5cdFx0cmV0dXJuIG5ldyBIZXJtZXNTdWJzY3JpYmVyKHtcblx0XHRcdG5leHQsXG5cdFx0XHRlcnJvcixcblx0XHRcdGNvbXBsZXRlXG5cdFx0fSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZ2V0U3Vic2NyaXB0aW9uKCk6IEhlcm1lc1N1YnNjcmlwdGlvbiB7XG5cdFx0cmV0dXJuIG5ldyBIZXJtZXNTdWJzY3JpcHRpb24odGhpcy5nZW5lcmF0b3JGaW5hbGl6ZSk7XG5cdH1cblxuXHRwcml2YXRlIGlubmVyUGlwZTxULCBSPihvcGVyYXRpb246IEhlcm1lc09wZXJhdG9yRnVuY3Rpb248VCwgUj4sIHN0cmVhbSQ6IEhlcm1lc09ic2VydmFibGU8VD4pOiBIZXJtZXNPYnNlcnZhYmxlPFI+IHtcblx0XHRyZXR1cm4gKChpbnB1dDogYW55KSA9PiB7XG5cdFx0XHRyZXR1cm4gb3BlcmF0aW9uKGlucHV0KTtcblx0XHR9KShzdHJlYW0kKTtcblx0fVxuXG5cdHByaXZhdGUgaXNPYnNlcnZlcihvYnNlcnZlcjogYW55KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHR5cGVvZiBvYnNlcnZlciA9PT0gJ29iamVjdCc7XG5cdH1cblxufVxuIl19