import { HermesSubject } from './hermes.subject';
import { HermesSubscriber } from './subscriber/hermes.subscriber';
export class HermesReplaySubject extends HermesSubject {
    constructor(bufferSize = 1) {
        super();
        this.bufferSize = bufferSize;
        this.values = [];
    }
    next(value) {
        this.values.push(value);
        if (this.bufferSize < this.values.length) {
            this.values.shift();
        }
        super.next(value);
    }
    subscribe(arg) {
        let subscriber;
        if (arg instanceof HermesSubscriber) {
            subscriber = arg;
        }
        else {
            subscriber = this.createSubscriber(arguments[0], arguments[1], arguments[2]);
        }
        const subscription = super.subscribe(subscriber);
        for (const value of this.values) {
            subscriber.next(value);
        }
        return subscription;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVybWVzLnJlcGxheS1zdWJqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL2d1aS1oZXJtZXMvc3JjL2NvbW1vbi9zdHJlYW0vb2JzZXJ2YWJsZS9oZXJtZXMucmVwbGF5LXN1YmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWxFLE1BQU0sT0FBTyxtQkFBdUIsU0FBUSxhQUFnQjtJQUkzRCxZQUE2QixhQUFxQixDQUFDO1FBQ2xELEtBQUssRUFBRSxDQUFDO1FBRG9CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFGbEMsV0FBTSxHQUFhLEVBQUUsQ0FBQztJQUl2QyxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQVE7UUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNwQjtRQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQVVELFNBQVMsQ0FDUixHQUFRO1FBR1IsSUFBSSxVQUErQixDQUFDO1FBRXBDLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFO1lBQ3BDLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDakI7YUFBTTtZQUNOLFVBQVUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3RTtRQUVELE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFakQsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZXJtZXNTdWJqZWN0IH0gZnJvbSAnLi9oZXJtZXMuc3ViamVjdCc7XG5pbXBvcnQgeyBIZXJtZXNTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9zdWJzY3JpcHRpb24vaGVybWVzLnN1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBIZXJtZXNTdWJzY3JpYmVyIH0gZnJvbSAnLi9zdWJzY3JpYmVyL2hlcm1lcy5zdWJzY3JpYmVyJztcblxuZXhwb3J0IGNsYXNzIEhlcm1lc1JlcGxheVN1YmplY3Q8VD4gZXh0ZW5kcyBIZXJtZXNTdWJqZWN0PFQ+IHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IHZhbHVlczogQXJyYXk8VD4gPSBbXTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJ1ZmZlclNpemU6IG51bWJlciA9IDEpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0bmV4dCh2YWx1ZTogVCkge1xuXHRcdHRoaXMudmFsdWVzLnB1c2godmFsdWUpO1xuXHRcdGlmICh0aGlzLmJ1ZmZlclNpemUgPCB0aGlzLnZhbHVlcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMudmFsdWVzLnNoaWZ0KCk7XG5cdFx0fVxuXHRcdHN1cGVyLm5leHQodmFsdWUpO1xuXHR9XG5cblx0c3Vic2NyaWJlKFxuXHRcdG5leHQ/OiAodmFsdWU6IFQpID0+IHZvaWQsXG5cdFx0ZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCxcblx0XHRjb21wbGV0ZT86ICgpID0+IHZvaWRcblx0KTogSGVybWVzU3Vic2NyaXB0aW9uO1xuXHRzdWJzY3JpYmUoXG5cdFx0c3Vic2NyaWJlcjogSGVybWVzU3Vic2NyaWJlcjxUPlxuXHQpOiBIZXJtZXNTdWJzY3JpcHRpb247XG5cdHN1YnNjcmliZShcblx0XHRhcmc6IGFueVxuXHQpOiBIZXJtZXNTdWJzY3JpcHRpb24ge1xuXG5cdFx0bGV0IHN1YnNjcmliZXI6IEhlcm1lc1N1YnNjcmliZXI8VD47XG5cblx0XHRpZiAoYXJnIGluc3RhbmNlb2YgSGVybWVzU3Vic2NyaWJlcikge1xuXHRcdFx0c3Vic2NyaWJlciA9IGFyZztcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3Vic2NyaWJlciA9IHRoaXMuY3JlYXRlU3Vic2NyaWJlcihhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcblx0XHR9XG5cblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBzdXBlci5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG5cblx0XHRmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMudmFsdWVzKSB7XG5cdFx0XHRzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBzdWJzY3JpcHRpb247XG5cdH1cblxufVxuIl19