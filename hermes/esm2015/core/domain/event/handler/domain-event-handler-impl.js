export function domainEventHandlerFactory(domainEventHandler) {
    return new DomainEventHandlerImpl(domainEventHandler, [domainEventHandler.forEvent()]);
}
export function multiDomainEventHandlerFactory(domainEventHandler) {
    return new DomainEventHandlerImpl(domainEventHandler, domainEventHandler.forEvents());
}
export class DomainEventHandlerImpl {
    constructor(domainEventHandler, events) {
        this.domainEventHandler = domainEventHandler;
        this.events = events;
        this.eventTypes = this.createDomainEventTypes();
    }
    handleEvent(event) {
        this.domainEventHandler.handle(event);
    }
    forEvents(events) {
        return events.some((event) => {
            return this.eventTypes.some((type) => {
                return type === event.getMessageType();
            });
        });
    }
    createDomainEventTypes() {
        const types = [];
        for (const event of this.events) {
            const instance = this.createDomainEventInstance(event);
            types.push(instance.getMessageType());
        }
        return types;
    }
    createDomainEventInstance(eventType) {
        const args = [], argumentLength = eventType.constructor.length;
        args.fill(undefined, 0, argumentLength);
        if (args.length === 0) {
            return (new eventType());
        }
        else if (args.length === 1) {
            return (new eventType(args[0]));
        }
        else if (args.length === 2) {
            return (new eventType(args[0], args[1]));
        }
        else if (args.length === 3) {
            return (new eventType(args[0], args[1], args[2]));
        }
        else if (args.length === 4) {
            return (new eventType(args[0], args[1], args[2], args[3]));
        }
        else if (args.length === 5) {
            return (new eventType(args[0], args[1], args[2], args[3], args[4]));
        }
        else {
            throw new Error('DomainEventHandler constructor out of arguments');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLWV2ZW50LWhhbmRsZXItaW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9ndWktaGVybWVzL3NyYy9jb3JlL2RvbWFpbi9ldmVudC9oYW5kbGVyL2RvbWFpbi1ldmVudC1oYW5kbGVyLWltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsTUFBTSxVQUFVLHlCQUF5QixDQUN4QyxrQkFBNEM7SUFFNUMsT0FBTyxJQUFJLHNCQUFzQixDQUFPLGtCQUFrQixFQUFFLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFHRCxNQUFNLFVBQVUsOEJBQThCLENBQzdDLGtCQUFpRDtJQUVqRCxPQUFPLElBQUksc0JBQXNCLENBQU8sa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RixDQUFDO0FBR0QsTUFBTSxPQUFPLHNCQUFzQjtJQUlsQyxZQUE2QixrQkFBNEUsRUFDckYsTUFBaUM7UUFEeEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUEwRDtRQUNyRixXQUFNLEdBQU4sTUFBTSxDQUEyQjtRQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRCxXQUFXLENBQUMsS0FBUTtRQUNuQixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBZ0I7UUFDekIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBUSxFQUFFLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUM1QyxPQUFPLElBQUksS0FBSyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFTyxzQkFBc0I7UUFFN0IsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRWpCLEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztTQUN0QztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVPLHlCQUF5QixDQUFDLFNBQTZCO1FBQzlELE1BQU0sSUFBSSxHQUFnQixFQUFFLEVBQzNCLGNBQWMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUUvQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLENBQUMsSUFBSyxTQUFpQixFQUFFLENBQUMsQ0FBQztTQUNsQzthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxDQUFDLElBQUssU0FBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pDO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxTQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxTQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRDthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxDQUFDLElBQUssU0FBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSyxTQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdFO2FBQU07WUFDTixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDbkU7SUFDRixDQUFDO0NBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21haW5FdmVudEhhbmRsZXIgfSBmcm9tICcuL2RvbWFpbi1ldmVudC5oYW5kbGVyJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZUlkIH0gZnJvbSAnLi4vLi4vdGFjdGljYWwvYWdncmVnYXRlL2FnZ3JlZ2F0ZS1pZCc7XG5pbXBvcnQgeyBEb21haW5FdmVudCB9IGZyb20gJy4uL2RvbWFpbi1ldmVudCc7XG5pbXBvcnQgeyBNdWx0aURvbWFpbkV2ZW50SGFuZGxlciB9IGZyb20gJy4vbXVsdGktZG9tYWluLWV2ZW50LmhhbmRsZXInO1xuaW1wb3J0IHsgRG9tYWluRXZlbnRUeXBlIH0gZnJvbSAnLi9kb21haW4tZXZlbnQtdHlwZSc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRvbWFpbkV2ZW50SGFuZGxlckZhY3Rvcnk8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KFxuXHRkb21haW5FdmVudEhhbmRsZXI6IERvbWFpbkV2ZW50SGFuZGxlcjxJLCBFPlxuKTogRG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPiB7XG5cdHJldHVybiBuZXcgRG9tYWluRXZlbnRIYW5kbGVySW1wbDxJLCBFPihkb21haW5FdmVudEhhbmRsZXIsIFtkb21haW5FdmVudEhhbmRsZXIuZm9yRXZlbnQoKV0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aURvbWFpbkV2ZW50SGFuZGxlckZhY3Rvcnk8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KFxuXHRkb21haW5FdmVudEhhbmRsZXI6IE11bHRpRG9tYWluRXZlbnRIYW5kbGVyPEksIEU+XG4pOiBEb21haW5FdmVudEhhbmRsZXJJbXBsPEksIEU+IHtcblx0cmV0dXJuIG5ldyBEb21haW5FdmVudEhhbmRsZXJJbXBsPEksIEU+KGRvbWFpbkV2ZW50SGFuZGxlciwgZG9tYWluRXZlbnRIYW5kbGVyLmZvckV2ZW50cygpKTtcbn1cblxuXG5leHBvcnQgY2xhc3MgRG9tYWluRXZlbnRIYW5kbGVySW1wbDxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4ge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZXZlbnRUeXBlczogQXJyYXk8c3RyaW5nPjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRvbWFpbkV2ZW50SGFuZGxlcjogRG9tYWluRXZlbnRIYW5kbGVyPEksIEU+IHwgTXVsdGlEb21haW5FdmVudEhhbmRsZXI8SSwgRT4sXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZXZlbnRzOiBBcnJheTxEb21haW5FdmVudFR5cGU8RT4+KSB7XG5cdFx0dGhpcy5ldmVudFR5cGVzID0gdGhpcy5jcmVhdGVEb21haW5FdmVudFR5cGVzKCk7XG5cdH1cblxuXHRoYW5kbGVFdmVudChldmVudDogRSk6IHZvaWQge1xuXHRcdHRoaXMuZG9tYWluRXZlbnRIYW5kbGVyLmhhbmRsZShldmVudCk7XG5cdH1cblxuXHRmb3JFdmVudHMoZXZlbnRzOiBBcnJheTxFPik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBldmVudHMuc29tZSgoZXZlbnQ6IEUpID0+IHtcblx0XHRcdHJldHVybiB0aGlzLmV2ZW50VHlwZXMuc29tZSgodHlwZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0eXBlID09PSBldmVudC5nZXRNZXNzYWdlVHlwZSgpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZURvbWFpbkV2ZW50VHlwZXMoKTogQXJyYXk8c3RyaW5nPiB7XG5cblx0XHRjb25zdCB0eXBlcyA9IFtdO1xuXG5cdFx0Zm9yIChjb25zdCBldmVudCBvZiB0aGlzLmV2ZW50cykge1xuXHRcdFx0Y29uc3QgaW5zdGFuY2UgPSB0aGlzLmNyZWF0ZURvbWFpbkV2ZW50SW5zdGFuY2UoZXZlbnQpO1xuXHRcdFx0dHlwZXMucHVzaChpbnN0YW5jZS5nZXRNZXNzYWdlVHlwZSgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHlwZXM7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZURvbWFpbkV2ZW50SW5zdGFuY2UoZXZlbnRUeXBlOiBEb21haW5FdmVudFR5cGU8RT4pOiBFIHtcblx0XHRjb25zdCBhcmdzOiBBcnJheTx2b2lkPiA9IFtdLFxuXHRcdFx0YXJndW1lbnRMZW5ndGggPSBldmVudFR5cGUuY29uc3RydWN0b3IubGVuZ3RoO1xuXG5cdFx0YXJncy5maWxsKHVuZGVmaW5lZCwgMCwgYXJndW1lbnRMZW5ndGgpO1xuXG5cdFx0aWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnRUeXBlIGFzIGFueSkoKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50VHlwZSBhcyBhbnkpKGFyZ3NbMF0pKTtcblx0XHR9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnRUeXBlIGFzIGFueSkoYXJnc1swXSwgYXJnc1sxXSkpO1xuXHRcdH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDMpIHtcblx0XHRcdHJldHVybiAobmV3IChldmVudFR5cGUgYXMgYW55KShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKSk7XG5cdFx0fSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0cmV0dXJuIChuZXcgKGV2ZW50VHlwZSBhcyBhbnkpKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pKTtcblx0XHR9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSA1KSB7XG5cdFx0XHRyZXR1cm4gKG5ldyAoZXZlbnRUeXBlIGFzIGFueSkoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RvbWFpbkV2ZW50SGFuZGxlciBjb25zdHJ1Y3RvciBvdXQgb2YgYXJndW1lbnRzJyk7XG5cdFx0fVxuXHR9XG5cblxufVxuIl19