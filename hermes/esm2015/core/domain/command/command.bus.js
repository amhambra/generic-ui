import { Inject, Injectable } from '@angular/core';
import { FILTERED_COMMAND_STREAM } from './filtered-command-stream';
import { HermesObservable } from '../../../common/stream/observable/hermes.observable';
import { hermesFilter } from '../../../common/stream/operator/hermes.filter';
import * as i0 from "@angular/core";
import * as i1 from "./command.stream";
export class CommandBus extends HermesObservable {
    constructor(commandsStream) {
        super();
        this.commandsStream = commandsStream;
    }
    subscribe(arg) {
        return this.commandsStream.toObservable().subscribe(arguments[0], arguments[1], arguments[2]);
    }
    ofCommand(...commandTypes) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            return commandTypes.some((commandType) => command.ofMessageType(commandType));
        }));
    }
    ofCommandHandler(...handlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            return handlers.some((handler) => {
                return handler.forCommand(command);
            });
        }));
    }
    ofCreateAggregateHandler(...handlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            return handlers.some((handler) => {
                return handler.forCommand(command);
            });
        }));
    }
    ofNullHandler(handlers, aggregateCommandHandlers) {
        return this
            .commandsStream
            .toObservable()
            .pipe(hermesFilter((command) => {
            if (!handlers && !aggregateCommandHandlers) {
                return true;
            }
            let foundHandlerForCommand = true;
            if (handlers) {
                foundHandlerForCommand =
                    !handlers.some((handler) => {
                        return handler.forCommand(command);
                    });
            }
            if (aggregateCommandHandlers) {
                foundHandlerForCommand = foundHandlerForCommand &&
                    !aggregateCommandHandlers.some((handler) => {
                        return handler.forCommand(command);
                    });
            }
            return foundHandlerForCommand;
        }));
    }
}
CommandBus.ɵfac = function CommandBus_Factory(t) { return new (t || CommandBus)(i0.ɵɵinject(FILTERED_COMMAND_STREAM)); };
CommandBus.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CommandBus, factory: CommandBus.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CommandBus, [{
        type: Injectable
    }], function () { return [{ type: i1.CommandStream, decorators: [{
                type: Inject,
                args: [FILTERED_COMMAND_STREAM]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,