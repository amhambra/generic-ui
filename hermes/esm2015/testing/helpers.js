export function assertDomainEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length);
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equalsByType(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
        expect(actualEvent.equalsByType(expectedEvent)).toBeTruthy();
        // expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');
        expect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');
    }
}
export function assertAggregateEvents(actualEvents, expectedEvents) {
    expect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');
    for (const actualEvent of actualEvents) {
        const expectedEvent = expectedEvents.find((event) => {
            return event.equals(actualEvent);
        });
        expect(expectedEvent).toBeDefined();
    }
}
export function testEventRepositoryIsEmptyOnStart(createStream, desc) {
    it('should be no ' + desc + ' events on start', () => {
        expect.assertions(3);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe(() => nextFn(), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).not.toHaveBeenCalled();
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function testWarehouseDefaultValueOnStart(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).not.toHaveBeenCalled();
    });
}
export function testWarehouseDefaultValueOnStartOnce(createStream, defaultValue, desc) {
    it('should have default value ' + desc, () => {
        expect.assertions(4);
        // given
        const nextFn = jest.fn(), errorFn = jest.fn(), completeFn = jest.fn();
        // when
        createStream()
            .subscribe((value) => nextFn(value), (err) => errorFn(err), () => completeFn());
        // then
        expect(nextFn).toHaveBeenCalledWith(defaultValue);
        expect(nextFn).toHaveBeenCalledTimes(1);
        expect(errorFn).not.toHaveBeenCalled();
        expect(completeFn).toHaveBeenCalledTimes(1);
    });
}
//# sourceMappingURL=data:application/json;base64,