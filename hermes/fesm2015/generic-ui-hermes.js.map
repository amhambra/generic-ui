{"version":3,"file":"generic-ui-hermes.js","sources":["ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate.factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/read/read-model.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain/read/read-model.repository.ts","ng://@generic-ui/hermes/domain/read/store/read-model.store.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate-command-handler.impl.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate-command-handlers.token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/ui-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/testing/helpers.ts"],"sourcesContent":["import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(private readonly aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<A extends Aggregate> {\n\n\tabstract create(aggregateId: AggregateId): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { Aggregate } from './aggregate/aggregate';\nimport { AggregateCommandHandlerImpl } from './create-handler/aggregate-command-handler.impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<Aggregate, Command>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from './aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<A extends Aggregate> {\n\n\tabstract getById(aggregateId: AggregateId): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): Optional<S>;\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void;\n\taddEvent(events: Array<AggregateEvent>): void;\n\taddEvent(args: AggregateEvent | Array<AggregateEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\n\nexport abstract class ReadModelRepository extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent): void;\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Optional<Q>;\n\n}\n","export function RootAggregate(target: Function) {\n}\n\nexport function Entity(target: Function) {\n}\n\nexport function ValueObject(target: Function) {\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getAggregateId().toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\n\n\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { ReadModel } from '../../../domain/read/read-model';\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistReadModelStore<R extends ReadModel, A extends PersistAnemia> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistAggregateStore<D extends Aggregate, A extends PersistAnemia> extends AggregateStore<D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\n\nimport { ReadModel } from '../../../domain/read/read-model';\n\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryReadModelStore<R extends ReadModel, D extends Aggregate> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<D>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: D): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: D) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAggregate: Optional<D> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate/aggregate';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { Command } from '../command';\nimport { AggregateCommandHandler } from './aggregate-command.handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../config/define';\nimport { AggregateFactory } from './aggregate.factory';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\n\n\nexport function aggregateCommandHandlerFactory<A extends Aggregate, C extends Command>(createAggregateCommandHandler: AggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive, aggregateRepositoryArchive: AggregateRepositoryArchive, aggregateName: string): AggregateCommandHandlerImpl<A, C> {\n\treturn new AggregateCommandHandlerImpl<A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class AggregateCommandHandlerImpl<A extends Aggregate, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: AggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.createAggregateCommandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId();\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const AGGREGATE_COMMAND_HANDLERS = 'HERMES - AGGREGATE_COMMAND_HANDLERS';\n","import { AggregateFactory } from '../create-handler/aggregate.factory';\nimport { Aggregate } from '../aggregate/aggregate';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../create-handler/aggregate-command.handler';\n\n\nexport class AggregateFactoryArchive {\n\n\tprivate readonly map = new Map();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<Aggregate>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<Aggregate>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive {\n\n\tprivate readonly map = new Map();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<Aggregate>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<Aggregate>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig {\n\n\trepository: AggregateRepository<Aggregate>;\n\n\tfactory: AggregateFactory<Aggregate>;\n\n\tkey: string;\n\n\tcreateHandler: AggregateCommandHandler<any, any>;\n\n\thandlers?: Array<any>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","import { Aggregate } from '../aggregate/aggregate';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\n\n\nexport function commandHandlerFactory<A extends Aggregate, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive,\n\taggregateName: string\n): CommandHandlerImpl<A, C> {\n\treturn new CommandHandlerImpl<A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<A extends Aggregate, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId();\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Command\n */\nimport { Aggregate } from '../domain/command/aggregate/aggregate';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport { aggregateCommandHandlerFactory, AggregateCommandHandlerImpl } from '../domain/command/create-handler/aggregate-command-handler.impl';\nimport { AGGREGATE_COMMAND_HANDLERS } from '../domain/command/create-handler/aggregate-command-handlers.token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/create-handler/aggregate.factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../domain/command/create-handler/aggregate-command.handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tstatic defineAggregate<A extends Aggregate, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   factory: Type<AggregateFactory<A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   repository: Type<AggregateRepository<A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   createHandler: Type<AggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   handlers: Array<Provider>): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...handlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<A extends Aggregate, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tprivate static registerCreateCommandHandler<A extends Aggregate, C extends Command>(\n\t\tcreateCommandHandlerType: Type<AggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: aggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\t@Optional() @Inject(AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) handlers: Array<CommandHandlerImpl<Aggregate, Command>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, handlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(handlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (handlers) {\n\n\t\t\thandlers.forEach((handler: CommandHandlerImpl<Aggregate, Command>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<Aggregate, Command>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<Aggregate, Command>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","import { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n"],"names":["Optional"],"mappings":"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"}