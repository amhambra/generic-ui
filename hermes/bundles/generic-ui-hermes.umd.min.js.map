{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/domain/command/command-handlers.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/command.handler.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/read/read-model.ts","ng://@generic-ui/hermes/domain/read/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","hermesApi","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","Injectable","decorators","type","Inject","args","PLATFORM_ID","CommandLogger","DomainEventLogger","COMMAND_HANDLERS","DOMAIN_EVENT_HANDLERS","CommandStream","tslib_1.__extends","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","toString","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","message","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","CommandHandler","domainEvent","eventPublisher","commandType","createCommandInstance","forCommand","handleCommand","result","handle","isObservable","pipe","take","subscribe","res","dispatchEvent","event_1","setRequestCommand","setPayload","publish","argumentLength","fill","undefined","_a","bind","apply","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","filter","some","ofHandler","handlers","handler","ofNullHandler","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","Aggregate","events","getId","getEvents","addEvent","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","requestCommandId","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","DomainEventStream","eventStore","DomainEventPublisher","eventStream","args_1","tslib_1.__values","args_1_1","publishEvent","dispatchAggregateEvent","aggregateEvent","DomainEventBus","ofEvent","createEventInstance","DomainEventPayload","getValue","ReadModel","gui","Reactive","unsubscribe","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","PersistAnemia","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","fromAnemia","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","remove","delete","InMemoryReadModelStore","toReadModel","InMemoryStore","has","ConsoleCommandLogger","commandBus","log","console","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","commandHandlers","eventHandlers","domainEventBus","loggersStart","checkNullCommand","checkCommandHandlerIsCollection","withConfig","config","ngModule","loggersStop","NgModule","imports","CommonModule","Optional","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1","useClass","multi"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Command } from './command';\n\nexport abstract class CommandLogger {\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tabstract log(command: Command): void;\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventLogger {\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tabstract log(event: DomainEvent): void;\n\n}\n","import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS';\n// export const COMMAND_HANDLERS = new InjectionToken<Array<CommandHandler>>('COMMAND_HANDLERS');\n","\nexport const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(public aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { Observable, isObservable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { ExecuteResponse } from './execute-response';\nimport { AggregateId } from '../aggregate-id';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventPublisher } from '../event/domain-event.publisher';\nimport { DomainEventPayload } from '../event/domain-event.payload';\n\nexport abstract class CommandHandler {\n\n\tprivate readonly commandType: string;\n\n\tprotected constructor(private readonly command: typeof Command | any, // any is required when inherited Command has more arguments than Command\n\t\t\t\t\t\t  private readonly domainEvent?: typeof DomainEvent,\n\t\t\t\t\t\t  protected readonly eventPublisher?: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tabstract handle(command: Command): ExecuteResponse | Observable<ExecuteResponse>;\n\n\tforCommand(command: Command): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\thandleCommand(command: Command): void {\n\t\tconst result = this.handle(command);\n\n\t\tif (isObservable(result)) {\n\t\t\t(result as Observable<ExecuteResponse>)\n\t\t\t\t.pipe(\n\t\t\t\t\ttake(1)\n\t\t\t\t)\n\t\t\t\t.subscribe((res: void | DomainEventPayload) => {\n\n\t\t\t\t\t// trigger event\n\t\t\t\t\tthis.dispatchEvent(command, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.dispatchEvent(command, result as ExecuteResponse);\n\t\t}\n\t}\n\n\tprivate dispatchEvent(command: Command, result?: ExecuteResponse): void {\n\n\t\tif (this.domainEvent && this.eventPublisher) {\n\n\t\t\tlet aggregateId: AggregateId = command.aggregateId;\n\n\t\t\tconst event = new (this.domainEvent as any)(aggregateId);\n\n\t\t\tevent.setRequestCommand(command);\n\n\t\t\tif (result) {\n\t\t\t\tevent.setPayload(result);\n\t\t\t}\n\n\t\t\tthis.eventPublisher.publish(event);\n\t\t}\n\t}\n\n\tprivate createCommandInstance(): Command {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.command.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.command as any)(...args));\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Subject, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { CommandHandler } from './command.handler';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofHandler<C2 extends C>(...handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): S;\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = []\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void {\n\t\tthis.events.push(event);\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, Subject, of } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Q;\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.aggregateId.toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\n\n\n/**\n * Rename\n */\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): A {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\nimport {\n\tReadModel\n} from '../../../domain/read/read-model';\nimport {\n\tReadModelStore\n} from '../../../domain/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\nexport abstract class PersistReadModelStore<T extends ReadModel, S extends PersistAnemia> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<T> {\n\t\tconst anemias = this.stateStore.getAll();\n\n\t\treturn anemias.map((anemia) => this.fromAnemia(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\n\nimport {\n\tAggregate,\n} from '../../../domain/command/aggregate';\nimport {\n\tAggregateStore,\n} from '../../../domain/command/store/aggregate.store';\nimport {\n\tAggregateStoreRegister\n} from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\n\nexport abstract class PersistAggregateStore<T extends Aggregate, S extends PersistAnemia> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: T): S;\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tsave(aggregate: T): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: T): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\n\nimport {\n\tAggregate\n} from '../../../domain/command/aggregate';\nimport {\n\tAggregateStore\n} from '../../../domain/command/store/aggregate.store';\nimport {\n\tAggregateStoreRegister\n} from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.inMemoryStore.get(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\nimport {\n\tAggregate\n} from '../../../domain/command/aggregate';\n\nimport {\n\tReadModel\n} from '../../../domain/read/read-model';\n\nimport {\n\tReadModelStore\n} from '../../../domain/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryReadModelStore<T extends ReadModel, S extends Aggregate> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll()\n\t\t\t\t   .map((aggregate: S) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst aggregate = this.inMemoryStore.get(aggregateId);\n\n\t\tif (aggregate) {\n\t\t\treturn this.toReadModel(aggregate);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): S {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tlog(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tlog(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tlog(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.aggregateId,\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tlog(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, ModuleWithProviders, NgModule, OnDestroy, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Command\n */\nimport { Command } from '../domain/command/command';\nimport { COMMAND_HANDLERS } from '../domain/command/command-handlers';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandHandler } from '../domain/command/command.handler';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { COMMAND_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tconstructor(@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandler>,\n\t\t\t\t@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.loggersStart();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\n\t\tif (commandHandlers) {\n\n\t\t\tcommandHandlers.forEach((handler: CommandHandler) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tthis.commandLogger.start();\n\t\tthis.eventLogger.start();\n\t}\n\n\tprivate loggersStop(): void {\n\t\tthis.commandLogger.stop();\n\t\tthis.eventLogger.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandler>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandler>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export function RootAggregate(target: Function) {}\n\nexport function Entity(target: Function) {}\n\nexport function ValueObject(target: Function) {}\n","import { AggregateEvent } from '../domain/command/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(): void {\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { CommandHandler } from './command/command.handler';\nimport { COMMAND_HANDLERS } from './command/command-handlers';\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideCommandHandlers(handlers: Array<Type<CommandHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<CommandHandler>) => {\n\t\treturn {\n\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}