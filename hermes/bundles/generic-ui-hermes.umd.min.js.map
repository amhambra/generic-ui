{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/core/api/logger/logger.ts","ng://@generic-ui/hermes/core/domain/command/command.logger.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/core/api/hermes-api.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-handlers.ts","ng://@generic-ui/hermes/core/domain/command/command.stream.ts","ng://@generic-ui/hermes/core/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/core/domain/message/message.ts","ng://@generic-ui/hermes/core/domain/command/command.ts","ng://@generic-ui/hermes/core/domain/message/message-type.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-type.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/core/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/core/domain/command/command.bus.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-event-type.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/core/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/core/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/core/domain/tactical/hermes.id.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-id.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-type.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/common/collections/key-map.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/core/domain/event/handler/event-driven.repository.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/core/api/read/read-model-entity.ts","ng://@generic-ui/hermes/core/api/read/read-model-entity-id.ts","ng://@generic-ui/hermes/core/api/read/read-model-root.ts","ng://@generic-ui/hermes/core/api/read/read-model-root-id.ts","ng://@generic-ui/hermes/core/api/read/read-model-root.repository.ts","ng://@generic-ui/hermes/core/api/read/store/read-model.store.ts","ng://@generic-ui/hermes/core/api/event/event.repository.ts","ng://@generic-ui/hermes/core/domain/tactical/entity.ts","ng://@generic-ui/hermes/core/domain/tactical/entity.id.ts","ng://@generic-ui/hermes/core/domain/domain-module.ts","ng://@generic-ui/hermes/core/api/api-module.ts","ng://@generic-ui/hermes/feature/feature-module.ts","ng://@generic-ui/hermes/common/archive.ts","ng://@generic-ui/hermes/core/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/core/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/core/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/core/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/core/domain/hermes-tokens.ts","ng://@generic-ui/hermes/core/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/core/api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command-handler-impl.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command-handlers-token.ts","ng://@generic-ui/hermes/core/domain/command/config/define.ts","ng://@generic-ui/hermes/core/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/core/api/hermes.domain.module.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-handler-impl.ts","ng://@generic-ui/hermes/core/api/hermes.module.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command.ts","ng://@generic-ui/hermes/core/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/core/api/hermes-api.helpers.ts","ng://@generic-ui/hermes/core/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","MessageType","Function","CommandType","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","foundHandlerForCommand","Observable","AggregateEvent","getType","event","AggregateEventType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","forEach","aggregate","findById","aggregateName","name","cloneAggregates","AggregateRoot","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","HermesId","uid","hermesId","AggregateId","DomainEvent","payload","isSameType","setRequestCommand","requestCommandId","fromCommand","setPayload","getPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","publishFromAggregate","console","aggregateEvent","toDomainEvent","DomainEventBus","ofEvent","domainEvent","createEventInstance","ofEventHandler","forEvents","argumentLength","fill","undefined","bind","apply","DomainEventType","Reactive","unsubscribe$","ngOnDestroy","unsubscribe","complete","takeUntil","isNotStopped","isStopped","ReactiveService","Optional","isEmpty","empty","isPresent","filterer","callback","map","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","KeyMap","keys","Map","values","WeakMap","get","key","internalKey","getInternalKey","has","set","size","remove","hasInternalKey","delete","removeAll","clear","AggregateArchive","defaultValue","archive","initArchive","on","archive$","asObservable","distinctUntilChanged","BehaviorSubject","ReplaySubject","EventDrivenRepository","defaultValues","handle","DomainEventPayload","getValue","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","ReadModelRootRepository","domainEventBus","subscribe","EventRepository","onEvent","Entity","id","entity","EntityId","Archive","onValue","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","PersistReadModelStore","stateStore","getById","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","InMemoryReadModelStore","InMemoryStore","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","createAggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","domainEventPublisher","CreateAggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","handleCommand","factory","createCommand","createEvent","repo","_a","AggregateFactoryArchive","add","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","COMMAND_HANDLERS","commandHandlerFactory","commandHandler","CommandHandlerImpl","publishDomainEvents","domainEventHandlerFactory","domainEventHandler","DomainEventHandlerImpl","forEvent","multiDomainEventHandlerFactory","eventTypes","createDomainEventTypes","handleEvent","types","_b","_c","instance","createDomainEventInstance","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesBaseModule","eventHandlers","commandHandlers","definedAggregate","injector","hermesLoggersInitializer","hermesApi","checkNullCommand","checkCommandHandlerIsCollection","checkDomainEventHandlerIsCollection","def","warn","Injector","HermesModule","defineAggregate","aggregateKey","createCommandHandler","domainEventHandlers","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","registerDomainEventHandler","domainEventHandlerType","registerMultiDomainEventHandler","createCommandHandlerType","imports","CommonModule","CreateAggregateCommand","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAgF5E,SAASK,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KAKzC,SAASU,EAAOV,EAAGW,GACtB,IAAIV,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBY,EAAYC,EAA3BT,EAAIH,EAAEI,KAAKL,GAAOc,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIR,EAAEE,QAAQG,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQJ,IAAMA,EAAEH,OAASR,EAAIG,EAAU,SAAIH,EAAEI,KAAKD,GAE1D,QAAkB,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIV,EAAI,EAAGA,EAAIc,UAAUX,OAAQH,IAC3CU,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUd,KACpC,OAAOU,ECvIX,iBAAA,SAAAM,KA8BA,OApBCA,EAAAvB,UAAAwB,UAAA,SAAUC,GACT3B,KAAK2B,WAAaA,GAGnBF,EAAAvB,UAAA0B,IAAA,SAAIC,GACC7B,KAAK8B,YAAYD,IACpB7B,KAAK+B,MAAMF,IAIHJ,EAAAvB,UAAA4B,YAAV,SAAsBD,GAErB,OAAK7B,KAAK2B,YAIUE,EAAQG,WAEjBC,SAASjC,KAAK2B,aAE3BF,KC5BA,kBAAA,SAAAS,mDACA,OAD4CC,EAAAA,EAAAA,GAC5CD,GAD4CT,iBCA5C,SAAAW,mDACA,OADgDD,EAAAA,EAAAA,GAChDC,GADgDX,GCMhDY,EAAA,WAGC,SAAAA,EAAyCC,EAC9BC,EACAC,GAEV,GAJwCxC,KAAAsC,WAAAA,EAC9BtC,KAAAuC,cAAAA,EACAvC,KAAAwC,YAAAA,EAENC,EAAAA,kBAAkBzC,KAAKsC,YAAa,CAsBvCI,OAAgB,UApBP,SAAIC,GACZ,MAAO,CACNC,YAAYC,GACPA,GACHF,EAAIJ,cAAcO,QAClBH,EAAIH,YAAYM,UAEhBH,EAAIJ,cAAcQ,OAClBJ,EAAIH,YAAYO,SAGlBC,WAAWrB,GACNA,IACHgB,EAAIJ,cAAcb,UAAUC,GAC5BgB,EAAIH,YAAYd,UAAUC,MAMVgB,CAAI3C,MAExB0C,OAAgB,UAAEE,SAAU,GAG/B,2BAlCCK,EAAAA,sDAGqDzD,OAAM0D,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBAVZpB,SACAE,KAwCTC,EAlCA,GCVA,IAAakB,EAAwB,yDCOrC,SAAAC,mDAOA,OANmCrB,EAAAA,EAAAA,GAElCqB,EAAAtD,UAAAS,KAAA,SAAKE,GACJ4C,EAAAvD,UAAMS,KAAID,KAAAV,KAACa,wBAJZoC,EAAAA,aAODO,GANmCE,EAAAA,SCRnCC,EAAA,WAUC,SAAAA,EAAoBC,GAAA5D,KAAA4D,cAAAA,EAMrB,OAHCD,EAAAzD,UAAA2D,SAAA,SAASC,GACR9D,KAAK4D,cAAcjD,KAAKmD,wBAPzBb,EAAAA,sDALQO,KAcTG,EAhBA,GCAA,IAAAI,EAAA,WAEA,SAAAA,KASA,OAJQA,EAAAC,SAAP,WACC,OAAOC,KAAKC,SAASlC,SAAS,IAAImC,UAAU,EAAG,IAAMF,KAAKC,SAASlC,SAAS,IAAImC,UAAU,EAAG,IAAM,GAAGJ,EAAsBK,SAHtHL,EAAAK,MAAQ,sBAHfnB,EAAAA,aASDc,EAXA,GCIA,iBAEC,SAAAM,EAAuCC,EACbC,EACFC,QAAA,IAAAA,IAAAA,EAAoBT,EAAsBC,YAF3BhE,KAAAsE,YAAAA,EACbtE,KAAAuE,YAAAA,EACFvE,KAAAwE,UAAAA,EA6CzB,OA1CCH,EAAAnE,UAAAuE,eAAA,WACC,OAAOzE,KAAKuE,aAGbF,EAAAnE,UAAAwE,eAAA,WACC,OAAO1E,KAAKsE,aAGbD,EAAAnE,UAAAyE,aAAA,WACC,OAAO3E,KAAKwE,WAGbH,EAAAnE,UAAA8B,SAAA,WACC,OAAOhC,KAAKuE,aAGbF,EAAAnE,UAAA0E,aAAA,SAAa/C,GACZ,OAAO7B,KAAKyE,mBAAqB5C,EAAQ4C,kBAG1CJ,EAAAnE,UAAA2E,OAAA,SAAOhD,GACN,OAAQ7B,KAAKyE,mBAAqB5C,EAAQ4C,kBAAsBzE,KAAKwE,YAAc3C,EAAQ2C,WAK5FH,EAAAnE,UAAA4E,cAAA,SAAcC,GAAd,IAAAC,EAAAhF,KAEC,OAAIL,MAAMsF,QAAQF,KAELA,EAAIG,MAAI,SAAEX,GAAwB,OAAAS,EAAKG,cAAcZ,MAK1DvE,KAAKmF,cAAcJ,IAIpBV,EAAAnE,UAAAiF,cAAR,SAAsBZ,GACrB,OAAOvE,KAAKyE,mBAAqBF,GAEnCF,KClDA,kBAAA,SAAAe,mDACA,OAD6DjD,EAAAA,EAAAA,GAC7DiD,GAD6Df,GCHhDgB,EAAcC,SCEdC,EAAcF,ICC3B,aCIA,IAAaG,EAA0B,IAAIC,EAAAA,eAA8C,2BCKzFC,EAAA,SAAAjC,GAGC,SAAAiC,EAA6CC,GAA7C,IAAAX,EACCvB,EAAA/C,KAAAV,OAAOA,YAEH2F,IACHX,EAAKY,OAASD,KA+DjB,OArE0DxD,EAAAA,EAAAA,GAUzDuD,EAAAxF,UAAA2F,KAAA,SAAQC,OACDC,EAAa,IAAIL,EAGvB,OAFAK,EAAWH,OAAS5F,KACpB+F,EAAWD,SAAWA,EACfC,GAGRL,EAAAxF,UAAA8F,UAAA,eAAwB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA3E,UAAAX,OAAAsF,IAAAD,EAAAC,GAAA3E,UAAA2E,GACvB,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEtC,GACP,OAAOmC,EAAaI,MAAI,SAAEC,GAAwB,OAAAxC,EAAQgB,cAAcwB,WAK5EZ,EAAAxF,UAAAqG,iBAAA,eAA+B,IAAAC,EAAA,GAAAN,EAAA,EAAAA,EAAA3E,UAAAX,OAAAsF,IAAAM,EAAAN,GAAA3E,UAAA2E,GAC9B,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEtC,GACP,OAAO0C,EAASH,MAAI,SAAEI,GAA+F,OAAAA,EAAQC,WAAW5C,WAK5I4B,EAAAxF,UAAAyG,yBAAA,eAAuC,IAAAH,EAAA,GAAAN,EAAA,EAAAA,EAAA3E,UAAAX,OAAAsF,IAAAM,EAAAN,GAAA3E,UAAA2E,GACtC,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEtC,GACP,OAAO0C,EAASH,MAAI,SAAEI,GAAwG,OAAAA,EAAQC,WAAW5C,WAKrJ4B,EAAAxF,UAAA0G,cAAA,SAA4BJ,EAAoGK,GAC/H,OAAO,KACLV,KACAC,EAAAA,QAAM,SAAEtC,GAEP,IAAK0C,IAAaK,EACjB,OAAO,MAGJC,GAAyB,EAU7B,OARIN,IACHM,GAA0BN,EAASH,MAAI,SAAEI,GAA+F,OAAAA,EAAQC,WAAW5C,OAGxJ+C,IACHC,EAAyBA,IAA2BD,EAAyBR,MAAI,SAAEI,GAA6F,OAAAA,EAAQC,WAAW5C,OAG7LgD,2BAhEX7D,EAAAA,sDAX8BS,EAAAA,QAAOR,WAAA,CAAA,CAAAC,KAcxBC,EAAAA,OAAMC,KAAA,CAACmC,QAmErBE,EAtEA,CAC0DqB,EAAAA,yBCRzD,SAAAC,EACkB1C,EACAnB,GADAnD,KAAAsE,YAAAA,EACAtE,KAAAmD,KAAAA,EAsBnB,OAjBC6D,EAAA9G,UAAAwE,eAAA,WACC,OAAO1E,KAAKsE,aAGb0C,EAAA9G,UAAA+G,QAAA,WACC,OAAOjH,KAAKmD,MAGb6D,EAAA9G,UAAA2E,OAAA,SAAOqC,GACN,OAAOlH,KAAK4E,aAAasC,IACxBlH,KAAK0E,iBAAiBG,OAAOqC,EAAMxC,mBAGrCsC,EAAA9G,UAAA0E,aAAA,SAAasC,GACZ,OAAOlH,KAAKiH,YAAcC,EAAMD,WAGlCD,KC3BA,IAAaG,EAAqB9B,ICGlC,aCAA,MAAA,aCDA,IAAA+B,EAAA,WAAA,SAAAA,IAEkBpH,KAAAqH,OAAyE,GAkC3F,OAhCCD,EAAAlH,UAAAoH,SAAA,SAASC,GACRvH,KAAKqH,OAAOjG,KAAKmG,IAGlBH,EAAAlH,UAAAsH,0BAAA,SAA0BlD,GAEzB,IAAKA,EACJ,MAAO,OAGJmD,EAAa,GAejB,OAbAzH,KAAKqH,OAAOK,SAAO,SAAEH,OAEdI,EAAYJ,EAAMK,SAAStD,GAEjC,GAAIqD,EAAW,KAEVE,EAAgBF,EAAU1H,YAAY6H,KAE1CL,EAAWI,GAAiBF,MAKvB3H,KAAK+H,gBAAgBN,IAGrBL,EAAAlH,UAAA6H,gBAAR,SAAwBN,GAEvB,OAAOA,GAETL,EApCA,GCCA,iBAMC,SAAAY,EAAsB1D,EACEnB,GAAAnD,KAAAmD,KAAAA,EACvBnD,KAAKsE,YAAcA,EACnBtE,KAAKiI,OAAS,GAiChB,OA5BCD,EAAA9H,UAAAgI,MAAA,WACC,OAAOlI,KAAKsE,aAGb0D,EAAA9H,UAAA+G,QAAA,WACC,OAAOjH,KAAKmD,MAGb6E,EAAA9H,UAAAiI,UAAA,WACC,OAAOnI,KAAW,QAKnBgI,EAAA9H,UAAAkI,SAAA,SAAS/E,WAER,GAAI1D,MAAMsF,QAAQ5B,OACjB,IAAkB,IAAAgF,EAAAC,EAAAjF,GAAIkF,EAAAF,EAAA1H,QAAA4H,EAAAzH,KAAAyH,EAAAF,EAAA1H,OAAE,CAAnB,IAAI6H,EAAKD,EAAA1H,MACbb,KAAKiI,OAAO7G,KAAKoH,0GAGlBxI,KAAKiI,OAAO7G,KAAI,IAIlB4G,EAAA9H,UAAAuI,YAAA,WACCzI,KAAKiI,OAAOrH,OAAS,GAEvBoH,KC/CA,iBAIC,SAAAU,EAAsBC,GACrB3I,KAAK2I,IAAMA,EAYb,OAPCD,EAAAxI,UAAAgI,MAAA,WACC,OAAOlI,KAAK2I,KAGbD,EAAAxI,UAAA2E,OAAA,SAAO+D,GACN,OAAO5I,KAAK2I,MAAQC,EAASV,SAE/BQ,KCdA,kBAEC,SAAAG,EAAsBF,UACrBlF,EAAA/C,KAAAV,KAAM2I,IAAI3I,KASZ,OAZ0CmC,EAAAA,EAAAA,GAQzC0G,EAAA3I,UAAA8B,SAAA,WACC,OAAOyB,EAAAvD,UAAMgI,MAAKxH,KAAAV,OAGpB6I,GAZ0CH,GCG1C,kBAMC,SAAAI,EAAsBxE,EACfyE,EACAxE,GAFP,IAAAS,EAGCvB,EAAA/C,KAAAV,KAAMsE,EAAaC,IAAYvE,YAC/BgF,EAAK+D,QAAUA,IAsBjB,OAhC+E5G,EAAAA,EAAAA,GAa9E2G,EAAA5I,UAAA8I,WAAA,SAAW9B,GACV,OAAOlH,KAAKC,YAAY6H,OAASZ,EAAMjH,YAAY6H,MAGpDgB,EAAA5I,UAAA+I,kBAAA,SAAkBnF,GACjB9D,KAAKkJ,iBAAmBpF,EAAQa,gBAGjCmE,EAAA5I,UAAAiJ,YAAA,SAAYrF,GACX,OAAOA,EAAQa,iBAAmB3E,KAAKkJ,kBAGxCJ,EAAA5I,UAAAkJ,WAAA,SAAWL,GACV/I,KAAK+I,QAAUA,GAGhBD,EAAA5I,UAAAmJ,WAAA,WACC,OAAOrJ,KAAK+I,SAEdD,GAhC+EzE,GCN/E,IAAAiF,EAAA,WAQA,SAAAA,IAGStJ,KAAAuJ,aAAgD,GAEhDvJ,KAAAwJ,cAAmD,IAAI9F,EAAAA,QA2DhE,OAzDC4F,EAAApJ,UAAAS,KAAA,SAAKuG,GACJlH,KAAKuJ,aAAanI,KAAK8F,GACvBlH,KAAKwJ,cAAc7I,KAAKuG,IAGzBoC,EAAApJ,UAAAuJ,gBAAA,SAAgBC,GAIf,OAFgD1J,KAAKmI,YAEvCwB,UACTzE,MAAI,SAAEgC,GACN,OAAOA,EAAMjH,YAAY6H,OAAS4B,MAQxCJ,EAAApJ,UAAA0J,aAAA,SAAaF,OAGNxC,EAAQlH,KAAKyJ,gBAAgBC,GAEnC,OAAIxC,EACI2C,EAAAA,GAAG3C,GAIJlH,KAAK8J,2BAA2BJ,IAKxCJ,EAAApJ,UAAA4J,2BAAA,SAA2B/E,OAEtB2E,EAEJ,GAAI3E,aAAe+D,EAClBY,EAAY3E,EAAI9E,YAAY6H,SACtB,CAAA,GAAmB,iBAAR/C,EAGjB,OAAOgF,EAAAA,WAAW,IAAIC,MAAM,+BAF5BN,EAAY3E,EAKb,OAAO/E,KAAKwJ,cACNrD,KACAC,EAAAA,QAAM,SAAEc,GAAU,OAAAA,EAAMjH,YAAY6H,OAAS4B,KAC7CO,EAAAA,KAAK,KAIJX,EAAApJ,UAAAiI,UAAR,WACC,OAAOnI,KAAKuJ,kCA7DbtG,EAAAA,aAgEDqG,EAxEA,qBCWC,SAAAY,EAAoBC,GAApB,IAAAnF,EACCvB,EAAA/C,KAAAV,OAAOA,YADYgF,EAAAmF,WAAAA,IAQrB,OAVuChI,EAAAA,EAAAA,GAMtC+H,EAAAhK,UAAAS,KAAA,SAAKuG,GACJzD,EAAAvD,UAAMS,KAAID,KAAAV,KAACkH,GACXlH,KAAKmK,WAAWxJ,KAAKuG,wBATtBjE,EAAAA,sDAJQqG,KAeTY,GAVuCxG,EAAAA,0BCGtC,SAAA0G,EAAoBC,GAAArK,KAAAqK,YAAAA,EA6CrB,OAxCCD,EAAAlK,UAAAoK,QAAA,SAAQjH,WAEP,GAAI1D,MAAMsF,QAAQ5B,OAEjB,IAAgB,IAAAgF,EAAAC,EAAAjF,GAAIkF,EAAAF,EAAA1H,QAAA4H,EAAAzH,KAAAyH,EAAAF,EAAA1H,OAAE,CAAjB,IAAIoE,EAAGwD,EAAA1H,MACXb,KAAKuK,aAAaxF,0GAET1B,aAAgByF,GAC1B9I,KAAKuK,aAAalH,IAIpB+G,EAAAlK,UAAAsK,qBAAA,SAAqB7C,GAArB,IAAA3C,EAAAhF,KAECyK,QAAQ7I,IAAI,qBAAsB+F,EAAUQ,aAE5CR,EAAUQ,YACNT,SAAO,SAAEgD,GACT1F,EAAKsF,QACJI,EAAeC,qBAKbP,EAAAlK,UAAAqK,aAAR,SAAqBrD,GAEfA,GAEJuD,QAAQpJ,MAAS6F,EAAK,mBAGjBA,aAAiB4B,GAItB2B,QAAQpJ,MAAS6F,EAAK,yBAGvBlH,KAAKqK,YAAY1J,KAAKuG,wBA9CvBjE,EAAAA,sDANQiH,KAsDTE,KC/CA,IAAAQ,EAAA,SAAAnH,GAGC,SAAAmH,EAAYP,GAAZ,IAAArF,EACCvB,EAAA/C,KAAAV,OAAOA,YAEHqK,IACHrF,EAAKY,OAASyE,KAyCjB,OA/CkElI,EAAAA,EAAAA,GAUjEyI,EAAA1K,UAAA2F,KAAA,SAAQC,OACDC,EAAa,IAAI6E,EAGvB,OAFA7E,EAAWH,OAAS5F,KACpB+F,EAAWD,SAAWA,EACfC,GAGR6E,EAAA1K,UAAA2K,QAAA,eAAA,IAAA7F,EAAAhF,KAAsBiI,EAAA,GAAA/B,EAAA,EAAAA,EAAA3E,UAAAX,OAAAsF,IAAA+B,EAAA/B,GAAA3E,UAAA2E,GACrB,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAE0E,GACP,OAAO7C,EAAO5B,MAAI,SAAEa,GAEnB,OADsBlC,EAAK+F,oBAAoB7D,GAC1BtC,aAAakG,WAMvCF,EAAA1K,UAAA8K,eAAA,eAA6B,IAAAxE,EAAA,GAAAN,EAAA,EAAAA,EAAA3E,UAAAX,OAAAsF,IAAAM,EAAAN,GAAA3E,UAAA2E,GAC5B,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEc,GACP,OAAOV,EAASH,MAAI,SAAEI,GAA2E,OAAAA,EAAQwE,UAAU,CAAC/D,YAKhH0D,EAAA1K,UAAA6K,oBAAR,SAA4B7D,OACrB7D,EAAoB,GACzB6H,EAAiBhE,EAAMjH,YAAYW,OAIpC,OAFAyC,EAAK8H,UAAKC,EAAW,EAAGF,GAExB,IAAY,EAAMG,KAAAC,MAAA,EAAAhK,EAAA,MAAA,GAAY+B,0BA7C/BJ,EAAAA,sDALQiH,KAqDTU,EAhDA,CACkE7D,EAAAA,YCTrDwE,EAAkBlG,eCK9B,SAAAmG,IAFiBxL,KAAAyL,aAAe,IAAI/H,EAAAA,QAsBrC,OAjBC8H,EAAAtL,UAAAwL,YAAA,WACC1L,KAAK2L,eAGIH,EAAAtL,UAAAyL,YAAV,WACC3L,KAAKyL,aAAa9K,OAClBX,KAAKyL,aAAaG,YAGTJ,EAAAtL,UAAA2L,UAAV,WACC,OAAOA,EAAAA,UAAU7L,KAAKyL,eAGbD,EAAAtL,UAAA4L,aAAV,WACC,OAAQ9L,KAAKyL,aAAaM,WAG5BP,KCvBA,kBAEC,SAAAQ,WACCvI,EAAA/C,KAAAV,OAAOA,KAOT,OAV8CmC,EAAAA,EAAAA,GAM7C6J,EAAA9L,UAAAwL,YAAA,WACC1L,KAAK2L,eAGPK,GAV8CR,gBCY7C,SAAAS,EAAoBpL,GACnB,OAAKoL,EAASC,QAAQrL,IAAUoL,EAASC,QAAQrL,GACzCoL,EAASE,SAEjBnM,KAAKa,MAAQA,EACNb,MAuET,OA1FQiM,EAAAE,MAAP,WACC,OAAO,IAAIF,EAAc,OAGnBA,EAAApC,GAAP,SAAahJ,GACZ,OAAO,IAAIoL,EAAYpL,IAGToL,EAAAC,QAAf,SAAuBrL,GACtB,OAAO,MAAOA,GAafoL,EAAA/L,UAAAgM,QAAA,WACC,OAAOD,EAASC,QAAQlM,KAAKa,QAG9BoL,EAAA/L,UAAAkM,UAAA,WACC,OAAQpM,KAAKkM,WAGdD,EAAA/L,UAAAkG,OAAA,SAAOiG,GACN,OAAIrM,KAAKoM,aAAeC,EAASrM,KAAKa,OAC9Bb,KAEDiM,EAASE,SAGjBF,EAAA/L,UAAAwH,QAAA,SAAQ4E,GACHtM,KAAKoM,aACRE,EAAStM,KAAKa,QAIhBoL,EAAA/L,UAAAqM,IAAA,SAAOC,GACN,OAAIxM,KAAKoM,YACD,IAAIH,EAAYO,EAAOxM,KAAKa,QAE7BoL,EAASE,SAMjBF,EAAA/L,UAAAuM,2BAAA,WACC,OAAOzM,KAAKa,OAGboL,EAAA/L,UAAAwM,WAAA,WACC,GAAI1M,KAAKkM,UACR,MAAM,IAAIlC,MAAM,0CAEjB,OAAOhK,KAAKa,OAGboL,EAAA/L,UAAAyM,UAAA,SAAuBC,GACtB,OAAI5M,KAAKoM,YACDpM,KAAKa,MAEN+L,KAGRX,EAAA/L,UAAA2M,UAAA,SAAUC,GACL9M,KAAKoM,aACRU,EAAO9M,KAAKa,QAIdoL,EAAA/L,UAAA6M,QAAA,SAAQD,GACH9M,KAAKkM,WACRY,KAIFb,EAAA/L,UAAA8M,OAAA,SAAoBJ,GACnB,OAAI5M,KAAKoM,YACDpM,KAED4M,KAGTX,KCzFA,iBAAA,SAAAgB,IAEkBjN,KAAAkN,KAAO,IAAIC,IAEXnN,KAAAoN,OAAS,IAAIC,QAmD/B,OAjDCJ,EAAA/M,UAAAoN,IAAA,SAAIC,OAEGC,EAAcxN,KAAKyN,eAAeF,GAExC,YAAoBnC,IAAhBoC,EACIvB,EAASpC,GAAG7J,KAAKoN,OAAOE,IAAIE,IAE5BvB,EAASE,SAIlBc,EAAA/M,UAAAwN,IAAA,SAAIH,OAEGC,EAAcxN,KAAKyN,eAAeF,GAExC,OAAOvN,KAAKoN,OAAOM,IAAIF,IAGxBP,EAAA/M,UAAAyN,IAAA,SAAIJ,EAAQ1M,GACXb,KAAKkN,KAAKS,IAAIJ,EAAIvL,WAAYuL,GAC9BvN,KAAKoN,OAAOO,IAAIJ,EAAK1M,IAGtBoM,EAAA/M,UAAA0N,KAAA,WACC,OAAO5N,KAAKkN,KAAKU,MAGlBX,EAAA/M,UAAA2N,OAAA,SAAON,GACFvN,KAAK8N,eAAeP,KACvBvN,KAAKkN,KAAKa,OAAOR,EAAIvL,YACrBhC,KAAKoN,OAAOW,OAAOR,KAIrBN,EAAA/M,UAAA8N,UAAA,WAAA,IAAAhJ,EAAAhF,KACCA,KAAKkN,KAAKxF,SAAO,SAAE7G,GAClBmE,EAAKoI,OAAOW,OAAOlN,MAEpBb,KAAKkN,KAAKe,SAGHhB,EAAA/M,UAAAuN,eAAR,SAAuBF,GACtB,OAAOvN,KAAKkN,KAAKI,IAAIC,EAAIvL,aAGlBiL,EAAA/M,UAAA4N,eAAR,SAAuBP,GACtB,OAAOvN,KAAKkN,KAAKQ,IAAIH,EAAIvL,aAG3BiL,KC7CA,kBAMC,SAAAiB,EAAsBC,GAAtB,IAAAnJ,EACCvB,EAAA/C,KAAAV,OAAOA,YALAgF,EAAAoJ,QAAU,IAAInB,EAMrBjI,EAAKqJ,YAAYF,KAoCnB,OA5CkDhM,EAAAA,EAAAA,GAWjD+L,EAAAhO,UAAAoO,GAAA,SAAGhK,GAAH,IAAAU,EAAAhF,KACC,OAAOA,KAAKuO,SACNC,eACArI,KACAC,EAAAA,QAAM,WAAO,OAAApB,EAAK8G,kBAClBS,EAAAA,KAAG,SAAEA,GACJ,OAAOA,EAAIe,IAAIhJ,MAEhB8B,EAAAA,QAAM,SAAEvF,GAAuB,OAAAA,EAAMuL,eACrCG,EAAAA,KAAG,SAAE1L,GAAuB,OAAAA,EAAM4L,gCAClCgC,EAAAA,uBACAzO,KAAK6L,cAIZqC,EAAAhO,UAAAoN,IAAA,SAAIhJ,GACH,OAAOtE,KAAKoO,QAAQd,IAAIhJ,IAGzB4J,EAAAhO,UAAAS,KAAA,SAAK2D,EAA0BzD,GAC9Bb,KAAKoO,QAAQT,IAAIrJ,EAAazD,GAC9Bb,KAAKuO,SAAS5N,KAAKX,KAAKoO,UAGjBF,EAAAhO,UAAAmO,YAAR,SAAoBF,GACfA,GACHnO,KAAKoO,QAAQT,IAAIQ,EAAa7J,YAAa6J,EAAatN,OACxDb,KAAKuO,SAAW,IAAIG,EAAAA,gBAAwC1O,KAAKoO,UAEjEpO,KAAKuO,SAAW,IAAII,EAAAA,cAAsC,IAI7DT,GA5CkDlC,GCNlD,kBAEC,SAAA4C,EAAsBC,UACrBpL,EAAA/C,KAAAV,KAAM6O,IAAc7O,KAQtB,OAXwGmC,EAAAA,EAAAA,GAQvGyM,EAAA1O,UAAA4O,OAAA,SAAO5H,GACNlH,KAAKW,KAAKuG,EAAMxC,iBAAkBwC,EAAMmC,eAE1CuF,GAXwGV,GCPxG,IAAAa,EAAA,WAEC,SAAAA,EAA6BlO,GAAAb,KAAAa,MAAAA,EAM9B,OAHCkO,EAAA7O,UAAA8O,SAAA,WACC,OAAOhP,KAAKa,OAEdkO,EARA,GCEA,iBAIC,SAAAE,EAAsBC,GACrBlP,KAAKmP,SAAWD,EAMlB,OAHCD,EAAA/O,UAAAgI,MAAA,WACC,OAAOlI,KAAKmP,UAEdF,KCbA,IAAAG,EAAA,WAIC,SAAAA,EAAsBzG,GACrB3I,KAAK2I,IAAMA,EAcb,OAXCyG,EAAAlP,UAAA8B,SAAA,WACC,OAAOhC,KAAK2I,KAGbyG,EAAAlP,UAAAgI,MAAA,WACC,OAAOlI,KAAK2I,KAGbyG,EAAAlP,UAAA2E,OAAA,SAAOsK,GACN,OAAOnP,KAAK2I,MAAQwG,EAASjH,SAE/BkH,EAnBA,GCEA,iBAIC,SAAAC,EAAsBH,GACrBlP,KAAKsP,OAASJ,EAOhB,OAJCG,EAAAnP,UAAAgI,MAAA,WACC,OAAOlI,KAAKsP,QAGdD,KCZA,iBAIC,SAAAE,EAAsB5G,GACrB3I,KAAK2I,IAAMA,EAiBb,OAZC4G,EAAArP,UAAA8B,SAAA,WACC,OAAOhC,KAAK2I,KAGb4G,EAAArP,UAAAgI,MAAA,WACC,OAAOlI,KAAK2I,KAGb4G,EAAArP,UAAA2E,OAAA,SAAOsK,GACN,OAAOnP,KAAK2I,MAAQwG,EAASjH,SAG/BqH,KClBA,kBAEC,SAAAC,EAAsBC,GAAtB,IAAAzK,EACCvB,EAAA/C,KAAAV,OAAOA,YACPyP,EACE5E,QAAOS,MADTmE,EAAcnO,EAET0D,EAAKiG,cAER9E,KACAnB,EAAK6G,aAEL6D,WAAS,SAAExI,GAEX,IACClC,EAAK0K,UAAUxI,GACd,MAAOhG,GAERuJ,QAAQpJ,MAAMH,SASnB,OA1B6EiB,EAAAA,EAAAA,GA0B7EqN,GA1B6EhE,GCA7E,MAAA,aCIA,kBAEC,SAAAmE,EAAuCF,GAAvC,IAAAzK,EACCvB,EAAA/C,KAAAV,OAAOA,YAD+BgF,EAAAyK,eAAAA,IAcxC,OAhBgGtN,EAAAA,EAAAA,GAMrFwN,EAAAzP,UAAA0P,QAAV,SAAkBtL,EAAgBoF,GACjC,OAAO1J,KAAKyP,eACN5E,QAAO,GAGP1E,KACAC,EAAAA,QAAM,SAAEc,GAAoC,OAAAA,EAAMxC,iBAAiB1C,aAAesC,EAAYtC,cAC9FhC,KAAK6L,cAGb8D,GAhBgG3D,GCRhG,iBAIC,SAAA6D,EAAsBC,GACrB9P,KAAKmP,SAAWW,EAWlB,OARCD,EAAA3P,UAAAgI,MAAA,WACC,OAAOlI,KAAKmP,UAGbU,EAAA3P,UAAA2E,OAAA,SAAOkL,GACN,OAAO/P,KAAKmP,SAAStK,OAAOkL,EAAO7H,UAGrC2H,KChBA,mBAAA,SAAAG,mDAEA,OAFmD7N,EAAAA,EAAAA,GAEnD6N,GAFmDtH,GCFnD,OAEC,gBCAA,gBCAA,2BCIA,SAAAuH,EAAsBpP,GAEpBb,KAAKuO,SADF1N,EACa,IAAI6N,EAAAA,gBAAgB7N,GAEpB,IAAI8N,EAAAA,cAAc,GAYrC,OARCsB,EAAA/P,UAAAgQ,QAAA,WACC,OAAOlQ,KAAKuO,SAASC,gBAGtByB,EAAA/P,UAAAS,KAAA,SAAKE,GACJb,KAAKuO,SAAS5N,KAAKE,IAGrBoP,KCpBA,kBAIC,SAAAE,EAAsBxH,GACrB3I,KAAKoQ,gBAAkBzH,EAWzB,OARCwH,EAAAjQ,UAAAmQ,mBAAA,WACC,OAAOrQ,KAAKoQ,iBAGbD,EAAAjQ,UAAAgI,MAAA,WACC,OAAOlI,KAAKqQ,qBAAqBrO,YAGnCmO,KCZA,kBAAA,SAAAG,IAEkBtQ,KAAAuQ,MAAwB,IAAIpD,IAuB9C,OArBCmD,EAAApQ,UAAAyN,IAAA,SAAI6C,GACHxQ,KAAKuQ,MAAM5C,IAAI6C,EAAOtI,QAASsI,IAGhCF,EAAApQ,UAAAuQ,QAAA,SAAQC,GAAR,IAAA1L,EAAAhF,KACC0Q,EAAQhJ,SAAO,SAAE8I,GAChBxL,EAAK2I,IAAI6C,OAIXF,EAAApQ,UAAAoN,IAAA,SAAIhJ,GACH,OAAO2H,EAASpC,GAAG7J,KAAKuQ,MAAMjD,IAAIhJ,EAAYtC,cAG/CsO,EAAApQ,UAAAyQ,OAAA,WACC,OAAOhR,MAAMiR,KAAK5Q,KAAKuQ,MAAMnD,WAG9BkD,EAAApQ,UAAA+N,MAAA,WACCjO,KAAKuQ,MAAMtC,SAEbqC,KCrBA,mBAIC,SAAAO,EAAuCC,GAAvC,IAAA9L,EACCvB,EAAA/C,KAAAV,OAAOA,YAD+BgF,EAAA8L,WAAAA,IA0BxC,OA5BqC3O,EAAAA,EAAAA,GAQpC0O,EAAA3Q,UAAA6Q,QAAA,SAAQzM,GACP,OAAOtE,KAAKgP,SAAS1K,IAGtBuM,EAAA3Q,UAAAyQ,OAAA,WACC,OAAO3Q,KAAKgR,gBAGLH,EAAA3Q,UAAA8Q,aAAR,WAAA,IAAAhM,EAAAhF,KACC,OAAOA,KAAK8Q,WACNH,SACApE,KAAG,SAAEiE,GAAc,OAAAxL,EAAKiM,YAAYT,OAGnCK,EAAA3Q,UAAA8O,SAAR,SAAiB1K,GAGhB,OAFkBtE,KAAK8Q,WAAWxD,IAAIhJ,GAErBiI,IAAIvM,KAAKiR,cAG5BJ,GA5BqCK,GCArC,mBAEC,SAAAC,EAAuCL,EACfM,GADxB,IAAApM,EAECvB,EAAA/C,KAAAV,OAAOA,YAF+BgF,EAAA8L,WAAAA,EACf9L,EAAAoM,uBAAAA,EAEvBpM,EAAKoM,uBAAuB9J,SAAStC,KA4BvC,OAjCiJ7C,EAAAA,EAAAA,GAYhJgP,EAAAjR,UAAAmR,KAAA,SAAK1J,GACJ3H,KAAKsR,UAAU3J,IAGhBwJ,EAAAjR,UAAA0H,SAAA,SAAStD,GACR,OAAOtE,KAAKgP,SAAS1K,IAGd6M,EAAAjR,UAAAoR,UAAR,SAAkB3J,OAEX6I,EAASxQ,KAAKuR,SAAS5J,GAE7B3H,KAAK8Q,WAAWnD,IAAI6C,IAGbW,EAAAjR,UAAA8O,SAAR,SAAiB1K,GAGhB,OAFkBtE,KAAK8Q,WAAWxD,IAAIhJ,GAErBiI,IAAIvM,KAAKwR,aAG5BL,GAjCiJM,GCFjJ,mBAEC,SAAAC,EAAuCC,EACfP,GADxB,IAAApM,EAECvB,EAAA/C,KAAAV,OAAOA,YAF+BgF,EAAA2M,cAAAA,EACf3M,EAAAoM,uBAAAA,EAEvBpM,EAAKoM,uBAAuB9J,SAAStC,KAmCvC,OAxCwG7C,EAAAA,EAAAA,GAUvGuP,EAAAxR,UAAAmR,KAAA,SAAKtM,GAAL,IAAAC,EAAAhF,KAEC,GAAIL,MAAMsF,QAAQF,GACjBA,EAAI2C,SAAO,SAAEC,GACZ3C,EAAK2M,cAAchE,IAAIhG,UAElB,KACAA,EAAY5C,EAElB/E,KAAK2R,cAAchE,IAAIhG,KAIzB+J,EAAAxR,UAAA0H,SAAA,SAAStD,OAEFsN,EAAe5R,KAAK2R,cAAcrE,IAAIhJ,GAI5C,OAFAsN,EAAa/E,WAAS,SAAEgF,GAAM,OAAAA,EAAEpJ,iBAEzBmJ,GAGRF,EAAAxR,UAAAyQ,OAAA,WACC,OAAO3Q,KAAK2R,cAAchB,UAG3Be,EAAAxR,UAAA2N,OAAA,SAAOvJ,GACNtE,KAAK2R,cAAc5D,OAAOzJ,IAG5BoN,GAxCwGD,GCExG,mBAKC,SAAAK,EAAuCH,GAAvC,IAAA3M,EACCvB,EAAA/C,KAAAV,OAAOA,YAD+BgF,EAAA2M,cAAAA,IAyBxC,OA3BqCxP,EAAAA,EAAAA,GAQpC2P,EAAA5R,UAAA6Q,QAAA,SAAQzM,GAIP,OAAOtE,KAAKgP,SAAS1K,IAGtBwN,EAAA5R,UAAAyQ,OAAA,WAAA,IAAA3L,EAAAhF,KACC,OAAOA,KAAK2R,cACNhB,SACApE,KAAG,SAAE5E,GAAiB,OAAA3C,EAAKiM,YAAYtJ,OAGtCmK,EAAA5R,UAAA8O,SAAR,SAAiB1K,GAGhB,OAFkCtE,KAAK2R,cAAcrE,IAAIhJ,GAErCiI,IAAIvM,KAAKiR,YAAY5F,KAAKrL,QAGhD8R,GA3BqCZ,GCXrC,kBAAA,SAAAa,IAEkB/R,KAAAuQ,MAAwB,IAAIpD,IAgC9C,OA9BC4E,EAAA7R,UAAAyN,IAAA,SAAIhG,GACH3H,KAAKuQ,MAAM5C,IAAIhG,EAAUO,QAAQlG,WAAY2F,IAG9CoK,EAAA7R,UAAAuQ,QAAA,SAAQhJ,GAAR,IAAAzC,EAAAhF,KACCyH,EAAWC,SAAO,SAAEC,GACnB3C,EAAK2I,IAAIhG,OAIXoK,EAAA7R,UAAAoN,IAAA,SAAIhJ,GACH,OAAO2H,EAASpC,GAAG7J,KAAKuQ,MAAMjD,IAAIhJ,EAAYtC,cAG/C+P,EAAA7R,UAAAyQ,OAAA,WACC,OAAOhR,MAAMiR,KAAK5Q,KAAKuQ,MAAMnD,WAG9B2E,EAAA7R,UAAAwN,IAAA,SAAIpJ,GACH,OAAOtE,KAAKuQ,MAAM7C,IAAIpJ,EAAYtC,aAGnC+P,EAAA7R,UAAA6N,OAAA,SAAOzJ,GACNtE,KAAKuQ,MAAMxC,OAAOzJ,EAAYtC,aAG/B+P,EAAA7R,UAAA+N,MAAA,WACCjO,KAAKuQ,MAAMtC,SAGb8D,KCtCA,mBCiBC,SAAAC,EAAYC,GAAZ,IAAAjN,EACCvB,EAAA/C,KAAAV,OAAOA,YALAgF,EAAAnC,SAAU,EAEVmC,EAAAyG,aAAe,IAAI/H,EAAAA,QAK1BuO,EACE9L,KACAC,EAAAA,QAAM,WAAO,OAAApB,EAAKnC,WAClBgJ,EAAAA,UAAU7G,EAAKyG,eAEfiE,WAAS,SAAE5L,GACXkB,EAAKpD,IAAIkC,QAsBb,OArC0C3B,EAAAA,EAAAA,GAmBzC6P,EAAA9R,UAAAwL,YAAA,WACC1L,KAAKyL,aAAa9K,OAClBX,KAAKyL,aAAaG,YAGnBoG,EAAA9R,UAAA4C,MAAA,WACC9C,KAAK6C,SAAU,GAGhBmP,EAAA9R,UAAA6C,KAAA,WACC/C,KAAK6C,SAAU,GAGNmP,EAAA9R,UAAA6B,MAAV,SAAgB+B,GAEf2G,QAAQ7I,IAAIkC,EAAQ9B,WAAY8B,wBAnCjCb,EAAAA,sDANQyC,KA4CTsM,GArC0C9P,sBCN1C,SAAAgQ,mDAWA,OAXuC/P,EAAAA,EAAAA,GAEtC+P,EAAAhS,UAAA4C,MAAA,aAGAoP,EAAAhS,UAAA6C,KAAA,aAGUmP,EAAAhS,UAAA6B,MAAV,SAAgB+B,KAGjBoO,GAXuChQ,kBCatC,SAAAiQ,EAAYC,EACQhB,GADpB,IAAApM,EAECvB,EAAA/C,KAAAV,OAAOA,YADYgF,EAAAoM,uBAAAA,EALZpM,EAAAnC,SAAU,EAEVmC,EAAAyG,aAAe,IAAI/H,EAAAA,QAM1B0O,EACEjM,KACAC,EAAAA,QAAM,WAAO,OAAApB,EAAKnC,WAClBgJ,EAAAA,UAAU7G,EAAKyG,eAEfiE,WAAS,SAAE5E,GACX9F,EAAKpD,IAAIkJ,QAyBb,OAzCwC3I,EAAAA,EAAAA,GAoBvCgQ,EAAAjS,UAAAwL,YAAA,WACC1L,KAAKyL,aAAa9K,OAClBX,KAAKyL,aAAaG,YAGnBuG,EAAAjS,UAAA4C,MAAA,WACC9C,KAAK6C,SAAU,GAGhBsP,EAAAjS,UAAA6C,KAAA,WACC/C,KAAK6C,SAAU,GAGNsP,EAAAjS,UAAA6B,MAAV,SAAgB+I,OACTxG,EAAcwG,EAAYpG,iBAC/B+C,EAAazH,KAAKoR,uBAAuB5J,0BAA0BlD,GAGpEmG,QAAQ7I,IAAIkJ,EAAY9I,WAAY8I,EAAarD,wBAvClDxE,EAAAA,sDANQ2H,SAEAxD,KA8CT+K,GAzCwC/P,sBCRxC,SAAAiQ,mDAWA,OAXqClQ,EAAAA,EAAAA,GAEpCkQ,EAAAnS,UAAA4C,MAAA,aAGAuP,EAAAnS,UAAA6C,KAAA,aAGAsP,EAAAnS,UAAA6B,MAAA,SAAMmF,KAGPmL,GAXqCjQ,GCJrCkQ,GAAA,WAUC,SAAAA,EAAyChQ,EAC9BC,EACAC,GAF8BxC,KAAAsC,WAAAA,EAC9BtC,KAAAuC,cAAAA,EACAvC,KAAAwC,YAAAA,EAyBZ,OAtBC8P,EAAApS,UAAA4C,MAAA,WACC9C,KAAKuS,gBAGND,EAAApS,UAAA6C,KAAA,WACC/C,KAAKwS,eAGEF,EAAApS,UAAAqS,aAAR,WACK9P,EAAAA,kBAAkBzC,KAAKsC,cAC1BtC,KAAKuC,cAAcO,QACnB9C,KAAKwC,YAAYM,UAIXwP,EAAApS,UAAAsS,YAAR,WACK/P,EAAAA,kBAAkBzC,KAAKsC,cAC1BtC,KAAKuC,cAAcQ,OACnB/C,KAAKwC,YAAYO,6BA1BnBE,EAAAA,+EAGaG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBANZpB,SADAE,KAkCTkQ,EArCA,GCUA,SAAgBG,GAA0HC,EAAoEC,EAA+CC,EAA8D/K,EAAuBgL,GACjV,OAAO,IAAIC,GAA2CJ,EAA+BC,EAAgBC,EAA4B/K,EAAegL,GAGjJ,kBAIC,SAAAC,EAA6BJ,EACTK,EACAH,EACAI,EACAH,GAJS7S,KAAA0S,8BAAAA,EACT1S,KAAA+S,wBAAAA,EACA/S,KAAA4S,2BAAAA,EACA5S,KAAAgT,cAAAA,EACAhT,KAAA6S,qBAAAA,EACnB7S,KAAKsG,YAActG,KAAKiT,wBAAwBxO,iBA+ClD,OA5CCqO,EAAA5S,UAAAgT,cAAA,SAAcpP,GAAd,IAAAkB,EAAAhF,KAEOsE,EAAcR,EAAQY,iBAET1E,KAAK+S,wBAAwBzF,IAAItN,KAAKgT,eAI9CnG,WAAS,SAAEsG,OAEfxL,EAAYwL,EAAQhT,OAAOmE,GAE3BnB,EAAOwE,EAAUV,UAGjBmM,EAAgB,IAFMzL,EAAU0L,cAEhB,CAA6B/O,EAAanB,GAEhEwE,EAAUS,SAASgL,GAEGpO,EAAK4N,2BAA2BtF,IAAItI,EAAKgO,eAEjDnG,WAAS,SAAEyG,GAExBA,EAAKjC,KAAK1J,GAEV3C,EAAK6N,qBAAqBrI,qBAAqB7C,UAMlDmL,EAAA5S,UAAAwG,WAAA,SAAW5C,GACV,OAAO9D,KAAKsG,cAAgBxC,EAAQW,kBAG7BqO,EAAA5S,UAAA+S,sBAAR,iBACO5P,EAAoB,GACzB6H,EAAiBlL,KAAK0S,8BAA8BhM,aAAazG,YAAYW,OAI9E,OAFAyC,EAAK8H,UAAKC,EAAW,EAAGF,GAExB,KAAYqI,EAACvT,KAAK0S,8BAA8BhM,cAAoB2E,KAAAC,MAAAiI,EAAAjS,EAAA,MAAA,GAAI+B,MAG1EyP,KCnEA,kBCYC,SAAAU,IAFiBxT,KAAAuM,IAAM,IAAIY,IAa5B,OARCqG,EAAAtT,UAAAuT,IAAA,SAAIlG,EAAa4F,GAEhBnT,KAAKuM,IAAIoB,IAAIJ,EAAK4F,IAGnBK,EAAAtT,UAAAoN,IAAA,SAAIC,GACH,OAAOtB,EAASpC,GAAG7J,KAAKuM,IAAIe,IAAIC,KAElCiG,KAEA,kBAIC,SAAAE,IAFiB1T,KAAAuM,IAAM,IAAIY,IAa5B,OARCuG,EAAAxT,UAAAuT,IAAA,SAAIlG,EAAaoG,GAEhB3T,KAAKuM,IAAIoB,IAAIJ,EAAKoG,IAGnBD,EAAAxT,UAAAoN,IAAA,SAAIC,GACH,OAAOtB,EAASpC,GAAG7J,KAAKuM,IAAIe,IAAIC,KAElCmG,KC3CA,ICAAE,GAAA,WAEA,SAAAA,KAMA,OAHCA,EAAA1T,UAAAwL,YAAA,iCAHAmI,EAAAA,SAAQxQ,KAAA,CAAC,MAMVuQ,EARA,GCAaE,GAAmB,kCCQhC,SAAgBC,GACfC,EACApB,EACA/K,GAEA,OAAO,IAAIoM,GAA4BD,EAAgBpB,EAA4B/K,GAGpF,kBAIC,SAAAoM,EAA6BD,EACTpB,EACAI,GAFShT,KAAAgU,eAAAA,EACThU,KAAA4S,2BAAAA,EACA5S,KAAAgT,cAAAA,EACnBhT,KAAKsG,YAActG,KAAKiT,wBAAwBxO,iBAuClD,OApCCwP,EAAA/T,UAAAgU,oBAAA,SAAoBvM,EAAc7D,GACjC9D,KAAKgU,eAAe1J,QAAQ3C,EAAW7D,IAGxCmQ,EAAA/T,UAAAgT,cAAA,SAAcpP,GAAd,IAAAkB,EAAAhF,KAEOsE,EAAcR,EAAQY,iBAEN1E,KAAK4S,2BAA2BtF,IAAItN,KAAKgT,eAEjDnG,WAAS,SAAEyG,GAEHA,EAAK1L,SAAStD,GAEtBuI,WAAS,SAAElF,GAEvB3C,EAAKgP,eAAelF,OAAOnH,EAAW7D,GAEtCkB,EAAKkP,oBAAoBvM,EAAW7D,UAKvCmQ,EAAA/T,UAAAwG,WAAA,SAAW5C,GACV,OAAO9D,KAAKsG,cAAgBxC,EAAQW,kBAG7BwP,EAAA/T,UAAA+S,sBAAR,iBACO5P,EAAoB,GACzB6H,EAAiBlL,KAAKgU,eAAetN,aAAazG,YAAYW,OAI/D,OAFAyC,EAAK8H,UAAKC,EAAW,EAAGF,GAExB,KAAYqI,EAACvT,KAAKgU,eAAetN,cAAoB2E,KAAAC,MAAAiI,EAAAjS,EAAA,MAAA,GAAI+B,MAG3D4Q,KCvDA,SAAgBE,GACfC,GAEA,OAAO,IAAIC,GAA6BD,EAAoB,CAACA,EAAmBE,aAIjF,SAAgBC,GACfH,GAEA,OAAO,IAAIC,GAA6BD,EAAoBA,EAAmBnJ,aAIhF,kBAIC,SAAAoJ,EAA6BD,EACTnM,GADSjI,KAAAoU,mBAAAA,EACTpU,KAAAiI,OAAAA,EACnBjI,KAAKwU,WAAaxU,KAAKyU,yBAoCzB,OAjCCJ,EAAAnU,UAAAwU,YAAA,SAAYxN,GACXlH,KAAKoU,mBAAmBtF,OAAO5H,IAGhCmN,EAAAnU,UAAA+K,UAAA,SAAUhD,GAAV,IAAAjD,EAAAhF,KACC,OAAOiI,EAAO5B,MAAI,SAAEa,GACnB,OAAOlC,EAAKwP,WAAWnO,MAAI,SAAElD,GAC5B,OAAOA,IAAS+D,EAAMzC,wBAKjB4P,EAAAnU,UAAAuU,uBAAR,mBAEKE,EAAQ,OAEZ,IAAkB,IAAAC,EAAAtM,EAAAtI,KAAKiI,QAAM4M,EAAAD,EAAAjU,QAAAkU,EAAA/T,KAAA+T,EAAAD,EAAAjU,OAAE,CAA1B,IAAI6H,EAAKqM,EAAAhU,MACTiU,EAAW9U,KAAK+U,0BAA0BvM,GAC9CmM,EAAMvT,KAAK0T,EAASrQ,oHAGrB,OAAOkQ,GAGAN,EAAAnU,UAAA6U,0BAAR,SAAkCrL,OAC3BrG,EAAoB,GACzB6H,EAAiBxB,EAAUzJ,YAAYW,OAIxC,OAFAyC,EAAK8H,UAAKC,EAAW,EAAGF,GAExB,IAAY,EAAUG,KAAAC,MAAA,EAAAhK,EAAA,MAAA,GAAY+B,MAGpCgR,SCcMW,GAAS1T,EAAA,CACd,CAAE2T,Qd7EiC,6Bc6EFC,UAAU,GAC3C,CAAED,Qd/EmC,+Bc+EFC,UAAU,GAC7C,CAAED,QAAS/S,EAAeiT,WAAYC,GAAsBC,KAAM,CdhF7B,+BcgFsDrD,GAAsBE,KACjH,CAAE+C,QAAS7S,EAAmB+S,WAAYG,GAAoBD,KAAM,CdhFjC,6BcgFwDlD,GAAoBE,KAC/GL,GACAE,GACAG,GACAF,GACAG,GACAkB,GACAE,IA3BuB,CACvB3P,EACA,CAAEkR,QAASzP,EAAyB+P,YAAa/R,GACjDkC,EACAlC,EACAG,EACAyD,EAEAwD,EACAV,EACAE,EACAd,EAEAjH,IAkBD,SAAgB+S,GAAqBvS,EAAkB2S,EAA4CC,GAElG,OAAI5S,EACI2S,EAEAC,EAIT,SAAgBH,GAAmBzS,EAAkB6S,EAAwCC,GAE5F,OAAI9S,EACI6S,EAEAC,EAIT,IAAAC,GAAA,SAAAnS,GAEC,SAAAmS,EAAuDC,EACGhP,EACjBiP,EACQC,EAC9CC,EACAjD,EACAH,EACAX,EACAxC,EACQwG,EACAC,GAVX,IAAAlR,EAWCvB,EAAA/C,KAAAV,OAAOA,YAFGgF,EAAAiR,yBAAAA,EACAjR,EAAAkR,UAAAA,EAGVlR,EAAKiR,yBAAyBnT,QAE9BkC,EAAKmR,iBAAiBlE,EAAY6D,EAAiBjP,GACnD7B,EAAKoR,gCAAgCN,GACrC9Q,EAAKqR,oCAAoCR,GAErCE,GACHA,EAAiBrO,SAAO,SAAE4O,OAEnBnD,EAAU6C,EAAS1I,IAAIgJ,EAAInD,SAChCQ,EAAaqC,EAAS1I,IAAIgJ,EAAI3C,YAE/BZ,EAAwBU,IAAI6C,EAAI/I,IAAK4F,GACrCP,EAA2Ba,IAAI6C,EAAI/I,IAAKoG,MAItC9M,GAEHA,EAAyBa,SAAO,SAAEjB,GACjCwL,EACEtL,yBAAyBF,GACzBN,KAAKnB,EAAK6G,aACV6D,WAAS,SAAE5L,GACX2C,EAAQyM,cAAcpP,SAKtBgS,GACHA,EAAgBpO,SAAO,SAAEjB,GACxBwL,EACE1L,iBAAiBE,GACjBN,KAAKnB,EAAK6G,aACV6D,WAAS,SAAE5L,GACX2C,EAAQyM,cAAcpP,SAKtB+R,GAEHA,EAAcnO,SAAO,SAAEjB,GACtBgJ,EACEzE,eAAevE,GACfN,KAAKnB,EAAK6G,aACV6D,WAAS,SAAExI,GACXT,EAAQiO,YAAYxN,WAiD1B,OA/GyI/E,EAAAA,EAAAA,GA6ExIyT,EAAA1V,UAAAwL,YAAA,WACCjI,EAAAvD,UAAMwL,YAAWhL,KAAAV,MACjBA,KAAKiW,yBAAyBlT,QAGvB6S,EAAA1V,UAAAiW,iBAAR,SACClE,EACA6D,EACAjP,GAGAoL,EACErL,cAAckP,EAAiBjP,GAC/BV,KAAKnG,KAAK6L,aACV6D,WAAS,SAAE5L,GAEX2G,QAAQpJ,MAAM,WAAWyC,EAAQ9B,WAAU,mDAItC4T,EAAA1V,UAAAkW,gCAAR,SAAwCN,GACnCA,IAAoBnW,MAAMsF,QAAQ6Q,IAErCrL,QAAQ8L,KAAK,wEAIPX,EAAA1V,UAAAmW,oCAAR,SAA4CR,GACvCA,IAAkBlW,MAAMsF,QAAQ4Q,IAEnCpL,QAAQ8L,KAAK,+GAzGuD5W,MAAKuD,WAAA,CAAA,CAAAC,KAA9D8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YACoD5D,MAAKuD,WAAA,CAAA,CAAAC,KAArF8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CP9G0B,uDO+GU1D,MAAKuD,WAAA,CAAA,CAAAC,KAA3D8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CAACyQ,aAC4CnU,MAAKuD,WAAA,CAAA,CAAAC,KAApE8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CLnHiB,8CKAvBmT,EAAAA,gBAuCRhD,UAAyBE,UAhCzBhO,SAOAkF,SAmBA0H,UATAjQ,KAqMTuT,EA/GA,CAAyIpK,GAiHzI,IAAAiL,GAAA,SAAAhT,GAoGC,SAAAgT,EAAuDZ,EACGhP,EACjBiP,EACQC,EAC9CC,EACAjD,EACAH,EACAX,EACAxC,EACAwG,EACAC,UACFzS,EAAA/C,KAAAV,KACC6V,EACAhP,EACAiP,EACAC,EACAC,EACAjD,EACAH,EACAX,EACAxC,EACAwG,EACAC,IACAlW,KA0BH,OA/IkCmC,EAAAA,EAAAA,GAE1BsU,EAAAC,gBAAP,SAAgGC,EACxExD,EACAQ,EACAiD,EACAd,EACAe,GACvB,YAFuB,IAAAf,IAAAA,EAAA,SACA,IAAAe,IAAAA,EAAA,IAChB,CACNC,SAAUlD,GACVoB,UAAS1T,EAAA,CAAG,CACX2T,QLhPoC,oCKiPpC8B,OAAO,EACP7B,SAAU,CACT3H,IAAKoJ,EACLxD,QAASA,EACTQ,WAAYA,IAEX,CACFsB,QAAS0B,EACTzB,SAAUyB,GAEVxD,EACAQ,GACG8C,EAAaO,6BAA6BJ,EAAsBD,GAChEb,EACAe,KAKCJ,EAAAQ,WAAP,SAAkBC,GACjB,YADiB,IAAAA,IAAAA,EAAA,CAA+BtU,SAAS,IAClD,CACNkU,SAAUL,EACVzB,UAAWA,KAINyB,EAAAU,uBAAP,SACCC,EACAvP,GAEA,MAAO,CACN,CACCoN,QAASmC,EACTC,SAAUD,GACR,CACFnC,QAASnB,GACTqB,WAAYpB,GACZgD,OAAO,EACP1B,KAAM,CACL+B,EACA1D,GACA7L,MAKG4O,EAAAa,2BAAP,SACCC,GAGA,MAAO,CACN,CACCtC,QAASsC,EACTF,SAAUE,GACR,CACFtC,QAAS1R,EACT4R,WAAYhB,GACZ4C,OAAO,EACP1B,KAAM,CACLkC,MAKGd,EAAAe,gCAAP,SACCD,GAGA,MAAO,CACN,CACCtC,QAASsC,EACTF,SAAUE,GACR,CACFtC,QAAS1R,EACT4R,WAAYZ,GACZwC,OAAO,EACP1B,KAAM,CACLkC,MA+BWd,EAAAO,6BAAf,SACCS,EACA5P,GAEA,MAAO,CACN,CACCoN,QAASwC,EACTJ,SAAUI,GACR,CACFxC,QPnW6C,6COoW7CE,WAAY1C,GACZsE,OAAO,EACP1B,KAAM,CACLoC,EACAjE,GACAE,GACA7L,EACAuC,0BA/IJyJ,EAAAA,SAAQxQ,KAAA,CAAC,CACTqU,QAAS,CACRC,EAAAA,cAED3C,UAAWA,gDAgG2DrV,MAAKuD,WAAA,CAAA,CAAAC,KAA9D8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YACoD5D,MAAKuD,WAAA,CAAA,CAAAC,KAArF8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CPjU0B,uDOkUU1D,MAAKuD,WAAA,CAAA,CAAAC,KAA3D8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CAACyQ,aAC4CnU,MAAKuD,WAAA,CAAA,CAAAC,KAApE8I,EAAAA,UAAQ,CAAA9I,KAAIC,EAAAA,OAAMC,KAAA,CLtUiB,8CKAvBmT,EAAAA,gBAuCRhD,UAAyBE,UAhCzBhO,SAOAkF,SAmBA0H,UATAjQ,KA4VToU,EArJA,CAMkCb,IClOlC,mBAEC,SAAAgC,EAAsBtT,EACfnB,UACNM,EAAA/C,KAAAV,KAAMsE,EAAanB,IAAKnD,KAG1B,OAPqDmC,EAAAA,EAAAA,GAOrDyV,GAPqDxS,oPfHf,oVgBGtC,SAA6ByS,4BhBFO,8dgBKpC,SAAgCA,wGANhC,SAA4BA,6BCyB5B,SAA6DC,EAAgDC,WAE5GC,OAAOF,EAAalX,QAAQqX,QAAQF,EAAenX,OAAQ,mCAElDsX,OAEFC,EAAgBJ,EAAe7S,MAAI,SAAEgC,GAC1C,OAAOA,EAAMrC,OAAOqT,MAGrBF,OAAOG,GAAeC,mBANvB,IAAwB,IAAAC,EAAA/P,EAAAwP,GAAYQ,EAAAD,EAAA1X,QAAA2X,EAAAxX,KAAAwX,EAAAD,EAAA1X,OAAA,GAAhB2X,EAAAzX,gIAtBrB,SAA0DiX,EAA6CC,WAEtGC,OAAOF,EAAalX,QAAQqX,QAAQF,EAAenX,uBAE1CsX,OAEFC,EAAgBJ,EAAe7S,MAAI,SAAEgC,GAC1C,OAAOA,EAAMtC,aAAasT,MAG3BF,OAAOG,GAAeC,cACtBJ,OAAOE,EAAYtT,aAAauT,IAAgBI,aAEhDP,OAAOE,EAAY7O,cAAc4O,QAAQE,EAAc9O,aAAc,0CATtE,IAAwB,IAAAmP,EAAAlQ,EAAAwP,GAAYW,EAAAD,EAAA7X,QAAA8X,EAAA3X,KAAA2X,EAAAD,EAAA7X,OAAA,GAAhB8X,EAAA5X,kICErB,kBAEQ6B,OAAgB,UAAEM,OAEzBN,OAAgB,UAAEE,SAAU,yBAb7B,SAAoCjB,GAE/BA,IACHe,OAAgB,UAAEM,OAASrB,GAG5Be,OAAgB,UAAEE,SAAU,0BCF7B,SAAsF4D,GACrF,OAAOA,EAAS+F,KAAG,SAAE9F,GACpB,MAAO,CACNwO,QAAS1R,EACT8T,SAAU5Q,EACVsQ,OAAO,gFZVuC,0DEHT","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../../domain/message/message';\n\nexport abstract class Logger<M extends Message<any>> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../api/logger/logger';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class CommandLogger extends Logger<Command<AggregateId>> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../api/logger/logger';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent<AggregateId>> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'HERMES - DOMAIN_EVENT_HANDLERS_TOKEN';\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command<AggregateId>> {\n\n\tnext(value: Command<AggregateId>): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command<AggregateId>): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nimport { RandomStringGenerator } from '../../../common/random-string.generator';\n\nexport abstract class Message<I extends AggregateId> {\n\n\tprotected constructor(private readonly aggregateId: I,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message<I>): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message<I>): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message/message';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class Command<I extends AggregateId> extends Message<I> {\n}\n","export const MessageType = Function;\n\nexport interface MessageType<T> extends Function {\n\tnew(...args: any[]): T;\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const CommandType = MessageType;\n\nexport interface CommandType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from './aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command<AggregateId>>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from '../tactical/aggregate/aggregate-root';\nimport { CreateAggregateCommandHandlerImpl } from './create-aggregate/create-aggregate.command-handler-impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate/create-aggregate.command';\n\n@Injectable()\nexport class CommandBus<C = Command<AggregateId>> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<C>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command<AggregateId>) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, CreateAggregateCommand>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: CreateAggregateCommand) => {\n\t\t\t\t\treturn handlers.some((handler: CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, CreateAggregateCommand>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, CreateAggregateCommand>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command<AggregateId>) => {\n\n\t\t\t\t\tif (!handlers && !aggregateCommandHandlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet foundHandlerForCommand = true;\n\n\t\t\t\t\tif (handlers) {\n\t\t\t\t\t\tfoundHandlerForCommand = !handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>) => handler.forCommand(command));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (aggregateCommandHandlers) {\n\t\t\t\t\t\tfoundHandlerForCommand = foundHandlerForCommand && !aggregateCommandHandlers.some((handler: CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, any>) => handler.forCommand(command));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn foundHandlerForCommand;\n\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\nimport { DomainEvent } from '../../event/domain-event';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tabstract toDomainEvent(): DomainEvent<T>;\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const AggregateEventType = MessageType;\n\nexport interface AggregateEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from './aggregate-id';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract findById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract findById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.findById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\t// return JSON.parse(JSON.stringify(aggregates));\n\t\treturn aggregates;\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from './aggregate-id';\nimport { AggregateEventType } from './aggregate-event-type';\n\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tabstract createEvent(): AggregateEventType<AggregateEvent<I>>;\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export abstract class HermesId<T> {\n\n\tprivate readonly uid: T;\n\n\tprotected constructor(uid: T) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toString(): string;\n\n\tgetId(): T {\n\t\treturn this.uid;\n\t}\n\n\tequals(hermesId: HermesId<T>): boolean {\n\t\treturn this.uid === hermesId.getId();\n\t}\n}\n","import { ReadModelRootId } from '../../../api/read/read-model-root-id';\nimport { HermesId } from '../hermes.id';\n\nexport abstract class AggregateId extends HermesId<string> {\n\n\tprotected constructor(uid: string) {\n\t\tsuper(uid);\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn super.getId();\n\t}\n\n}\n","import { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message/message';\n\n\nexport abstract class DomainEvent<I extends AggregateId = AggregateId> extends Message<I> {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  payload: any,\n\t\t\t\t\t\t  messageType: string) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent<I>): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command<I>): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command<I>): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent<AggregateId>> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent<AggregateId>> = new Subject<DomainEvent<AggregateId>>();\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent<AggregateId> {\n\n\t\tconst events: Array<DomainEvent<AggregateId>> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent<AggregateId>> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(event: DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent<AggregateId>> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent<AggregateId>> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { AggregateEvent } from '../tactical/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../tactical/aggregate/aggregate-root';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent<AggregateId>): void;\n\tpublish(events: ReadonlyArray<DomainEvent<AggregateId>>): void;\n\tpublish(args: DomainEvent<AggregateId> | ReadonlyArray<DomainEvent<AggregateId>>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tpublishFromAggregate(aggregate: AggregateRoot<AggregateId>): void {\n\n\t\tconsole.log('aggregagte events:', aggregate.getEvents())\n\n\t\taggregate.getEvents()\n\t\t\t\t .forEach((aggregateEvent: AggregateEvent<AggregateId>) => {\n\t\t\t\t\t this.publish(\n\t\t\t\t\t\t aggregateEvent.toDomainEvent()\n\t\t\t\t\t );\n\t\t\t\t });\n\t}\n\n\tprivate publishEvent(event: DomainEvent<AggregateId>): void {\n\n\t\tif (!event) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { DomainEventHandlerImpl } from './handler/domain-event-handler-impl';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent<AggregateId>> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofEventHandler<E2 extends E>(...handlers: Array<DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>) => handler.forEvents([event]));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent<AggregateId> {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const DomainEventType = MessageType;\n\nexport interface DomainEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { MonoTypeOperatorFunction, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil<T>(): MonoTypeOperatorFunction<T> {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n\tprotected isNotStopped(): boolean {\n\t\treturn !this.unsubscribe$.isStopped;\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { Key } from './key';\nimport { Optional } from '../optional';\n\nexport class KeyMap<K extends Key, T> {\n\n\tprivate readonly keys = new Map<string, K>();\n\n\tprivate readonly values = new WeakMap<K, T>();\n\n\tget(key: K): Optional<T> {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\tif (internalKey !== undefined) {\n\t\t\treturn Optional.of(this.values.get(internalKey));\n\t\t} else {\n\t\t\treturn Optional.empty();\n\t\t}\n\t}\n\n\thas(key: K): boolean {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\treturn this.values.has(internalKey);\n\t}\n\n\tset(key: K, value: T): void {\n\t\tthis.keys.set(key.toString(), key);\n\t\tthis.values.set(key, value);\n\t}\n\n\tsize(): number {\n\t\treturn this.keys.size;\n\t}\n\n\tremove(key: K): void {\n\t\tif (this.hasInternalKey(key)) {\n\t\t\tthis.keys.delete(key.toString());\n\t\t\tthis.values.delete(key);\n\t\t}\n\t}\n\n\tremoveAll(): void {\n\t\tthis.keys.forEach((value) => {\n\t\t\tthis.values.delete(value);\n\t\t})\n\t\tthis.keys.clear();\n\t}\n\n\tprivate getInternalKey(key: K): K {\n\t\treturn this.keys.get(key.toString());\n\t}\n\n\tprivate hasInternalKey(key: K): boolean {\n\t\treturn this.keys.has(key.toString());\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../core/domain/tactical/aggregate/aggregate-id';\nimport { ReactiveService } from './reactive.service';\nimport { KeyMap } from './collections/key-map';\nimport { Optional } from './optional';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new KeyMap<AggregateId, T>();\n\n\tprivate archive$: Subject<KeyMap<AggregateId, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\ton(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter(() => this.isNotStopped()),\n\t\t\t\t\t   map((map: KeyMap<AggregateId, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId);\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((value: Optional<T>) => value.isPresent()),\n\t\t\t\t\t   map((value: Optional<T>) => value.getValueOrNullOrThrowError()),\n\t\t\t\t\t   distinctUntilChanged(),\n\t\t\t\t\t   this.takeUntil()\n\t\t\t\t   );\n\t}\n\n\tget(aggregateId: AggregateId): Optional<T> {\n\t\treturn this.archive.get(aggregateId);\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId, value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId, defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<KeyMap<AggregateId, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<KeyMap<AggregateId, T>>(1);\n\t\t}\n\t}\n\n}\n","import { DomainEventHandler } from './domain-event.handler';\nimport { DomainEventType } from './domain-event-type';\nimport { AggregateArchive, DefaultAggregateValues } from '../../../../common/aggregate.archive';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../domain-event';\n\n\nexport abstract class EventDrivenRepository<I extends AggregateId, E extends DomainEvent<I>, V> extends AggregateArchive<V> implements DomainEventHandler<I, E> {\n\n\tprotected constructor(defaultValues?: DefaultAggregateValues<V>) {\n\t\tsuper(defaultValues);\n\t}\n\n\tabstract forEvent(): DomainEventType<E>;\n\n\thandle(event: E): void {\n\t\tthis.next(event.getAggregateId(), event.getPayload());\n\t}\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../../common/reactive';\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelRootRepository<I extends AggregateId> extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent<I>) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent<I>): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../../domain/event/domain-event';\nimport { ReadModelRootId } from '../read/read-model-root-id';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\nimport { ReactiveService } from '../../../common/reactive.service';\n\nexport abstract class EventRepository<R extends ReadModelRootId, I extends AggregateId> extends ReactiveService {\n\n\tprotected constructor(private readonly domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t}\n\n\tprotected onEvent(aggregateId: R, eventType: Type<DomainEvent<I>>): Observable<DomainEvent<any>> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   eventType as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent<AggregateId>) => event.getAggregateId().toString() === aggregateId.toString()),\n\t\t\t\t\t   this.takeUntil()\n\t\t\t\t   );\n\t}\n}\n","import { EntityId } from './entity.id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","import { HermesId } from './hermes.id';\n\nexport abstract class EntityId<T = string> extends HermesId<T> {\n\n}\n","export abstract class DomainModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class ApiModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class FeatureModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","import { ReadModelRootId } from '../../api/read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../api/read/read-model-root-id';\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../api/read/read-model-root';\nimport { ReadModelStore } from '../../../api/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>> extends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tfindById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tfindById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../api/read/read-model-root';\n\nimport { ReadModelStore } from '../../../api/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\n\t\t// const aggregateId = readModelRootId.toAggregateId() as B; // TODO remove as\n\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: A) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../../domain/tactical/aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command<AggregateId>) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command<AggregateId>): void {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command<AggregateId>): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent<AggregateId>): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent<AggregateId>): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { CreateAggregateCommandHandler } from './create-aggregate.command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../config/define';\nimport { AggregateFactory } from '../../tactical/aggregate/aggregate-factory';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate.command';\nimport { DomainEventPublisher } from '../../event/domain-event.publisher';\n\n\nexport function createAggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand>(createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>, aggregateName: string, domainEventPublisher: DomainEventPublisher): CreateAggregateCommandHandlerImpl<I, A, C> {\n\treturn new CreateAggregateCommandHandlerImpl<I, A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName, domainEventPublisher);\n}\n\nexport class CreateAggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string,\n\t\t\t\tprivate readonly domainEventPublisher: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\tdebugger\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst type = aggregate.getType(),\n\t\t\t\tcreateCommandConstructor = aggregate.createEvent();\n\n\t\t\tconst createCommand = new createCommandConstructor(aggregateId, type);\n\n\t\t\taggregate.addEvent(createCommand);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.domainEventPublisher.publishFromAggregate(aggregate);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const CREATE_AGGREGATE_COMMAND_HANDLERS = 'HERMES - CREATE_AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../../tactical/aggregate/aggregate-factory';\nimport { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Optional } from '../../../../common/optional';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../create-aggregate/create-aggregate.command-handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: CreateAggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publish(aggregate, command);\n\t}\n\n\thandleCommand(command: C): void {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.findById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handle(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { DomainEventHandler } from './domain-event.handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../domain-event';\nimport { MultiDomainEventHandler } from './multi-domain-event.handler';\nimport { DomainEventType } from './domain-event-type';\n\n\nexport function domainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: DomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, [domainEventHandler.forEvent()]);\n}\n\n\nexport function multiDomainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: MultiDomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, domainEventHandler.forEvents());\n}\n\n\nexport class DomainEventHandlerImpl<I extends AggregateId, E extends DomainEvent<I>> {\n\n\tprivate readonly eventTypes: Array<string>;\n\n\tconstructor(private readonly domainEventHandler: DomainEventHandler<I, E> | MultiDomainEventHandler<I, E>,\n\t\t\t\tprivate readonly events: Array<DomainEventType<E>>) {\n\t\tthis.eventTypes = this.createDomainEventTypes();\n\t}\n\n\thandleEvent(event: E): void {\n\t\tthis.domainEventHandler.handle(event);\n\t}\n\n\tforEvents(events: Array<E>): boolean {\n\t\treturn events.some((event: E) => {\n\t\t\treturn this.eventTypes.some((type: string) => {\n\t\t\t\treturn type === event.getMessageType();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate createDomainEventTypes(): Array<string> {\n\n\t\tlet types = [];\n\n\t\tfor (let event of this.events) {\n\t\t\tlet instance = this.createDomainEventInstance(event);\n\t\t\ttypes.push(instance.getMessageType());\n\t\t}\n\n\t\treturn types;\n\t}\n\n\tprivate createDomainEventInstance(eventType: DomainEventType<E>): E {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = eventType.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (eventType as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/tactical/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from './hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\tcreateAggregateCommandHandlerFactory,\n\tCreateAggregateCommandHandlerImpl\n} from '../domain/command/create-aggregate/create-aggregate.command-handler-impl';\nimport { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/create-aggregate/create-aggregate.command-handlers-token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/tactical/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/tactical/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../domain/command/create-aggregate/create-aggregate.command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/tactical/aggregate/aggregate-id';\nimport { Reactive } from '../../common/reactive';\nimport {\n\tdomainEventHandlerFactory,\n\tDomainEventHandlerImpl,\n\tmultiDomainEventHandlerFactory\n} from '../domain/event/handler/domain-event-handler-impl';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/handler/domain-event-handlers';\nimport { DomainEventHandler } from '../domain/event/handler/domain-event.handler';\nimport { MultiDomainEventHandler } from '../domain/event/handler/multi-domain-event.handler';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\nexport class HermesBaseModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>, E extends DomainEvent<I>> extends Reactive implements OnDestroy {\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<I, E>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\t\tthis.checkDomainEventHandlerIsCollection(eventHandlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (commandHandlers) {\n\t\t\tcommandHandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\n\t\t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\tdomainEventBus\n\t\t\t\t\t.ofEventHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((event: E) => {\n\t\t\t\t\t\thandler.handleEvent(event);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\t// domainEventBus\n\t\t\t// \t.pipe(this.takeUntil())\n\t\t\t// \t.subscribe((event: E) => {\n\t\t\t//\n\t\t\t// \t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t// \t\t\thandler.handleEvent(event);\n\t\t\t// \t\t});\n\t\t\t// \t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(\n\t\tcommandBus: CommandBus,\n\t\tcommandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\taggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>\n\t): void {\n\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n\tprivate checkDomainEventHandlerIsCollection(eventHandlers: Array<DomainEventHandlerImpl<I, E>>): void {\n\t\tif (eventHandlers && !Array.isArray(eventHandlers)) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn(`You might provided eventHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule extends HermesBaseModule<any, any, any, any> {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfactory: Type<AggregateFactory<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trepository: Type<AggregateRepository<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreateCommandHandler: Type<CreateAggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcommandHandlers: ReadonlyArray<Provider> = [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdomainEventHandlers: ReadonlyArray<Provider> = []): ModuleWithProviders<any> {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createCommandHandler, aggregateKey),\n\t\t\t\t...commandHandlers,\n\t\t\t\t...domainEventHandlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders<HermesModule> {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<DomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: domainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerMultiDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<MultiDomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: multiDomainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<any, any>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<any, any>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<any, any>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<any, any>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\thermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\thermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper(\n\t\t\teventHandlers,\n\t\t\taggregateCommandHandlers,\n\t\t\tcommandHandlers,\n\t\t\tdefinedAggregate,\n\t\t\tinjector,\n\t\t\taggregateFactoryArchive,\n\t\t\taggregateRepositoryArchive,\n\t\t\tcommandBus,\n\t\t\tdomainEventBus,\n\t\t\thermesLoggersInitializer,\n\t\t\thermesApi\n\t\t);\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\t\tcreateCommandHandlerType: Type<CreateAggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: CREATE_AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: createAggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName,\n\t\t\t\t\tDomainEventPublisher\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n}\n","import { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { Command } from '../command';\n\nexport abstract class CreateAggregateCommand extends Command<AggregateId> {\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  type: string) {\n\t\tsuper(aggregateId, type);\n\t}\n\n}\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../core/domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateEvent } from '../core/domain/tactical/aggregate/aggregate-event';\nimport { DomainEvent } from '../core/domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents<I extends AggregateId>(actualEvents: ReadonlyArray<DomainEvent<I>>, expectedEvents: Array<DomainEvent<I>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent<I>) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy();\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DomainEvent } from './event/domain-event';\n\nimport { AggregateId } from './tactical/aggregate/aggregate-id';\nimport { DomainEventHandler } from './event/handler/domain-event.handler';\nimport { DOMAIN_EVENT_HANDLERS } from './event/handler/domain-event-handlers';\n\nexport function provideEventHandlers<I extends AggregateId, E extends DomainEvent<I>>(handlers: Array<Type<DomainEventHandler<I, E>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler<I, E>>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}