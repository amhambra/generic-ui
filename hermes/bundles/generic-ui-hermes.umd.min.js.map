{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/domain/command/command-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/domain/uuid.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/command.handler.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/query/read-model.ts","ng://@generic-ui/hermes/domain/query/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive-aggregate.archive.ts","ng://@generic-ui/hermes/api/hermes-api.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/hermes.module.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","COMMAND_HANDLERS","CommandStream","tslib_1.__extends","_super","Injectable","Subject","CommandDispatcher","commandStream","dispatch","command","getRandomFromMathRandom","result","Math","random","getRandom","browserCrypto","window","crypto","getRandomValues","Uint8Array","getRandomFunction","ByteHexMappings","byteToHex","hexToByte","toString","substr","byteHexMappings","getUuidV4","uuidToString","buf","offset","bth","getUuidV4String","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","message","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","CommandHandler","domainEvent","eventPublisher","commandType","createCommandInstance","forCommand","handleCommand","handle","isObservable","pipe","take","subscribe","res","dispatchEvent","event_1","setRequestCommand","setPayload","publish","args","argumentLength","fill","undefined","_a","bind","apply","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","filter","some","ofHandler","handlers","handler","ofNullHandler","decorators","type","Inject","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","Aggregate","events","getId","getEvents","addEvent","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","requestCommandId","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","DomainEventStream","eventStore","DomainEventPublisher","eventStream","args_1","tslib_1.__values","args_1_1","publishEvent","dispatchAggregateEvent","aggregateEvent","DomainEventBus","ofEvent","createEventInstance","DomainEventPayload","getValue","DOMAIN_EVENT_HANDLERS","ReadModel","gui","ReactiveAggregateArchive","archive","Map","archive$","ReplaySubject","set","select","asObservable","get","distinctUntilChanged","hermesApi","HermesApi","commandLogger","eventLogger","api","loggers","enabled","start","stop","CommandLogger","DomainEventLogger","PersistAnemia","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","fromAnemia","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","remove","delete","InMemoryReadModelStore","toReadModel","InMemoryStore","has","ConsoleCommandLogger","commandBus","log","console","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","commandHandlers","eventHandlers","domainEventBus","loggersStart","checkNullCommand","checkCommandHandlerIsCollection","withConfig","config","ngModule","loggersStop","NgModule","imports","CommonModule","Optional","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1","useClass","multi"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS';\n// export const COMMAND_HANDLERS = new InjectionToken<Array<CommandHandler>>('COMMAND_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","// tslint:disable:no-bitwise\nfunction getRandomFromMathRandom() {\n\tlet result = new Array(16);\n\n\tlet r = 0;\n\tfor (let i = 0; i < 16; i++) {\n\t\tif ((i & 0x03) === 0) {\n\t\t\tr = Math.random() * 0x100000000;\n\t\t}\n\t\tresult[i] = r >>> ((i & 0x03) << 3) & 0xff;\n\t}\n\n\treturn result as Array<number>;\n}\n\nfunction getRandomFunction() {\n\t// tslint:disable-next-line:no-string-literal\n\tlet browserCrypto = window.crypto || (window['msCrypto'] as Crypto);\n\tif (browserCrypto && browserCrypto.getRandomValues) {\n\t\t// WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n\t\t//\n\t\t// Moderately fast, high quality\n\t\ttry {\n\t\t\treturn function getRandomFromCryptoRandom() {\n\t\t\t\tlet result = new Uint8Array(16);\n\t\t\t\tbrowserCrypto.getRandomValues(result);\n\t\t\t\treturn result as any;\n\t\t\t};\n\t\t} catch (e) { /* fallback*/\n\t\t}\n\t}\n\n\t// Math.random()-based (RNG)\n\t//\n\t// If all else fails, use Math.random().  It's fast, but is of unspecified\n\t// quality.\n\treturn getRandomFromMathRandom;\n}\n\nconst getRandom = getRandomFunction();\n\nclass ByteHexMappings {\n\tbyteToHex: string[] = [];\n\thexToByte: { [hex: string]: number; } = {};\n\n\tconstructor() {\n\t\tfor (let i = 0; i < 256; i++) {\n\t\t\tthis.byteToHex[i] = (i + 0x100).toString(16).substr(1);\n\t\t\tthis.hexToByte[this.byteToHex[i]] = i;\n\t\t}\n\t}\n}\n\nconst byteHexMappings = new ByteHexMappings();\n\nexport function getUuidV4() {\n\tconst result = getRandom();\n\n\t// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\tresult[6] = (result[6] & 0x0f) | 0x40;\n\tresult[8] = (result[8] & 0x3f) | 0x80;\n\n\treturn result;\n}\n\nexport function uuidToString(buf: Array<number>, offset: number = 0) {\n\tlet i = offset;\n\tlet bth = byteHexMappings.byteToHex;\n\treturn bth[buf[i++]] + bth[buf[i++]] +\n\t\tbth[buf[i++]] + bth[buf[i++]] + '-' +\n\t\tbth[buf[i++]] + bth[buf[i++]] + '-' +\n\t\tbth[buf[i++]] + bth[buf[i++]] + '-' +\n\t\tbth[buf[i++]] + bth[buf[i++]] + '-' +\n\t\tbth[buf[i++]] + bth[buf[i++]] +\n\t\tbth[buf[i++]] + bth[buf[i++]] +\n\t\tbth[buf[i++]] + bth[buf[i++]];\n}\n\nexport function getUuidV4String(): string {\n\treturn uuidToString(getUuidV4());\n}\n","import { getUuidV4String } from './uuid';\nimport { AggregateId } from './aggregate-id';\n\nexport abstract class Message {\n\n\tprivate readonly messageId: string = getUuidV4String();\n\n\tprotected constructor(public aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { Observable, isObservable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { ExecuteResponse } from './execute-response';\nimport { AggregateId } from '../aggregate-id';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventPublisher } from '../event/domain-event.publisher';\nimport { DomainEventPayload } from '../event/domain-event.payload';\n\nexport abstract class CommandHandler {\n\n\tprivate readonly commandType: string;\n\n\tprotected constructor(private readonly command: typeof Command | any, // any is required when inherited Command has more arguments than Command\n\t\t\t\t\t\t  private readonly domainEvent?: typeof DomainEvent,\n\t\t\t\t\t\t  protected readonly eventPublisher?: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tabstract handle(command: Command): ExecuteResponse | Observable<ExecuteResponse>;\n\n\tforCommand(command: Command): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\thandleCommand(command: Command): void {\n\t\tconst result = this.handle(command);\n\n\t\tif (isObservable(result)) {\n\t\t\t(result as Observable<ExecuteResponse>)\n\t\t\t\t.pipe(\n\t\t\t\t\ttake(1)\n\t\t\t\t)\n\t\t\t\t.subscribe((res: void | DomainEventPayload) => {\n\n\t\t\t\t\t// trigger event\n\t\t\t\t\tthis.dispatchEvent(command, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.dispatchEvent(command, result as ExecuteResponse);\n\t\t}\n\t}\n\n\tprivate dispatchEvent(command: Command, result?: ExecuteResponse): void {\n\n\t\tif (this.domainEvent && this.eventPublisher) {\n\n\t\t\tlet aggregateId: AggregateId = command.aggregateId;\n\n\t\t\tconst event = new (this.domainEvent as any)(aggregateId);\n\n\t\t\tevent.setRequestCommand(command);\n\n\t\t\tif (result) {\n\t\t\t\tevent.setPayload(result);\n\t\t\t}\n\n\t\t\tthis.eventPublisher.publish(event);\n\t\t}\n\t}\n\n\tprivate createCommandInstance(): Command {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.command.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.command as any)(...args));\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Subject, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { CommandHandler } from './command.handler';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofHandler<C2 extends C>(...handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { Command } from './command';\n\nexport abstract class CommandLogger {\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tabstract log(command: Command): void;\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): S;\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = []\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void {\n\t\tthis.events.push(event);\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, Subject, of } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventLogger {\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tabstract log(event: DomainEvent): void;\n\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","\nexport const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Q;\n\n}\n","import { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\n\nexport abstract class ReactiveAggregateArchive<T> {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate readonly archive$ = new ReplaySubject<Map<string, T>>();\n\n\tprotected constructor() {\n\t}\n\n\tset(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tselect(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(private commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t\tconst api = (api: HermesApi) => {\n\t\t\treturn {\n\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\twindow[hermesApi] = api(this);\n\n\t\twindow[hermesApi].loggers = false;\n\t}\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.aggregateId.toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\n\n\n/**\n * Rename\n */\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): A {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\nimport {\n\tReadModel\n} from '../../../domain/query/read-model';\nimport {\n\tReadModelStore\n} from '../../../domain/query/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\nexport abstract class PersistReadModelStore<T extends ReadModel, S extends PersistAnemia> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<T> {\n\t\tconst anemias = this.stateStore.getAll();\n\n\t\treturn anemias.map((anemia) => this.fromAnemia(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\n\nimport {\n\tAggregate,\n} from '../../../domain/command/aggregate';\nimport {\n\tAggregateStore,\n} from '../../../domain/command/store/aggregate.store';\nimport {\n\tAggregateStoreRegister\n} from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\n\nexport abstract class PersistAggregateStore<T extends Aggregate, S extends PersistAnemia> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: T): S;\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tsave(aggregate: T): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: T): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\n\nimport {\n\tAggregate\n} from '../../../domain/command/aggregate';\nimport {\n\tAggregateStore\n} from '../../../domain/command/store/aggregate.store';\nimport {\n\tAggregateStoreRegister\n} from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.inMemoryStore.get(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import {\n\tAggregateId\n} from '../../../domain/aggregate-id';\nimport {\n\tAggregate\n} from '../../../domain/command/aggregate';\n\nimport {\n\tReadModel\n} from '../../../domain/query/read-model';\n\nimport {\n\tReadModelStore\n} from '../../../domain/query/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryReadModelStore<T extends ReadModel, S extends Aggregate> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll()\n\t\t\t\t   .map((aggregate: S) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst aggregate = this.inMemoryStore.get(aggregateId);\n\n\t\tif (aggregate) {\n\t\t\treturn this.toReadModel(aggregate);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): S {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tlog(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tlog(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tlog(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.aggregateId,\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tlog(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, ModuleWithProviders, NgModule, OnDestroy, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Command\n */\nimport { Command } from './domain/command/command';\nimport { COMMAND_HANDLERS } from './domain/command/command-handlers';\nimport { CommandBus } from './domain/command/command.bus';\nimport { CommandDispatcher } from './domain/command/command.dispatcher';\nimport { CommandHandler } from './domain/command/command.handler';\nimport { CommandLogger } from './domain/command/command.logger';\nimport { CommandStream } from './domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from './domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from './domain/command/store/aggregate-store.register';\nimport { DomainEvent } from './domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from './domain/event/domain-event-handlers';\nimport { DomainEventBus } from './domain/event/domain-event.bus';\nimport { DomainEventPublisher } from './domain/event/domain-event.publisher';\nimport { DomainEventHandler } from './domain/event/domain-event.handler';\nimport { DomainEventLogger } from './domain/event/domain-event.logger';\nimport { DomainEventStore } from './domain/event/domain-event.store';\nimport { DomainEventStream } from './domain/event/domain-event.stream';\n\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { EVENT_LOGGER_ENABLED } from './domain/hermes-tokens';\nimport { COMMAND_LOGGER_ENABLED } from './domain/hermes-tokens';\nimport { HermesApi } from './api/hermes-api';\n\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from './infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from './infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from './infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from './infrastructure/logger/event/noop.event.logger';\n\n\nconst hermesProviders = [\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tconstructor(@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandler>,\n\t\t\t\t@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.loggersStart();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\n\t\tif (commandHandlers) {\n\n\t\t\tcommandHandlers.forEach((handler: CommandHandler) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tthis.commandLogger.start();\n\t\tthis.eventLogger.start();\n\t}\n\n\tprivate loggersStop(): void {\n\t\tthis.commandLogger.stop();\n\t\tthis.eventLogger.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandler>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandler>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","import { AggregateEvent } from '../domain/command/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(): void {\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { CommandHandler } from './command/command.handler';\nimport { COMMAND_HANDLERS } from './command/command-handlers';\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideCommandHandlers(handlers: Array<Type<CommandHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<CommandHandler>) => {\n\t\treturn {\n\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}