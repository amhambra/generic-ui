{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes-api.ts","ng://@generic-ui/hermes/domain/event/handler/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/message/message-type.ts","ng://@generic-ui/hermes/domain/command/handler/command-type.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event-type.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/handler/domain-event-type.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity-id.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root-id.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.repository.ts","ng://@generic-ui/hermes/domain-api/read/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/domain-api/event/event.repository.ts","ng://@generic-ui/hermes/domain/tactical/entity.ts","ng://@generic-ui/hermes/domain/tactical/entity-id.ts","ng://@generic-ui/hermes/domain/domain-module.ts","ng://@generic-ui/hermes/domain-api/api-module.ts","ng://@generic-ui/hermes/feature/feature-module.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/common/collections/key-map.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handler-impl.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handlers-token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/domain-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/domain/event/handler/domain-event-handler-impl.ts","ng://@generic-ui/hermes/domain-api/hermes.module.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/domain-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","MessageType","Function","CommandType","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","handle","clearTimeout","AggregateEvent","getType","AggregateEventType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","AggregateRoot","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","setRequestCommand","requestCommandId","setPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","publishFromAggregate","aggregateEvent","toDomainEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","ofEventHandler","forEvents","argumentLength","fill","undefined","bind","apply","DomainEventType","DomainEventPayload","getValue","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","Reactive","unsubscribe","ReadModelRootRepository","domainEventBus","subscribe","ReactiveService","EventRepository","onEvent","Entity","id","entity","EntityId","AggregateArchive","defaultValue","archive","Map","initArchive","on","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","Archive","onValue","Optional","isEmpty","empty","isPresent","filterer","callback","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","KeyMap","keys","values","WeakMap","key","internalKey","getInternalKey","has","realKey","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","remove","delete","InMemoryReadModelStore","InMemoryStore","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","createAggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","domainEventPublisher","CreateAggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","handleCommand","factory","createCommand","createEvent","repo","_a","AggregateFactoryArchive","add","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","COMMAND_HANDLERS","commandHandlerFactory","commandHandler","CommandHandlerImpl","publishDomainEvents","handleAggregate","domainEventHandlerFactory","domainEventHandler","DomainEventHandlerImpl","forEvent","multiDomainEventHandlerFactory","eventTypes","createDomainEventTypes","handleEvent","types","_b","_c","instance","createDomainEventInstance","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesBaseModule","eventHandlers","commandHandlers","definedAggregate","injector","hermesLoggersInitializer","hermesApi","checkNullCommand","checkCommandHandlerIsCollection","checkDomainEventHandlerIsCollection","def","warn","Injector","HermesModule","defineAggregate","aggregateKey","createHandler","domainEventHandlers","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","registerDomainEventHandler","domainEventHandlerType","registerMultiDomainEventHandler","createCommandHandlerType","imports","CommonModule","CreateAggregateCommand","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message/message';\n\nexport abstract class Logger<M extends Message<any>> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent<AggregateId>> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'HERMES - DOMAIN_EVENT_HANDLERS_TOKEN';\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from '../aggregate-id';\n\nimport { RandomStringGenerator } from '../../common/random-string.generator';\n\nexport abstract class Message<I extends AggregateId> {\n\n\tprotected constructor(private readonly aggregateId: I,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message<I>): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message<I>): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message/message';\n\nexport class Command extends Message<any> {\n}\n","export const MessageType = Function;\n\nexport interface MessageType<T> extends Function {\n\tnew(...args: any[]): T;\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const CommandType = MessageType;\n\nexport interface CommandType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from './aggregate/aggregate-root';\nimport { CreateAggregateCommandHandlerImpl } from './aggregate/create/create-aggregate.command-handler-impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../aggregate-id';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\nimport { AggregateId } from '../aggregate-id';\n\n\nexport abstract class ReplayCommandDispatcher<I extends AggregateId> implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent<I>): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent<I>) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent<I>) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\nimport { DomainEvent } from '../../event/domain-event';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tabstract toDomainEvent(): DomainEvent<T>;\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const AggregateEventType = MessageType;\n\nexport interface AggregateEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract getById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\nimport { AggregateEventType } from './aggregate-event-type';\n\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tabstract createEvent(): AggregateEventType<AggregateEvent<I>>;\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","import { ReadModelRootId } from '../domain-api/read/read-model-root-id';\n\nexport abstract class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message/message';\n\n\nexport abstract class DomainEvent<I extends AggregateId> extends Message<I> {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent<I>): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent<AggregateId>> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent<AggregateId>> = new Subject<DomainEvent<AggregateId>>();\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent<AggregateId> {\n\n\t\tconst events: Array<DomainEvent<AggregateId>> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent<AggregateId>> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(event: DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent<AggregateId>> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent<AggregateId>> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\nimport { AggregateRoot } from '../command/aggregate/aggregate-root';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent<AggregateId>): void;\n\tpublish(events: ReadonlyArray<DomainEvent<AggregateId>>): void;\n\tpublish(args: DomainEvent<AggregateId> | ReadonlyArray<DomainEvent<AggregateId>>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tpublishFromAggregate(aggregate: AggregateRoot<AggregateId>): void {\n\t\taggregate.getEvents()\n\t\t\t\t .forEach((aggregateEvent: AggregateEvent<AggregateId>) => {\n\t\t\t\t\t this.publish(\n\t\t\t\t\t\t aggregateEvent.toDomainEvent()\n\t\t\t\t\t );\n\t\t\t\t });\n\t}\n\n\tprivate publishEvent(event: DomainEvent<AggregateId>): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\nimport { AggregateId } from '../aggregate-id';\nimport { DomainEventHandlerImpl } from './handler/domain-event-handler-impl';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent<AggregateId>> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofEventHandler<E2 extends E>(...handlers: Array<DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>) => handler.forEvents([event]));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent<AggregateId> {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const DomainEventType = MessageType;\n\nexport interface DomainEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { Subject, Observable, MonoTypeOperatorFunction } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil<T>(): MonoTypeOperatorFunction<T> {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\nimport { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootRepository<I extends AggregateId> extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent<I>) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent<I>): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { AggregateId } from '../../domain/aggregate-id';\nimport { DomainEvent } from '../../domain/event/domain-event';\nimport { ReadModelRootId } from '../read/read-model-root-id';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\nimport { ReactiveService } from '../../common/reactive.service';\n\nexport abstract class EventRepository<R extends ReadModelRootId, I extends AggregateId> extends ReactiveService {\n\n\tprotected constructor(private readonly domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t}\n\n\tprotected onEvent(aggregateId: R, eventType: Type<DomainEvent<I>>): Observable<DomainEvent<any>> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   eventType as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent<AggregateId>) => event.getAggregateId().toString() === aggregateId.toString()),\n\t\t\t\t\t   this.takeUntil()\n\t\t\t\t   );\n\t}\n}\n","import { EntityId } from './entity-id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","export abstract class EntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: EntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","export abstract class DomainModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class ApiModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class FeatureModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map, filter } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\ton(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   this.takeUntil(),\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((value: T) => value !== undefined),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tget(aggregateId: AggregateId): T {\n\t\treturn this.archive.get(aggregateId.toString());\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { Key } from './key';\nimport { Optional } from '../optional';\n\nexport class KeyMap<K extends Key, T> {\n\n\tprivate readonly keys = new Map<string, K>();\n\n\tprivate readonly values = new WeakMap<K, T>();\n\n\tget(key: K): Optional<T> {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\tif (internalKey) {\n\t\t\treturn Optional.of(this.values.get(internalKey));\n\t\t} else {\n\t\t\treturn Optional.empty();\n\t\t}\n\t}\n\n\thas(key: K): boolean {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\treturn this.values.has(internalKey);\n\t}\n\n\tset(key: K, value: T): void {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\tthis.values.set(internalKey, value);\n\t}\n\n\tprivate getInternalKey(key: K): K {\n\n\t\tconst realKey = this.keys.get(key.toString());\n\n\t\tif (!realKey) {\n\t\t\tthis.keys.set(key.toString(), key);\n\t\t\treturn key;\n\t\t} else {\n\t\t\treturn realKey;\n\t\t}\n\t}\n\n}\n","import { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\nimport { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../domain/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../domain-api/read/read-model-root';\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>> extends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../domain-api/read/read-model-root';\n\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\n\t\t// const aggregateId = readModelRootId.toAggregateId() as B; // TODO remove as\n\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: A) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { AggregateRoot } from '../../domain/command/aggregate/aggregate-root';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent<AggregateId>): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent<AggregateId>): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate-root';\nimport { CreateAggregateCommandHandler } from './create-aggregate.command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../../config/define';\nimport { AggregateFactory } from '../aggregate-factory';\nimport { AggregateRepository } from '../aggregate-repository';\nimport { AggregateId } from '../../../aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate.command';\nimport { DomainEventPublisher } from '../../../event/domain-event.publisher';\n\n\nexport function createAggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand>(createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>, aggregateName: string, domainEventPublisher: DomainEventPublisher): CreateAggregateCommandHandlerImpl<I, A, C> {\n\treturn new CreateAggregateCommandHandlerImpl<I, A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName, domainEventPublisher);\n}\n\nexport class CreateAggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string,\n\t\t\t\tprivate readonly domainEventPublisher: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst type = aggregate.getType(),\n\t\t\t\tcreateCommandConstructor = aggregate.createEvent();\n\n\t\t\tconst createCommand = new createCommandConstructor(aggregateId, type);\n\n\t\t\taggregate.addEvent(createCommand);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.domainEventPublisher.publishFromAggregate(aggregate);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const CREATE_AGGREGATE_COMMAND_HANDLERS = 'HERMES - CREATE_AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../aggregate/aggregate-factory';\nimport { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../aggregate/create/create-aggregate.command-handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: CreateAggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C): void {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { DomainEventHandler } from './domain-event.handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { DomainEvent } from '../domain-event';\nimport { MultiDomainEventHandler } from './multi-domain-event.handler';\nimport { DomainEventType } from './domain-event-type';\n\n\nexport function domainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: DomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, [domainEventHandler.forEvent()]);\n}\n\n\nexport function multiDomainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: MultiDomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, domainEventHandler.forEvents());\n}\n\n\nexport class DomainEventHandlerImpl<I extends AggregateId, E extends DomainEvent<I>> {\n\n\tprivate readonly eventTypes: Array<string>;\n\n\tconstructor(private readonly domainEventHandler: DomainEventHandler<I, E> | MultiDomainEventHandler<I, E>,\n\t\t\t\tprivate readonly events: Array<DomainEventType<E>>) {\n\t\tthis.eventTypes = this.createDomainEventTypes();\n\t}\n\n\thandleEvent(event: E): void {\n\t\tthis.domainEventHandler.handle(event);\n\t}\n\n\tforEvents(events: Array<E>): boolean {\n\t\treturn events.some((event: E) => {\n\t\t\treturn this.eventTypes.some((type: string) => {\n\t\t\t\treturn type === event.getMessageType();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate createDomainEventTypes(): Array<string> {\n\n\t\tlet types = [];\n\n\t\tfor (let event of this.events) {\n\t\t\tlet instance = this.createDomainEventInstance(event);\n\t\t\ttypes.push(instance.getMessageType());\n\t\t}\n\n\t\treturn types;\n\t}\n\n\tprivate createDomainEventInstance(eventType: DomainEventType<E>): E {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = eventType.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (eventType as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/command/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from './/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\tcreateAggregateCommandHandlerFactory,\n\tCreateAggregateCommandHandlerImpl\n} from '../domain/command/aggregate/create/create-aggregate.command-handler-impl';\nimport { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/aggregate/create/create-aggregate.command-handlers-token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../domain/command/aggregate/create/create-aggregate.command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/aggregate-id';\nimport { Reactive } from '../common/reactive';\nimport {\n\tdomainEventHandlerFactory,\n\tDomainEventHandlerImpl,\n\tmultiDomainEventHandlerFactory\n} from '../domain/event/handler/domain-event-handler-impl';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/handler/domain-event-handlers';\nimport { DomainEventHandler } from '../domain/event/handler/domain-event.handler';\nimport { MultiDomainEventHandler } from '../domain/event/handler/multi-domain-event.handler';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\nexport class HermesBaseModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command, E extends DomainEvent<I>> extends Reactive implements OnDestroy {\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<I, E>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\t\tthis.checkDomainEventHandlerIsCollection(eventHandlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (commandHandlers) {\n\t\t\tcommandHandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\n\t\t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\tdomainEventBus\n\t\t\t\t\t.ofEventHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((event: E) => {\n\t\t\t\t\t\thandler.handleEvent(event);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\t// domainEventBus\n\t\t\t// \t.pipe(this.takeUntil())\n\t\t\t// \t.subscribe((event: E) => {\n\t\t\t//\n\t\t\t// \t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t// \t\t\thandler.handleEvent(event);\n\t\t\t// \t\t});\n\t\t\t// \t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<I, A, C>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.warn(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n\tprivate checkDomainEventHandlerIsCollection(eventHandlers: Array<DomainEventHandlerImpl<I, E>>): void {\n\t\tif (eventHandlers && !Array.isArray(eventHandlers)) {\n\t\t\tconsole.warn(`You might provided eventHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule extends HermesBaseModule<any, any, any, any> {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t factory: Type<AggregateFactory<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t repository: Type<AggregateRepository<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t createHandler: Type<CreateAggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t commandHandlers: Array<Provider> = [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t domainEventHandlers: Array<Provider> = []): ModuleWithProviders<any> {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...commandHandlers,\n\t\t\t\t...domainEventHandlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders<HermesModule> {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<DomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: domainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerMultiDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<MultiDomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: multiDomainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<any, any>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<any, any>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<any, any>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<any, any>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\thermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\thermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper(\n\t\t\teventHandlers,\n\t\t\taggregateCommandHandlers,\n\t\t\tcommandHandlers,\n\t\t\tdefinedAggregate,\n\t\t\tinjector,\n\t\t\taggregateFactoryArchive,\n\t\t\taggregateRepositoryArchive,\n\t\t\tcommandBus,\n\t\t\tdomainEventBus,\n\t\t\thermesLoggersInitializer,\n\t\t\thermesApi\n\t\t);\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcreateCommandHandlerType: Type<CreateAggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: CREATE_AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: createAggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName,\n\t\t\t\t\tDomainEventPublisher\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n}\n","import { AggregateId } from '../../../aggregate-id';\nimport { Command } from '../../command';\n\nexport abstract class CreateAggregateCommand extends Command {\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  type: string) {\n\t\tsuper(aggregateId, type);\n\t}\n\n}\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../domain/aggregate-id';\n\nimport { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents<I extends AggregateId>(actualEvents: ReadonlyArray<DomainEvent<I>>, expectedEvents: Array<DomainEvent<I>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent<I>) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DomainEvent } from './event/domain-event';\n\nimport { AggregateId } from './aggregate-id';\nimport { DomainEventHandler } from './event/handler/domain-event.handler';\nimport { DOMAIN_EVENT_HANDLERS } from './event/handler/domain-event-handlers';\n\nexport function provideEventHandlers<I extends AggregateId, E extends DomainEvent<I>>(handlers: Array<Type<DomainEventHandler<I, E>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler<I, E>>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}