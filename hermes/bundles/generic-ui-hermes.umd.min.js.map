{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/core/api/logger/logger.ts","ng://@generic-ui/hermes/core/domain/command/command.logger.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/core/api/hermes-api.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-handlers.ts","ng://@generic-ui/hermes/common/stream/subscription/hermes.subscription.ts","ng://@generic-ui/hermes/common/stream/observable/subscriber/hermes.subscriber.ts","ng://@generic-ui/hermes/common/stream/observable/hermes.observable.ts","ng://@generic-ui/hermes/common/stream/subscription/hermes-empty.subscription.ts","ng://@generic-ui/hermes/common/stream/observable/hermes.subject.ts","ng://@generic-ui/hermes/core/domain/command/command.stream.ts","ng://@generic-ui/hermes/core/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/core/domain/message/message.ts","ng://@generic-ui/hermes/core/domain/command/command.ts","ng://@generic-ui/hermes/core/domain/message/message-type.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-type.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/core/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/common/stream/operator/operator-utils.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.filter.ts","ng://@generic-ui/hermes/core/domain/command/command.bus.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-event-type.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/core/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/core/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/core/domain/tactical/hermes.id.ts","ng://@generic-ui/hermes/core/domain/tactical/aggregate/aggregate-id.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.of.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.empty.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.take.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/core/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-type.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.take-until.ts","ng://@generic-ui/hermes/infrastructure/rxjs/to-rxjs-observable.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/common/collections/key-map.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.map.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.distinct-until-changed.ts","ng://@generic-ui/hermes/common/stream/observable/hermes.behavior-subject.ts","ng://@generic-ui/hermes/common/stream/observable/hermes.replay-subject.ts","ng://@generic-ui/hermes/common/stream/observable/hermes.archive-subject.ts","ng://@generic-ui/hermes/common/key.archive.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/core/domain/event/handler/event-driven.repository.ts","ng://@generic-ui/hermes/core/api/read/read-model-entity.ts","ng://@generic-ui/hermes/core/api/read/read-model-entity-id.ts","ng://@generic-ui/hermes/core/api/read/read-model-root.ts","ng://@generic-ui/hermes/core/api/read/read-model-root-id.ts","ng://@generic-ui/hermes/core/api/read/read-model-root.repository.ts","ng://@generic-ui/hermes/core/api/read/store/read-model.store.ts","ng://@generic-ui/hermes/core/api/event/event.repository.ts","ng://@generic-ui/hermes/core/domain/tactical/entity.ts","ng://@generic-ui/hermes/core/domain/tactical/entity.id.ts","ng://@generic-ui/hermes/core/domain/domain-module.ts","ng://@generic-ui/hermes/core/api/api-module.ts","ng://@generic-ui/hermes/feature/feature-module.ts","ng://@generic-ui/hermes/common/stream/observable/subscriber/hermes.single-subscriber.ts","ng://@generic-ui/hermes/common/stream/observable/single/hermes.single.ts","ng://@generic-ui/hermes/common/archive.ts","ng://@generic-ui/hermes/core/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/core/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/core/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/core/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/core/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/core/domain/hermes-tokens.ts","ng://@generic-ui/hermes/core/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/core/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/core/api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command-handler-impl.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command-handlers-token.ts","ng://@generic-ui/hermes/core/domain/command/config/define.ts","ng://@generic-ui/hermes/core/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/core/api/hermes.domain.module.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/core/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/core/domain/event/handler/domain-event-handler-impl.ts","ng://@generic-ui/hermes/core/domain/event/init/domain-event-handler.initializer.ts","ng://@generic-ui/hermes/core/domain/command/init/command-handler.initializer.ts","ng://@generic-ui/hermes/core/domain/command/config/aggregate-definition.initializer.ts","ng://@generic-ui/hermes/core/api/hermes.module.ts","ng://@generic-ui/hermes/core/domain/command/create-aggregate/create-aggregate.command.ts","ng://@generic-ui/hermes/core/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/core/api/hermes-api.helpers.ts","ng://@generic-ui/hermes/infrastructure/rxjs/from-rxjs-observable.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.from-event.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.interval.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.never.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.skip.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.switch-map.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.tap.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.throw-error.ts","ng://@generic-ui/hermes/common/stream/observable/creator/hermes.timer.ts","ng://@generic-ui/hermes/common/stream/operator/hermes.to-array.ts","ng://@generic-ui/hermes/core/domain/provider.helpers.ts","ng://@generic-ui/hermes/common/stream/observable/single/hermes.single-from-observable.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","HermesSubscription","finalize","isClosed","closed","unsubscribe","getFinalize","HermesSubscriber","config","completed","observer","isCompleted","complete","setFinalize","getObserver","HermesObservable","generator","generatorFn","pipe","operations","_i","source","operations_1","tslib_1.__values","operations_1_1","operation","innerPipe","stream$","subscribe","arg","subscriber","isObserver","createSubscriber","generatorFinalize","getSubscription","hermesEmptySubscription","HermesSubject","_this","_super","thrownError","subscribers","verifyNotClosed","_b","_c","toObservable","subscription","v","Error","CommandStream","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","isArray","find","isMessageType","Command","MessageType","Function","CommandType","FILTERED_COMMAND_STREAM","InjectionToken","subscriberForOperator","hermesFilter","CommandBus","commandsStream","ofCommand","commandTypes","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","foundHandlerForCommand","AggregateEvent","getType","event","AggregateEventType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","forEach","aggregate","findById","aggregateName","name","cloneAggregates","AggregateRoot","events","getId","getEvents","addEvent","args_1","args_1_1","event_1","clearEvents","HermesId","uid","hermesId","AggregateId","DomainEvent","payload","isSameType","getPayload","hermesOf","hermesEmpty","hermesTake","valuesNumber","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","waitForNextEventOccurrence","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","publishFromAggregate","aggregateEvent","toDomainEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","ofEventHandler","forEvents","argumentLength","fill","undefined","bind","apply","DomainEventType","hermesTakeUntil","notifier","subscriberFromObserver","notifierSubscriber","toRxJsObservable","source$","Observable","Reactive","hermesUnsubscribe$","ngOnDestroy","hermesUnsubscribe","takeUntil","isNotStopped","ReactiveService","Optional","isValueEmpty","empty","of","isEmpty","isPresent","filter","filterer","callback","map","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","KeyMap","keys","Map","values","WeakMap","get","key","internalKey","getInternalKey","has","set","size","remove","hasInternalKey","delete","removeAll","clear","hermesMap","convert","hermesDistinctUntilChanged","compareFn","compare","defaultCompareFn","previousValue","a","HermesBehaviorSubject","defaultValue","lastValue","HermesReplaySubject","bufferSize","shift","HermesArchiveSubject","KeyArchive","archive","archive$","on","tryToInitDefault","once","createDefaultValue","AggregateArchive","EventDrivenRepository","defaultValues","handle","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","ReadModelRootRepository","domainEventBus","EventRepository","onEvent","Entity","id","entity","EntityId","HermesSingleSubscriber","HermesSingle","Archive","one","two","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","PersistReadModelStore","stateStore","getById","getValue","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","InMemoryReadModelStore","InMemoryStore","ConsoleCommandLogger","commandBus","unsubscribe$","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","createAggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","domainEventPublisher","CreateAggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","handleCommand","factory","createCommand","createEvent","repo","_a","AggregateFactoryArchive","add","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","COMMAND_HANDLERS","commandHandlerFactory","commandHandler","CommandHandlerImpl","publishDomainEvents","domainEventHandlerFactory","domainEventHandler","DomainEventHandlerImpl","forEvent","multiDomainEventHandlerFactory","eventTypes","createDomainEventTypes","handleEvent","types","instance","createDomainEventInstance","DomainEventHandlerInitializer","init","eventHandlers","set_1","Set","filteredHandlers_1","CommandHandlerInitializer","commandHandlers","registerAggregateCommandHandlers","set_2","filteredHandlers_2","AggregateDefinitionInitializer","definedAggregate","injector","filteredDefinitions_1","def","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesBaseModule","hermesLoggersInitializer","hermesApi","aggregateDefinitionInitializer","commandHandlerInitializer","domainEventHandlerInitializer","checkNullCommand","checkCommandHandlerIsCollection","checkDomainEventHandlerIsCollection","warn","Injector","HermesModule","defineAggregate","aggregateKey","createCommandHandler","domainEventHandlers","ngModule","multi","registerCreateCommandHandler","withConfig","registerCommandHandler","commandHandlerType","useClass","registerDomainEventHandler","domainEventHandlerType","registerMultiDomainEventHandler","createCommandHandlerType","imports","CommonModule","CreateAggregateCommand","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1","windowObject","winRef","element","listener","addEventListener","removeEventListener","interval","counter","setInterval","clearInterval","isOuterCompleted","innerSubscriber","tryToComplete","outerSubscriber","v2","time","setTimeout","clearTimeout","createStream","desc","it","assertions","nextFn","jest","fn","errorFn","completeFn","err","not","toHaveBeenCalled","toHaveBeenCalledWith","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../../domain/message/message';\n\nexport abstract class Logger<M extends Message<any>> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../api/logger/logger';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class CommandLogger extends Logger<Command<AggregateId>> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../api/logger/logger';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent<AggregateId>> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare const window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'HERMES - DOMAIN_EVENT_HANDLERS_TOKEN';\n","export class HermesSubscription {\n\n\tprivate closed: boolean = false;\n\n\tprivate readonly finalize: () => void = () => {\n\t};\n\n\tconstructor(finalize?: () => void, isClosed?: boolean) {\n\n\t\tif (finalize !== undefined && finalize !== null &&\n\t\t\ttypeof finalize === 'function') {\n\t\t\tthis.finalize = finalize;\n\t\t}\n\n\t\tif (isClosed !== undefined && isClosed !== null) {\n\t\t\tthis.closed = isClosed;\n\t\t}\n\t}\n\n\tunsubscribe(): void {\n\n\t\tif (this.closed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.closed = true;\n\t\tthis.finalize();\n\t}\n\n\tgetFinalize(): () => void {\n\t\treturn this.finalize;\n\t}\n}\n","import { HermesObserver } from '../hermes.observer';\n\nexport class HermesSubscriber<T> {\n\n\tprivate observer: Partial<HermesObserver<T>>;\n\n\tprivate finalize: () => void = () => {\n\t};\n\n\tprivate completed: boolean = false;\n\n\tprivate closed: boolean = false;\n\n\tconstructor(config: Partial<HermesObserver<T>>) {\n\t\tthis.observer = config;\n\t}\n\n\tnext(value: T): void {\n\n\t\tif (this.isCompleted()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.observer && this.observer.next) {\n\t\t\tthis.observer.next(value);\n\t\t}\n\t}\n\n\terror(error: any): void {\n\n\t\tif (this.completed) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.observer && this.observer.error) {\n\t\t\tthis.observer.error(error);\n\t\t}\n\t\tthis.unsubscribe();\n\t}\n\n\tcomplete(): void {\n\n\t\tif (this.completed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.completed = true;\n\t\tif (this.observer && this.observer.complete) {\n\t\t\tthis.observer.complete();\n\t\t}\n\n\t\tthis.unsubscribe();\n\t}\n\n\tunsubscribe(): void {\n\t\tif (this.closed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.closed = true;\n\t\tthis.completed = true;\n\n\t\tthis.finalize();\n\t}\n\n\tsetFinalize(finalize: () => void): void {\n\t\tif (finalize && typeof finalize === 'function') {\n\t\t\tthis.finalize = finalize;\n\t\t} else {\n\n\t\t}\n\t}\n\n\tprotected isCompleted(): boolean {\n\t\treturn this.completed;\n\t}\n\n\tprotected isClosed(): boolean {\n\t\treturn this.closed;\n\t}\n\n\tprotected getObserver(): Partial<HermesObserver<T>> {\n\t\treturn this.observer;\n\t}\n\n}\n","import { HermesSubscription } from '../subscription/hermes.subscription';\nimport { HermesSubscriber } from './subscriber/hermes.subscriber';\nimport { HermesObserver } from './hermes.observer';\n\n\nexport interface HermesOperatorFunction<T, R> {\n\t(source: HermesObservable<T>): HermesObservable<R>\n}\n\nexport class HermesObservable<T> {\n\n\tprivate source: HermesObservable<T>;\n\n\t// private operator: HermesObservable<T>;\n\n\tprotected readonly generatorFn: any;\n\n\tprivate generatorFinalize: () => void;\n\n\tconstructor(generator?: (observer?: HermesObserver<T>) => void) {\n\t\tthis.generatorFn = generator;\n\t}\n\n\tpipe<T, R>(...operations: Array<HermesOperatorFunction<any, any>>): HermesObservable<any> {\n\t\tthis.source = this;\n\n\t\tfor (const operation of operations) {\n\t\t\tthis.source = this.innerPipe(operation, this.source);\n\t\t}\n\t\treturn this.source;\n\t}\n\n\tprivate innerPipe<T, R>(operation: HermesOperatorFunction<T, R>, stream$: HermesObservable<T>): HermesObservable<R> {\n\t\treturn ((input: any) => {\n\t\t\treturn operation(input);\n\t\t})(stream$);\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<T>\n\t): HermesSubscription;\n\tsubscribe(\n\t\tobserver: Partial<HermesObserver<T>>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\tlet subscriber: HermesSubscriber<T>;\n\n\t\tif (arg instanceof HermesSubscriber) {\n\t\t\tsubscriber = arg;\n\t\t} else if (arg !== null && this.isObserver(arg)) {\n\n\t\t\tconst { next, error, complete } = arg;\n\n\t\t\tsubscriber = this.createSubscriber(next, error, complete);\n\t\t} else {\n\n\t\t\tsubscriber = this.createSubscriber(arguments[0], arguments[1], arguments[2]);\n\t\t}\n\n\t\tif (this.generatorFn) {\n\t\t\tthis.generatorFinalize = this.generatorFn(subscriber);\n\t\t\tsubscriber.setFinalize(this.generatorFinalize);\n\t\t}\n\n\t\treturn this.getSubscription();\n\t}\n\n\tprotected createSubscriber(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscriber<T> {\n\t\treturn new HermesSubscriber({\n\t\t\tnext,\n\t\t\terror,\n\t\t\tcomplete\n\t\t});\n\t}\n\n\tprotected getSubscription(): HermesSubscription {\n\t\treturn new HermesSubscription(this.generatorFinalize);\n\t}\n\n\tprivate isObserver(observer: any): boolean {\n\t\treturn typeof observer === 'object';\n\t}\n\n}\n","import { HermesSubscription } from './hermes.subscription';\n\nexport function hermesEmptySubscription(): HermesSubscription {\n\treturn new HermesSubscription(() => {\n\t}, true);\n}\n","import { HermesObservable } from './hermes.observable';\nimport { HermesSubscription } from '../subscription/hermes.subscription';\nimport { HermesSubscriber } from './subscriber/hermes.subscriber';\nimport { hermesEmptySubscription } from '../subscription/hermes-empty.subscription';\n\nexport class HermesSubject<T> extends HermesObservable<T> {\n\n\t/**\n\t * After error\n\t */\n\tprivate thrownError: Error | string = null;\n\n\t/**\n\t * After complete\n\t */\n\tprivate isCompleted: boolean = false;\n\n\t/**\n\t * After unsubscribe\n\t */\n\tprivate isClosed: boolean = false;\n\n\tprivate readonly subscribers: Array<HermesSubscriber<T>> = [];\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tnext(value: T): void {\n\n\t\tthis.verifyNotClosed();\n\n\t\tif (this.isCompleted || this.thrownError !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const subs of this.subscribers) {\n\t\t\tsubs.next(value);\n\t\t}\n\t}\n\n\terror(error: any): void {\n\n\t\tthis.verifyNotClosed();\n\n\t\tif (this.isCompleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.thrownError = error;\n\n\t\tfor (const subs of this.subscribers) {\n\t\t\tsubs.error(error);\n\t\t}\n\t\tthis.subscribers.length = 0;\n\t}\n\n\tcomplete(): void {\n\n\t\tthis.verifyNotClosed();\n\n\t\tif (this.isCompleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isCompleted = true;\n\n\t\tfor (const subs of this.subscribers) {\n\t\t\tsubs.complete();\n\t\t}\n\t\tthis.subscribers.length = 0;\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<T>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\tthis.verifyNotClosed();\n\n\t\tlet subscriber: HermesSubscriber<T>;\n\n\t\tif (arg instanceof HermesSubscriber) {\n\t\t\tsubscriber = arg;\n\t\t} else {\n\t\t\tsubscriber = this.createSubscriber(arguments[0], arguments[1], arguments[2]);\n\t\t}\n\n\t\tif (this.thrownError !== null) {\n\t\t\tsubscriber.error(this.thrownError);\n\t\t\treturn hermesEmptySubscription();\n\t\t} else if (this.isCompleted) {\n\t\t\tsubscriber.complete();\n\t\t\treturn hermesEmptySubscription();\n\t\t} else {\n\t\t\tthis.subscribers.push(subscriber);\n\t\t\treturn this.getSubscription();\n\t\t}\n\t}\n\n\tunsubscribe(): void {\n\t\tthis.isCompleted = true;\n\t\tthis.isClosed = true;\n\t\tthis.subscribers.length = 0;\n\t}\n\n\ttoObservable(): HermesObservable<T> {\n\t\treturn new HermesObservable((observer) => {\n\t\t\tconst subscription = this.subscribe(\n\t\t\t\t(v) => observer.next(v),\n\t\t\t\t(error) => observer.error(error),\n\t\t\t\t() => observer.complete()\n\t\t\t);\n\n\t\t\treturn () => subscription.unsubscribe();\n\t\t});\n\t}\n\n\tprivate verifyNotClosed(): void {\n\t\tif (this.isClosed) {\n\t\t\tthrow new Error('Observable already closed');\n\t\t}\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { HermesSubject } from '../../../common/stream/observable/hermes.subject';\n\n\n@Injectable()\nexport class CommandStream extends HermesSubject<Command<AggregateId>> {\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private readonly commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command<AggregateId>): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nimport { RandomStringGenerator } from '../../../common/random-string.generator';\n\nexport abstract class Message<I extends AggregateId> {\n\n\tprotected constructor(private readonly aggregateId: I,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message<I>): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message<I>): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tconst found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message/message';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\n\nexport abstract class Command<I extends AggregateId> extends Message<I> {\n}\n","export const MessageType = Function;\n\n// eslint-disable-next-line no-redeclare\nexport interface MessageType<T> extends Function {\n\tnew(...args: any[]): T;\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const CommandType = MessageType;\n\n// eslint-disable-next-line no-redeclare\nexport interface CommandType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from './aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Command } from './command';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { HermesSubject } from '../../../common/stream/observable/hermes.subject';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<HermesSubject<Command<AggregateId>>>('FILTERED_COMMAND_STREAM');\n","import { HermesObserver } from '../observable/hermes.observer';\nimport { HermesSubscriber } from '../observable/subscriber/hermes.subscriber';\n\nexport function subscriberForOperator<T>(\n\tobserver: HermesObserver<T>,\n\tnext?: (value: T) => void,\n\tcomplete?: () => void): HermesSubscriber<T> {\n\n\tconst nextFn = next ? next : (v: T) => {\n\t\t\tobserver.next(v);\n\t\t},\n\t\tcompleteFn = complete ? complete : () => {\n\t\t\tobserver.complete();\n\t\t};\n\n\treturn new HermesSubscriber({\n\t\tnext: nextFn,\n\t\terror: (e: any) => observer.error(e),\n\t\tcomplete: completeFn\n\t});\n}\n\nexport function subscriberFromObserver<T>(observer: HermesObserver<T>): HermesSubscriber<T> {\n\treturn new HermesSubscriber({\n\t\tnext: (v: T) => observer.next(v),\n\t\terror: (e: any) => observer.error(e),\n\t\tcomplete: () => observer.complete()\n\t});\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { subscriberForOperator } from './operator-utils';\n\nexport function hermesFilter<T>(operation: (value: any) => boolean): HermesOperatorFunction<T, T> {\n\treturn (source) => {\n\t\treturn new HermesObservable(observer => {\n\n\t\t\tconst subscriber = subscriberForOperator(observer, (value) => {\n\t\t\t\tif (operation(value)) {\n\t\t\t\t\tobserver.next(value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn source.subscribe(subscriber).getFinalize()\n\t\t});\n\t};\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from '../tactical/aggregate/aggregate-root';\nimport { CreateAggregateCommandHandlerImpl } from './create-aggregate/create-aggregate.command-handler-impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate/create-aggregate.command';\nimport { CommandStream } from './command.stream';\nimport { HermesSubscription } from '../../../common/stream/subscription/hermes.subscription';\nimport { HermesSubscriber } from '../../../common/stream/observable/subscriber/hermes.subscriber';\nimport { HermesObservable } from '../../../common/stream/observable/hermes.observable';\nimport { hermesFilter } from '../../../common/stream/operator/hermes.filter';\n\n@Injectable()\nexport class CommandBus<C = Command<AggregateId>> extends HermesObservable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) private readonly commandsStream: CommandStream) {\n\t\tsuper();\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: C) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<C>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\treturn this.commandsStream.toObservable().subscribe(arguments[0], arguments[1], arguments[2]);\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.commandsStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((command: Command<AggregateId>) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.commandsStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((command: Command<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>) => {\n\t\t\t\t\t\treturn handler.forCommand(command);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(\n\t\t...handlers: Array<CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, CreateAggregateCommand>>\n\t): any {\n\n\t\treturn (this as CommandBus<any>)\n\t\t\t.commandsStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((command: CreateAggregateCommand) => {\n\t\t\t\t\treturn handlers.some((handler: CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, CreateAggregateCommand>) => {\n\t\t\t\t\t\treturn handler.forCommand(command);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(\n\t\thandlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>>,\n\t\taggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, CreateAggregateCommand>>\n\t): any {\n\n\t\treturn (this as CommandBus<any>)\n\t\t\t.commandsStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((command: Command<AggregateId>) => {\n\n\t\t\t\t\tif (!handlers && !aggregateCommandHandlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet foundHandlerForCommand = true;\n\n\t\t\t\t\tif (handlers) {\n\t\t\t\t\t\tfoundHandlerForCommand =\n\t\t\t\t\t\t\t!handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command<AggregateId>>) => {\n\t\t\t\t\t\t\t\treturn handler.forCommand(command);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (aggregateCommandHandlers) {\n\t\t\t\t\t\tfoundHandlerForCommand = foundHandlerForCommand &&\n\t\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, any>) => {\n\t\t\t\t\t\t\t\treturn handler.forCommand(command);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn foundHandlerForCommand;\n\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\nimport { DomainEvent } from '../../event/domain-event';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tabstract toDomainEvent(): DomainEvent<T>;\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const AggregateEventType = MessageType;\n\n// eslint-disable-next-line no-redeclare\nexport interface AggregateEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from './aggregate-id';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract findById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract findById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.findById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tconst aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\t// return JSON.parse(JSON.stringify(aggregates));\n\t\treturn aggregates;\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from './aggregate-id';\nimport { AggregateEventType } from './aggregate-event-type';\n\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tabstract createEvent(): AggregateEventType<AggregateEvent<I>>;\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (const event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n\n\tequals(aggregate: AggregateRoot<I>): boolean {\n\t\treturn aggregate.getId().toString() === this.getId().toString();\n\t}\n}\n","export abstract class HermesId<T> {\n\n\tprivate readonly uid: T;\n\n\tprotected constructor(uid: T) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toString(): string;\n\n\tgetId(): T {\n\t\treturn this.uid;\n\t}\n\n\tequals(hermesId: HermesId<T>): boolean {\n\t\treturn this.uid === hermesId.getId();\n\t}\n}\n","import { ReadModelRootId } from '../../../api/read/read-model-root-id';\nimport { HermesId } from '../hermes.id';\n\nexport abstract class AggregateId extends HermesId<string> {\n\n\tprotected constructor(uid: string) {\n\t\tsuper(uid);\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn super.getId();\n\t}\n\n}\n","import { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { Message } from '../message/message';\n\n\nexport abstract class DomainEvent<I extends AggregateId = AggregateId> extends Message<I> {\n\n\tprivate readonly payload: any;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  payload: any,\n\t\t\t\t\t\t  messageType: string) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent<I>): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { HermesObservable } from '../hermes.observable';\n\nexport function hermesOf<T>(...args: Array<T>): HermesObservable<T> {\n\n\treturn new HermesObservable<T>(observer => {\n\n\t\targs.forEach(value => {\n\t\t\tobserver.next(value);\n\t\t});\n\n\t\tobserver.complete();\n\t});\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesObserver } from '../hermes.observer';\n\nexport function hermesEmpty<T>(): HermesObservable<T> {\n\treturn new HermesObservable<T>((observer: HermesObserver<T>) => {\n\t\tobserver.complete();\n\t});\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { HermesSubscriber } from '../observable/subscriber/hermes.subscriber';\nimport { hermesEmpty } from '../observable/creator/hermes.empty';\n\n\nexport function hermesTake<T>(valuesNumber: number): HermesOperatorFunction<T, T> {\n\n\treturn (source) => {\n\n\t\tif (valuesNumber === 0) {\n\t\t\treturn hermesEmpty();\n\t\t}\n\n\t\treturn new HermesObservable(observer => {\n\n\t\t\tlet index = 0;\n\n\t\t\tconst subscriber = new HermesSubscriber({\n\t\t\t\tnext: (v: T) => {\n\t\t\t\t},\n\t\t\t\terror: (e: any) => observer.error(e),\n\t\t\t\tcomplete: () => observer.complete()\n\t\t\t});\n\n\t\t\t(subscriber as any).observer.next = function(v: any) {\n\t\t\t\tif (index < valuesNumber) {\n\t\t\t\t\tobserver.next(v);\n\t\t\t\t\tindex++;\n\n\t\t\t\t\tif (index === valuesNumber) {\n\t\t\t\t\t\tsubscriber.complete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst subscription = source.subscribe(\n\t\t\t\tsubscriber\n\t\t\t);\n\n\t\t\treturn subscription.getFinalize();\n\t\t});\n\t};\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { HermesSubject } from '../../../common/stream/observable/hermes.subject';\nimport { hermesOf } from '../../../common/stream/observable/creator/hermes.of';\nimport { hermesTake } from '../../../common/stream/operator/hermes.take';\nimport { hermesFilter } from '../../../common/stream/operator/hermes.filter';\nimport { HermesObservable } from '../../../common/stream/observable/hermes.observable';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate readonly domainEvents: Array<DomainEvent<AggregateId>> = [];\n\n\tprivate readonly domainEvents$: HermesSubject<DomainEvent<AggregateId>> = new HermesSubject<DomainEvent<AggregateId>>();\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent<AggregateId> {\n\n\t\tconst events: Array<DomainEvent<AggregateId>> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): HermesObservable<DomainEvent<AggregateId>> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn hermesOf(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): HermesObservable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(event: DomainEvent<AggregateId>): HermesObservable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent<AggregateId>): HermesObservable<DomainEvent<AggregateId>> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn new HermesObservable((observer) => {\n\t\t\t\tobserver.error(new Error('Unsupported argument type.'));\n\t\t\t});\n\t\t\t// return throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .toObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   hermesFilter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   hermesTake(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent<AggregateId>> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { HermesSubject } from '../../../common/stream/observable/hermes.subject';\n\n\n@Injectable()\nexport class DomainEventStream extends HermesSubject<DomainEvent<AggregateId>> {\n\n\tconstructor(private readonly eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { AggregateEvent } from '../tactical/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../tactical/aggregate/aggregate-root';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private readonly eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent<AggregateId>): void;\n\tpublish(events: ReadonlyArray<DomainEvent<AggregateId>>): void;\n\tpublish(args: DomainEvent<AggregateId> | ReadonlyArray<DomainEvent<AggregateId>>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (const arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tpublishFromAggregate(aggregate: AggregateRoot<AggregateId>): void {\n\n\t\taggregate.getEvents()\n\t\t\t\t .forEach((aggregateEvent: AggregateEvent<AggregateId>) => {\n\t\t\t\t\t this.publish(\n\t\t\t\t\t\t aggregateEvent.toDomainEvent()\n\t\t\t\t\t );\n\t\t\t\t });\n\t}\n\n\tprivate publishEvent(event: DomainEvent<AggregateId>): void {\n\n\t\tif (!event) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\nimport { AggregateId } from '../tactical/aggregate/aggregate-id';\nimport { DomainEventHandlerImpl } from './handler/domain-event-handler-impl';\nimport { HermesObservable } from '../../../common/stream/observable/hermes.observable';\nimport { hermesFilter } from '../../../common/stream/operator/hermes.filter';\nimport { HermesSubscription } from '../../../common/stream/subscription/hermes.subscription';\nimport { HermesSubscriber } from '../../../common/stream/observable/subscriber/hermes.subscriber';\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent<AggregateId>> extends HermesObservable<E> {\n\n\tconstructor(private readonly eventStream: DomainEventStream) {\n\t\tsuper();\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: E) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<E>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\treturn this.eventStream.toObservable().subscribe(arguments[0], arguments[1], arguments[2]);\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): HermesObservable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.eventStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofEventHandler<E2 extends E>(...handlers: Array<DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.eventStream\n\t\t\t.toObservable()\n\t\t\t.pipe(\n\t\t\t\thermesFilter((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>) => handler.forEvents([event]));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent<AggregateId> {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { MessageType } from '../../message/message-type';\n\nexport const DomainEventType = MessageType;\n\n// eslint-disable-next-line no-redeclare\nexport interface DomainEventType<T> extends MessageType<T> {\n\tnew(...args: any[]): T;\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { HermesSubscriber } from '../observable/subscriber/hermes.subscriber';\nimport { subscriberFromObserver } from './operator-utils';\n\n\nexport function hermesTakeUntil<T>(notifier: HermesObservable<any>): HermesOperatorFunction<T, T> {\n\n\treturn (source) => {\n\t\treturn new HermesObservable<T>(observer => {\n\n\t\t\tconst subscriber = subscriberFromObserver(observer);\n\n\t\t\tconst notifierSubscriber = new HermesSubscriber({\n\t\t\t\tnext: () => subscriber.complete()\n\t\t\t});\n\n\t\t\tnotifier.subscribe(notifierSubscriber);\n\n\t\t\tconst subscription = source.subscribe(subscriber);\n\n\t\t\treturn subscription.getFinalize();\n\t\t});\n\t};\n}\n","import { HermesObservable } from '../../common/stream/observable/hermes.observable';\nimport { Observable } from 'rxjs';\n\nexport function toRxJsObservable<T>(source$: HermesObservable<T>): Observable<T> {\n\treturn new Observable((observer) => {\n\t\tconst subscription = source$.subscribe(\n\t\t\t(value: T) => observer.next(value),\n\t\t\t(error: any) => observer.error(error),\n\t\t\t() => observer.complete()\n\t\t);\n\t\treturn () => subscription.unsubscribe();\n\t});\n}\n","import { MonoTypeOperatorFunction } from 'rxjs';\nimport { HermesSubject } from './stream/observable/hermes.subject';\nimport { hermesTakeUntil } from './stream/operator/hermes.take-until';\nimport { toRxJsObservable } from '../infrastructure/rxjs/to-rxjs-observable';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly hermesUnsubscribe$ = new HermesSubject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.hermesUnsubscribe();\n\t}\n\n\tprotected takeUntil<T>(): MonoTypeOperatorFunction<T> {\n\t\treturn takeUntil(\n\t\t\ttoRxJsObservable(this.hermesUnsubscribe$)\n\t\t);\n\t}\n\n\tprotected hermesUnsubscribe(): void {\n\t\tthis.hermesUnsubscribe$.next();\n\t\tthis.hermesUnsubscribe$.complete();\n\t}\n\n\tprotected hermesTakeUntil(): any {\n\t\treturn hermesTakeUntil(this.hermesUnsubscribe$);\n\t}\n\n\tprotected isNotStopped(): boolean {\n\t\treturn !(this.hermesUnsubscribe$ as any).isCompleted;\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.hermesUnsubscribe();\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isValueEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\n\t\tif (Optional.isValueEmpty(value)) {\n\t\t\tthis.value = null;\n\t\t} else {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isValueEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { Key } from './key';\nimport { Optional } from '../optional';\n\nexport class KeyMap<K extends Key, T> {\n\n\tprivate readonly keys = new Map<string, K>();\n\n\tprivate readonly values = new WeakMap<K, T>();\n\n\tget(key: K): Optional<T> {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\tif (internalKey !== undefined) {\n\t\t\treturn Optional.of(this.values.get(internalKey));\n\t\t} else {\n\t\t\treturn Optional.empty();\n\t\t}\n\t}\n\n\thas(key: K): boolean {\n\n\t\tconst internalKey = this.getInternalKey(key);\n\n\t\treturn this.values.has(internalKey);\n\t}\n\n\tset(key: K, value: T): void {\n\t\tthis.keys.set(key.toString(), key);\n\t\tthis.values.set(key, value);\n\t}\n\n\tsize(): number {\n\t\treturn this.keys.size;\n\t}\n\n\tremove(key: K): void {\n\t\tif (this.hasInternalKey(key)) {\n\t\t\tthis.keys.delete(key.toString());\n\t\t\tthis.values.delete(key);\n\t\t}\n\t}\n\n\tremoveAll(): void {\n\t\tthis.keys.forEach((value) => {\n\t\t\tthis.values.delete(value);\n\t\t});\n\t\tthis.keys.clear();\n\t}\n\n\tprivate getInternalKey(key: K): K {\n\t\treturn this.keys.get(key.toString());\n\t}\n\n\tprivate hasInternalKey(key: K): boolean {\n\t\treturn this.keys.has(key.toString());\n\t}\n\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { subscriberForOperator } from './operator-utils';\nimport { HermesObserver } from '../observable/hermes.observer';\n\n\nexport function hermesMap<T, R>(convert: (value: T, index: number) => R): HermesOperatorFunction<T, R> {\n\n\treturn (source: HermesObservable<T>) => {\n\t\treturn new HermesObservable<R>((observer: HermesObserver<any>) => {\n\t\t\tlet index = 0;\n\n\t\t\tconst subscriber = subscriberForOperator(observer, (value: T) => {\n\t\t\t\tobserver.next(convert(value, index++));\n\t\t\t});\n\n\t\t\treturn source.subscribe(subscriber).getFinalize();\n\t\t});\n\t};\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { HermesObserver } from '../observable/hermes.observer';\nimport { subscriberForOperator } from './operator-utils';\n\n\nexport function hermesDistinctUntilChanged<T>(compareFn?: (one: T, two: T) => boolean): HermesOperatorFunction<T, T> {\n\n\tconst compare = compareFn ? compareFn : defaultCompareFn;\n\n\treturn (source: HermesObservable<T>) => {\n\t\treturn new HermesObservable<T>((observer: HermesObserver<any>) => {\n\n\t\t\tlet previousValue: T = null;\n\n\t\t\tconst subscriber = subscriberForOperator(observer, (value: T) => {\n\n\t\t\t\tif (previousValue === null || !compare(previousValue, value)) {\n\t\t\t\t\tpreviousValue = value\n\t\t\t\t\tobserver.next(value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn source.subscribe(subscriber).getFinalize();\n\t\t});\n\t};\n}\n\nfunction defaultCompareFn<T>(a: T, b: T): boolean {\n\treturn a === b;\n}\n","import { HermesSubject } from './hermes.subject';\nimport { HermesSubscription } from '../subscription/hermes.subscription';\nimport { HermesSubscriber } from './subscriber/hermes.subscriber';\n\nexport class HermesBehaviorSubject<T> extends HermesSubject<T> {\n\n\tprivate lastValue: T;\n\n\tconstructor(defaultValue: T) {\n\t\tsuper();\n\t\tthis.lastValue = defaultValue;\n\t}\n\n\tnext(value: T) {\n\t\tthis.lastValue = value;\n\t\tsuper.next(value);\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<T>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\tconst subscription = super.subscribe(arguments[0], arguments[1], arguments[2]);\n\n\t\tsuper.next(this.lastValue);\n\n\t\treturn subscription;\n\t}\n}\n","import { HermesSubject } from './hermes.subject';\nimport { HermesSubscription } from '../subscription/hermes.subscription';\nimport { HermesSubscriber } from './subscriber/hermes.subscriber';\n\nexport class HermesReplaySubject<T> extends HermesSubject<T> {\n\n\tprivate readonly values: Array<T> = [];\n\n\tconstructor(private readonly bufferSize: number = 1) {\n\t\tsuper();\n\t}\n\n\tnext(value: T) {\n\t\tthis.values.push(value);\n\t\tif (this.bufferSize < this.values.length) {\n\t\t\tthis.values.shift();\n\t\t}\n\t\tsuper.next(value);\n\t}\n\n\tsubscribe(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscription;\n\tsubscribe(\n\t\tsubscriber: HermesSubscriber<T>\n\t): HermesSubscription;\n\tsubscribe(\n\t\targ: any\n\t): HermesSubscription {\n\n\t\tlet subscriber: HermesSubscriber<T>;\n\n\t\tif (arg instanceof HermesSubscriber) {\n\t\t\tsubscriber = arg;\n\t\t} else {\n\t\t\tsubscriber = this.createSubscriber(arguments[0], arguments[1], arguments[2]);\n\t\t}\n\n\t\tconst subscription = super.subscribe(subscriber);\n\n\t\tfor (const value of this.values) {\n\t\t\tsubscriber.next(value);\n\t\t}\n\n\t\treturn subscription;\n\t}\n\n}\n","import { HermesSubject } from './hermes.subject';\nimport { HermesBehaviorSubject } from './hermes.behavior-subject';\nimport { HermesReplaySubject } from './hermes.replay-subject';\n\nexport class HermesArchiveSubject<T> extends HermesSubject<T> {\n\n\tstatic of<T>(value?: T) {\n\t\tif (value !== undefined) {\n\t\t\treturn new HermesBehaviorSubject<T>(value);\n\t\t} else {\n\t\t\treturn new HermesReplaySubject<T>(1);\n\t\t}\n\t}\n\n\tprivate constructor() {\n\t\tsuper();\n\t}\n}\n","import { ReactiveService } from './reactive.service';\nimport { KeyMap } from './collections/key-map';\nimport { Optional } from './optional';\nimport { hermesFilter } from './stream/operator/hermes.filter';\nimport { hermesMap } from './stream/operator/hermes.map';\nimport { hermesDistinctUntilChanged } from './stream/operator/hermes.distinct-until-changed';\nimport { HermesArchiveSubject } from './stream/observable/hermes.archive-subject';\nimport { HermesObservable } from './stream/observable/hermes.observable';\nimport { hermesTake } from './stream/operator/hermes.take';\nimport { Key } from './collections/key';\n\n\nexport abstract class KeyArchive<K extends Key, T> extends ReactiveService {\n\n\tprivate readonly archive = new KeyMap<K, T>();\n\n\tprivate readonly archive$: HermesArchiveSubject<KeyMap<K, T>>;\n\n\tprivate defaultValue: Optional<T> = Optional.empty();\n\n\tprotected constructor(defaultValue?: T) {\n\t\tsuper();\n\n\t\tthis.archive$ = HermesArchiveSubject.of();\n\n\t\tif (defaultValue !== undefined && defaultValue !== null) {\n\t\t\tthis.defaultValue = Optional.of(defaultValue);\n\t\t}\n\t}\n\n\ton(key: K): HermesObservable<T> {\n\n\t\tthis.tryToInitDefault(key);\n\n\t\treturn this.archive$\n\t\t\t\t   .toObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   hermesFilter(() => this.isNotStopped()),\n\t\t\t\t\t   hermesMap((map: KeyMap<K, T>) => {\n\t\t\t\t\t\t   return map.get(key);\n\t\t\t\t\t   }),\n\t\t\t\t\t   hermesFilter((value: Optional<T>) => value.isPresent()),\n\t\t\t\t\t   hermesMap((value: Optional<T>) => value.getValueOrNullOrThrowError()),\n\t\t\t\t\t   hermesDistinctUntilChanged(this.equals),\n\t\t\t\t\t   this.hermesTakeUntil()\n\t\t\t\t   );\n\t}\n\n\tonce(key: K): HermesObservable<T> {\n\n\t\treturn this.on(key)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   hermesTake(1)\n\t\t\t\t   );\n\t}\n\n\tget(key: K): Optional<T> {\n\n\t\tthis.tryToInitDefault(key);\n\n\t\treturn this.archive.get(key);\n\t}\n\n\tnext(key: K, value: T): void {\n\t\tthis.archive.set(key, value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprotected equals(a: T, b: T): boolean {\n\t\treturn a === b;\n\t}\n\n\tprotected createDefaultValue(defaultValue: T): T {\n\t\treturn defaultValue;\n\t}\n\n\tprivate tryToInitDefault(key: K): void {\n\t\tthis.defaultValue\n\t\t\t.ifPresent((value) => {\n\n\t\t\t\tif (!this.archive.has(key)) {\n\t\t\t\t\tthis.next(key, value);\n\t\t\t\t}\n\n\t\t\t});\n\t}\n\n}\n","import { AggregateId } from '../core/domain/tactical/aggregate/aggregate-id';\nimport { KeyArchive } from './key.archive';\n\n\nexport abstract class AggregateArchive<T> extends KeyArchive<AggregateId, T> {\n\n\tprotected constructor(defaultValue?: T) {\n\t\tsuper(defaultValue);\n\t}\n\n}\n","import { DomainEventHandler } from './domain-event.handler';\nimport { DomainEventType } from './domain-event-type';\nimport { AggregateArchive } from '../../../../common/aggregate.archive';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../domain-event';\n\n\nexport abstract class EventDrivenRepository<I extends AggregateId, E extends DomainEvent<I>, V>\n\textends AggregateArchive<V> implements DomainEventHandler<I, E> {\n\n\tprotected constructor(defaultValues?: V) {\n\t\tsuper(defaultValues);\n\t}\n\n\tabstract forEvent(): DomainEventType<E>;\n\n\thandle(event: E): void {\n\t\tthis.next(event.getAggregateId(), event.getPayload());\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../../common/reactive';\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelRootRepository<I extends AggregateId> extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.hermesTakeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent<I>) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent<I>): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { Type } from '@angular/core';\n\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../../domain/event/domain-event';\nimport { ReadModelRootId } from '../read/read-model-root-id';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\nimport { ReactiveService } from '../../../common/reactive.service';\nimport { hermesFilter } from '../../../common/stream/operator/hermes.filter';\nimport { HermesObservable } from '../../../common/stream/observable/hermes.observable';\n\nexport abstract class EventRepository<R extends ReadModelRootId, I extends AggregateId> extends ReactiveService {\n\n\tprotected constructor(private readonly domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t}\n\n\tprotected onEvent(aggregateId: R, eventType: Type<DomainEvent<I>>): HermesObservable<DomainEvent<any>> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   eventType as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   hermesFilter((event: DomainEvent<AggregateId>) => event.getAggregateId().toString() === aggregateId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { EntityId } from './entity.id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","import { HermesId } from './hermes.id';\n\nexport abstract class EntityId<T = string> extends HermesId<T> {\n\n}\n","export abstract class DomainModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class ApiModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class FeatureModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","import { HermesSubscriber } from './hermes.subscriber';\n\nexport class HermesSingleSubscriber<T> extends HermesSubscriber<T> {\n\n\tnext(value: T): void {\n\n\t\tif (this.isCompleted()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst observer = this.getObserver();\n\n\t\tif (observer && observer.next) {\n\t\t\tobserver.next(value);\n\t\t\tthis.complete();\n\t\t}\n\t}\n\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesSubscriber } from '../subscriber/hermes.subscriber';\nimport { HermesSingleSubscriber } from '../subscriber/hermes.single-subscriber';\n\n\nexport class HermesSingle<T> extends HermesObservable<T> {\n\n\tprotected createSubscriber(\n\t\tnext?: (value: T) => void,\n\t\terror?: (error: any) => void,\n\t\tcomplete?: () => void\n\t): HermesSubscriber<T> {\n\n\t\treturn new HermesSingleSubscriber({\n\t\t\tnext,\n\t\t\terror,\n\t\t\tcomplete\n\t\t});\n\t}\n}\n","import { HermesArchiveSubject } from './stream/observable/hermes.archive-subject';\nimport { HermesObservable } from './stream/observable/hermes.observable';\nimport { hermesDistinctUntilChanged } from './stream/operator/hermes.distinct-until-changed';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: HermesArchiveSubject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tthis.archive$ = HermesArchiveSubject.of(value);\n\t}\n\n\ton(): HermesObservable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .toObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   hermesDistinctUntilChanged(this.compare)\n\t\t\t\t   );\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n\tcompare(one: T, two: T): boolean {\n\t\treturn one === two;\n\t}\n}\n","import { ReadModelRootId } from '../../api/read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../api/read/read-model-root-id';\nimport { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../api/read/read-model-root';\nimport { ReadModelStore } from '../../../api/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>>\n\textends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tfindById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tfindById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../../../domain/tactical/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../api/read/read-model-root';\n\nimport { ReadModelStore } from '../../../api/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../../common/optional';\nimport { ReadModelRootId } from '../../../api/read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../../domain/tactical/aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(aggregate: A): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<A>): void {\n\t\taggregates.forEach((aggregate: A) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<Optional<A>> {\n\t\treturn Array.from(this.state.values()).map(v => Optional.of(v));\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\nimport { hermesFilter } from '../../../../common/stream/operator/hermes.filter';\nimport { hermesTakeUntil } from '../../../../common/stream/operator/hermes.take-until';\nimport { HermesSubject } from '../../../../common/stream/observable/hermes.subject';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new HermesSubject<void>();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\thermesFilter(() => this.enabled),\n\t\t\t\thermesTakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command<AggregateId>) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command<AggregateId>): void {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command<AggregateId>): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\nimport { hermesFilter } from '../../../../common/stream/operator/hermes.filter';\nimport { hermesTakeUntil } from '../../../../common/stream/operator/hermes.take-until';\nimport { HermesSubject } from '../../../../common/stream/observable/hermes.subject';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new HermesSubject<void>();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\thermesFilter(() => this.enabled),\n\t\t\t\thermesTakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent<AggregateId>): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateId } from '../../../domain/tactical/aggregate/aggregate-id';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent<AggregateId>): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { CreateAggregateCommandHandler } from './create-aggregate.command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../config/define';\nimport { AggregateFactory } from '../../tactical/aggregate/aggregate-factory';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate.command';\nimport { DomainEventPublisher } from '../../event/domain-event.publisher';\n\n\nexport function createAggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand>(\n\tcreateAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\tfactoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string, domainEventPublisher: DomainEventPublisher\n): CreateAggregateCommandHandlerImpl<I, A, C> {\n\n\treturn new CreateAggregateCommandHandlerImpl<I, A, C>(\n\t\tcreateAggregateCommandHandler,\n\t\tfactoryArchive,\n\t\taggregateRepositoryArchive,\n\t\taggregateName,\n\t\tdomainEventPublisher\n\t);\n}\n\nexport class CreateAggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string,\n\t\t\t\tprivate readonly domainEventPublisher: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst type = aggregate.getType(),\n\t\t\t\tcreateCommandConstructor = aggregate.createEvent();\n\n\t\t\tconst createCommand = new createCommandConstructor(aggregateId, type);\n\n\t\t\taggregate.addEvent(createCommand);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.domainEventPublisher.publishFromAggregate(aggregate);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const CREATE_AGGREGATE_COMMAND_HANDLERS = 'HERMES - CREATE_AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../../tactical/aggregate/aggregate-factory';\nimport { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Optional } from '../../../../common/optional';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../create-aggregate/create-aggregate.command-handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n\n\thas(key: string): boolean {\n\t\treturn this.map.has(key);\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n\n\thas(key: string): boolean {\n\t\treturn this.map.has(key);\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: CreateAggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","import { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../../tactical/aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publish(aggregate, command);\n\t}\n\n\thandleCommand(command: C): void {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.findById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handle(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { DomainEventHandler } from './domain-event.handler';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../domain-event';\nimport { MultiDomainEventHandler } from './multi-domain-event.handler';\nimport { DomainEventType } from './domain-event-type';\n\n\nexport function domainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: DomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, [domainEventHandler.forEvent()]);\n}\n\n\nexport function multiDomainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: MultiDomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, domainEventHandler.forEvents());\n}\n\n\nexport class DomainEventHandlerImpl<I extends AggregateId, E extends DomainEvent<I>> {\n\n\tprivate readonly eventTypes: Array<string>;\n\n\tconstructor(private readonly domainEventHandler: DomainEventHandler<I, E> | MultiDomainEventHandler<I, E>,\n\t\t\t\tprivate readonly events: Array<DomainEventType<E>>) {\n\t\tthis.eventTypes = this.createDomainEventTypes();\n\t}\n\n\thandleEvent(event: E): void {\n\t\tthis.domainEventHandler.handle(event);\n\t}\n\n\tforEvents(events: Array<E>): boolean {\n\t\treturn events.some((event: E) => {\n\t\t\treturn this.eventTypes.some((type: string) => {\n\t\t\t\treturn type === event.getMessageType();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate createDomainEventTypes(): Array<string> {\n\n\t\tconst types = [];\n\n\t\tfor (const event of this.events) {\n\t\t\tconst instance = this.createDomainEventInstance(event);\n\t\t\ttypes.push(instance.getMessageType());\n\t\t}\n\n\t\treturn types;\n\t}\n\n\tprivate createDomainEventInstance(eventType: DomainEventType<E>): E {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = eventType.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (eventType as any)(...args));\n\t}\n\n}\n","import { DomainEventHandlerImpl } from '../handler/domain-event-handler-impl';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { DomainEvent } from '../domain-event';\nimport { DomainEventBus } from '../domain-event.bus';\nimport { Reactive } from '../../../../common/reactive';\n\n\nexport class DomainEventHandlerInitializer<I extends AggregateId, E extends DomainEvent<I>> extends Reactive {\n\n\tinit(\n\t\teventHandlers: Array<DomainEventHandlerImpl<I, E>>,\n\t\tdomainEventBus: DomainEventBus\n\t): void {\n\n\t\tif (eventHandlers) {\n\n\t\t\tconst set = new Set();\n\t\t\tconst filteredHandlers: Array<DomainEventHandlerImpl<I, E>> = [];\n\n\t\t\teventHandlers.filter((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\tif (!set.has((handler as any).domainEventHandler)) {\n\t\t\t\t\tset.add((handler as any).domainEventHandler);\n\t\t\t\t\tfilteredHandlers.push(handler);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfilteredHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\tdomainEventBus\n\t\t\t\t\t.ofEventHandler(handler)\n\t\t\t\t\t.pipe(this.hermesTakeUntil())\n\t\t\t\t\t.subscribe((event: E) => {\n\t\t\t\t\t\thandler.handleEvent(event);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\t// console.log('Registered event handlers:', filteredHandlers.length)\n\t\t\t// console.log('Registered event handlers:', filteredHandlers)\n\t\t}\n\t}\n}\n","import { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { Reactive } from '../../../../common/reactive';\nimport { CommandHandlerImpl } from '../handler/command-handler-impl';\nimport { CommandBus } from '../command.bus';\nimport { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { CreateAggregateCommandHandlerImpl } from '../create-aggregate/create-aggregate.command-handler-impl';\n\n\nexport class CommandHandlerInitializer<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>> extends Reactive {\n\n\tregister(\n\t\tcommandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\tcommandBus: CommandBus\n\t): void {\n\n\t\tif (commandHandlers) {\n\n\t\t\tconst set = new Set();\n\t\t\tconst filteredHandlers: Array<CommandHandlerImpl<I, A, C>> = [];\n\n\t\t\tcommandHandlers.filter((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tif (!set.has((handler as any).commandHandler)) {\n\t\t\t\t\tset.add((handler as any).commandHandler);\n\t\t\t\t\tfilteredHandlers.push(handler);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfilteredHandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.hermesTakeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\t// console.log('Registered command handlers:' + filteredHandlers.length);\n\t\t\t// console.log('Registered command handlers:', filteredHandlers);\n\t\t}\n\n\t}\n\n\tregisterAggregateCommandHandlers(\n\t\taggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\tcommandBus: CommandBus\n\t) {\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\tconst set = new Set();\n\t\t\tconst filteredHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>> = [];\n\n\t\t\taggregateCommandHandlers.filter((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tif (!set.has((handler as any).createAggregateCommandHandler)) {\n\t\t\t\t\tset.add((handler as any).createAggregateCommandHandler);\n\t\t\t\t\tfilteredHandlers.push(handler);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfilteredHandlers.forEach((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.hermesTakeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\t// console.log('Registered create command handlers:' + filteredHandlers.length);\n\t\t\t// console.log('Registered create command handlers:', filteredHandlers);\n\t\t}\n\t}\n\n}\n","import { AggregateDefinition } from './aggregate-definition';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from './define';\nimport { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { AggregateRoot } from '../../tactical/aggregate/aggregate-root';\nimport { Injector } from '@angular/core';\n\nexport class AggregateDefinitionInitializer<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tregister(\n\t\tdefinedAggregate: Array<AggregateDefinition<I, A>>,\n\t\tinjector: Injector,\n\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>\n\t): void {\n\n\t\tif (definedAggregate) {\n\n\t\t\tconst set = new Set();\n\t\t\tconst filteredDefinitions: Array<AggregateDefinition<I, A>> = [];\n\n\t\t\tdefinedAggregate.filter((def: AggregateDefinition<I, A>) => {\n\t\t\t\tif (!set.has(def.key)) {\n\t\t\t\t\tset.add(def.key);\n\t\t\t\t\tfilteredDefinitions.push(def);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfilteredDefinitions.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\tif (!aggregateFactoryArchive.has(def.key)) {\n\t\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\t}\n\n\t\t\t\tif (!aggregateRepositoryArchive.has(def.key)) {\n\t\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// console.log('Registered aggregate definition:' + filteredDefinitions.length);\n\t\t\t// console.log('Registered aggregate definition:', filteredDefinitions);\n\t\t}\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/tactical/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from './hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\tcreateAggregateCommandHandlerFactory,\n\tCreateAggregateCommandHandlerImpl\n} from '../domain/command/create-aggregate/create-aggregate.command-handler-impl';\nimport { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/create-aggregate/create-aggregate.command-handlers-token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/tactical/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/tactical/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../domain/command/create-aggregate/create-aggregate.command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/tactical/aggregate/aggregate-id';\nimport { Reactive } from '../../common/reactive';\nimport { domainEventHandlerFactory, DomainEventHandlerImpl, multiDomainEventHandlerFactory } from '../domain/event/handler/domain-event-handler-impl';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/handler/domain-event-handlers';\nimport { DomainEventHandler } from '../domain/event/handler/domain-event.handler';\nimport { MultiDomainEventHandler } from '../domain/event/handler/multi-domain-event.handler';\nimport { DomainEventHandlerInitializer } from '../domain/event/init/domain-event-handler.initializer';\nimport { CommandHandlerInitializer } from '../domain/command/init/command-handler.initializer';\nimport { AggregateDefinitionInitializer } from '../domain/command/config/aggregate-definition.initializer';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\nexport class HermesBaseModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>, E extends DomainEvent<I>>\n\textends Reactive implements OnDestroy {\n\n\tprivate readonly aggregateDefinitionInitializer = new AggregateDefinitionInitializer();\n\n\tprivate readonly commandHandlerInitializer = new CommandHandlerInitializer();\n\n\tprivate readonly domainEventHandlerInitializer = new DomainEventHandlerInitializer();\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<I, E>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\t\tthis.checkDomainEventHandlerIsCollection(eventHandlers);\n\n\n\t\tthis.aggregateDefinitionInitializer.register(definedAggregate, injector, aggregateFactoryArchive, aggregateRepositoryArchive);\n\t\tthis.commandHandlerInitializer.register(commandHandlers, commandBus);\n\t\tthis.commandHandlerInitializer.registerAggregateCommandHandlers(aggregateCommandHandlers, commandBus);\n\t\tthis.domainEventHandlerInitializer.init(eventHandlers, domainEventBus);\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t\tthis.commandHandlerInitializer.ngOnDestroy();\n\t\tthis.domainEventHandlerInitializer.ngOnDestroy();\n\t}\n\n\tprivate checkNullCommand(\n\t\tcommandBus: CommandBus,\n\t\tcommandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\taggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>\n\t): void {\n\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.hermesTakeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn('You might provided commandHandler without specifying \"multi: true\".');\n\t\t}\n\t}\n\n\tprivate checkDomainEventHandlerIsCollection(eventHandlers: Array<DomainEventHandlerImpl<I, E>>): void {\n\t\tif (eventHandlers && !Array.isArray(eventHandlers)) {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn('You might provided eventHandler without specifying \"multi: true\".');\n\t\t}\n\t}\n\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule extends HermesBaseModule<any, any, any, any> {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\t\taggregateKey: string,\n\t\tfactory: Type<AggregateFactory<I, A>>,\n\t\trepository: Type<AggregateRepository<I, A>>,\n\t\tcreateCommandHandler: Type<CreateAggregateCommandHandler<A, C>>,\n\t\tcommandHandlers: ReadonlyArray<Provider> = [],\n\t\tdomainEventHandlers: ReadonlyArray<Provider> = []): ModuleWithProviders<any> {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createCommandHandler, aggregateKey),\n\t\t\t\t...commandHandlers,\n\t\t\t\t...domainEventHandlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders<HermesModule> {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<DomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: domainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerMultiDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<MultiDomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: multiDomainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<any, any>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<any, any, any>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<any, any>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<any, any>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<any, any>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\thermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\thermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper(\n\t\t\teventHandlers,\n\t\t\taggregateCommandHandlers,\n\t\t\tcommandHandlers,\n\t\t\tdefinedAggregate,\n\t\t\tinjector,\n\t\t\taggregateFactoryArchive,\n\t\t\taggregateRepositoryArchive,\n\t\t\tcommandBus,\n\t\t\tdomainEventBus,\n\t\t\thermesLoggersInitializer,\n\t\t\thermesApi\n\t\t);\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command<I>>(\n\t\tcreateCommandHandlerType: Type<CreateAggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: CREATE_AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: createAggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName,\n\t\t\t\t\tDomainEventPublisher\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n}\n","import { AggregateId } from '../../tactical/aggregate/aggregate-id';\nimport { Command } from '../command';\n\nexport abstract class CreateAggregateCommand extends Command<AggregateId> {\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  type: string) {\n\t\tsuper(aggregateId, type);\n\t}\n\n}\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../core/domain/tactical/aggregate/aggregate-id';\n\nimport { AggregateEvent } from '../core/domain/tactical/aggregate/aggregate-event';\nimport { DomainEvent } from '../core/domain/event/domain-event';\nimport { HermesObservable } from '../common/stream/observable/hermes.observable';\n\ndeclare const expect: any;\ndeclare const it: any;\ndeclare const jest: any;\n\nexport function assertDomainEvents<I extends AggregateId>(actualEvents: ReadonlyArray<DomainEvent<I>>, expectedEvents: Array<DomainEvent<I>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (const actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent<I>) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy();\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (const actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n\nexport function testEventRepositoryIsEmptyOnStart<T>(createStream: () => HermesObservable<T>, desc: string): void {\n\n\tit('should be no ' + desc + ' events on start', () => {\n\n\t\texpect.assertions(3);\n\n\t\t// given\n\t\tconst nextFn = jest.fn(),\n\t\t\terrorFn = jest.fn(),\n\t\t\tcompleteFn = jest.fn();\n\n\t\t// when\n\t\tcreateStream()\n\t\t\t.subscribe(\n\t\t\t\t() => nextFn(),\n\t\t\t\t(err: any) => errorFn(err),\n\t\t\t\t() => completeFn()\n\t\t\t);\n\n\t\t// then\n\t\texpect(nextFn).not.toHaveBeenCalled();\n\t\texpect(errorFn).not.toHaveBeenCalled();\n\t\texpect(completeFn).not.toHaveBeenCalled();\n\t});\n}\n\nexport function testWarehouseDefaultValueOnStart<T>(createStream: () => HermesObservable<T>, defaultValue: T, desc: string): void {\n\n\tit('should have default value ' + desc, () => {\n\n\t\texpect.assertions(4);\n\n\t\t// given\n\t\tconst nextFn = jest.fn(),\n\t\t\terrorFn = jest.fn(),\n\t\t\tcompleteFn = jest.fn();\n\n\t\t// when\n\t\tcreateStream()\n\t\t\t.subscribe(\n\t\t\t\t(value) => nextFn(value),\n\t\t\t\t(err: any) => errorFn(err),\n\t\t\t\t() => completeFn()\n\t\t\t);\n\n\t\t// then\n\t\texpect(nextFn).toHaveBeenCalledWith(defaultValue);\n\t\texpect(nextFn).toHaveBeenCalledTimes(1);\n\t\texpect(errorFn).not.toHaveBeenCalled();\n\t\texpect(completeFn).not.toHaveBeenCalled();\n\t});\n}\n\nexport function testWarehouseDefaultValueOnStartOnce<T>(createStream: () => HermesObservable<T>, defaultValue: T, desc: string): void {\n\n\tit('should have default value ' + desc, () => {\n\n\t\texpect.assertions(4);\n\n\t\t// given\n\t\tconst nextFn = jest.fn(),\n\t\t\terrorFn = jest.fn(),\n\t\t\tcompleteFn = jest.fn();\n\n\t\t// when\n\t\tcreateStream()\n\t\t\t.subscribe(\n\t\t\t\t(value) => nextFn(value),\n\t\t\t\t(err: any) => errorFn(err),\n\t\t\t\t() => completeFn()\n\t\t\t);\n\n\t\t// then\n\t\texpect(nextFn).toHaveBeenCalledWith(defaultValue);\n\t\texpect(nextFn).toHaveBeenCalledTimes(1);\n\t\texpect(errorFn).not.toHaveBeenCalled();\n\t\texpect(completeFn).toHaveBeenCalledTimes(1);\n\t});\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare const window: Window;\n\nexport function enableHermesLoggers(domainName?: string, windowObject?: Window): void {\n\n\tconst winRef = windowObject ? windowObject : window;\n\n\tif (domainName) {\n\t\twinRef[hermesApi].domain = domainName;\n\t}\n\n\twinRef[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(windowObject?: Window): void {\n\n\tconst winRef = windowObject ? windowObject : window;\n\n\tdelete winRef[hermesApi].domain;\n\n\twinRef[hermesApi].loggers = false;\n}\n","import { HermesObservable } from '../../common/stream/observable/hermes.observable';\nimport { Observable } from 'rxjs';\n\nexport function fromRxJsObservable<T>(source$: Observable<T>): HermesObservable<T> {\n\treturn new HermesObservable((observer) => {\n\t\tconst subscription = source$.subscribe(\n\t\t\t(value: T) => observer.next(value),\n\t\t\t(error: any) => observer.error(error),\n\t\t\t() => observer.complete()\n\t\t);\n\t\treturn () => subscription.unsubscribe();\n\t});\n}\n","import { HermesObservable } from '../hermes.observable';\n\ntype EventType = string;\n\nexport function hermesFromEvent(element: HTMLElement, type: EventType): HermesObservable<any> {\n\n\treturn new HermesObservable<any>((observer) => {\n\n\t\tconst listener = (event: Event) => {\n\t\t\tobserver.next(event);\n\t\t};\n\n\t\telement.addEventListener(type, listener);\n\n\t\treturn () => {\n\t\t\telement.removeEventListener(type, listener);\n\t\t};\n\t});\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesObserver } from '../hermes.observer';\n\nexport function hermesInterval(interval: number): HermesObservable<number> {\n\n\tlet counter = 0;\n\n\treturn new HermesObservable<number>((observer: HermesObserver<number>) => {\n\n\t\tconst id = setInterval(() => {\n\t\t\tobserver.next(counter++);\n\t\t}, interval);\n\n\t\treturn () => {\n\t\t\tclearInterval(id);\n\t\t\tobserver.complete();\n\t\t}\n\t});\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesObserver } from '../hermes.observer';\n\nexport function hermesNever<T>(): HermesObservable<T> {\n\treturn new HermesObservable<T>((observer: HermesObserver<T>) => {\n\t});\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { subscriberForOperator } from './operator-utils';\n\n\nexport function hermesSkip<T>(valuesNumber: number): HermesOperatorFunction<T, T> {\n\n\treturn (source) => {\n\n\t\treturn new HermesObservable(observer => {\n\n\t\t\tlet index = 0;\n\n\t\t\tconst subscriber = subscriberForOperator(observer, (value) => {\n\t\t\t\tif (index >= valuesNumber) {\n\t\t\t\t\tobserver.next(value);\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t});\n\n\t\t\treturn source.subscribe(subscriber).getFinalize();\n\t\t});\n\t};\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { HermesSubscriber } from '../observable/subscriber/hermes.subscriber';\nimport { subscriberForOperator } from './operator-utils';\nimport { HermesObserver } from '../observable/hermes.observer';\n\n\nexport function hermesSwitchMap<T, R>(operation: (value: T) => HermesObservable<R>): HermesOperatorFunction<T, R> {\n\n\treturn (source: HermesObservable<T>) => {\n\t\treturn new HermesObservable<R>((observer: HermesObserver<any>) => {\n\n\t\t\tlet isOuterCompleted = false;\n\t\t\tlet innerSubscriber: HermesSubscriber<T> | null = null;\n\n\t\t\tconst tryToComplete = function() {\n\t\t\t\tif (isOuterCompleted && !innerSubscriber) {\n\t\t\t\t\tobserver.complete();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst outerSubscriber = subscriberForOperator<T>(\n\t\t\t\tobserver,\n\t\t\t\t(v: T) => {\n\n\t\t\t\t\tif (innerSubscriber) {\n\t\t\t\t\t\tinnerSubscriber.unsubscribe();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst subscriber = new HermesSubscriber({\n\t\t\t\t\t\tnext: (v2: any) => observer.next(v2),\n\t\t\t\t\t\terror: (e: any) => observer.error(e),\n\t\t\t\t\t\tcomplete: () => {\n\t\t\t\t\t\t\tinnerSubscriber = null;\n\t\t\t\t\t\t\ttryToComplete();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tinnerSubscriber = subscriber;\n\n\t\t\t\t\tconst innerSubscription = operation(v).subscribe(\n\t\t\t\t\t\tsubscriber\n\t\t\t\t\t);\n\n\t\t\t\t\treturn innerSubscription.getFinalize();\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tisOuterCompleted = true;\n\t\t\t\t\ttryToComplete();\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn source.subscribe(outerSubscriber).getFinalize();\n\t\t});\n\t};\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { subscriberForOperator } from './operator-utils';\n\nexport function hermesTap<T>(operation: (value: T) => void): HermesOperatorFunction<T, T> {\n\treturn (source) => {\n\t\treturn new HermesObservable(observer => {\n\n\t\t\tconst subscriber = subscriberForOperator(observer, (value) => {\n\t\t\t\toperation(value);\n\t\t\t\tobserver.next(value);\n\t\t\t});\n\n\t\t\treturn source.subscribe(subscriber).getFinalize();\n\t\t});\n\t};\n}\n","import { HermesObservable } from '../hermes.observable';\n\nexport function hermesThrowError<T>(error: any): HermesObservable<T> {\n\n\treturn new HermesObservable<T>(observer => {\n\t\tobserver.error(error);\n\t});\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesObserver } from '../hermes.observer';\n\nexport function hermesTimer(time: number): HermesObservable<number> {\n\n\treturn new HermesObservable<number>((observer: HermesObserver<number>) => {\n\n\t\tconst id = setTimeout(() => {\n\t\t\tobserver.next(0);\n\t\t}, time);\n\n\t\treturn () => {\n\t\t\tclearTimeout(id);\n\t\t\tobserver.complete();\n\t\t}\n\t});\n}\n","import { HermesObservable, HermesOperatorFunction } from '../observable/hermes.observable';\nimport { subscriberForOperator } from './operator-utils';\n\n\nexport function hermesToArray<T>(): HermesOperatorFunction<T, Array<T>> {\n\n\treturn (source: HermesObservable<T>) => {\n\t\treturn new HermesObservable<Array<T>>((observer) => {\n\n\t\t\tconst values: Array<T> = [];\n\n\t\t\tconst subscriber =\n\t\t\t\tsubscriberForOperator<any>(\n\t\t\t\t\tobserver,\n\t\t\t\t\t(value: T) => {\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (values.length > 0) {\n\t\t\t\t\t\t\tobserver.next(values);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\treturn source.subscribe(subscriber).getFinalize();\n\t\t});\n\t};\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DomainEvent } from './event/domain-event';\n\nimport { AggregateId } from './tactical/aggregate/aggregate-id';\nimport { DomainEventHandler } from './event/handler/domain-event.handler';\nimport { DOMAIN_EVENT_HANDLERS } from './event/handler/domain-event-handlers';\n\nexport function provideEventHandlers<I extends AggregateId, E extends DomainEvent<I>>(handlers: Array<Type<DomainEventHandler<I, E>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler<I, E>>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n","import { HermesObservable } from '../hermes.observable';\nimport { HermesSubscriber } from '../subscriber/hermes.subscriber';\nimport { HermesSingle } from './hermes.single';\n\nexport function singleFromObservable<T>(source: HermesObservable<T>): HermesSingle<T> {\n\n\treturn new HermesSingle<T>((observer) => {\n\n\t\tconst subscriber = new HermesSubscriber({\n\t\t\tnext: (value: T) => observer.next(value),\n\t\t\terror: (error: any) => observer.error(error),\n\t\t\tcomplete: () => {\n\t\t\t}\n\t\t});\n\n\t\tconst subscription = source.subscribe(\n\t\t\tsubscriber\n\t\t);\n\n\t\treturn subscription.getFinalize();\n\t});\n}\n"]}