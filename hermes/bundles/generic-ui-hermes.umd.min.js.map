{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes-api.ts","ng://@generic-ui/hermes/domain/event/handler/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity-id.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root-id.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.repository.ts","ng://@generic-ui/hermes/domain-api/read/store/read-model.store.ts","ng://@generic-ui/hermes/domain-api/event/event.repository.ts","ng://@generic-ui/hermes/domain/tactical/entity.ts","ng://@generic-ui/hermes/domain/tactical/entity-id.ts","ng://@generic-ui/hermes/domain/domain-module.ts","ng://@generic-ui/hermes/domain-api/api-module.ts","ng://@generic-ui/hermes/feature/feature-module.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handler-impl.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handlers-token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/domain-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/domain/event/handler/domain-event-handler-impl.ts","ng://@generic-ui/hermes/domain-api/hermes.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/domain-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","handle","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","AggregateRoot","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","setRequestCommand","requestCommandId","setPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","publishFromAggregate","aggregateEvent","toDomainEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","ofEventHandler","forEvents","argumentLength","fill","undefined","bind","apply","DomainEventPayload","getValue","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","Reactive","unsubscribe","ReadModelRootRepository","domainEventBus","subscribe","EventRepository","onEvent","Entity","id","entity","EntityId","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","on","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","Archive","onValue","Optional","isEmpty","empty","isPresent","filterer","callback","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","remove","delete","InMemoryReadModelStore","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","createAggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","domainEventPublisher","CreateAggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","handleCommand","factory","createCommand","createEvent","repo","_a","AggregateFactoryArchive","add","key","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","commandHandlerFactory","commandHandler","CommandHandlerImpl","publishDomainEvents","handleAggregate","domainEventHandlerFactory","domainEventHandler","DomainEventHandlerImpl","forEvent","multiDomainEventHandlerFactory","eventTypes","createDomainEventTypes","handleEvent","types","_b","_c","instance","createDomainEventInstance","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesBaseModule","eventHandlers","commandHandlers","definedAggregate","injector","hermesLoggersInitializer","hermesApi","checkNullCommand","checkCommandHandlerIsCollection","checkDomainEventHandlerIsCollection","def","warn","Injector","HermesModule","defineAggregate","aggregateKey","createHandler","domainEventHandlers","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","registerDomainEventHandler","domainEventHandlerType","registerMultiDomainEventHandler","createCommandHandlerType","imports","CommonModule","CreateAggregateCommand","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message<any>> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent<AggregateId>> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'HERMES - DOMAIN_EVENT_HANDLERS_TOKEN';\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message<I extends AggregateId> {\n\n\tprotected constructor(private readonly aggregateId: I,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message<I>): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message<I>): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message<any> {\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from './aggregate/aggregate-root';\nimport { CreateAggregateCommandHandlerImpl } from './aggregate/create/create-aggregate.command-handler-impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../aggregate-id';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\nimport { AggregateId } from '../aggregate-id';\n\n\nexport abstract class ReplayCommandDispatcher<I extends AggregateId> implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent<I>): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent<I>) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent<I>) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\nimport { DomainEvent } from '../../event/domain-event';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tabstract toDomainEvent(): DomainEvent<T>;\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract getById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { Type } from '@angular/core';\n\nimport { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tabstract createEvent(): Type<AggregateEvent<I>>;\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","import { ReadModelRootId } from '../domain-api/read/read-model-root-id';\n\nexport abstract class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent<I extends AggregateId> extends Message<I> {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent<I>): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent<AggregateId>> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent<AggregateId>> = new Subject<DomainEvent<AggregateId>>();\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent<AggregateId> {\n\n\t\tconst events: Array<DomainEvent<AggregateId>> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent<AggregateId>> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(event: DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent<AggregateId>> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent<AggregateId>> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\nimport { AggregateRoot } from '../command/aggregate/aggregate-root';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent<AggregateId>): void;\n\tpublish(events: ReadonlyArray<DomainEvent<AggregateId>>): void;\n\tpublish(args: DomainEvent<AggregateId> | ReadonlyArray<DomainEvent<AggregateId>>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tpublishFromAggregate(aggregate: AggregateRoot<AggregateId>): void {\n\t\taggregate.getEvents()\n\t\t\t\t .forEach((aggregateEvent: AggregateEvent<AggregateId>) => {\n\t\t\t\t\t this.publish(\n\t\t\t\t\t\t aggregateEvent.toDomainEvent()\n\t\t\t\t\t );\n\t\t\t\t });\n\t}\n\n\tprivate publishEvent(event: DomainEvent<AggregateId>): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\nimport { AggregateId } from '../aggregate-id';\nimport { DomainEventHandlerImpl } from './handler/domain-event-handler-impl';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent<AggregateId>> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofEventHandler<E2 extends E>(...handlers: Array<DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn handlers.some((handler: DomainEventHandlerImpl<AggregateId, DomainEvent<AggregateId>>) => handler.forEvents([event]));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent<AggregateId> {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\nimport { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootRepository<I extends AggregateId> extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent<I>) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent<I>): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { AggregateId } from '../../domain/aggregate-id';\nimport { DomainEvent } from '../../domain/event/domain-event';\nimport { ReadModelRootId } from '../read/read-model-root-id';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nexport abstract class EventRepository<R extends ReadModelRootId, I extends AggregateId> {\n\n\tprotected constructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tprotected onEvent(aggregateId: R, eventType: Type<DomainEvent<I>>): Observable<DomainEvent<any>> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   eventType as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent<AggregateId>) => event.getAggregateId().toString() === aggregateId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { EntityId } from './entity-id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","export abstract class EntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: EntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","export abstract class DomainModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class ApiModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","export abstract class FeatureModule {\n\n\tprotected constructor() {\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\ton(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   this.takeUntil(),\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\nimport { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../domain/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../domain-api/read/read-model-root';\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>> extends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../domain-api/read/read-model-root';\n\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\n\t\t// const aggregateId = readModelRootId.toAggregateId() as B; // TODO remove as\n\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: A) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { AggregateRoot } from '../../domain/command/aggregate/aggregate-root';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent<AggregateId>): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent<AggregateId>): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate-root';\nimport { CreateAggregateCommandHandler } from './create-aggregate.command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../../config/define';\nimport { AggregateFactory } from '../aggregate-factory';\nimport { AggregateRepository } from '../aggregate-repository';\nimport { AggregateId } from '../../../aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate.command';\nimport { DomainEventPublisher } from '../../../event/domain-event.publisher';\n\n\nexport function createAggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand>(createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>, aggregateName: string, domainEventPublisher: DomainEventPublisher): CreateAggregateCommandHandlerImpl<I, A, C> {\n\treturn new CreateAggregateCommandHandlerImpl<I, A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName, domainEventPublisher);\n}\n\nexport class CreateAggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string,\n\t\t\t\tprivate readonly domainEventPublisher: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst type = aggregate.getType(),\n\t\t\t\tcreateCommandConstructor = aggregate.createEvent();\n\n\t\t\tconst createCommand = new createCommandConstructor(aggregateId, type);\n\n\t\t\taggregate.addEvent(createCommand);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.domainEventPublisher.publishFromAggregate(aggregate);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const CREATE_AGGREGATE_COMMAND_HANDLERS = 'HERMES - CREATE_AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../aggregate/aggregate-factory';\nimport { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../aggregate/create/create-aggregate.command-handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: CreateAggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C): void {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { Type } from '@angular/core';\n\nimport { DomainEventHandler } from './domain-event.handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { DomainEvent } from '../domain-event';\nimport { MultiDomainEventHandler } from './multi-domain-event.handler';\n\n\nexport function domainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: DomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, [domainEventHandler.forEvent()]);\n}\n\n\nexport function multiDomainEventHandlerFactory<I extends AggregateId, E extends DomainEvent<I>>(\n\tdomainEventHandler: MultiDomainEventHandler<I, E>\n): DomainEventHandlerImpl<I, E> {\n\treturn new DomainEventHandlerImpl<I, E>(domainEventHandler, domainEventHandler.forEvents());\n}\n\n\nexport class DomainEventHandlerImpl<I extends AggregateId, E extends DomainEvent<I>> {\n\n\tprivate readonly eventTypes: Array<string>;\n\n\tconstructor(private readonly domainEventHandler: DomainEventHandler<I, E> | MultiDomainEventHandler<I, E>,\n\t\t\t\tprivate readonly events: Array<Type<E>>) {\n\t\tthis.eventTypes = this.createDomainEventTypes();\n\t}\n\n\thandleEvent(event: E): void {\n\t\tthis.domainEventHandler.handle(event);\n\t}\n\n\tforEvents(events: Array<E>): boolean {\n\t\treturn events.some((event: E) => {\n\t\t\treturn this.eventTypes.some((type: string) => {\n\t\t\t\treturn type === event.getMessageType();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate createDomainEventTypes(): Array<string> {\n\n\t\tlet types = [];\n\n\t\tfor(let event of this.events) {\n\t\t\tlet instance = this.createDomainEventInstance(event);\n\t\t\ttypes.push(instance.getMessageType());\n\t\t}\n\n\t\treturn types;\n\t}\n\n\tprivate createDomainEventInstance(eventType: Type<E>): E {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = eventType.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (eventType as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/command/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from './/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\tcreateAggregateCommandHandlerFactory,\n\tCreateAggregateCommandHandlerImpl\n} from '../domain/command/aggregate/create/create-aggregate.command-handler-impl';\nimport { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/aggregate/create/create-aggregate.command-handlers-token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../domain/command/aggregate/create/create-aggregate.command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/aggregate-id';\nimport { Reactive } from '../common/reactive';\nimport {\n\tdomainEventHandlerFactory,\n\tDomainEventHandlerImpl,\n\tmultiDomainEventHandlerFactory\n} from '../domain/event/handler/domain-event-handler-impl';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/handler/domain-event-handlers';\nimport { DomainEventHandler } from '../domain/event/handler/domain-event.handler';\nimport { MultiDomainEventHandler } from '../domain/event/handler/multi-domain-event.handler';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\nexport class HermesBaseModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command, E extends DomainEvent<I>> extends Reactive implements OnDestroy {\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandlerImpl<I, E>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\t\tthis.checkDomainEventHandlerIsCollection(eventHandlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (commandHandlers) {\n\t\t\tcommandHandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\n\t\t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\tdomainEventBus\n\t\t\t\t\t.ofEventHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((event: E) => {\n\t\t\t\t\t\thandler.handleEvent(event);\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t.subscribe((event: E) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandlerImpl<I, E>) => {\n\t\t\t\t\t\thandler.handleEvent(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<I, A, C>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.warn(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n\tprivate checkDomainEventHandlerIsCollection(eventHandlers: Array<DomainEventHandlerImpl<I, E>>): void {\n\t\tif (eventHandlers && !Array.isArray(eventHandlers)) {\n\t\t\tconsole.warn(`You might provided eventHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule extends HermesBaseModule<any, any, any, any> {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t factory: Type<AggregateFactory<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t repository: Type<AggregateRepository<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t createHandler: Type<CreateAggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t commandHandlers: Array<Provider> = [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t domainEventHandlers: Array<Provider> = []): ModuleWithProviders<any> {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...commandHandlers,\n\t\t\t\t...domainEventHandlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders<HermesModule> {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<DomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: domainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tstatic registerMultiDomainEventHandler<I extends AggregateId, E extends DomainEvent<I>>(\n\t\tdomainEventHandlerType: Type<MultiDomainEventHandler<I, E>>\n\t): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: domainEventHandlerType,\n\t\t\t\tuseClass: domainEventHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\t\tuseFactory: multiDomainEventHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tdomainEventHandlerType\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcreateCommandHandlerType: Type<CreateAggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: CREATE_AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: createAggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName,\n\t\t\t\t\tDomainEventPublisher\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","import { AggregateId } from '../../../aggregate-id';\nimport { Command } from '../../command';\n\nexport abstract class CreateAggregateCommand extends Command {\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  type: string) {\n\t\tsuper(aggregateId, type);\n\t}\n\n}\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../domain/aggregate-id';\n\nimport { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents<I extends AggregateId>(actualEvents: ReadonlyArray<DomainEvent<I>>, expectedEvents: Array<DomainEvent<I>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent<I>) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DomainEvent } from './event/domain-event';\n\nimport { AggregateId } from './aggregate-id';\nimport { DomainEventHandler } from './event/handler/domain-event.handler';\nimport { DOMAIN_EVENT_HANDLERS } from './event/handler/domain-event-handlers';\n\nexport function provideEventHandlers<I extends AggregateId, E extends DomainEvent<I>>(handlers: Array<Type<DomainEventHandler<I, E>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler<I, E>>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}