{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/read/read-model-entity.ts","ng://@generic-ui/hermes/read/read-model-entity-id.ts","ng://@generic-ui/hermes/read/read-model-root.ts","ng://@generic-ui/hermes/read/read-model-root-id.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/read/read-model-root.repository.ts","ng://@generic-ui/hermes/read/store/read-model.store.ts","ng://@generic-ui/hermes/domain/tactical/entity.ts","ng://@generic-ui/hermes/domain/tactical/entity-id.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/aggregate-command-handler.impl.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/aggregate-command-handlers.token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/ui-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","hermesApi","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","handle","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","AggregateRoot","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","setRequestCommand","requestCommandId","setPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","dispatchAggregateEvent","aggregateEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","argumentLength","fill","undefined","bind","apply","DomainEventPayload","getValue","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","Reactive","unsubscribe","ReadModelRootRepository","domainEventBus","forEvents","subscribe","Entity","id","entity","EntityId","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","Optional","isEmpty","empty","isPresent","filterer","callback","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","remove","delete","InMemoryReadModelStore","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","aggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","AggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","publishDomainEvents","handleCommand","factory","repo","_a","AggregateFactoryArchive","add","key","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","commandHandlerFactory","commandHandler","CommandHandlerImpl","handleAggregate","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","eventHandlers","definedAggregate","injector","hermesLoggersInitializer","checkNullCommand","checkCommandHandlerIsCollection","def","defineAggregate","aggregateKey","createHandler","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","createCommandHandlerType","commandHandlers","warn","imports","CommonModule","Injector","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(private readonly aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from './aggregate/aggregate-root';\nimport { AggregateCommandHandlerImpl } from './aggregate/create/aggregate-command-handler.impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../aggregate-id';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<AggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: AggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: AggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract getById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","import { ReadModelRootId } from '../read/read-model-root-id';\n\nexport abstract class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent<AggregateId>, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../domain/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../domain/event/domain-event';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\n\nimport { Reactive } from '../common/reactive';\n\nexport abstract class ReadModelRootRepository extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { EntityId } from './entity-id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","export abstract class EntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: EntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { ReadModelRootId } from '../../read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\nimport { ReadModelRootId } from '../../read/read-model-root-id';\nimport { AggregateId } from '../../domain/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../read/read-model-root';\nimport { ReadModelStore } from '../../../read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../read/read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>> extends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../read/read-model-root';\n\nimport { ReadModelStore } from '../../../read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\n\t\t// const aggregateId = readModelRootId.toAggregateId() as B; // TODO remove as\n\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: A) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { AggregateRoot } from '../../domain/command/aggregate/aggregate-root';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate-root';\nimport { Command } from '../../command';\nimport { AggregateCommandHandler } from './aggregate-command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../../config/define';\nimport { AggregateFactory } from '../aggregate-factory';\nimport { AggregateRepository } from '../aggregate-repository';\nimport { AggregateId } from '../../../aggregate-id';\n\n\nexport function aggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(createAggregateCommandHandler: AggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>, aggregateName: string): AggregateCommandHandlerImpl<I, A, C> {\n\treturn new AggregateCommandHandlerImpl<I, A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class AggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: AggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.createAggregateCommandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const AGGREGATE_COMMAND_HANDLERS = 'HERMES - AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../aggregate/aggregate-factory';\nimport { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../aggregate/create/aggregate-command-handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: AggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/command/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\taggregateCommandHandlerFactory,\n\tAggregateCommandHandlerImpl\n} from '../domain/command/aggregate/create/aggregate-command-handler.impl';\nimport { AGGREGATE_COMMAND_HANDLERS } from '../domain/command/aggregate/create/aggregate-command-handlers.token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../domain/command/aggregate/create/aggregate-command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/aggregate-id';\nimport { Reactive } from '../common/reactive';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> extends Reactive implements OnDestroy {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t factory: Type<AggregateFactory<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t repository: Type<AggregateRepository<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t createHandler: Type<AggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t handlers: Array<Provider>): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...handlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcreateCommandHandlerType: Type<AggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: aggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\t@Optional() @Inject(AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) handlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, handlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(handlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: AggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (handlers) {\n\n\t\t\thandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<I, A, C>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<I, A, C>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.warn(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../domain/aggregate-id';\n\nimport { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}