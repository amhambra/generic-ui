{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/domain/command/command-handlers.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/domain/command/command.handler.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/read/read-model.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain/read/read-model.repository.ts","ng://@generic-ui/hermes/domain/read/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","hermesApi","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","COMMAND_HANDLERS","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","Optional","isEmpty","empty","of","isPresent","filter","filterer","forEach","callback","map","mapper","getValueOrNullOrThrowError","getOrThrow","Error","getOrElse","other","ifPresent","method","ifEmpty","orElse","CommandHandler","domainEvent","eventPublisher","aggregateRepository","commandType","createCommandInstance","handle","handleAggregate","aggregate","handleEmptyAggregate","publishDomainEvents","handleCommandForAggregate","optAggregate","getById","save","forCommand","handleCommand","result","isObservable","pipe","take","subscribe","res","dispatchEvent","event_1","setRequestCommand","setPayload","publish","argumentLength","fill","undefined","_a","bind","apply","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","some","ofHandler","handlers","handler","ofNullHandler","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregateName","name","cloneAggregates","JSON","parse","stringify","Aggregate","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","requestCommandId","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","waitForNextEventOccurrence","throwError","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publishEvent","dispatchAggregateEvent","aggregateEvent","console","DomainEventBus","ofEvent","createEventInstance","DomainEventPayload","getValue","ReadModel","gui","Reactive","unsubscribe","ReadModelRepository","domainEventBus","forEvents","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","PersistAnemia","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","a","remove","delete","InMemoryReadModelStore","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","commandHandlers","eventHandlers","hermesLoggersInitializer","checkNullCommand","checkCommandHandlerIsCollection","withConfig","config","ngModule","NgModule","imports","CommonModule","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1","useClass","multi"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAgF5E,SAASK,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KAKzC,SAASU,EAAOV,EAAGW,GACtB,IAAIV,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBY,EAAYC,EAA3BT,EAAIH,EAAEI,KAAKL,GAAOc,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIR,EAAEE,QAAQG,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQJ,IAAMA,EAAEH,OAASR,EAAIG,EAAU,SAAIH,EAAEI,KAAKD,GAE1D,QAAkB,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIV,EAAI,EAAGA,EAAIc,UAAUX,OAAQH,IAC3CU,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUd,KACpC,OAAOU,ECvIX,iBAAA,SAAAM,KA8BA,OApBCA,EAAAvB,UAAAwB,UAAA,SAAUC,GACT3B,KAAK2B,WAAaA,GAGnBF,EAAAvB,UAAA0B,IAAA,SAAIC,GACC7B,KAAK8B,YAAYD,IACpB7B,KAAK+B,MAAMF,IAIHJ,EAAAvB,UAAA4B,YAAV,SAAsBD,GAErB,OAAK7B,KAAK2B,YAIUE,EAAQG,WAEjBC,SAASjC,KAAK2B,aAE3BF,KC7BA,kBAAA,SAAAS,mDACA,OAD4CC,EAAAA,EAAAA,GAC5CD,GAD4CT,iBCA5C,SAAAW,mDACA,OADgDD,EAAAA,EAAAA,GAChDC,GADgDX,GCKnCY,EAAY,YAEzBC,EAAA,WAGC,SAAAA,EAAyCC,EAC9BC,EACAC,GAEV,GAJwCzC,KAAAuC,WAAAA,EAC9BvC,KAAAwC,cAAAA,EACAxC,KAAAyC,YAAAA,EAENC,EAAAA,kBAAkB1C,KAAKuC,YAAa,CAsBvCI,OAAON,GApBE,SAAIO,GACZ,MAAO,CACNC,YAAYC,GACPA,GACHF,EAAIJ,cAAcO,QAClBH,EAAIH,YAAYM,UAEhBH,EAAIJ,cAAcQ,OAClBJ,EAAIH,YAAYO,SAGlBC,WAAWtB,GACNA,IACHiB,EAAIJ,cAAcd,UAAUC,GAC5BiB,EAAIH,YAAYf,UAAUC,MAMViB,CAAI5C,MAExB2C,OAAON,GAAWQ,SAAU,GAG/B,2BAlCCK,EAAAA,sDAGqD1D,OAAM2D,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBAVZrB,SACAE,KAwCTE,EAlCA,GCPA,IAAakB,EAAmB,4BCHnBC,EAAwB,0CCMrC,SAAAC,mDAOA,OANmCvB,EAAAA,EAAAA,GAElCuB,EAAAxD,UAAAS,KAAA,SAAKE,GACJ8C,EAAAzD,UAAMS,KAAID,KAAAV,KAACa,wBAJZqC,EAAAA,aAODQ,GANmCE,EAAAA,SCPnCC,EAAA,WASC,SAAAA,EAAoBC,GAAA9D,KAAA8D,cAAAA,EAMrB,OAHCD,EAAA3D,UAAA6D,SAAA,SAASC,GACRhE,KAAK8D,cAAcnD,KAAKqD,wBAPzBd,EAAAA,sDAJQQ,KAaTG,EAfA,GCAA,IAAAI,EAAA,WAEA,SAAAA,KASA,OAJQA,EAAAC,SAAP,WACC,OAAOC,KAAKC,SAASpC,SAAS,IAAIqC,UAAU,EAAG,IAAMF,KAAKC,SAASpC,SAAS,IAAIqC,UAAU,EAAG,IAAM,GAAGJ,EAAsBK,SAHtHL,EAAAK,MAAQ,sBAHfpB,EAAAA,aASDe,EAXA,GCIA,iBAEC,SAAAM,EAAuCC,EACbC,EACFC,QAAA,IAAAA,IAAAA,EAAoBT,EAAsBC,YAF3BlE,KAAAwE,YAAAA,EACbxE,KAAAyE,YAAAA,EACFzE,KAAA0E,UAAAA,EA6CzB,OA1CCH,EAAArE,UAAAyE,eAAA,WACC,OAAO3E,KAAKyE,aAGbF,EAAArE,UAAA0E,eAAA,WACC,OAAO5E,KAAKwE,aAGbD,EAAArE,UAAA2E,aAAA,WACC,OAAO7E,KAAK0E,WAGbH,EAAArE,UAAA8B,SAAA,WACC,OAAOhC,KAAKyE,aAGbF,EAAArE,UAAA4E,aAAA,SAAajD,GACZ,OAAO7B,KAAK2E,mBAAqB9C,EAAQ8C,kBAG1CJ,EAAArE,UAAA6E,OAAA,SAAOlD,GACN,OAAQ7B,KAAK2E,mBAAqB9C,EAAQ8C,kBAAsB3E,KAAK0E,YAAc7C,EAAQ6C,WAK5FH,EAAArE,UAAA8E,cAAA,SAAcC,GAAd,IAAAC,EAAAlF,KAEC,OAAIL,MAAMwF,QAAQF,KAELA,EAAIG,MAAI,SAAEX,GAAwB,OAAAS,EAAKG,cAAcZ,MAK1DzE,KAAKqF,cAAcJ,IAIpBV,EAAArE,UAAAmF,cAAR,SAAsBZ,GACrB,OAAOzE,KAAK2E,mBAAqBF,GAEnCF,uBCnDA,SAAAe,mDACA,OAD6BnD,EAAAA,EAAAA,GAC7BmD,GAD6Bf,gBCc5B,SAAAgB,EAAoB1E,GACnB,OAAK0E,EAASC,QAAQ3E,IAAU0E,EAASC,QAAQ3E,GACzC0E,EAASE,SAEjBzF,KAAKa,MAAQA,EACNb,MAuET,OA1FQuF,EAAAE,MAAP,WACC,OAAO,IAAIF,EAAc,OAGnBA,EAAAG,GAAP,SAAa7E,GACZ,OAAO,IAAI0E,EAAY1E,IAGT0E,EAAAC,QAAf,SAAuB3E,GACtB,OAAO,MAAOA,GAaf0E,EAAArF,UAAAsF,QAAA,WACC,OAAOD,EAASC,QAAQxF,KAAKa,QAG9B0E,EAAArF,UAAAyF,UAAA,WACC,OAAQ3F,KAAKwF,WAGdD,EAAArF,UAAA0F,OAAA,SAAOC,GACN,OAAI7F,KAAK2F,aAAeE,EAAS7F,KAAKa,OAC9Bb,KAEDuF,EAASE,SAGjBF,EAAArF,UAAA4F,QAAA,SAAQC,GACH/F,KAAK2F,aACRI,EAAS/F,KAAKa,QAIhB0E,EAAArF,UAAA8F,IAAA,SAAOC,GACN,OAAIjG,KAAK2F,YACD,IAAIJ,EAAYU,EAAOjG,KAAKa,QAE7B0E,EAASE,SAMjBF,EAAArF,UAAAgG,2BAAA,WACC,OAAOlG,KAAKa,OAGb0E,EAAArF,UAAAiG,WAAA,WACC,GAAInG,KAAKwF,UACR,MAAM,IAAIY,MAAM,0CAEjB,OAAOpG,KAAKa,OAGb0E,EAAArF,UAAAmG,UAAA,SAAuBC,GACtB,OAAItG,KAAK2F,YACD3F,KAAKa,MAENyF,KAGRf,EAAArF,UAAAqG,UAAA,SAAUC,GACLxG,KAAK2F,aACRa,EAAOxG,KAAKa,QAId0E,EAAArF,UAAAuG,QAAA,SAAQD,GACHxG,KAAKwF,WACRgB,KAIFjB,EAAArF,UAAAwG,OAAA,SAAoBJ,GACnB,OAAItG,KAAK2F,YACD3F,KAEDsG,KAGTf,KC7EA,iBAIC,SAAAoB,EAAuC3C,EACf4C,EACEC,EACAC,GAHa9G,KAAAgE,QAAAA,EACfhE,KAAA4G,YAAAA,EACE5G,KAAA6G,eAAAA,EACA7G,KAAA8G,oBAAAA,EACzB9G,KAAK+G,YAAc/G,KAAKgH,wBAAwBrC,iBA6FlD,OA1FCgC,EAAAzG,UAAA+G,OAAA,SAAOjD,KAIP2C,EAAAzG,UAAAgH,gBAAA,SAAgBC,EAAcnD,KAG9B2C,EAAAzG,UAAAkH,qBAAA,SAAqBpD,KAIrB2C,EAAAzG,UAAAmH,oBAAA,SAAoBF,EAAcnD,KAGlC2C,EAAAzG,UAAAoH,0BAAA,SAA0BtD,GAA1B,IAAAkB,EAAAlF,KAEOwE,EAAcR,EAAQY,iBAEtB2C,EAAehC,EAASG,GAAG1F,KAAK8G,oBAAoBU,QAAQhD,IAElE+C,EAAahB,WAAS,SAAEY,GAEvBjC,EAAKgC,gBAAgBC,EAAWnD,GAEhCkB,EAAK4B,oBAAoBW,KAAKN,GAE9BjC,EAAKmC,oBAAoBF,EAAWnD,MAGrCuD,EAAad,SAAO,WACnBvB,EAAKkC,qBAAqBpD,OAK5B2C,EAAAzG,UAAAwH,WAAA,SAAW1D,GACV,OAAOhE,KAAK+G,cAAgB/C,EAAQW,kBAGrCgC,EAAAzG,UAAAyH,cAAA,SAAc3D,GAAd,IAAAkB,EAAAlF,KAEC,GAAIA,KAAK8G,oBACR9G,KAAKsH,0BAA0BtD,OADhC,KAMM4D,EAAS5H,KAAKiH,OAAOjD,GAEvB6D,EAAAA,aAAaD,GAChB,EACEE,KACAC,EAAAA,KAAK,IAELC,WAAS,SAAEC,GAGX/C,EAAKgD,cAAclE,EAASiE,MAG9BjI,KAAKkI,cAAclE,EAAO,KAIpB2C,EAAAzG,UAAAgI,cAAR,SAAsBlE,EAAkB4D,GAEvC,GAAI5H,KAAK4G,aAAe5G,KAAK6G,eAAgB,KAExCrC,EAA2BR,EAAQY,iBAEjCuD,EAAQ,IAAKnI,KAAgB,YAASwE,GAE5C2D,EAAMC,kBAAkBpE,GAEpB4D,GACHO,EAAME,WAAWT,GAGlB5H,KAAK6G,eAAeyB,QAAQH,KAItBxB,EAAAzG,UAAA8G,sBAAR,iBACO1D,EAAoB,GACzBiF,EAAiBvI,KAAKgE,QAAQ/D,YAAYW,OAI3C,OAFA0C,EAAKkF,UAAKC,EAAW,EAAGF,GAExB,KAAYG,EAAC1I,KAAY,SAAQ2I,KAAAC,MAAAF,EAAApH,EAAA,MAAA,GAAIgC,MAEvCqD,KC9GA,IAAakC,EAA0B,IAAIC,EAAAA,eAAiC,2BCG5EC,EAAA,SAAApF,GAGC,SAAAoF,EAA6CC,GAA7C,IAAA9D,EACCvB,EAAAjD,KAAAV,OAAOA,YAEHgJ,IACH9D,EAAK+D,OAASD,KA2CjB,OAjD6C7G,EAAAA,EAAAA,GAU5C4G,EAAA7I,UAAAgJ,KAAA,SAAQC,OACDC,EAAa,IAAIL,EAGvB,OAFAK,EAAWH,OAASjJ,KACpBoJ,EAAWD,SAAWA,EACfC,GAGRL,EAAA7I,UAAAmJ,UAAA,eAAwB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAhI,UAAAX,OAAA2I,IAAAD,EAAAC,GAAAhI,UAAAgI,GACvB,OAAO,KACLzB,KACAlC,EAAAA,QAAM,SAAE5B,GACP,OAAOsF,EAAaE,MAAI,SAAEzC,GAAwB,OAAA/C,EAAQgB,cAAc+B,YAK5EgC,EAAA7I,UAAAuJ,UAAA,eAAwB,IAAAC,EAAA,GAAAH,EAAA,EAAAA,EAAAhI,UAAAX,OAAA2I,IAAAG,EAAAH,GAAAhI,UAAAgI,GACvB,OAAO,KACLzB,KACAlC,EAAAA,QAAM,SAAE5B,GACP,OAAO0F,EAASF,MAAI,SAAEG,GAAuC,OAAAA,EAAQjC,WAAW1D,YAKpF+E,EAAA7I,UAAA0J,cAAA,SAA4BF,GAC3B,OAAO,KACL5B,KACAlC,EAAAA,QAAM,SAAE5B,GAEP,OAAK0F,IAIGA,EAASF,MAAI,SAAEG,GAAuC,OAAAA,EAAQjC,WAAW1D,+BA7CrFd,EAAAA,sDAR8BU,EAAAA,QAAOT,WAAA,CAAA,CAAAC,KAWxBC,EAAAA,OAAMC,KAAA,CAACuF,QA+CrBE,EAlDA,CAC6Cc,EAAAA,yBCQ5C,SAAAC,EAAuCC,EACfC,GADehK,KAAA+J,WAAAA,EACf/J,KAAAgK,IAAAA,EALhBhK,KAAAiK,aAAe,IAAIrG,EAAAA,QAEnB5D,KAAAkK,cAA+B,GA8CxC,OAtCCJ,EAAA5J,UAAA6D,SAAA,SAASC,GAIR,OAFAhE,KAAK+J,WAAWhG,SAASC,GAElBA,EAAQa,gBAGhBiF,EAAA5J,UAAAiK,gBAAA,SAAgBnG,GAAhB,IAAAkB,EAAAlF,KAEOoK,EACLpK,KAAKgK,IACHlC,KACAlC,EAAAA,QAAM,SAAEyE,GAAuB,OAAAA,EAAMC,YAAYtG,MACjDuG,EAAAA,QACAvE,EAAAA,KAAG,SAAEqE,GACJ,OAAOnF,EAAKsF,mBAAmBH,MAEhCI,EAAAA,UAAUzK,KAAKiK,eAGZS,EAAeC,YAAU,WAC9BzF,EAAK6E,WAAWhG,SAASC,MAK1B,OAFAhE,KAAKkK,cAAc9I,KAAKsJ,GAEjBN,GAGRN,EAAA5J,UAAA0K,YAAA,WACC5K,KAAKiK,aAAatJ,OAClBX,KAAKiK,aAAaY,WAElB7K,KAAKkK,cAAcpE,SAAO,SAAEmB,GAC3B6D,aAAa7D,OAIhB6C,KC5DA,iBAEC,SAAAiB,EACkBvG,EACApB,GADApD,KAAAwE,YAAAA,EACAxE,KAAAoD,KAAAA,EAoBnB,OAjBC2H,EAAA7K,UAAA0E,eAAA,WACC,OAAO5E,KAAKwE,aAGbuG,EAAA7K,UAAA8K,QAAA,WACC,OAAOhL,KAAKoD,MAGb2H,EAAA7K,UAAA6E,OAAA,SAAOsF,GACN,OAAOrK,KAAK8E,aAAauF,IACxBrK,KAAK4E,iBAAiBG,OAAOsF,EAAMzF,mBAGrCmG,EAAA7K,UAAA4E,aAAA,SAAauF,GACZ,OAAOrK,KAAKgL,YAAcX,EAAMW,WAGlCD,KCrBA,MAAA,aCAA,MAAA,aCDA,IAAAE,EAAA,WAAA,SAAAA,IAEkBjL,KAAAkL,OAAqB,GAiCvC,OA/BCD,EAAA/K,UAAAiL,SAAA,SAASC,GACRpL,KAAKkL,OAAO9J,KAAKgK,IAGlBH,EAAA/K,UAAAmL,0BAAA,SAA0B7G,GAEzB,IAAKA,EACJ,MAAO,OAGJ8G,EAAa,GAejB,OAbAtL,KAAKkL,OAAOpF,SAAO,SAAEsF,OAEdjE,EAAYiE,EAAM5D,QAAQhD,GAEhC,GAAI2C,EAAW,KAEVoE,EAAgBpE,EAAUlH,YAAYuL,KAE1CF,EAAWC,GAAiBpE,MAKvBnH,KAAKyL,gBAAgBH,IAGrBL,EAAA/K,UAAAuL,gBAAR,SAAwBH,GACvB,OAAOI,KAAKC,MAAMD,KAAKE,UAAUN,KAEnCL,EAnCA,GCDA,iBAMC,SAAAY,EAAsBrH,GACrBxE,KAAKwE,YAAcA,EACnBxE,KAAK8L,OAAS,GA2BhB,OAxBCD,EAAA3L,UAAA6L,MAAA,WACC,OAAO/L,KAAKwE,aAGbqH,EAAA3L,UAAA8L,UAAA,WACC,OAAOhM,KAAW,QAKnB6L,EAAA3L,UAAA+L,SAAA,SAAS3I,WAER,GAAI3D,MAAMwF,QAAQ7B,OACjB,IAAkB,IAAA4I,EAAAC,EAAA7I,GAAI8I,EAAAF,EAAAvL,QAAAyL,EAAAtL,KAAAsL,EAAAF,EAAAvL,OAAE,CAAnB,IAAIwH,EAAKiE,EAAAvL,MACbb,KAAK8L,OAAO1K,KAAK+G,0GAGlBnI,KAAK8L,OAAO1K,KAAI,IAIlByK,EAAA3L,UAAAmM,YAAA,WACCrM,KAAK8L,OAAOlL,OAAS,GAEvBiL,KCtCA,IAAAS,EAAA,WAIC,SAAAA,EAAYC,GACXvM,KAAKuM,IAAMA,EAcb,OAXCD,EAAApM,UAAA8B,SAAA,WACC,OAAOhC,KAAKuM,KAGbD,EAAApM,UAAA6L,MAAA,WACC,OAAO/L,KAAKuM,KAGbD,EAAApM,UAAA6E,OAAA,SAAOP,GACN,OAAOxE,KAAKuM,MAAQ/H,EAAYuH,SAElCO,EAnBA,UCCCE,QAAA,EACAC,QAAA,iDCCD,iBAEC,SAAAC,EAAuCC,EACfC,GADe5M,KAAA2M,OAAAA,EACf3M,KAAA4M,QAAAA,EAUzB,OAPCF,EAAAxM,UAAA2M,UAAA,WACC,OAAO7M,KAAK2M,QAGbD,EAAAxM,UAAA4M,WAAA,WACC,OAAO9M,KAAK4M,SAEdF,KCVA,kBAMC,SAAAK,EAAsBvI,EACfC,EACAmI,GAFP,IAAA1H,EAGCvB,EAAAjD,KAAAV,KAAMwE,EAAaC,IAAYzE,YAC/BkF,EAAK0H,QAAUA,IAsBjB,OAhC0CzK,EAAAA,EAAAA,GAazC4K,EAAA7M,UAAA8M,WAAA,SAAW3C,GACV,OAAOrK,KAAKC,YAAYuL,OAASnB,EAAMpK,YAAYuL,MAGpDuB,EAAA7M,UAAAkI,kBAAA,SAAkBpE,GACjBhE,KAAKiN,iBAAmBjJ,EAAQa,gBAGjCkI,EAAA7M,UAAAoK,YAAA,SAAYtG,GACX,OAAOA,EAAQa,iBAAmB7E,KAAKiN,kBAGxCF,EAAA7M,UAAAmI,WAAA,SAAWuE,GACV5M,KAAK4M,QAAUA,GAGhBG,EAAA7M,UAAA4M,WAAA,WACC,OAAO9M,KAAK4M,SAEdG,GAhC0CxI,GCN1C,IAAA2I,EAAA,WAOA,SAAAA,IAGSlN,KAAAmN,aAAmC,GAEnCnN,KAAAoN,cAAsC,IAAIxJ,EAAAA,QA2DnD,OAzDCsJ,EAAAhN,UAAAS,KAAA,SAAK0J,GACJrK,KAAKmN,aAAa/L,KAAKiJ,GACvBrK,KAAKoN,cAAczM,KAAK0J,IAGzB6C,EAAAhN,UAAAmN,gBAAA,SAAgBC,GAIf,OAFmCtN,KAAKgM,YAE1BuB,UACTnI,MAAI,SAAEiF,GACN,OAAOA,EAAMpK,YAAYuL,OAAS8B,MAQxCJ,EAAAhN,UAAAsN,aAAA,SAAaF,OAGNjD,EAAQrK,KAAKqN,gBAAgBC,GAEnC,OAAIjD,EACI3E,EAAAA,GAAG2E,GAIJrK,KAAKyN,2BAA2BH,IAKxCJ,EAAAhN,UAAAuN,2BAAA,SAA2BxI,OAEtBqI,EAEJ,GAAIrI,aAAe8H,EAClBO,EAAYrI,EAAIhF,YAAYuL,SACtB,CAAA,GAAmB,iBAARvG,EAGjB,OAAOyI,EAAAA,WAAW,IAAItH,MAAM,+BAF5BkH,EAAYrI,EAKb,OAAOjF,KAAKoN,cACNtF,KACAlC,EAAAA,QAAM,SAAEyE,GAAU,OAAAA,EAAMpK,YAAYuL,OAAS8B,KAC7CvF,EAAAA,KAAK,KAIJmF,EAAAhN,UAAA8L,UAAR,WACC,OAAOhM,KAAKmN,kCA7DbjK,EAAAA,aAgEDgK,EAvEA,qBCUC,SAAAS,EAAoBC,GAApB,IAAA1I,EACCvB,EAAAjD,KAAAV,OAAOA,YADYkF,EAAA0I,WAAAA,IAQrB,OAVuCzL,EAAAA,EAAAA,GAMtCwL,EAAAzN,UAAAS,KAAA,SAAK0J,GACJ1G,EAAAzD,UAAMS,KAAID,KAAAV,KAACqK,GACXrK,KAAK4N,WAAWjN,KAAK0J,wBATtBnH,EAAAA,sDAHQgK,KAcTS,GAVuC/J,EAAAA,0BCItC,SAAAiK,EAAoBC,GAAA9N,KAAA8N,YAAAA,EAyCrB,OApCCD,EAAA3N,UAAAoI,QAAA,SAAQhF,WAEP,GAAI3D,MAAMwF,QAAQ7B,OAEjB,IAAgB,IAAA4I,EAAAC,EAAA7I,GAAI8I,EAAAF,EAAAvL,QAAAyL,EAAAtL,KAAAsL,EAAAF,EAAAvL,OAAE,CAAjB,IAAIsE,EAAGmH,EAAAvL,MACXb,KAAK+N,aAAa9I,0GAET3B,aAAgByJ,GAC1B/M,KAAK+N,aAAazK,IAIpBuK,EAAA3N,UAAA8N,uBAAA,SAAuBC,EAAgCjK,KAU/C6J,EAAA3N,UAAA6N,aAAR,SAAqB1D,GAEfA,GACJ6D,QAAQ7M,MAASgJ,EAAK,mBAGjBA,aAAiB0C,GAGtBmB,QAAQ7M,MAASgJ,EAAK,yBAGvBrK,KAAK8N,YAAYnN,KAAK0J,wBA1CvBnH,EAAAA,sDAJQyK,KAgDTE,KC7CA,IAAAM,EAAA,SAAAxK,GAGC,SAAAwK,EAAYL,GAAZ,IAAA5I,EACCvB,EAAAjD,KAAAV,OAAOA,YAEH8N,IACH5I,EAAK+D,OAAS6E,KAgCjB,OAtCqD3L,EAAAA,EAAAA,GAUpDgM,EAAAjO,UAAAgJ,KAAA,SAAQC,OACDC,EAAa,IAAI+E,EAGvB,OAFA/E,EAAWH,OAASjJ,KACpBoJ,EAAWD,SAAWA,EACfC,GAGR+E,EAAAjO,UAAAkO,QAAA,eAAA,IAAAlJ,EAAAlF,KAAsB8L,EAAA,GAAAvC,EAAA,EAAAA,EAAAhI,UAAAX,OAAA2I,IAAAuC,EAAAvC,GAAAhI,UAAAgI,GACrB,OAAO,KACLzB,KACAlC,EAAAA,QAAM,SAAEgB,GACP,OAAOkF,EAAOtC,MAAI,SAAEa,GAEnB,OADsBnF,EAAKmJ,oBAAoBhE,GAC1BvF,aAAa8B,YAM/BuH,EAAAjO,UAAAmO,oBAAR,SAA4BhE,OACrB/G,EAAoB,GACzBiF,EAAiB8B,EAAMpK,YAAYW,OAIpC,OAFA0C,EAAKkF,UAAKC,EAAW,EAAGF,GAExB,IAAY,EAAMI,KAAAC,MAAA,EAAAtH,EAAA,MAAA,GAAYgC,0BApC/BJ,EAAAA,sDAHQyK,KA0CTQ,EAvCA,CACqDtE,EAAAA,cCPrD,aCFA,IAAAyE,EAAA,WAEC,SAAAA,EAA6BzN,GAAAb,KAAAa,MAAAA,EAM9B,OAHCyN,EAAApO,UAAAqO,SAAA,WACC,OAAOvO,KAAKa,OAEdyN,EARA,GCEA,iBAIC,SAAAE,EAAsBC,GACrBzO,KAAKwE,YAAciK,EAOrB,OAJCD,EAAAtO,UAAA6L,MAAA,WACC,OAAO/L,KAAKwE,aAGdgK,KCXA,iBAIC,SAAAE,IAFiB1O,KAAAiK,aAAe,IAAIrG,EAAAA,QAkBrC,OAbC8K,EAAAxO,UAAA0K,YAAA,WACC5K,KAAK2O,eAGID,EAAAxO,UAAAyO,YAAV,WACC3O,KAAKiK,aAAatJ,OAClBX,KAAKiK,aAAaY,YAGT6D,EAAAxO,UAAAuK,UAAV,WACC,OAAOA,EAAAA,UAAUzK,KAAKiK,eAGxByE,KClBA,kBAEC,SAAAE,EAAsBC,GAAtB,IAAA3J,EACCvB,EAAAjD,KAAAV,OAAOA,YACP6O,EACET,QAAOxF,MADTiG,EAAcvN,EAET4D,EAAK4J,cAERhH,KACA5C,EAAKuF,aAELzC,WAAS,SAAEqC,GAEX,IACCnF,EAAK8C,UAAUqC,GACd,MAAOnJ,GACRgN,QAAQ7M,MAAMH,SASnB,OAzBkDiB,EAAAA,EAAAA,GAyBlDyM,GAzBkDF,GCAlD,MAAA,aCDA,kBAEC,SAAAK,WACCpL,EAAAjD,KAAAV,OAAOA,KAOT,OAV8CmC,EAAAA,EAAAA,GAM7C4M,EAAA7O,UAAA0K,YAAA,WACC5K,KAAK2O,eAGPI,GAV8CL,GCO9C,kBAMC,SAAAM,EAAsBC,GAAtB,IAAA/J,EACCvB,EAAAjD,KAAAV,OAAOA,YALAkF,EAAAgK,QAAU,IAAIC,IAMrBjK,EAAKkK,YAAYH,KA4BnB,OApCkD9M,EAAAA,EAAAA,GAWjD6M,EAAA9O,UAAAmP,KAAA,SAAK7K,GACJ,OAAOxE,KAAKsP,SACNC,eACAzH,KACA9B,EAAAA,KAAG,SAAEA,GACJ,OAAOA,EAAIwJ,IAAIhL,EAAYxC,eAE5ByN,EAAAA,yBAIPT,EAAA9O,UAAAS,KAAA,SAAK6D,EAA0B3D,GAC9Bb,KAAKkP,QAAQQ,IAAIlL,EAAYxC,WAAYnB,GACzCb,KAAKsP,SAAS3O,KAAKX,KAAKkP,UAGjBF,EAAA9O,UAAAkP,YAAR,SAAoBH,GACfA,GACHjP,KAAKkP,QAAQQ,IAAIT,EAAazK,YAAYxC,WAAYiN,EAAapO,OACnEb,KAAKsP,SAAW,IAAIK,EAAAA,gBAAgC3P,KAAKkP,UAEzDlP,KAAKsP,SAAW,IAAIM,EAAAA,cAA8B,IAIrDZ,GApCkDD,GCTlD,iBAIC,SAAAc,EAAsBtD,GACrBvM,KAAKwE,YAAc+H,EAWrB,OARCsD,EAAA3P,UAAA0E,eAAA,WACC,OAAO5E,KAAKwE,aAGbqL,EAAA3P,UAAA6L,MAAA,WACC,OAAO/L,KAAK4E,iBAAiB5C,YAG/B6N,KCZA,iBAAA,SAAAC,IAEkB9P,KAAA+P,MAAwB,IAAIZ,IAuB9C,OArBCW,EAAA5P,UAAAwP,IAAA,SAAIM,GACHhQ,KAAK+P,MAAML,IAAIM,EAAOjE,QAASiE,IAGhCF,EAAA5P,UAAA+P,QAAA,SAAQC,GAAR,IAAAhL,EAAAlF,KACCkQ,EAAQpK,SAAO,SAAEkK,GAChB9K,EAAKwK,IAAIM,OAIXF,EAAA5P,UAAAsP,IAAA,SAAIhL,GACH,OAAOe,EAASG,GAAG1F,KAAK+P,MAAMP,IAAIhL,EAAYxC,cAG/C8N,EAAA5P,UAAAiQ,OAAA,WACC,OAAOxQ,MAAMyQ,KAAKpQ,KAAK+P,MAAMM,WAG9BP,EAAA5P,UAAAoQ,MAAA,WACCtQ,KAAK+P,MAAMO,SAEbR,KCtBA,kBAEC,SAAAS,EAAuCC,GAAvC,IAAAtL,EACCvB,EAAAjD,KAAAV,OAAOA,YAD+BkF,EAAAsL,WAAAA,IA0BxC,OA5BkGrO,EAAAA,EAAAA,GAQjGoO,EAAArQ,UAAAsH,QAAA,SAAQhD,GACP,OAAOxE,KAAKuO,SAAS/J,IAGtB+L,EAAArQ,UAAAiQ,OAAA,WACC,OAAOnQ,KAAKyQ,gBAGLF,EAAArQ,UAAAuQ,aAAR,WAAA,IAAAvL,EAAAlF,KACC,OAAOA,KAAKwQ,WACNL,SACAnK,KAAG,SAAEgK,GAAc,OAAA9K,EAAKwL,YAAYV,OAGnCO,EAAArQ,UAAAqO,SAAR,SAAiB/J,GAGhB,OAFkBxE,KAAKwQ,WAAWhB,IAAIhL,GAErBwB,IAAIhG,KAAK0Q,cAG5BH,GA5BkGI,GCElG,kBAEC,SAAAC,EAAuCJ,EACfK,GADxB,IAAA3L,EAECvB,EAAAjD,KAAAV,OAAOA,YAF+BkF,EAAAsL,WAAAA,EACftL,EAAA2L,uBAAAA,EAEvB3L,EAAK2L,uBAAuB1F,SAASjG,KA4BvC,OAjCkG/C,EAAAA,EAAAA,GAYjGyO,EAAA1Q,UAAAuH,KAAA,SAAKN,GACJnH,KAAK8Q,UAAU3J,IAGhByJ,EAAA1Q,UAAAsH,QAAA,SAAQhD,GACP,OAAOxE,KAAKuO,SAAS/J,IAGdoM,EAAA1Q,UAAA4Q,UAAR,SAAkB3J,OAEX6I,EAAShQ,KAAK+Q,SAAS5J,GAE7BnH,KAAKwQ,WAAWd,IAAIM,IAGbY,EAAA1Q,UAAAqO,SAAR,SAAiB/J,GAGhB,OAFkBxE,KAAKwQ,WAAWhB,IAAIhL,GAErBwB,IAAIhG,KAAKgR,aAG5BJ,GAjCkGK,GCDlG,kBAEC,SAAAC,EAAuCC,EACfN,GADxB,IAAA3L,EAECvB,EAAAjD,KAAAV,OAAOA,YAF+BkF,EAAAiM,cAAAA,EACfjM,EAAA2L,uBAAAA,EAEvB3L,EAAK2L,uBAAuB1F,SAASjG,KAmCvC,OAxC0E/C,EAAAA,EAAAA,GAUzE+O,EAAAhR,UAAAuH,KAAA,SAAKxC,GAAL,IAAAC,EAAAlF,KAEC,GAAIL,MAAMwF,QAAQF,GACjBA,EAAIa,SAAO,SAAEqB,GACZjC,EAAKiM,cAAczB,IAAIvI,UAElB,KACAA,EAAYlC,EAElBjF,KAAKmR,cAAczB,IAAIvI,KAIzB+J,EAAAhR,UAAAsH,QAAA,SAAQhD,OAED+C,EAAevH,KAAKmR,cAAc3B,IAAIhL,GAI5C,OAFA+C,EAAahB,WAAS,SAAE6K,GAAM,OAAAA,EAAE/E,iBAEzB9E,GAGR2J,EAAAhR,UAAAiQ,OAAA,WACC,OAAOnQ,KAAKmR,cAAchB,UAG3Be,EAAAhR,UAAAmR,OAAA,SAAO7M,GACNxE,KAAKmR,cAAcG,OAAO9M,IAG5B0M,GAxC0ED,GCA1E,kBAEC,SAAAM,EAAuCJ,GAAvC,IAAAjM,EACCvB,EAAAjD,KAAAV,OAAOA,YAD+BkF,EAAAiM,cAAAA,IAsBxC,OAxB+FhP,EAAAA,EAAAA,GAQ9FoP,EAAArR,UAAAsH,QAAA,SAAQhD,GACP,OAAOxE,KAAKuO,SAAS/J,IAGtB+M,EAAArR,UAAAiQ,OAAA,WAAA,IAAAjL,EAAAlF,KACC,OAAOA,KAAKmR,cACNhB,SACAnK,KAAG,SAAEmB,GAAiB,OAAAjC,EAAKwL,YAAYvJ,OAGtCoK,EAAArR,UAAAqO,SAAR,SAAiB/J,GAGhB,OAFkCxE,KAAKmR,cAAc3B,IAAIhL,GAErCwB,IAAIhG,KAAK0Q,YAAY/H,KAAK3I,QAGhDuR,GAxB+FZ,GCN/F,kBAAA,SAAAa,IAEkBxR,KAAA+P,MAAwB,IAAIZ,IAgC9C,OA9BCqC,EAAAtR,UAAAwP,IAAA,SAAIvI,GACHnH,KAAK+P,MAAML,IAAIvI,EAAU4E,QAAQ/J,WAAYmF,IAG9CqK,EAAAtR,UAAA+P,QAAA,SAAQ3E,GAAR,IAAApG,EAAAlF,KACCsL,EAAWxF,SAAO,SAAEqB,GACnBjC,EAAKwK,IAAIvI,OAIXqK,EAAAtR,UAAAsP,IAAA,SAAIhL,GACH,OAAOe,EAASG,GAAG1F,KAAK+P,MAAMP,IAAIhL,EAAYxC,cAG/CwP,EAAAtR,UAAAiQ,OAAA,WACC,OAAOxQ,MAAMyQ,KAAKpQ,KAAK+P,MAAMM,WAG9BmB,EAAAtR,UAAAuR,IAAA,SAAIjN,GACH,OAAOxE,KAAK+P,MAAM0B,IAAIjN,EAAYxC,aAGnCwP,EAAAtR,UAAAoR,OAAA,SAAO9M,GACNxE,KAAK+P,MAAMuB,OAAO9M,EAAYxC,aAG/BwP,EAAAtR,UAAAoQ,MAAA,WACCtQ,KAAK+P,MAAMO,SAGbkB,KCtCA,mBCgBC,SAAAE,EAAYC,GAAZ,IAAAzM,EACCvB,EAAAjD,KAAAV,OAAOA,YALAkF,EAAApC,SAAU,EAEVoC,EAAA+E,aAAe,IAAIrG,EAAAA,QAK1B+N,EACE7J,KACAlC,EAAAA,QAAM,WAAO,OAAAV,EAAKpC,WAClB2H,EAAAA,UAAUvF,EAAK+E,eAEfjC,WAAS,SAAEhE,GACXkB,EAAKtD,IAAIoC,QAqBb,OApC0C7B,EAAAA,EAAAA,GAmBzCuP,EAAAxR,UAAA0K,YAAA,WACC5K,KAAKiK,aAAatJ,OAClBX,KAAKiK,aAAaY,YAGnB6G,EAAAxR,UAAA6C,MAAA,WACC/C,KAAK8C,SAAU,GAGhB4O,EAAAxR,UAAA8C,KAAA,WACChD,KAAK8C,SAAU,GAGN4O,EAAAxR,UAAA6B,MAAV,SAAgBiC,GACfkK,QAAQtM,IAAIoC,EAAQhC,WAAYgC,wBAlCjCd,EAAAA,sDALQ6F,KA0CT2I,GApC0CxP,sBCN1C,SAAA0P,mDAWA,OAXuCzP,EAAAA,EAAAA,GAEtCyP,EAAA1R,UAAA6C,MAAA,aAGA6O,EAAA1R,UAAA8C,KAAA,aAGU4O,EAAA1R,UAAA6B,MAAV,SAAgBiC,KAGjB4N,GAXuC1P,kBCatC,SAAA2P,EAAYC,EACQjB,GADpB,IAAA3L,EAECvB,EAAAjD,KAAAV,OAAOA,YADYkF,EAAA2L,uBAAAA,EALZ3L,EAAApC,SAAU,EAEVoC,EAAA+E,aAAe,IAAIrG,EAAAA,QAM1BkO,EACEhK,KACAlC,EAAAA,QAAM,WAAO,OAAAV,EAAKpC,WAClB2H,EAAAA,UAAUvF,EAAK+E,eAEfjC,WAAS,SAAEpB,GACX1B,EAAKtD,IAAIgF,QAwBb,OAxCwCzE,EAAAA,EAAAA,GAoBvC0P,EAAA3R,UAAA0K,YAAA,WACC5K,KAAKiK,aAAatJ,OAClBX,KAAKiK,aAAaY,YAGnBgH,EAAA3R,UAAA6C,MAAA,WACC/C,KAAK8C,SAAU,GAGhB+O,EAAA3R,UAAA8C,KAAA,WACChD,KAAK8C,SAAU,GAGN+O,EAAA3R,UAAA6B,MAAV,SAAgB6E,OACTpC,EAAcoC,EAAYhC,iBAC/B0G,EAAatL,KAAK6Q,uBAAuBxF,0BAA0B7G,GAEpE0J,QAAQtM,IAAIgF,EAAY5E,WAAY4E,EAAa0E,wBAtClDpI,EAAAA,sDALQiL,SAEAlD,KA4CT4G,GAxCwCzP,sBCRxC,SAAA2P,mDAWA,OAXqC5P,EAAAA,EAAAA,GAEpC4P,EAAA7R,UAAA6C,MAAA,aAGAgP,EAAA7R,UAAA8C,KAAA,aAGA+O,EAAA7R,UAAA6B,MAAA,SAAMsI,KAGP0H,GAXqC3P,GCHrC4P,GAAA,WAUC,SAAAA,EAAyCzP,EAC9BC,EACAC,GAF8BzC,KAAAuC,WAAAA,EAC9BvC,KAAAwC,cAAAA,EACAxC,KAAAyC,YAAAA,EAyBZ,OAtBCuP,EAAA9R,UAAA6C,MAAA,WACC/C,KAAKiS,gBAGND,EAAA9R,UAAA8C,KAAA,WACChD,KAAKkS,eAGEF,EAAA9R,UAAA+R,aAAR,WACKvP,EAAAA,kBAAkB1C,KAAKuC,cAC1BvC,KAAKwC,cAAcO,QACnB/C,KAAKyC,YAAYM,UAIXiP,EAAA9R,UAAAgS,YAAR,WACKxP,EAAAA,kBAAkB1C,KAAKuC,cAC1BvC,KAAKwC,cAAcQ,OACnBhD,KAAKyC,YAAYO,6BA1BnBE,EAAAA,+EAGaG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBANZrB,SADAE,KAkCT4P,EArCA,OC0DMG,GAAS7Q,EAAA,CACd,CAAE8Q,QN1DiC,6BM0DFC,UAAU,GAC3C,CAAED,QN5DmC,+BM4DFC,UAAU,GAC7C,CAAED,QAASlQ,EAAeoQ,WAAYC,GAAsBC,KAAM,CN7D7B,+BM6DsDd,GAAsBE,KACjH,CAAEQ,QAAShQ,EAAmBkQ,WAAYG,GAAoBD,KAAM,CN7DjC,6BM6DwDX,GAAoBE,KAC/GL,GACAE,GACAG,GACAF,GACAG,IAzBuB,CACvB/N,EACA,CAAEmO,QAASvJ,EAAyB6J,YAAahP,GACjDqF,EACArF,EACAG,EACAoH,EAEAkD,EACAR,EACAE,EACAX,EAEA5K,IAgBD,SAAgBiQ,GAAqBzP,EAAkB6P,EAA4CC,GAElG,OAAI9P,EACI6P,EAEAC,EAIT,SAAgBH,GAAmB3P,EAAkB+P,EAAwCC,GAE5F,OAAIhQ,EACI+P,EAEAC,EAIT,IAAAC,GAAA,WAiBC,SAAAA,EAAkDC,EACJC,EAC3CtB,EACA9C,EACQqE,EACA7Q,GALX,IAAA6C,EAAAlF,KAIWA,KAAAkT,yBAAAA,EACAlT,KAAAqC,UAAAA,EAdHrC,KAAAiK,aAAe,IAAIrG,EAAAA,QAgB1B5D,KAAKkT,yBAAyBnQ,QAE9B/C,KAAKmT,iBAAiBxB,EAAYqB,GAClChT,KAAKoT,gCAAgCJ,GAEjCA,GAEHA,EAAgBlN,SAAO,SAAE6D,GACxBgI,EACElI,UAAUE,GACV7B,KAAK2C,EAAAA,UAAUvF,EAAK+E,eACpBjC,WAAS,SAAEhE,GACX2F,EAAQhC,cAAc3D,SAKtBiP,GACHpE,EACE/G,KAAK2C,EAAAA,UAAUzK,KAAKiK,eACpBjC,WAAS,SAAEqC,GAEX4I,EAAcnN,SAAO,SAAE6D,GACtBA,EAAQ1C,OAAOoD,SA4BrB,OAjEQ0I,EAAAM,WAAP,SAAkBC,GACjB,YADiB,IAAAA,IAAAA,EAAA,CAA+BzQ,SAAS,IAClD,CACN0Q,SAAUR,EACVZ,UAAWA,KAwCbY,EAAA7S,UAAA0K,YAAA,WACC5K,KAAKiK,aAAatJ,OAClBX,KAAKiK,aAAaY,WAElB7K,KAAKkT,yBAAyBlQ,QAGvB+P,EAAA7S,UAAAiT,iBAAR,SAAyBxB,EAAwBqB,GAChDrB,EACE/H,cAAcoJ,GACdlL,KAAK2C,EAAAA,UAAUzK,KAAKiK,eACpBjC,WAAS,SAAEhE,GACXkK,QAAQtM,IAAI,WAAWoC,EAAQhC,WAAU,mDAIpC+Q,EAAA7S,UAAAkT,gCAAR,SAAwCJ,GACnCA,IAAoBrT,MAAMwF,QAAQ6N,IACrC9E,QAAQtM,IAAI,4FAvEd4R,EAAAA,SAAQlQ,KAAA,CAAC,CACTmQ,QAAS,CACRC,EAAAA,cAEDvB,UAAWA,gDAawDxS,MAAKwD,WAAA,CAAA,CAAAC,KAA3DmC,EAAAA,UAAQ,CAAAnC,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YAC6B7D,MAAKwD,WAAA,CAAA,CAAAC,KAA9DmC,EAAAA,UAAQ,CAAAnC,KAAIC,EAAAA,OAAMC,KAAA,CAACG,YAjGfsF,SASAoF,SAoBA6D,UATA1P,KAsITyQ,EA3EA,6LNzFsC,oWACF,sCOEpC,SAAuBY,sVAHvB,SAA8BA,sCAM9B,SAA4BA,6BCiB5B,SAAsCC,EAA6CC,WAElFC,OAAOF,EAAahT,QAAQmT,QAAQF,EAAejT,OAAQ,mCAElDoT,OAEFC,EAAgBJ,EAAezO,MAAI,SAAEiF,GAC1C,OAAOA,EAAMtF,OAAOiP,MAGrBF,OAAOG,GAAeC,mBANvB,IAAwB,IAAAC,EAAAhI,EAAAyH,GAAYQ,EAAAD,EAAAxT,QAAAyT,EAAAtT,KAAAsT,EAAAD,EAAAxT,OAAA,GAAhByT,EAAAvT,gIAtBrB,SAAmC+S,EAA0CC,WAE5EC,OAAOF,EAAahT,QAAQmT,QAAQF,EAAejT,uBAE1CoT,OAEFC,EAAgBJ,EAAezO,MAAI,SAAEiF,GAC1C,OAAOA,EAAMvF,aAAakP,MAG3BF,OAAOG,GAAeC,cACtBJ,OAAOE,EAAYlP,aAAamP,IAAgBI,WAAW,8BAE3DP,OAAOE,EAAYlH,cAAciH,QAAQE,EAAcnH,aAAc,0CATtE,IAAwB,IAAAwH,EAAAnI,EAAAyH,GAAYW,EAAAD,EAAA3T,QAAA4T,EAAAzT,KAAAyT,EAAAD,EAAA3T,OAAA,GAAhB4T,EAAA1T,kICIrB,kBAEQ8B,OAAON,GAAWY,OAEzBN,OAAON,GAAWQ,SAAU,yBAb7B,SAAoClB,GAE/BA,IACHgB,OAAON,GAAWY,OAAStB,GAG5BgB,OAAON,GAAWQ,SAAU,4BCF7B,SAAuC6G,GACtC,OAAOA,EAAS1D,KAAG,SAAE2D,GACpB,MAAO,CACNyI,QAAS5O,EACTgR,SAAU7K,EACV8K,OAAO,8BAKV,SAAqC/K,GACpC,OAAOA,EAAS1D,KAAG,SAAE2D,GACpB,MAAO,CACNyI,QAAS3O,EACT+Q,SAAU7K,EACV8K,OAAO","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS';\n// export const COMMAND_HANDLERS = new InjectionToken<Array<CommandHandler>>('COMMAND_HANDLERS');\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(private readonly aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { isObservable, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { ExecuteResponse } from './execute-response';\nimport { AggregateId } from '../aggregate-id';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventPublisher } from '../event/domain-event.publisher';\nimport { DomainEventPayload } from '../event/domain-event.payload';\nimport { AggregateRepository } from './aggregate-repository';\nimport { Aggregate } from './aggregate';\nimport { Optional } from '../../common/optional';\n\n\nexport abstract class CommandHandler<A extends Aggregate> {\n\n\tprivate readonly commandType: string;\n\n\tprotected constructor(private readonly command: typeof Command | any, // any is required when inherited Command has more arguments than Command\n\t\t\t\t\t\t  private readonly domainEvent?: typeof DomainEvent,\n\t\t\t\t\t\t  protected readonly eventPublisher?: DomainEventPublisher,\n\t\t\t\t\t\t  protected readonly aggregateRepository?: AggregateRepository<A>) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandle(command: Command): ExecuteResponse | Observable<ExecuteResponse> {\n\t}\n\n\t// TODO change to abstract\n\thandleAggregate(aggregate: A, command: Command): void {\n\t}\n\n\thandleEmptyAggregate(command: Command): void {\n\t}\n\n\t// TODO change to abstract\n\tpublishDomainEvents(aggregate: A, command: Command): void {\n\t}\n\n\thandleCommandForAggregate(command: Command): void {\n\n\t\tconst aggregateId = command.getAggregateId();\n\n\t\tconst optAggregate = Optional.of(this.aggregateRepository.getById(aggregateId));\n\n\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\tthis.handleAggregate(aggregate, command);\n\n\t\t\tthis.aggregateRepository.save(aggregate);\n\n\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t});\n\n\t\toptAggregate.ifEmpty(() => {\n\t\t\tthis.handleEmptyAggregate(command);\n\t\t});\n\t}\n\n\n\tforCommand(command: Command): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\thandleCommand(command: Command): void {\n\n\t\tif (this.aggregateRepository) {\n\t\t\tthis.handleCommandForAggregate(command);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = this.handle(command);\n\n\t\tif (isObservable(result)) {\n\t\t\t(result as Observable<ExecuteResponse>)\n\t\t\t\t.pipe(\n\t\t\t\t\ttake(1)\n\t\t\t\t)\n\t\t\t\t.subscribe((res: void | DomainEventPayload) => {\n\n\t\t\t\t\t// trigger event\n\t\t\t\t\tthis.dispatchEvent(command, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.dispatchEvent(command, result as ExecuteResponse);\n\t\t}\n\t}\n\n\tprivate dispatchEvent(command: Command, result?: ExecuteResponse): void {\n\n\t\tif (this.domainEvent && this.eventPublisher) {\n\n\t\t\tlet aggregateId: AggregateId = command.getAggregateId();\n\n\t\t\tconst event = new (this.domainEvent as any)(aggregateId);\n\n\t\t\tevent.setRequestCommand(command);\n\n\t\t\tif (result) {\n\t\t\t\tevent.setPayload(result);\n\t\t\t}\n\n\t\t\tthis.eventPublisher.publish(event);\n\t\t}\n\t}\n\n\tprivate createCommandInstance(): Command {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.command.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.command as any)(...args));\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { CommandHandler } from './command.handler';\nimport { Aggregate } from './aggregate';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofHandler<C2 extends C>(...handlers: Array<CommandHandler<Aggregate>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandler<Aggregate>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandler<Aggregate>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandler<Aggregate>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from './aggregate';\nimport { AggregateId } from '../aggregate-id';\n\nimport { Optional } from '../../common/optional';\n\nexport abstract class AggregateRepository<A extends Aggregate> {\n\n\tabstract getById(aggregateId: AggregateId): A;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): Optional<S>;\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void;\n\taddEvent(events: Array<AggregateEvent>): void;\n\taddEvent(args: AggregateEvent | Array<AggregateEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\n\nexport abstract class ReadModelRepository extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent): void;\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Optional<Q>;\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getAggregateId().toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\n\n\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { ReadModel } from '../../../domain/read/read-model';\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistReadModelStore<R extends ReadModel, A extends PersistAnemia> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel)\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistAggregateStore<D extends Aggregate, A extends PersistAnemia> extends AggregateStore<D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { Aggregate } from '../../../domain/command/aggregate';\n\nimport { ReadModel } from '../../../domain/read/read-model';\n\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryReadModelStore<R extends ReadModel, D extends Aggregate> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<D>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: D): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: D) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAggregate: Optional<D> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { Inject, ModuleWithProviders, NgModule, OnDestroy, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Command\n */\nimport { Aggregate } from '../domain/command/aggregate';\nimport { Command } from '../domain/command/command';\nimport { COMMAND_HANDLERS } from '../domain/command/command-handlers';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandHandler } from '../domain/command/command.handler';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tconstructor(@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandler<Aggregate>>,\n\t\t\t\t@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\n\t\tif (commandHandlers) {\n\n\t\t\tcommandHandlers.forEach((handler: CommandHandler<Aggregate>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandler<Aggregate>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandler<Aggregate>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export function RootAggregate(target: Function) {\n}\n\nexport function Entity(target: Function) {\n}\n\nexport function ValueObject(target: Function) {\n}\n","import { AggregateEvent } from '../domain/command/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { Aggregate } from './command/aggregate';\nimport { CommandHandler } from './command/command.handler';\nimport { COMMAND_HANDLERS } from './command/command-handlers';\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideCommandHandlers(handlers: Array<Type<CommandHandler<Aggregate>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<CommandHandler<Aggregate>>) => {\n\t\treturn {\n\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}