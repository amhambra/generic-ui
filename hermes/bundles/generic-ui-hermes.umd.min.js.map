{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/domain/command/command-handlers.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/command.handler.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/read/read-model.ts","ng://@generic-ui/hermes/domain/read/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","hermesApi","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","COMMAND_HANDLERS","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","CommandHandler","domainEvent","eventPublisher","commandType","createCommandInstance","forCommand","handleCommand","result","handle","isObservable","pipe","take","subscribe","res","dispatchEvent","event_1","setRequestCommand","setPayload","publish","argumentLength","fill","undefined","_a","bind","apply","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","filter","some","ofHandler","handlers","handler","ofNullHandler","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","Aggregate","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","requestCommandId","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publishEvent","dispatchAggregateEvent","aggregateEvent","console","DomainEventBus","ofEvent","createEventInstance","DomainEventPayload","getValue","ReadModel","gui","Reactive","unsubscribe","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","PersistAnemia","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","fromAnemia","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","remove","delete","InMemoryReadModelStore","toReadModel","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","commandHandlers","eventHandlers","domainEventBus","hermesLoggersInitializer","checkNullCommand","checkCommandHandlerIsCollection","withConfig","config","ngModule","NgModule","imports","CommonModule","Optional","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1","useClass","multi"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS';\n// export const COMMAND_HANDLERS = new InjectionToken<Array<CommandHandler>>('COMMAND_HANDLERS');\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(public aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { isObservable, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { ExecuteResponse } from './execute-response';\nimport { AggregateId } from '../aggregate-id';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventPublisher } from '../event/domain-event.publisher';\nimport { DomainEventPayload } from '../event/domain-event.payload';\n\nexport abstract class CommandHandler {\n\n\tprivate readonly commandType: string;\n\n\tprotected constructor(private readonly command: typeof Command | any, // any is required when inherited Command has more arguments than Command\n\t\t\t\t\t\t  private readonly domainEvent?: typeof DomainEvent,\n\t\t\t\t\t\t  protected readonly eventPublisher?: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tabstract handle(command: Command): ExecuteResponse | Observable<ExecuteResponse>;\n\n\tforCommand(command: Command): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\thandleCommand(command: Command): void {\n\t\tconst result = this.handle(command);\n\n\t\tif (isObservable(result)) {\n\t\t\t(result as Observable<ExecuteResponse>)\n\t\t\t\t.pipe(\n\t\t\t\t\ttake(1)\n\t\t\t\t)\n\t\t\t\t.subscribe((res: void | DomainEventPayload) => {\n\n\t\t\t\t\t// trigger event\n\t\t\t\t\tthis.dispatchEvent(command, res);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.dispatchEvent(command, result as ExecuteResponse);\n\t\t}\n\t}\n\n\tprivate dispatchEvent(command: Command, result?: ExecuteResponse): void {\n\n\t\tif (this.domainEvent && this.eventPublisher) {\n\n\t\t\tlet aggregateId: AggregateId = command.aggregateId;\n\n\t\t\tconst event = new (this.domainEvent as any)(aggregateId);\n\n\t\t\tevent.setRequestCommand(command);\n\n\t\t\tif (result) {\n\t\t\t\tevent.setPayload(result);\n\t\t\t}\n\n\t\t\tthis.eventPublisher.publish(event);\n\t\t}\n\t}\n\n\tprivate createCommandInstance(): Command {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.command.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.command as any)(...args));\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { CommandHandler } from './command.handler';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofHandler<C2 extends C>(...handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandler>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandler) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): S;\n\n}\n","import { Aggregate } from '../aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void;\n\taddEvent(events: Array<AggregateEvent>): void;\n\taddEvent(args: AggregateEvent | Array<AggregateEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): any {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Q;\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.aggregateId.toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\n\n\n/**\n * Rename\n */\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): A {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { ReadModel } from '../../../domain/read/read-model';\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\nexport abstract class PersistReadModelStore<T extends ReadModel, S extends PersistAnemia> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<T> {\n\t\tconst anemias = this.stateStore.getAll();\n\n\t\treturn anemias.map((anemia) => this.fromAnemia(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\n\n\nexport abstract class PersistAggregateStore<T extends Aggregate, S extends PersistAnemia> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<S>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: T): S;\n\n\tabstract fromAnemia(anemia: S): T;\n\n\tsave(aggregate: T): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: T): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst anemia = this.stateStore.get(aggregateId);\n\n\t\tif (anemia) {\n\t\t\treturn this.fromAnemia(anemia);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): T {\n\n\t\tconst aggregate = this.inMemoryStore.get(aggregateId);\n\n\t\tif (aggregate) {\n\t\t\taggregate.clearEvents();\n\t\t}\n\n\t\treturn aggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { Aggregate } from '../../../domain/command/aggregate';\n\nimport { ReadModel } from '../../../domain/read/read-model';\n\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nexport abstract class InMemoryReadModelStore<T extends ReadModel, S extends Aggregate> extends ReadModelStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<S>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: S): T;\n\n\tgetById(aggregateId: AggregateId): T {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll()\n\t\t\t\t   .map((aggregate: S) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): T {\n\t\tconst aggregate = this.inMemoryStore.get(aggregateId);\n\n\t\tif (aggregate) {\n\t\t\treturn this.toReadModel(aggregate);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): S {\n\t\treturn this.state.get(aggregateId.toString());\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.aggregateId,\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { Inject, ModuleWithProviders, NgModule, OnDestroy, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Command\n */\nimport { Command } from '../domain/command/command';\nimport { COMMAND_HANDLERS } from '../domain/command/command-handlers';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandHandler } from '../domain/command/command.handler';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tconstructor(@Optional() @Inject(COMMAND_HANDLERS) commandHandlers: Array<CommandHandler>,\n\t\t\t\t@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, commandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(commandHandlers);\n\n\t\tif (commandHandlers) {\n\n\t\t\tcommandHandlers.forEach((handler: CommandHandler) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandler>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandler>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export function RootAggregate(target: Function) {\n}\n\nexport function Entity(target: Function) {\n}\n\nexport function ValueObject(target: Function) {\n}\n","import { AggregateEvent } from '../domain/command/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { CommandHandler } from './command/command.handler';\nimport { COMMAND_HANDLERS } from './command/command-handlers';\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideCommandHandlers(handlers: Array<Type<CommandHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<CommandHandler>) => {\n\t\treturn {\n\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}