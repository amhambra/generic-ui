{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes-api.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-root.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity.ts","ng://@generic-ui/hermes/domain-api/read/read-model-entity-id.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root-id.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain-api/read/read-model-root.repository.ts","ng://@generic-ui/hermes/domain-api/read/store/read-model.store.ts","ng://@generic-ui/hermes/domain-api/event/event.repository.ts","ng://@generic-ui/hermes/domain/tactical/entity.ts","ng://@generic-ui/hermes/domain/tactical/entity-id.ts","ng://@generic-ui/hermes/domain/domain-module.ts","ng://@generic-ui/hermes/domain-api/api-module.ts","ng://@generic-ui/hermes/feature/feature-module.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/read/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/read/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/domain-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handler-impl.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command-handlers-token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/domain-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/domain-api/hermes.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/aggregate/create/create-aggregate.command.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/domain-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","handle","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","AggregateRoot","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","setRequestCommand","requestCommandId","setPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","publishFromAggregate","aggregateEvent","toDomainEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","argumentLength","fill","undefined","bind","apply","DomainEventPayload","getValue","ReadModelEntity","gui","entityId","ReadModelEntityId","ReadModelRoot","rootId","ReadModelRootId","Reactive","unsubscribe","ReadModelRootRepository","domainEventBus","forEvents","subscribe","EventRepository","onEvent","Entity","id","entity","EntityId","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","Archive","onValue","Optional","isEmpty","empty","isPresent","filterer","callback","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","PersistAnemia","readModelRootId","getReadModelRootId","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","remove","delete","InMemoryReadModelStore","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","createAggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","domainEventPublisher","CreateAggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","handleCommand","factory","createCommand","createEvent","repo","_a","AggregateFactoryArchive","add","key","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","commandHandlerFactory","commandHandler","CommandHandlerImpl","publishDomainEvents","handleAggregate","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","eventHandlers","definedAggregate","injector","hermesLoggersInitializer","hermesApi","checkNullCommand","checkCommandHandlerIsCollection","def","defineAggregate","aggregateKey","createHandler","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","createCommandHandlerType","commandHandlers","warn","imports","CommonModule","Injector","CreateAggregateCommand","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent<AggregateId>> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(private readonly aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract create(aggregateId: I): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { AggregateRoot } from './aggregate/aggregate-root';\nimport { CreateAggregateCommandHandlerImpl } from './aggregate/create/create-aggregate.command-handler-impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\nimport { AggregateId } from '../aggregate-id';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CreateAggregateCommandHandlerImpl<any, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: CreateAggregateCommandHandlerImpl<AggregateId, AggregateRoot<AggregateId>, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\nimport { AggregateId } from '../aggregate-id';\n\n\nexport abstract class ReplayCommandDispatcher<I extends AggregateId> implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent<I>): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent<I>) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent<I>) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\nimport { DomainEvent } from '../../event/domain-event';\n\nexport abstract class AggregateEvent<T extends AggregateId> {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: T,\n\t\tprivate readonly type: string) {\n\t}\n\n\tabstract toDomainEvent(): DomainEvent<T>;\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent<T>): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent<T>): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { AggregateRoot } from './aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tabstract getById(aggregateId: I): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: I): Optional<S>;\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<AggregateStore<AggregateId, AggregateRoot<AggregateId>>> = [];\n\n\tregister(store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: AggregateRoot<AggregateId> } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<AggregateId, AggregateRoot<AggregateId>>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: AggregateRoot<AggregateId> }): { [key: string]: AggregateRoot<AggregateId> } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { Type } from '@angular/core';\n\nimport { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport abstract class AggregateRoot<I extends AggregateId> {\n\n\tprivate readonly aggregateId: I;\n\n\tprivate readonly events: Array<AggregateEvent<I>>;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tabstract createEvent(): Type<AggregateEvent<I>>;\n\n\tgetId(): I {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent<I>> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent<I>>;\n\t}\n\n\taddEvent(event: AggregateEvent<I>): void;\n\taddEvent(events: Array<AggregateEvent<I>>): void;\n\taddEvent(args: AggregateEvent<I> | Array<AggregateEvent<I>>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent<I>);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","import { ReadModelRootId } from '../domain-api/read/read-model-root-id';\n\nexport abstract class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toReadModelRootId(): ReadModelRootId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent<I extends AggregateId> extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: I,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent<I>): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent<AggregateId>> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent<AggregateId>> = new Subject<DomainEvent<AggregateId>>();\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent<AggregateId> {\n\n\t\tconst events: Array<DomainEvent<AggregateId>> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent<AggregateId>) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent<AggregateId>> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(event: DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent<AggregateId>): Observable<DomainEvent<AggregateId>> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent<AggregateId>> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent<AggregateId>> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent<AggregateId>): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\nimport { AggregateRoot } from '../command/aggregate/aggregate-root';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent<AggregateId>): void;\n\tpublish(events: ReadonlyArray<DomainEvent<AggregateId>>): void;\n\tpublish(args: DomainEvent<AggregateId> | ReadonlyArray<DomainEvent<AggregateId>>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tpublishFromAggregate(aggregate: AggregateRoot<AggregateId>): void {\n\t\taggregate.getEvents()\n\t\t\t\t .forEach((aggregateEvent: AggregateEvent<AggregateId>) => {\n\t\t\t\t\t this.publish(\n\t\t\t\t\t\t aggregateEvent.toDomainEvent()\n\t\t\t\t\t );\n\t\t\t\t });\n\t}\n\n\tprivate publishEvent(event: DomainEvent<AggregateId>): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\nimport { AggregateId } from '../aggregate-id';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent<AggregateId>> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent<AggregateId> {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\nimport { AggregateId } from '../aggregate-id';\n\nexport abstract class DomainEventHandler<I extends AggregateId, E extends DomainEvent<I>> {\n\n\tabstract handle(event: E): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { ReadModelEntityId } from './read-model-entity-id';\n\nexport abstract class ReadModelEntity<T extends ReadModelEntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.entityId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.entityId;\n\t}\n}\n","export class ReadModelEntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelEntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n}\n","import { ReadModelRootId } from './read-model-root-id';\n\nexport abstract class ReadModelRoot<T extends ReadModelRootId> {\n\n\tprivate readonly rootId: T;\n\n\tprotected constructor(gui: T) {\n\t\tthis.rootId = gui;\n\t}\n\n\tgetId(): T {\n\t\treturn this.rootId;\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\tabstract toAggregateId(): AggregateId;\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: ReadModelRootId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\nimport { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class ReadModelRootRepository<I extends AggregateId> extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent<I>) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent<I>): void;\n\n}\n","import { ReadModelRoot } from '../read-model-root';\n\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport abstract class ReadModelStore<I extends ReadModelRootId, R extends ReadModelRoot<I>> {\n\n\tabstract getById(readModelRootId: AggregateId): Optional<R>;\n\n}\n","import { Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { AggregateId } from '../../domain/aggregate-id';\nimport { DomainEvent } from '../../domain/event/domain-event';\nimport { ReadModelRootId } from '../read/read-model-root-id';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nexport abstract class EventRepository<R extends ReadModelRootId, I extends AggregateId> {\n\n\tprotected constructor(private readonly domainEventBus: DomainEventBus) {}\n\n\tprotected onEvent(aggregateId: R, eventType: Type<DomainEvent<I>>): Observable<DomainEvent<I>> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   eventType as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent<AggregateId>) => event.getAggregateId().toString() === aggregateId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { EntityId } from './entity-id';\n\nexport abstract class Entity<T extends EntityId> {\n\n\tprivate readonly entityId: T;\n\n\tprotected constructor(id: T) {\n\t\tthis.entityId = id;\n\t}\n\n\tgetId(): EntityId {\n\t\treturn this.entityId;\n\t}\n\n\tequals(entity: Entity<T>): boolean {\n\t\treturn this.entityId.equals(entity.getId());\n\t}\n\n}\n","export abstract class EntityId {\n\n\tprivate readonly uid: string;\n\n\tprotected constructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(entityId: EntityId): boolean {\n\t\treturn this.uid === entityId.getId();\n\t}\n\n}\n","export abstract class DomainModule {\n\n\tprotected constructor() {}\n\n}\n","export abstract class ApiModule {\n\n\tprotected constructor() {}\n\n}\n","export abstract class FeatureModule {\n\n\tprotected constructor() {}\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\n\nexport abstract class PersistAnemia<I extends ReadModelRootId> {\n\n\tprivate readonly readModelRootId: I;\n\n\tprotected constructor(uid: I) {\n\t\tthis.readModelRootId = uid;\n\t}\n\n\tgetReadModelRootId(): I {\n\t\treturn this.readModelRootId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getReadModelRootId().toString();\n\t}\n\n}\n","import { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\nimport { ReadModelRootId } from '../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../domain/aggregate-id';\n\n\nexport abstract class PersistStateStore<I extends ReadModelRootId, A extends PersistAnemia<I>> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { ReadModelRoot } from '../../../domain-api/read/read-model-root';\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\nexport abstract class PersistReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tA extends PersistAnemia<I>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<I, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class PersistAggregateStore<I extends AggregateId, D extends AggregateRoot<I>, A extends PersistAnemia<ReadModelRootId>> extends AggregateStore<I, D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<any, A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: I): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: I): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<I extends AggregateId, T extends AggregateRoot<I>> extends AggregateStore<I, T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<I, T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: I): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: I): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { AggregateRoot } from '../../../domain/command/aggregate/aggregate-root';\n\nimport { ReadModelRoot } from '../../../domain-api/read/read-model-root';\n\nimport { ReadModelStore } from '../../../domain-api/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\nimport { ReadModelRootId } from '../../../domain-api/read/read-model-root-id';\n\n\nexport abstract class InMemoryReadModelStore<I extends ReadModelRootId,\n\tR extends ReadModelRoot<I>,\n\tB extends AggregateId,\n\tA extends AggregateRoot<B>> extends ReadModelStore<I, R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<B, A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: A): R;\n\n\tgetById(aggregateId: B): Optional<R> {\n\n\t\t// const aggregateId = readModelRootId.toAggregateId() as B; // TODO remove as\n\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: A) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: B): Optional<R> {\n\t\tconst optAggregate: Optional<A> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { AggregateRoot } from '../../domain/command/aggregate/aggregate-root';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<I extends AggregateId, S extends AggregateRoot<I>> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: I): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: I): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: I): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent<AggregateId>) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent<AggregateId>): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateId } from '../../../domain/aggregate-id';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent<AggregateId>): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate-root';\nimport { CreateAggregateCommandHandler } from './create-aggregate.command-handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../../config/define';\nimport { AggregateFactory } from '../aggregate-factory';\nimport { AggregateRepository } from '../aggregate-repository';\nimport { AggregateId } from '../../../aggregate-id';\nimport { CreateAggregateCommand } from './create-aggregate.command';\nimport { DomainEventPublisher } from '../../../event/domain-event.publisher';\n\n\nexport function createAggregateCommandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand>(createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive<I, A>, aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>, aggregateName: string, domainEventPublisher: DomainEventPublisher): CreateAggregateCommandHandlerImpl<I, A, C> {\n\treturn new CreateAggregateCommandHandlerImpl<I, A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName, domainEventPublisher);\n}\n\nexport class CreateAggregateCommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends CreateAggregateCommand> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: CreateAggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string,\n\t\t\t\tprivate readonly domainEventPublisher: DomainEventPublisher) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<I, A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst type = aggregate.getType(),\n\t\t\t\tcreateCommandConstructor = aggregate.createEvent();\n\n\t\t\tconst createCommand = new createCommandConstructor(aggregateId, type);\n\n\t\t\taggregate.addEvent(createCommand);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.domainEventPublisher.publishFromAggregate(aggregate);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const CREATE_AGGREGATE_COMMAND_HANDLERS = 'HERMES - CREATE_AGGREGATE_COMMAND_HANDLERS';\n","import { Provider } from '@angular/core';\n\nimport { AggregateFactory } from '../aggregate/aggregate-factory';\nimport { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../aggregate/create/create-aggregate.command-handler';\nimport { AggregateId } from '../../aggregate-id';\nimport { Command } from '../command';\n\n\nexport class AggregateFactoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateFactory<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<I, A>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive<I extends AggregateId, A extends AggregateRoot<I>> {\n\n\tprivate readonly map = new Map<string, AggregateRepository<I, A>>();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<I, A>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<I, A>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\trepository: AggregateRepository<I, A>;\n\n\tfactory: AggregateFactory<I, A>;\n\n\tkey: string;\n\n\tcreateHandler: CreateAggregateCommandHandler<A, C>;\n\n\tcommandHandlers: Array<Provider>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","import { AggregateRoot } from '../aggregate/aggregate-root';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\nimport { AggregateId } from '../../aggregate-id';\n\n\nexport function commandHandlerFactory<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\taggregateName: string\n): CommandHandlerImpl<I, A, C> {\n\treturn new CommandHandlerImpl<I, A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<I extends AggregateId, A extends AggregateRoot<I>, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId() as I;\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<I, A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * Command\n */\nimport { AggregateRoot } from '../domain/command/aggregate/aggregate-root';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from './/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport {\n\tcreateAggregateCommandHandlerFactory,\n\tCreateAggregateCommandHandlerImpl\n} from '../domain/command/aggregate/create/create-aggregate.command-handler-impl';\nimport { CREATE_AGGREGATE_COMMAND_HANDLERS } from '../domain/command/aggregate/create/create-aggregate.command-handlers-token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/aggregate/aggregate-factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { CreateAggregateCommandHandler } from '../domain/command/aggregate/create/create-aggregate.command-handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\nimport { AggregateId } from '../domain/aggregate-id';\nimport { Reactive } from '../common/reactive';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule<I extends AggregateId, A extends AggregateRoot<I>, C extends Command, E extends DomainEvent<I>> extends Reactive implements OnDestroy {\n\n\tstatic defineAggregate<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t factory: Type<AggregateFactory<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t repository: Type<AggregateRepository<I, A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t createHandler: Type<CreateAggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t handlers: Array<Provider>): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...handlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tprivate static registerCreateCommandHandler<I extends AggregateId, A extends AggregateRoot<I>, C extends Command>(\n\t\tcreateCommandHandlerType: Type<CreateAggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: CREATE_AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: createAggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName,\n\t\t\t\t\tDomainEventPublisher\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler<I, E>>,\n\t\t\t\t@Optional() @Inject(CREATE_AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) handlers: Array<CommandHandlerImpl<I, A, C>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition<I, A>>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive<I, A>,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive<I, A>,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\t\tsuper();\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, handlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(handlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition<I, A>) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: CreateAggregateCommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (handlers) {\n\n\t\t\thandlers.forEach((handler: CommandHandlerImpl<I, A, C>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t\t.subscribe((command: C) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(this.takeUntil())\n\t\t\t\t.subscribe((event: E) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler<I, E>) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<I, A, C>>, aggregateCommandHandlers: Array<CreateAggregateCommandHandlerImpl<I, A, C>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((command: C) => {\n\t\t\t\tconsole.error(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<I, A, C>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.warn(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { AggregateId } from '../../../aggregate-id';\nimport { Command } from '../../command';\n\nexport abstract class CreateAggregateCommand extends Command {\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  type: string) {\n\t\tsuper(aggregateId, type);\n\t}\n\n}\n","export function ValueObject(target: Function) {\n}\n\nexport function DomainObject(target: Function) {\n}\n\nexport function ReadModelObject(target: Function) {\n}\n","import { AggregateId } from '../domain/aggregate-id';\n\nimport { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents<I extends AggregateId>(actualEvents: ReadonlyArray<DomainEvent<I>>, expectedEvents: Array<DomainEvent<I>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent<I>) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents<T extends AggregateId>(actualEvents: ReadonlyArray<AggregateEvent<T>>, expectedEvents: Array<AggregateEvent<T>>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent<T>) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DomainEvent } from './event/domain-event';\n\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\nimport { AggregateId } from './aggregate-id';\n\nexport function provideEventHandlers<I extends AggregateId, E extends DomainEvent<I>>(handlers: Array<Type<DomainEventHandler<I, E>>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler<I, E>>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}