{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/hermes/common/logger.ts","ng://@generic-ui/hermes/domain/command/command.logger.ts","ng://@generic-ui/hermes/domain/event/domain-event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes-api.ts","ng://@generic-ui/hermes/domain/event/domain-event-handlers.ts","ng://@generic-ui/hermes/domain/command/command.stream.ts","ng://@generic-ui/hermes/domain/command/command.dispatcher.ts","ng://@generic-ui/hermes/common/random-string.generator.ts","ng://@generic-ui/hermes/domain/message.ts","ng://@generic-ui/hermes/domain/command/command.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate.factory.ts","ng://@generic-ui/hermes/domain/command/filtered-command-stream.ts","ng://@generic-ui/hermes/domain/command/command.bus.ts","ng://@generic-ui/hermes/domain/command/replay-command.dispatcher.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-event.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate-repository.ts","ng://@generic-ui/hermes/domain/command/store/aggregate.store.ts","ng://@generic-ui/hermes/domain/command/store/aggregate-store.register.ts","ng://@generic-ui/hermes/domain/command/aggregate/aggregate.ts","ng://@generic-ui/hermes/domain/aggregate-id.ts","ng://@generic-ui/hermes/domain/event/status/domain-event-status.ts","ng://@generic-ui/hermes/domain/event/status/status.response.ts","ng://@generic-ui/hermes/domain/event/domain-event.ts","ng://@generic-ui/hermes/domain/event/domain-event.store.ts","ng://@generic-ui/hermes/domain/event/domain-event.stream.ts","ng://@generic-ui/hermes/domain/event/domain-event.publisher.ts","ng://@generic-ui/hermes/domain/event/domain-event.bus.ts","ng://@generic-ui/hermes/domain/event/domain-event.handler.ts","ng://@generic-ui/hermes/domain/event/domain-event.payload.ts","ng://@generic-ui/hermes/domain/read/read-model.ts","ng://@generic-ui/hermes/common/reactive.ts","ng://@generic-ui/hermes/domain/read/read-model.repository.ts","ng://@generic-ui/hermes/domain/read/store/read-model.store.ts","ng://@generic-ui/hermes/common/reactive.service.ts","ng://@generic-ui/hermes/common/aggregate.archive.ts","ng://@generic-ui/hermes/common/optional.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-anemia.ts","ng://@generic-ui/hermes/infrastructure/persist/persist-state.store.ts","ng://@generic-ui/hermes/infrastructure/persist/query/persist.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/persist/command/persist-aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/command/in-memory.aggregate.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/query/in-memory.read-model.store.ts","ng://@generic-ui/hermes/infrastructure/in-memory/in-memory.store.ts","ng://@generic-ui/hermes/domain/hermes-tokens.ts","ng://@generic-ui/hermes/infrastructure/logger/command/console.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/command/noop.command.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/console.event.logger.ts","ng://@generic-ui/hermes/infrastructure/logger/event/noop.event.logger.ts","ng://@generic-ui/hermes/ui-api/hermes.loggers.initializer.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate-command-handler.impl.ts","ng://@generic-ui/hermes/domain/command/create-handler/aggregate-command-handlers.token.ts","ng://@generic-ui/hermes/domain/command/config/define.ts","ng://@generic-ui/hermes/domain/command/config/aggregate-definition.token.ts","ng://@generic-ui/hermes/ui-api/hermes.domain.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handler-impl.ts","ng://@generic-ui/hermes/ui-api/hermes.module.ts","ng://@generic-ui/hermes/domain/command/handler/command-handlers.ts","ng://@generic-ui/hermes/domain/decorators.ts","ng://@generic-ui/hermes/testing/helpers.ts","ng://@generic-ui/hermes/ui-api/hermes-api.helpers.ts","ng://@generic-ui/hermes/domain/provider.helpers.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","Logger","setDomain","domainName","log","message","shouldPrint","print","toString","includes","CommandLogger","tslib_1.__extends","DomainEventLogger","hermesApi","HermesApi","platformId","commandLogger","eventLogger","isPlatformBrowser","window","api","loggers","enabled","start","stop","domain","Injectable","decorators","type","Inject","args","PLATFORM_ID","DOMAIN_EVENT_HANDLERS","CommandStream","_super","Subject","CommandDispatcher","commandStream","dispatch","command","RandomStringGenerator","generate","Math","random","substring","index","Message","aggregateId","messageType","messageId","getMessageType","getAggregateId","getMessageId","equalsByType","equals","ofMessageType","arg","_this","isArray","find","isMessageType","Command","FILTERED_COMMAND_STREAM","InjectionToken","CommandBus","commandsStream","source","lift","operator","observable","ofCommand","commandTypes","_i","pipe","filter","some","commandType","ofCommandHandler","handlers","handler","forCommand","ofCreateAggregateHandler","ofNullHandler","aggregateCommandHandlers","Observable","ReplayCommandDispatcher","dispatcher","bus","unsubscribe$","subscriptions","dispatchAndWait","response$","event","fromCommand","first","map","mapEventToResponse","takeUntil","subscription","setTimeout","ngOnDestroy","complete","forEach","handle","clearTimeout","AggregateEvent","getType","AggregateStoreRegister","stores","register","store","captureAggregatesSnapshot","aggregates","aggregate","getById","aggregateName","name","cloneAggregates","JSON","parse","stringify","Aggregate","events","getId","getEvents","addEvent","args_1","tslib_1.__values","args_1_1","event_1","clearEvents","AggregateId","uid","SUCCESS","FAILURE","StatusResponse","status","payload","getStatus","getPayload","DomainEvent","isSameType","setRequestCommand","requestCommandId","setPayload","DomainEventStore","domainEvents","domainEvents$","findEventByType","eventType","reverse","waitForEvent","of","waitForNextEventOccurrence","throwError","Error","take","DomainEventStream","eventStore","DomainEventPublisher","eventStream","publish","publishEvent","dispatchAggregateEvent","aggregateEvent","console","DomainEventBus","ofEvent","domainEvent","createEventInstance","argumentLength","fill","undefined","bind","apply","DomainEventPayload","getValue","ReadModel","gui","Reactive","unsubscribe","ReadModelRepository","domainEventBus","forEvents","subscribe","ReactiveService","AggregateArchive","defaultValue","archive","Map","initArchive","when","archive$","asObservable","get","distinctUntilChanged","set","BehaviorSubject","ReplaySubject","Optional","isEmpty","empty","isPresent","filterer","callback","mapper","getValueOrNullOrThrowError","getOrThrow","getOrElse","other","ifPresent","method","ifEmpty","orElse","PersistAnemia","PersistStateStore","state","anemia","setMany","anemias","getAll","from","values","clear","PersistReadModelStore","stateStore","getAllValues","toReadModel","ReadModelStore","PersistAggregateStore","aggregateStoreRegister","save","saveValue","toAnemia","fromAnemia","AggregateStore","InMemoryAggregateStore","inMemoryStore","optAggregate","a","remove","delete","InMemoryReadModelStore","InMemoryStore","has","ConsoleCommandLogger","commandBus","NoopCommandLogger","ConsoleEventLogger","eventBus","NoopEventLogger","HermesLoggersInitializer","loggersStart","loggersStop","aggregateCommandHandlerFactory","createAggregateCommandHandler","factoryArchive","aggregateRepositoryArchive","AggregateCommandHandlerImpl","aggregateFactoryArchive","aggregateType","createCommandInstance","publishDomainEvents","handleCommand","factory","repo","_a","AggregateFactoryArchive","add","key","AggregateRepositoryArchive","repository","HermesDomainModule","NgModule","commandHandlerFactory","commandHandler","CommandHandlerImpl","handleAggregate","providers","provide","useValue","useFactory","commandLoggerFactory","deps","eventLoggerFactory","useExisting","consoleCommandLogger","noopCommandLogger","consoleEventLogger","noopEventLogger","HermesModule","eventHandlers","definedAggregate","injector","hermesLoggersInitializer","checkNullCommand","checkCommandHandlerIsCollection","def","defineAggregate","aggregateKey","createHandler","ngModule","multi","registerCreateCommandHandler","withConfig","config","registerCommandHandler","commandHandlerType","useClass","createCommandHandlerType","commandHandlers","imports","CommonModule","Injector","target","actualEvents","expectedEvents","expect","toEqual","actualEvent","expectedEvent","toBeDefined","actualEvents_2","actualEvents_2_1","toBeTruthy","actualEvents_1","actualEvents_1_1"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAgF5E,SAASK,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KAKzC,SAASU,EAAOV,EAAGW,GACtB,IAAIV,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBY,EAAYC,EAA3BT,EAAIH,EAAEI,KAAKL,GAAOc,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIR,EAAEE,QAAQG,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQJ,IAAMA,EAAEH,OAASR,EAAIG,EAAU,SAAIH,EAAEI,KAAKD,GAE1D,QAAkB,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIV,EAAI,EAAGA,EAAIc,UAAUX,OAAQH,IAC3CU,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUd,KACpC,OAAOU,ECvIX,iBAAA,SAAAM,KA8BA,OApBCA,EAAAvB,UAAAwB,UAAA,SAAUC,GACT3B,KAAK2B,WAAaA,GAGnBF,EAAAvB,UAAA0B,IAAA,SAAIC,GACC7B,KAAK8B,YAAYD,IACpB7B,KAAK+B,MAAMF,IAIHJ,EAAAvB,UAAA4B,YAAV,SAAsBD,GAErB,OAAK7B,KAAK2B,YAIUE,EAAQG,WAEjBC,SAASjC,KAAK2B,aAE3BF,KC7BA,kBAAA,SAAAS,mDACA,OAD4CC,EAAAA,EAAAA,GAC5CD,GAD4CT,iBCA5C,SAAAW,mDACA,OADgDD,EAAAA,EAAAA,GAChDC,GADgDX,GCKnCY,EAAY,YAEzBC,EAAA,WAGC,SAAAA,EAAyCC,EAC9BC,EACAC,GAEV,GAJwCzC,KAAAuC,WAAAA,EAC9BvC,KAAAwC,cAAAA,EACAxC,KAAAyC,YAAAA,EAENC,EAAAA,kBAAkB1C,KAAKuC,YAAa,CAsBvCI,OAAON,GApBE,SAAIO,GACZ,MAAO,CACNC,YAAYC,GACPA,GACHF,EAAIJ,cAAcO,QAClBH,EAAIH,YAAYM,UAEhBH,EAAIJ,cAAcQ,OAClBJ,EAAIH,YAAYO,SAGlBC,WAAWtB,GACNA,IACHiB,EAAIJ,cAAcd,UAAUC,GAC5BiB,EAAIH,YAAYf,UAAUC,MAMViB,CAAI5C,MAExB2C,OAAON,GAAWQ,SAAU,GAG/B,2BAlCCK,EAAAA,sDAGqD1D,OAAM2D,WAAA,CAAA,CAAAC,KAA9CC,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBAVZrB,SACAE,KAwCTE,EAlCA,GCVA,IAAakB,EAAwB,0CCMrC,SAAAC,mDAOA,OANmCtB,EAAAA,EAAAA,GAElCsB,EAAAvD,UAAAS,KAAA,SAAKE,GACJ6C,EAAAxD,UAAMS,KAAID,KAAAV,KAACa,wBAJZqC,EAAAA,aAODO,GANmCE,EAAAA,SCPnCC,EAAA,WASC,SAAAA,EAAoBC,GAAA7D,KAAA6D,cAAAA,EAMrB,OAHCD,EAAA1D,UAAA4D,SAAA,SAASC,GACR/D,KAAK6D,cAAclD,KAAKoD,wBAPzBb,EAAAA,sDAJQO,KAaTG,EAfA,GCAA,IAAAI,EAAA,WAEA,SAAAA,KASA,OAJQA,EAAAC,SAAP,WACC,OAAOC,KAAKC,SAASnC,SAAS,IAAIoC,UAAU,EAAG,IAAMF,KAAKC,SAASnC,SAAS,IAAIoC,UAAU,EAAG,IAAM,GAAGJ,EAAsBK,SAHtHL,EAAAK,MAAQ,sBAHfnB,EAAAA,aASDc,EAXA,GCIA,iBAEC,SAAAM,EAAuCC,EACbC,EACFC,QAAA,IAAAA,IAAAA,EAAoBT,EAAsBC,YAF3BjE,KAAAuE,YAAAA,EACbvE,KAAAwE,YAAAA,EACFxE,KAAAyE,UAAAA,EA6CzB,OA1CCH,EAAApE,UAAAwE,eAAA,WACC,OAAO1E,KAAKwE,aAGbF,EAAApE,UAAAyE,eAAA,WACC,OAAO3E,KAAKuE,aAGbD,EAAApE,UAAA0E,aAAA,WACC,OAAO5E,KAAKyE,WAGbH,EAAApE,UAAA8B,SAAA,WACC,OAAOhC,KAAKwE,aAGbF,EAAApE,UAAA2E,aAAA,SAAahD,GACZ,OAAO7B,KAAK0E,mBAAqB7C,EAAQ6C,kBAG1CJ,EAAApE,UAAA4E,OAAA,SAAOjD,GACN,OAAQ7B,KAAK0E,mBAAqB7C,EAAQ6C,kBAAsB1E,KAAKyE,YAAc5C,EAAQ4C,WAK5FH,EAAApE,UAAA6E,cAAA,SAAcC,GAAd,IAAAC,EAAAjF,KAEC,OAAIL,MAAMuF,QAAQF,KAELA,EAAIG,MAAI,SAAEX,GAAwB,OAAAS,EAAKG,cAAcZ,MAK1DxE,KAAKoF,cAAcJ,IAIpBV,EAAApE,UAAAkF,cAAR,SAAsBZ,GACrB,OAAOxE,KAAK0E,mBAAqBF,GAEnCF,uBCnDA,SAAAe,mDACA,OAD6BlD,EAAAA,EAAAA,GAC7BkD,GAD6Bf,KCC7B,aCGA,IAAagB,EAA0B,IAAIC,EAAAA,eAAiC,2BCI5EC,EAAA,SAAA9B,GAGC,SAAA8B,EAA6CC,GAA7C,IAAAR,EACCvB,EAAAhD,KAAAV,OAAOA,YAEHyF,IACHR,EAAKS,OAASD,KAqDjB,OA3D6CtD,EAAAA,EAAAA,GAU5CqD,EAAAtF,UAAAyF,KAAA,SAAQC,OACDC,EAAa,IAAIL,EAGvB,OAFAK,EAAWH,OAAS1F,KACpB6F,EAAWD,SAAWA,EACfC,GAGRL,EAAAtF,UAAA4F,UAAA,eAAwB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAzE,UAAAX,OAAAoF,IAAAD,EAAAC,GAAAzE,UAAAyE,GACvB,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEnC,GACP,OAAOgC,EAAaI,MAAI,SAAEC,GAAwB,OAAArC,EAAQgB,cAAcqB,YAK5EZ,EAAAtF,UAAAmG,iBAAA,eAA+B,IAAAC,EAAA,GAAAN,EAAA,EAAAA,EAAAzE,UAAAX,OAAAoF,IAAAM,EAAAN,GAAAzE,UAAAyE,GAC9B,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEnC,GACP,OAAOuC,EAASH,MAAI,SAAEI,GAAoD,OAAAA,EAAQC,WAAWzC,YAKjGyB,EAAAtF,UAAAuG,yBAAA,eAAuC,IAAAH,EAAA,GAAAN,EAAA,EAAAA,EAAAzE,UAAAX,OAAAoF,IAAAM,EAAAN,GAAAzE,UAAAyE,GACtC,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAEnC,GACP,OAAOuC,EAASH,MAAI,SAAEI,GAA6D,OAAAA,EAAQC,WAAWzC,YAK1GyB,EAAAtF,UAAAwG,cAAA,SAA4BJ,EAAyDK,GACpF,OAAO,KACLV,KACAC,EAAAA,QAAM,SAAEnC,GAEP,OAAKuC,IAIGA,EAASH,MAAI,SAAEI,GAAoD,OAAAA,EAAQC,WAAWzC,QAC5F4C,EAAyBR,MAAI,SAAEI,GAA6D,OAAAA,EAAQC,WAAWzC,+BAvDrHb,EAAAA,sDAT8BS,EAAAA,QAAOR,WAAA,CAAA,CAAAC,KAYxBC,EAAAA,OAAMC,KAAA,CAACgC,QAyDrBE,EA5DA,CAC6CoB,EAAAA,yBCO5C,SAAAC,EAAuCC,EACfC,GADe/G,KAAA8G,WAAAA,EACf9G,KAAA+G,IAAAA,EALhB/G,KAAAgH,aAAe,IAAIrD,EAAAA,QAEnB3D,KAAAiH,cAA+B,GA8CxC,OAtCCJ,EAAA3G,UAAA4D,SAAA,SAASC,GAIR,OAFA/D,KAAK8G,WAAWhD,SAASC,GAElBA,EAAQa,gBAGhBiC,EAAA3G,UAAAgH,gBAAA,SAAgBnD,GAAhB,IAAAkB,EAAAjF,KAEOmH,EACLnH,KAAK+G,IACHd,KACAC,EAAAA,QAAM,SAAEkB,GAAuB,OAAAA,EAAMC,YAAYtD,MACjDuD,EAAAA,QACAC,EAAAA,KAAG,SAAEH,GACJ,OAAOnC,EAAKuC,mBAAmBJ,MAEhCK,EAAAA,UAAUzH,KAAKgH,eAGZU,EAAeC,YAAU,WAC9B1C,EAAK6B,WAAWhD,SAASC,MAK1B,OAFA/D,KAAKiH,cAAc7F,KAAKsG,GAEjBP,GAGRN,EAAA3G,UAAA0H,YAAA,WACC5H,KAAKgH,aAAarG,OAClBX,KAAKgH,aAAaa,WAElB7H,KAAKiH,cAAca,SAAO,SAAEC,GAC3BC,aAAaD,OAIhBlB,KC5DA,iBAEC,SAAAoB,EACkB1D,EACAnB,GADApD,KAAAuE,YAAAA,EACAvE,KAAAoD,KAAAA,EAoBnB,OAjBC6E,EAAA/H,UAAAyE,eAAA,WACC,OAAO3E,KAAKuE,aAGb0D,EAAA/H,UAAAgI,QAAA,WACC,OAAOlI,KAAKoD,MAGb6E,EAAA/H,UAAA4E,OAAA,SAAOsC,GACN,OAAOpH,KAAK6E,aAAauC,IACxBpH,KAAK2E,iBAAiBG,OAAOsC,EAAMzC,mBAGrCsD,EAAA/H,UAAA2E,aAAA,SAAauC,GACZ,OAAOpH,KAAKkI,YAAcd,EAAMc,WAGlCD,KCrBA,MAAA,aCAA,MAAA,aCDA,IAAAE,EAAA,WAAA,SAAAA,IAEkBnI,KAAAoI,OAAqB,GAiCvC,OA/BCD,EAAAjI,UAAAmI,SAAA,SAASC,GACRtI,KAAKoI,OAAOhH,KAAKkH,IAGlBH,EAAAjI,UAAAqI,0BAAA,SAA0BhE,GAEzB,IAAKA,EACJ,MAAO,OAGJiE,EAAa,GAejB,OAbAxI,KAAKoI,OAAON,SAAO,SAAEQ,OAEdG,EAAYH,EAAMI,QAAQnE,GAEhC,GAAIkE,EAAW,KAEVE,EAAgBF,EAAUxI,YAAY2I,KAE1CJ,EAAWG,GAAiBF,MAKvBzI,KAAK6I,gBAAgBL,IAGrBL,EAAAjI,UAAA2I,gBAAR,SAAwBL,GACvB,OAAOM,KAAKC,MAAMD,KAAKE,UAAUR,KAEnCL,EAnCA,GCDA,iBAMC,SAAAc,EAAsB1E,EACEnB,GAAApD,KAAAoD,KAAAA,EACvBpD,KAAKuE,YAAcA,EACnBvE,KAAKkJ,OAAS,GA2BhB,OAxBCD,EAAA/I,UAAAiJ,MAAA,WACC,OAAOnJ,KAAKuE,aAGb0E,EAAA/I,UAAAkJ,UAAA,WACC,OAAOpJ,KAAW,QAKnBiJ,EAAA/I,UAAAmJ,SAAA,SAAS/F,WAER,GAAI3D,MAAMuF,QAAQ5B,OACjB,IAAkB,IAAAgG,EAAAC,EAAAjG,GAAIkG,EAAAF,EAAA3I,QAAA6I,EAAA1I,KAAA0I,EAAAF,EAAA3I,OAAE,CAAnB,IAAI8I,EAAKD,EAAA3I,MACbb,KAAKkJ,OAAO9H,KAAKqI,0GAGlBzJ,KAAKkJ,OAAO9H,KAAI,IAIlB6H,EAAA/I,UAAAwJ,YAAA,WACC1J,KAAKkJ,OAAOtI,OAAS,GAEvBqI,KCvCA,IAAAU,EAAA,WAIC,SAAAA,EAAYC,GACX5J,KAAK4J,IAAMA,EAcb,OAXCD,EAAAzJ,UAAA8B,SAAA,WACC,OAAOhC,KAAK4J,KAGbD,EAAAzJ,UAAAiJ,MAAA,WACC,OAAOnJ,KAAK4J,KAGbD,EAAAzJ,UAAA4E,OAAA,SAAOP,GACN,OAAOvE,KAAK4J,MAAQrF,EAAY4E,SAElCQ,EAnBA,UCCCE,QAAA,EACAC,QAAA,iDCCD,iBAEC,SAAAC,EAAuCC,EACfC,GADejK,KAAAgK,OAAAA,EACfhK,KAAAiK,QAAAA,EAUzB,OAPCF,EAAA7J,UAAAgK,UAAA,WACC,OAAOlK,KAAKgK,QAGbD,EAAA7J,UAAAiK,WAAA,WACC,OAAOnK,KAAKiK,SAEdF,KCVA,kBAMC,SAAAK,EAAsB7F,EACfC,EACAyF,GAFP,IAAAhF,EAGCvB,EAAAhD,KAAAV,KAAMuE,EAAaC,IAAYxE,YAC/BiF,EAAKgF,QAAUA,IAsBjB,OAhC0C9H,EAAAA,EAAAA,GAazCiI,EAAAlK,UAAAmK,WAAA,SAAWjD,GACV,OAAOpH,KAAKC,YAAY2I,OAASxB,EAAMnH,YAAY2I,MAGpDwB,EAAAlK,UAAAoK,kBAAA,SAAkBvG,GACjB/D,KAAKuK,iBAAmBxG,EAAQa,gBAGjCwF,EAAAlK,UAAAmH,YAAA,SAAYtD,GACX,OAAOA,EAAQa,iBAAmB5E,KAAKuK,kBAGxCH,EAAAlK,UAAAsK,WAAA,SAAWP,GACVjK,KAAKiK,QAAUA,GAGhBG,EAAAlK,UAAAiK,WAAA,WACC,OAAOnK,KAAKiK,SAEdG,GAhC0C9F,GCN1C,IAAAmG,EAAA,WAOA,SAAAA,IAGSzK,KAAA0K,aAAmC,GAEnC1K,KAAA2K,cAAsC,IAAIhH,EAAAA,QA2DnD,OAzDC8G,EAAAvK,UAAAS,KAAA,SAAKyG,GACJpH,KAAK0K,aAAatJ,KAAKgG,GACvBpH,KAAK2K,cAAchK,KAAKyG,IAGzBqD,EAAAvK,UAAA0K,gBAAA,SAAgBC,GAIf,OAFmC7K,KAAKoJ,YAE1B0B,UACT3F,MAAI,SAAEiC,GACN,OAAOA,EAAMnH,YAAY2I,OAASiC,MAQxCJ,EAAAvK,UAAA6K,aAAA,SAAaF,OAGNzD,EAAQpH,KAAK4K,gBAAgBC,GAEnC,OAAIzD,EACI4D,EAAAA,GAAG5D,GAIJpH,KAAKiL,2BAA2BJ,IAKxCJ,EAAAvK,UAAA+K,2BAAA,SAA2BjG,OAEtB6F,EAEJ,GAAI7F,aAAeoF,EAClBS,EAAY7F,EAAI/E,YAAY2I,SACtB,CAAA,GAAmB,iBAAR5D,EAGjB,OAAOkG,EAAAA,WAAW,IAAIC,MAAM,+BAF5BN,EAAY7F,EAKb,OAAOhF,KAAK2K,cACN1E,KACAC,EAAAA,QAAM,SAAEkB,GAAU,OAAAA,EAAMnH,YAAY2I,OAASiC,KAC7CO,EAAAA,KAAK,KAIJX,EAAAvK,UAAAkJ,UAAR,WACC,OAAOpJ,KAAK0K,kCA7DbxH,EAAAA,aAgEDuH,EAvEA,qBCUC,SAAAY,EAAoBC,GAApB,IAAArG,EACCvB,EAAAhD,KAAAV,OAAOA,YADYiF,EAAAqG,WAAAA,IAQrB,OAVuCnJ,EAAAA,EAAAA,GAMtCkJ,EAAAnL,UAAAS,KAAA,SAAKyG,GACJ1D,EAAAxD,UAAMS,KAAID,KAAAV,KAACoH,GACXpH,KAAKsL,WAAW3K,KAAKyG,wBATtBlE,EAAAA,sDAHQuH,KAcTY,GAVuC1H,EAAAA,0BCItC,SAAA4H,EAAoBC,GAAAxL,KAAAwL,YAAAA,EAyCrB,OApCCD,EAAArL,UAAAuL,QAAA,SAAQnI,WAEP,GAAI3D,MAAMuF,QAAQ5B,OAEjB,IAAgB,IAAAgG,EAAAC,EAAAjG,GAAIkG,EAAAF,EAAA3I,QAAA6I,EAAA1I,KAAA0I,EAAAF,EAAA3I,OAAE,CAAjB,IAAIqE,EAAGwE,EAAA3I,MACXb,KAAK0L,aAAa1G,0GAET1B,aAAgB8G,GAC1BpK,KAAK0L,aAAapI,IAIpBiI,EAAArL,UAAAyL,uBAAA,SAAuBC,EAAgC7H,KAU/CwH,EAAArL,UAAAwL,aAAR,SAAqBtE,GAEfA,GACJyE,QAAQxK,MAAS+F,EAAK,mBAGjBA,aAAiBgD,GAGtByB,QAAQxK,MAAS+F,EAAK,yBAGvBpH,KAAKwL,YAAY7K,KAAKyG,wBA1CvBlE,EAAAA,sDAJQmI,KAgDTE,KC7CA,IAAAO,EAAA,SAAApI,GAGC,SAAAoI,EAAYN,GAAZ,IAAAvG,EACCvB,EAAAhD,KAAAV,OAAOA,YAEHwL,IACHvG,EAAKS,OAAS8F,KAgCjB,OAtCqDrJ,EAAAA,EAAAA,GAUpD2J,EAAA5L,UAAAyF,KAAA,SAAQC,OACDC,EAAa,IAAIiG,EAGvB,OAFAjG,EAAWH,OAAS1F,KACpB6F,EAAWD,SAAWA,EACfC,GAGRiG,EAAA5L,UAAA6L,QAAA,eAAA,IAAA9G,EAAAjF,KAAsBkJ,EAAA,GAAAlD,EAAA,EAAAA,EAAAzE,UAAAX,OAAAoF,IAAAkD,EAAAlD,GAAAzE,UAAAyE,GACrB,OAAO,KACLC,KACAC,EAAAA,QAAM,SAAE8F,GACP,OAAO9C,EAAO/C,MAAI,SAAEiB,GAEnB,OADsBnC,EAAKgH,oBAAoB7E,GAC1BvC,aAAamH,YAM/BF,EAAA5L,UAAA+L,oBAAR,SAA4B7E,OACrB9D,EAAoB,GACzB4I,EAAiB9E,EAAMnH,YAAYW,OAIpC,OAFA0C,EAAK6I,UAAKC,EAAW,EAAGF,GAExB,IAAY,EAAMG,KAAAC,MAAA,EAAAhL,EAAA,MAAA,GAAYgC,0BApC/BJ,EAAAA,sDAHQmI,KA0CTS,EAvCA,CACqDlF,EAAAA,cCPrD,aCFA,IAAA2F,EAAA,WAEC,SAAAA,EAA6B1L,GAAAb,KAAAa,MAAAA,EAM9B,OAHC0L,EAAArM,UAAAsM,SAAA,WACC,OAAOxM,KAAKa,OAEd0L,EARA,GCEA,iBAIC,SAAAE,EAAsBC,GACrB1M,KAAKuE,YAAcmI,EAOrB,OAJCD,EAAAvM,UAAAiJ,MAAA,WACC,OAAOnJ,KAAKuE,aAGdkI,KCXA,iBAIC,SAAAE,IAFiB3M,KAAAgH,aAAe,IAAIrD,EAAAA,QAkBrC,OAbCgJ,EAAAzM,UAAA0H,YAAA,WACC5H,KAAK4M,eAGID,EAAAzM,UAAA0M,YAAV,WACC5M,KAAKgH,aAAarG,OAClBX,KAAKgH,aAAaa,YAGT8E,EAAAzM,UAAAuH,UAAV,WACC,OAAOA,EAAAA,UAAUzH,KAAKgH,eAGxB2F,KClBA,kBAEC,SAAAE,EAAsBC,GAAtB,IAAA7H,EACCvB,EAAAhD,KAAAV,OAAOA,YACP8M,EACEf,QAAOO,MADTQ,EAAcxL,EAET2D,EAAK8H,cAER9G,KACAhB,EAAKwC,aAELuF,WAAS,SAAE5F,GAEX,IACCnC,EAAK+H,UAAU5F,GACd,MAAOlG,GACR2K,QAAQxK,MAAMH,SASnB,OAzBkDiB,EAAAA,EAAAA,GAyBlD0K,GAzBkDF,GCAlD,MAAA,aCDA,kBAEC,SAAAM,WACCvJ,EAAAhD,KAAAV,OAAOA,KAOT,OAV8CmC,EAAAA,EAAAA,GAM7C8K,EAAA/M,UAAA0H,YAAA,WACC5H,KAAK4M,eAGPK,GAV8CN,GCO9C,kBAMC,SAAAO,EAAsBC,GAAtB,IAAAlI,EACCvB,EAAAhD,KAAAV,OAAOA,YALAiF,EAAAmI,QAAU,IAAIC,IAMrBpI,EAAKqI,YAAYH,KA4BnB,OApCkDhL,EAAAA,EAAAA,GAWjD+K,EAAAhN,UAAAqN,KAAA,SAAKhJ,GACJ,OAAOvE,KAAKwN,SACNC,eACAxH,KACAsB,EAAAA,KAAG,SAAEA,GACJ,OAAOA,EAAImG,IAAInJ,EAAYvC,eAE5B2L,EAAAA,yBAIPT,EAAAhN,UAAAS,KAAA,SAAK4D,EAA0B1D,GAC9Bb,KAAKoN,QAAQQ,IAAIrJ,EAAYvC,WAAYnB,GACzCb,KAAKwN,SAAS7M,KAAKX,KAAKoN,UAGjBF,EAAAhN,UAAAoN,YAAR,SAAoBH,GACfA,GACHnN,KAAKoN,QAAQQ,IAAIT,EAAa5I,YAAYvC,WAAYmL,EAAatM,OACnEb,KAAKwN,SAAW,IAAIK,EAAAA,gBAAgC7N,KAAKoN,UAEzDpN,KAAKwN,SAAW,IAAIM,EAAAA,cAA8B,IAIrDZ,GApCkDD,GCXlD,iBAgBC,SAAAc,EAAoBlN,GACnB,OAAKkN,EAASC,QAAQnN,IAAUkN,EAASC,QAAQnN,GACzCkN,EAASE,SAEjBjO,KAAKa,MAAQA,EACNb,MAuET,OA1FQ+N,EAAAE,MAAP,WACC,OAAO,IAAIF,EAAc,OAGnBA,EAAA/C,GAAP,SAAanK,GACZ,OAAO,IAAIkN,EAAYlN,IAGTkN,EAAAC,QAAf,SAAuBnN,GACtB,OAAO,MAAOA,GAafkN,EAAA7N,UAAA8N,QAAA,WACC,OAAOD,EAASC,QAAQhO,KAAKa,QAG9BkN,EAAA7N,UAAAgO,UAAA,WACC,OAAQlO,KAAKgO,WAGdD,EAAA7N,UAAAgG,OAAA,SAAOiI,GACN,OAAInO,KAAKkO,aAAeC,EAASnO,KAAKa,OAC9Bb,KAED+N,EAASE,SAGjBF,EAAA7N,UAAA4H,QAAA,SAAQsG,GACHpO,KAAKkO,aACRE,EAASpO,KAAKa,QAIhBkN,EAAA7N,UAAAqH,IAAA,SAAO8G,GACN,OAAIrO,KAAKkO,YACD,IAAIH,EAAYM,EAAOrO,KAAKa,QAE7BkN,EAASE,SAMjBF,EAAA7N,UAAAoO,2BAAA,WACC,OAAOtO,KAAKa,OAGbkN,EAAA7N,UAAAqO,WAAA,WACC,GAAIvO,KAAKgO,UACR,MAAM,IAAI7C,MAAM,0CAEjB,OAAOnL,KAAKa,OAGbkN,EAAA7N,UAAAsO,UAAA,SAAuBC,GACtB,OAAIzO,KAAKkO,YACDlO,KAAKa,MAEN4N,KAGRV,EAAA7N,UAAAwO,UAAA,SAAUC,GACL3O,KAAKkO,aACRS,EAAO3O,KAAKa,QAIdkN,EAAA7N,UAAA0O,QAAA,SAAQD,GACH3O,KAAKgO,WACRW,KAIFZ,EAAA7N,UAAA2O,OAAA,SAAoBJ,GACnB,OAAIzO,KAAKkO,YACDlO,KAEDyO,KAGTV,KC1FA,iBAIC,SAAAe,EAAsBlF,GACrB5J,KAAKuE,YAAcqF,EAWrB,OARCkF,EAAA5O,UAAAyE,eAAA,WACC,OAAO3E,KAAKuE,aAGbuK,EAAA5O,UAAAiJ,MAAA,WACC,OAAOnJ,KAAK2E,iBAAiB3C,YAG/B8M,KCZA,iBAAA,SAAAC,IAEkB/O,KAAAgP,MAAwB,IAAI3B,IAuB9C,OArBC0B,EAAA7O,UAAA0N,IAAA,SAAIqB,GACHjP,KAAKgP,MAAMpB,IAAIqB,EAAO9F,QAAS8F,IAGhCF,EAAA7O,UAAAgP,QAAA,SAAQC,GAAR,IAAAlK,EAAAjF,KACCmP,EAAQrH,SAAO,SAAEmH,GAChBhK,EAAK2I,IAAIqB,OAIXF,EAAA7O,UAAAwN,IAAA,SAAInJ,GACH,OAAOwJ,EAAS/C,GAAGhL,KAAKgP,MAAMtB,IAAInJ,EAAYvC,cAG/C+M,EAAA7O,UAAAkP,OAAA,WACC,OAAOzP,MAAM0P,KAAKrP,KAAKgP,MAAMM,WAG9BP,EAAA7O,UAAAqP,MAAA,WACCvP,KAAKgP,MAAMO,SAEbR,KCtBA,kBAEC,SAAAS,EAAuCC,GAAvC,IAAAxK,EACCvB,EAAAhD,KAAAV,OAAOA,YAD+BiF,EAAAwK,WAAAA,IA0BxC,OA5BkGtN,EAAAA,EAAAA,GAQjGqN,EAAAtP,UAAAwI,QAAA,SAAQnE,GACP,OAAOvE,KAAKwM,SAASjI,IAGtBiL,EAAAtP,UAAAkP,OAAA,WACC,OAAOpP,KAAK0P,gBAGLF,EAAAtP,UAAAwP,aAAR,WAAA,IAAAzK,EAAAjF,KACC,OAAOA,KAAKyP,WACNL,SACA7H,KAAG,SAAE0H,GAAc,OAAAhK,EAAK0K,YAAYV,OAGnCO,EAAAtP,UAAAsM,SAAR,SAAiBjI,GAGhB,OAFkBvE,KAAKyP,WAAW/B,IAAInJ,GAErBgD,IAAIvH,KAAK2P,cAG5BH,GA5BkGI,GCElG,kBAEC,SAAAC,EAAuCJ,EACfK,GADxB,IAAA7K,EAECvB,EAAAhD,KAAAV,OAAOA,YAF+BiF,EAAAwK,WAAAA,EACfxK,EAAA6K,uBAAAA,EAEvB7K,EAAK6K,uBAAuBzH,SAASpD,KA4BvC,OAjCkG9C,EAAAA,EAAAA,GAYjG0N,EAAA3P,UAAA6P,KAAA,SAAKtH,GACJzI,KAAKgQ,UAAUvH,IAGhBoH,EAAA3P,UAAAwI,QAAA,SAAQnE,GACP,OAAOvE,KAAKwM,SAASjI,IAGdsL,EAAA3P,UAAA8P,UAAR,SAAkBvH,OAEXwG,EAASjP,KAAKiQ,SAASxH,GAE7BzI,KAAKyP,WAAW7B,IAAIqB,IAGbY,EAAA3P,UAAAsM,SAAR,SAAiBjI,GAGhB,OAFkBvE,KAAKyP,WAAW/B,IAAInJ,GAErBgD,IAAIvH,KAAKkQ,aAG5BL,GAjCkGM,GCDlG,kBAEC,SAAAC,EAAuCC,EACfP,GADxB,IAAA7K,EAECvB,EAAAhD,KAAAV,OAAOA,YAF+BiF,EAAAoL,cAAAA,EACfpL,EAAA6K,uBAAAA,EAEvB7K,EAAK6K,uBAAuBzH,SAASpD,KAmCvC,OAxC0E9C,EAAAA,EAAAA,GAUzEiO,EAAAlQ,UAAA6P,KAAA,SAAK/K,GAAL,IAAAC,EAAAjF,KAEC,GAAIL,MAAMuF,QAAQF,GACjBA,EAAI8C,SAAO,SAAEW,GACZxD,EAAKoL,cAAczC,IAAInF,UAElB,KACAA,EAAYzD,EAElBhF,KAAKqQ,cAAczC,IAAInF,KAIzB2H,EAAAlQ,UAAAwI,QAAA,SAAQnE,OAED+L,EAAetQ,KAAKqQ,cAAc3C,IAAInJ,GAI5C,OAFA+L,EAAa5B,WAAS,SAAE6B,GAAM,OAAAA,EAAE7G,iBAEzB4G,GAGRF,EAAAlQ,UAAAkP,OAAA,WACC,OAAOpP,KAAKqQ,cAAcjB,UAG3BgB,EAAAlQ,UAAAsQ,OAAA,SAAOjM,GACNvE,KAAKqQ,cAAcI,OAAOlM,IAG5B6L,GAxC0ED,GCA1E,kBAEC,SAAAO,EAAuCL,GAAvC,IAAApL,EACCvB,EAAAhD,KAAAV,OAAOA,YAD+BiF,EAAAoL,cAAAA,IAsBxC,OAxB+FlO,EAAAA,EAAAA,GAQ9FuO,EAAAxQ,UAAAwI,QAAA,SAAQnE,GACP,OAAOvE,KAAKwM,SAASjI,IAGtBmM,EAAAxQ,UAAAkP,OAAA,WAAA,IAAAnK,EAAAjF,KACC,OAAOA,KAAKqQ,cACNjB,SACA7H,KAAG,SAAEkB,GAAiB,OAAAxD,EAAK0K,YAAYlH,OAGtCiI,EAAAxQ,UAAAsM,SAAR,SAAiBjI,GAGhB,OAFkCvE,KAAKqQ,cAAc3C,IAAInJ,GAErCgD,IAAIvH,KAAK2P,YAAYtD,KAAKrM,QAGhD0Q,GAxB+Fd,GCN/F,iBAAA,SAAAe,IAEkB3Q,KAAAgP,MAAwB,IAAI3B,IAgC9C,OA9BCsD,EAAAzQ,UAAA0N,IAAA,SAAInF,GACHzI,KAAKgP,MAAMpB,IAAInF,EAAUU,QAAQnH,WAAYyG,IAG9CkI,EAAAzQ,UAAAgP,QAAA,SAAQ1G,GAAR,IAAAvD,EAAAjF,KACCwI,EAAWV,SAAO,SAAEW,GACnBxD,EAAK2I,IAAInF,OAIXkI,EAAAzQ,UAAAwN,IAAA,SAAInJ,GACH,OAAOwJ,EAAS/C,GAAGhL,KAAKgP,MAAMtB,IAAInJ,EAAYvC,cAG/C2O,EAAAzQ,UAAAkP,OAAA,WACC,OAAOzP,MAAM0P,KAAKrP,KAAKgP,MAAMM,WAG9BqB,EAAAzQ,UAAA0Q,IAAA,SAAIrM,GACH,OAAOvE,KAAKgP,MAAM4B,IAAIrM,EAAYvC,aAGnC2O,EAAAzQ,UAAAuQ,OAAA,SAAOlM,GACNvE,KAAKgP,MAAMyB,OAAOlM,EAAYvC,aAG/B2O,EAAAzQ,UAAAqP,MAAA,WACCvP,KAAKgP,MAAMO,SAGboB,KCtCA,mBCgBC,SAAAE,EAAYC,GAAZ,IAAA7L,EACCvB,EAAAhD,KAAAV,OAAOA,YALAiF,EAAAnC,SAAU,EAEVmC,EAAA+B,aAAe,IAAIrD,EAAAA,QAK1BmN,EACE7K,KACAC,EAAAA,QAAM,WAAO,OAAAjB,EAAKnC,WAClB2E,EAAAA,UAAUxC,EAAK+B,eAEfgG,WAAS,SAAEjJ,GACXkB,EAAKrD,IAAImC,QAqBb,OApC0C5B,EAAAA,EAAAA,GAmBzC0O,EAAA3Q,UAAA0H,YAAA,WACC5H,KAAKgH,aAAarG,OAClBX,KAAKgH,aAAaa,YAGnBgJ,EAAA3Q,UAAA6C,MAAA,WACC/C,KAAK8C,SAAU,GAGhB+N,EAAA3Q,UAAA8C,KAAA,WACChD,KAAK8C,SAAU,GAGN+N,EAAA3Q,UAAA6B,MAAV,SAAgBgC,GACf8H,QAAQjK,IAAImC,EAAQ/B,WAAY+B,wBAlCjCb,EAAAA,sDALQsC,KA0CTqL,GApC0C3O,sBCN1C,SAAA6O,mDAWA,OAXuC5O,EAAAA,EAAAA,GAEtC4O,EAAA7Q,UAAA6C,MAAA,aAGAgO,EAAA7Q,UAAA8C,KAAA,aAGU+N,EAAA7Q,UAAA6B,MAAV,SAAgBgC,KAGjBgN,GAXuC7O,kBCatC,SAAA8O,EAAYC,EACQnB,GADpB,IAAA7K,EAECvB,EAAAhD,KAAAV,OAAOA,YADYiF,EAAA6K,uBAAAA,EALZ7K,EAAAnC,SAAU,EAEVmC,EAAA+B,aAAe,IAAIrD,EAAAA,QAM1BsN,EACEhL,KACAC,EAAAA,QAAM,WAAO,OAAAjB,EAAKnC,WAClB2E,EAAAA,UAAUxC,EAAK+B,eAEfgG,WAAS,SAAEhB,GACX/G,EAAKrD,IAAIoK,QAwBb,OAxCwC7J,EAAAA,EAAAA,GAoBvC6O,EAAA9Q,UAAA0H,YAAA,WACC5H,KAAKgH,aAAarG,OAClBX,KAAKgH,aAAaa,YAGnBmJ,EAAA9Q,UAAA6C,MAAA,WACC/C,KAAK8C,SAAU,GAGhBkO,EAAA9Q,UAAA8C,KAAA,WACChD,KAAK8C,SAAU,GAGNkO,EAAA9Q,UAAA6B,MAAV,SAAgBiK,OACTzH,EAAcyH,EAAYrH,iBAC/B6D,EAAaxI,KAAK8P,uBAAuBvH,0BAA0BhE,GAEpEsH,QAAQjK,IAAIoK,EAAYhK,WAAYgK,EAAaxD,wBAtClDtF,EAAAA,sDALQ4I,SAEA3D,KA4CT6I,GAxCwC5O,sBCRxC,SAAA8O,mDAWA,OAXqC/O,EAAAA,EAAAA,GAEpC+O,EAAAhR,UAAA6C,MAAA,aAGAmO,EAAAhR,UAAA8C,KAAA,aAGAkO,EAAAhR,UAAA6B,MAAA,SAAMqF,KAGP8J,GAXqC9O,GCHrC+O,GAAA,WAUC,SAAAA,EAAyC5O,EAC9BC,EACAC,GAF8BzC,KAAAuC,WAAAA,EAC9BvC,KAAAwC,cAAAA,EACAxC,KAAAyC,YAAAA,EAyBZ,OAtBC0O,EAAAjR,UAAA6C,MAAA,WACC/C,KAAKoR,gBAGND,EAAAjR,UAAA8C,KAAA,WACChD,KAAKqR,eAGEF,EAAAjR,UAAAkR,aAAR,WACK1O,EAAAA,kBAAkB1C,KAAKuC,cAC1BvC,KAAKwC,cAAcO,QACnB/C,KAAKyC,YAAYM,UAIXoO,EAAAjR,UAAAmR,YAAR,WACK3O,EAAAA,kBAAkB1C,KAAKuC,cAC1BvC,KAAKwC,cAAcQ,OACnBhD,KAAKyC,YAAYO,6BA1BnBE,EAAAA,+EAGaG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBANZrB,SADAE,KAkCT+O,EArCA,GCQA,SAAgBG,GAAuEC,EAA8DC,EAAyCC,EAAwD9I,GACrP,OAAO,IAAI+I,GAAkCH,EAA+BC,EAAgBC,EAA4B9I,GAGzH,kBAIC,SAAA+I,EAA6BH,EACTI,EACAF,EACAG,GAHS5R,KAAAuR,8BAAAA,EACTvR,KAAA2R,wBAAAA,EACA3R,KAAAyR,2BAAAA,EACAzR,KAAA4R,cAAAA,EACnB5R,KAAKoG,YAAcpG,KAAK6R,wBAAwBnN,iBA0ClD,OAvCCgN,EAAAxR,UAAA4R,oBAAA,SAAoBrJ,EAAc1E,GACjC/D,KAAKuR,8BAA8BO,oBAAoBrJ,EAAW1E,IAGnE2N,EAAAxR,UAAA6R,cAAA,SAAchO,GAAd,IAAAkB,EAAAjF,KAEOuE,EAAcR,EAAQY,iBAET3E,KAAK2R,wBAAwBjE,IAAI1N,KAAK4R,eAE9ClD,WAAS,SAAEsD,OAEfvJ,EAAYuJ,EAAQ7R,OAAOoE,GAEXU,EAAKwM,2BAA2B/D,IAAIzI,EAAK2M,eAEjDlD,WAAS,SAAEuD,GAExBA,EAAKlC,KAAKtH,GAEVxD,EAAK6M,oBAAoBrJ,EAAW1E,UAMvC2N,EAAAxR,UAAAsG,WAAA,SAAWzC,GACV,OAAO/D,KAAKoG,cAAgBrC,EAAQW,kBAG7BgN,EAAAxR,UAAA2R,sBAAR,iBACOvO,EAAoB,GACzB4I,EAAiBlM,KAAKuR,8BAA8B/K,aAAavG,YAAYW,OAI9E,OAFA0C,EAAK6I,UAAKC,EAAW,EAAGF,GAExB,KAAYgG,EAAClS,KAAKuR,8BAA8B/K,cAAoB6F,KAAAC,MAAA4F,EAAA5Q,EAAA,MAAA,GAAIgC,MAG1EoO,KC3DA,ICDAS,GAAA,WASC,SAAAA,IAFiBnS,KAAAuH,IAAM,IAAI8F,IAa5B,OARC8E,EAAAjS,UAAAkS,IAAA,SAAIC,EAAaL,GAEhBhS,KAAKuH,IAAIqG,IAAIyE,EAAKL,IAGnBG,EAAAjS,UAAAwN,IAAA,SAAI2E,GACH,OAAOtE,EAAS/C,GAAGhL,KAAKuH,IAAImG,IAAI2E,KAElCF,EApBA,GAsBA,IAAAG,GAAA,WAIC,SAAAA,IAFiBtS,KAAAuH,IAAM,IAAI8F,IAa5B,OARCiF,EAAApS,UAAAkS,IAAA,SAAIC,EAAaE,GAEhBvS,KAAKuH,IAAIqG,IAAIyE,EAAKE,IAGnBD,EAAApS,UAAAwN,IAAA,SAAI2E,GACH,OAAOtE,EAAS/C,GAAGhL,KAAKuH,IAAImG,IAAI2E,KAElCC,EAfA,GCxBA,ICAAE,GAAA,WAEA,SAAAA,KAMA,OAHCA,EAAAtS,UAAA0H,YAAA,iCAHA6K,EAAAA,SAAQnP,KAAA,CAAC,MAMVkP,EARA,GCOA,SAAgBE,GACfC,EACAlB,EACA9I,GAEA,OAAO,IAAIiK,GAAyBD,EAAgBlB,EAA4B9I,GAGjF,kBAIC,SAAAiK,EAA6BD,EACTlB,EACAG,GAFS5R,KAAA2S,eAAAA,EACT3S,KAAAyR,2BAAAA,EACAzR,KAAA4R,cAAAA,EACnB5R,KAAKoG,YAAcpG,KAAK6R,wBAAwBnN,iBAuClD,OApCCkO,EAAA1S,UAAA4R,oBAAA,SAAoBrJ,EAAc1E,GACjC/D,KAAK2S,eAAeb,oBAAoBrJ,EAAW1E,IAGpD6O,EAAA1S,UAAA6R,cAAA,SAAchO,GAAd,IAAAkB,EAAAjF,KAEOuE,EAAcR,EAAQY,iBAEN3E,KAAKyR,2BAA2B/D,IAAI1N,KAAK4R,eAEjDlD,WAAS,SAAEuD,GAEHA,EAAKvJ,QAAQnE,GAErBmK,WAAS,SAAEjG,GAEvBxD,EAAK0N,eAAeE,gBAAgBpK,EAAW1E,GAE/CkB,EAAK6M,oBAAoBrJ,EAAW1E,UAKvC6O,EAAA1S,UAAAsG,WAAA,SAAWzC,GACV,OAAO/D,KAAKoG,cAAgBrC,EAAQW,kBAG7BkO,EAAA1S,UAAA2R,sBAAR,iBACOvO,EAAoB,GACzB4I,EAAiBlM,KAAK2S,eAAenM,aAAavG,YAAYW,OAI/D,OAFA0C,EAAK6I,UAAKC,EAAW,EAAGF,GAExB,KAAYgG,EAAClS,KAAK2S,eAAenM,cAAoB6F,KAAAC,MAAA4F,EAAA5Q,EAAA,MAAA,GAAIgC,MAG3DsP,SCOME,GAASxR,EAAA,CACd,CAAEyR,QZpEiC,6BYoEFC,UAAU,GAC3C,CAAED,QZtEmC,+BYsEFC,UAAU,GAC7C,CAAED,QAAS7Q,EAAe+Q,WAAYC,GAAsBC,KAAM,CZvE7B,+BYuEsDtC,GAAsBE,KACjH,CAAEgC,QAAS3Q,EAAmB6Q,WAAYG,GAAoBD,KAAM,CZvEjC,6BYuEwDnC,GAAoBE,KAC/GL,GACAE,GACAG,GACAF,GACAG,GACAgB,GACAG,IA3BuB,CACvBtO,EACA,CAAE+O,QAASzN,EAAyB+N,YAAa5P,GACjD+B,EACA/B,EACAG,EACAuE,EAEA2D,EACAT,EACAE,EACAd,EAEAnI,IAkBD,SAAgB4Q,GAAqBpQ,EAAkBwQ,EAA4CC,GAElG,OAAIzQ,EACIwQ,EAEAC,EAIT,SAAgBH,GAAmBtQ,EAAkB0Q,EAAwCC,GAE5F,OAAI3Q,EACI0Q,EAEAC,EAIT,IAAAC,GAAA,WAsFC,SAAAA,EAAuDC,EACJhN,EACVL,EACQsN,EAC9CC,EACAlC,EACAF,EACAX,EACAhE,EACQgH,EACAzR,GAVX,IAAA4C,EAAAjF,KASWA,KAAA8T,yBAAAA,EACA9T,KAAAqC,UAAAA,EAxFMrC,KAAAgH,aAAe,IAAIrD,EAAAA,QA0FnC3D,KAAK8T,yBAAyB/Q,QAE9B/C,KAAK+T,iBAAiBjD,EAAYxK,EAAUK,GAC5C3G,KAAKgU,gCAAgC1N,GAEjCsN,GACHA,EAAiB9L,SAAO,SAAEmM,OAEnBjC,EAAU6B,EAASnG,IAAIuG,EAAIjC,SAChCO,EAAasB,EAASnG,IAAIuG,EAAI1B,YAE/BZ,EAAwBS,IAAI6B,EAAI5B,IAAKL,GACrCP,EAA2BW,IAAI6B,EAAI5B,IAAKE,MAItC5L,GAEHA,EAAyBmB,SAAO,SAAEvB,GACjCuK,EACErK,yBAAyBF,GACzBN,KAAKwB,EAAAA,UAAUxC,EAAK+B,eACpBgG,WAAS,SAAEjJ,GACXwC,EAAQwL,cAAchO,SAKtBuC,GAEHA,EAASwB,SAAO,SAAEvB,GACjBuK,EACEzK,iBAAiBE,GACjBN,KAAKwB,EAAAA,UAAUxC,EAAK+B,eACpBgG,WAAS,SAAEjJ,GACXwC,EAAQwL,cAAchO,SAKtB4P,GACH7G,EACE7G,KAAKwB,EAAAA,UAAUzH,KAAKgH,eACpBgG,WAAS,SAAE5F,GAEXuM,EAAc7L,SAAO,SAAEvB,GACtBA,EAAQwB,OAAOX,SA4BrB,OAlKQsM,EAAAQ,gBAAP,SAA+DC,EAC7CnC,EACAO,EACA6B,EACA9N,GACjB,MAAO,CACN+N,SAAU7B,GACVM,UAASxR,EAAA,CAAG,CACXyR,QHvHoC,oCGwHpCuB,OAAO,EACPtB,SAAU,CACTX,IAAK8B,EACLnC,QAASA,EACTO,WAAYA,IAEX,CACFQ,QAASoB,EACTnB,SAAUmB,GAEVnC,EACAO,GACGmB,EAAaa,6BAA6BH,EAAeD,GACzD7N,KAKCoN,EAAAc,WAAP,SAAkBC,GACjB,YADiB,IAAAA,IAAAA,EAAA,CAA+B5R,SAAS,IAClD,CACNwR,SAAUX,EACVZ,UAAWA,KAINY,EAAAgB,uBAAP,SACCC,EACAhM,GAEA,MAAO,CACN,CACCoK,QAAS4B,EACTC,SAAUD,GACR,CACF5B,QC1J4B,kCD2J5BE,WAAYP,GACZ4B,OAAO,EACPnB,KAAM,CACLwB,EACArC,GACA3J,MAKW+K,EAAAa,6BAAf,SACCM,EACAlM,GAEA,MAAO,CACN,CACCoK,QAAS8B,EACTD,SAAUC,GACR,CACF9B,QL3KsC,sCK4KtCE,WAAY3B,GACZgD,OAAO,EACPnB,KAAM,CACL0B,EACA1C,GACAG,GACA3J,MAsEJ+K,EAAAxT,UAAA0H,YAAA,WACC5H,KAAKgH,aAAarG,OAClBX,KAAKgH,aAAaa,WAElB7H,KAAK8T,yBAAyB9Q,QAGvB0Q,EAAAxT,UAAA6T,iBAAR,SAAyBjD,EAAwBgE,EAAgEnO,GAChHmK,EACEpK,cAAcoO,EAAiBnO,GAC/BV,KAAKwB,EAAAA,UAAUzH,KAAKgH,eACpBgG,WAAS,SAAEjJ,GACX8H,QAAQjK,IAAI,WAAWmC,EAAQ/B,WAAU,mDAIpC0R,EAAAxT,UAAA8T,gCAAR,SAAwCc,GACnCA,IAAoBnV,MAAMuF,QAAQ4P,IACrCjJ,QAAQjK,IAAI,4FAxKd6Q,EAAAA,SAAQnP,KAAA,CAAC,CACTyR,QAAS,CACRC,EAAAA,cAEDlC,UAAWA,gDAkF2DnT,MAAKwD,WAAA,CAAA,CAAAC,KAA9D2K,EAAAA,UAAQ,CAAA3K,KAAIC,EAAAA,OAAMC,KAAA,CAACE,YAC6C7D,MAAKwD,WAAA,CAAA,CAAAC,KAA9E2K,EAAAA,UAAQ,CAAA3K,KAAIC,EAAAA,OAAMC,KAAA,CLzLmB,gDK0LU3D,MAAKwD,WAAA,CAAA,CAAAC,KAApD2K,EAAAA,UAAQ,CAAA3K,KAAIC,EAAAA,OAAMC,KAAA,CC7LS,4CD8LoC3D,MAAKwD,WAAA,CAAA,CAAAC,KAApE2K,EAAAA,UAAQ,CAAA3K,KAAIC,EAAAA,OAAMC,KAAA,CH9LiB,8CGAvB2R,EAAAA,gBAwCR9C,UAAyBG,UA/BzB9M,SAQAsG,SAoBAqF,UATA7O,KAqPToR,EA5KA,6LZrGsC,iVACF,sCcEpC,SAAuBwB,qVAHvB,SAA8BA,sCAM9B,SAA4BA,6BCiB5B,SAAsCC,EAA6CC,WAElFC,OAAOF,EAAavU,QAAQ0U,QAAQF,EAAexU,OAAQ,mCAElD2U,OAEFC,EAAgBJ,EAAejQ,MAAI,SAAEiC,GAC1C,OAAOA,EAAMtC,OAAOyQ,MAGrBF,OAAOG,GAAeC,mBANvB,IAAwB,IAAAC,EAAAnM,EAAA4L,GAAYQ,EAAAD,EAAA/U,QAAAgV,EAAA7U,KAAA6U,EAAAD,EAAA/U,OAAA,GAAhBgV,EAAA9U,gIAtBrB,SAAmCsU,EAA0CC,WAE5EC,OAAOF,EAAavU,QAAQ0U,QAAQF,EAAexU,uBAE1C2U,OAEFC,EAAgBJ,EAAejQ,MAAI,SAAEiC,GAC1C,OAAOA,EAAMvC,aAAa0Q,MAG3BF,OAAOG,GAAeC,cACtBJ,OAAOE,EAAY1Q,aAAa2Q,IAAgBI,WAAW,8BAE3DP,OAAOE,EAAYpL,cAAcmL,QAAQE,EAAcrL,aAAc,0CATtE,IAAwB,IAAA0L,EAAAtM,EAAA4L,GAAYW,EAAAD,EAAAlV,QAAAmV,EAAAhV,KAAAgV,EAAAD,EAAAlV,OAAA,GAAhBmV,EAAAjV,kICIrB,kBAEQ8B,OAAON,GAAWY,OAEzBN,OAAON,GAAWQ,SAAU,yBAb7B,SAAoClB,GAE/BA,IACHgB,OAAON,GAAWY,OAAStB,GAG5BgB,OAAON,GAAWQ,SAAU,0BCL7B,SAAqCyD,GACpC,OAAOA,EAASiB,KAAG,SAAEhB,GACpB,MAAO,CACNwM,QAASvP,EACToR,SAAUrO,EACV+N,OAAO,8HVPgC,2CMHV,uCJAQ","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Message } from '../domain/message';\n\nexport abstract class Logger<M extends Message> {\n\n\tprivate domainName: string;\n\n\tabstract start(): void;\n\n\tabstract stop(): void;\n\n\tprotected abstract print(message: M): void;\n\n\tsetDomain(domainName: string): void {\n\t\tthis.domainName = domainName;\n\t}\n\n\tlog(message: M): void {\n\t\tif (this.shouldPrint(message)) {\n\t\t\tthis.print(message);\n\t\t}\n\t}\n\n\tprotected shouldPrint(message: M): boolean {\n\n\t\tif (!this.domainName) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst log: string = message.toString();\n\n\t\treturn log.includes(this.domainName);\n\t}\n}\n","import { Command } from './command';\nimport { Logger } from '../../common/logger';\n\nexport abstract class CommandLogger extends Logger<Command> {\n}\n","import { DomainEvent } from './domain-event';\nimport { Logger } from '../../common/logger';\n\nexport abstract class DomainEventLogger extends Logger<DomainEvent> {\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\n\ndeclare var window: any;\n\nexport const hermesApi = 'hermesApi';\n\n@Injectable()\nexport class HermesApi {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: Object,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\n\t\t\tconst api = (api: HermesApi) => {\n\t\t\t\treturn {\n\t\t\t\t\tset loggers(enabled: boolean) {\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\tapi.commandLogger.start();\n\t\t\t\t\t\t\tapi.eventLogger.start();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapi.commandLogger.stop();\n\t\t\t\t\t\t\tapi.eventLogger.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tset domain(domainName: string) {\n\t\t\t\t\t\tif (domainName) {\n\t\t\t\t\t\t\tapi.commandLogger.setDomain(domainName);\n\t\t\t\t\t\t\tapi.eventLogger.setDomain(domainName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\twindow[hermesApi] = api(this);\n\n\t\t\twindow[hermesApi].loggers = false;\n\t\t}\n\t}\n}\n","export const DOMAIN_EVENT_HANDLERS = 'DOMAIN_EVENT_HANDLERS';\n// export const DOMAIN_EVENT_HANDLERS = new InjectionToken<Array<DomainEventHandler>>('DOMAIN_EVENT_HANDLERS');\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandStream extends Subject<Command> {\n\n\tnext(value: Command): void {\n\t\tsuper.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandStream } from './command.stream';\nimport { Command } from './command';\n\n\n@Injectable()\nexport class CommandDispatcher {\n\n\tconstructor(private commandStream: CommandStream) {\n\t}\n\n\tdispatch(command: Command): void {\n\t\tthis.commandStream.next(command);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RandomStringGenerator {\n\n\tstatic index = 0;\n\n\tstatic generate(): string {\n\t\treturn Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + `${RandomStringGenerator.index++}`;\n\t}\n\n}\n","import { AggregateId } from './aggregate-id';\n\nimport { RandomStringGenerator } from '../common/random-string.generator';\n\nexport abstract class Message {\n\n\tprotected constructor(private readonly aggregateId: AggregateId,\n\t\t\t\t\t\t  protected readonly messageType: string,\n\t\t\t\t\t\t  private readonly messageId: string = RandomStringGenerator.generate()) {\n\t}\n\n\tgetMessageType(): string {\n\t\treturn this.messageType;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetMessageId(): string {\n\t\treturn this.messageId;\n\t}\n\n\ttoString(): string {\n\t\treturn this.messageType;\n\t}\n\n\tequalsByType(message: Message): boolean {\n\t\treturn this.getMessageType() === message.getMessageType();\n\t}\n\n\tequals(message: Message): boolean {\n\t\treturn (this.getMessageType() === message.getMessageType()) && (this.messageId === message.messageId);\n\t}\n\n\tofMessageType(messageType: string): boolean;\n\tofMessageType(messageTypes: Array<string>): boolean;\n\tofMessageType(arg: string | Array<string>): boolean {\n\n\t\tif (Array.isArray(arg)) {\n\n\t\t\tlet found = arg.find((messageType: string) => this.isMessageType(messageType));\n\n\t\t\treturn !!found;\n\n\t\t} else {\n\t\t\treturn this.isMessageType(arg);\n\t\t}\n\t}\n\n\tprivate isMessageType(messageType: string): boolean {\n\t\treturn this.getMessageType() === messageType;\n\t}\n}\n","import { Message } from '../message';\n\nexport class Command extends Message {\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateFactory<A extends Aggregate> {\n\n\tabstract create(aggregateId: AggregateId): A;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { Command } from './command';\n\n\nexport const FILTERED_COMMAND_STREAM = new InjectionToken<Subject<Command>>('FILTERED_COMMAND_STREAM');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, Operator, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { FILTERED_COMMAND_STREAM } from './filtered-command-stream';\nimport { Aggregate } from './aggregate/aggregate';\nimport { AggregateCommandHandlerImpl } from './create-handler/aggregate-command-handler.impl';\nimport { CommandHandlerImpl } from './handler/command-handler-impl';\n\n@Injectable()\nexport class CommandBus<C = Command> extends Observable<C> {\n\n\tconstructor(@Inject(FILTERED_COMMAND_STREAM) commandsStream?: Subject<Command>) {\n\t\tsuper();\n\n\t\tif (commandsStream) {\n\t\t\tthis.source = commandsStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<C, R>): Observable<R> {\n\t\tconst observable = new CommandBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofCommand<C2 extends C>(...commandTypes: Array<string>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn commandTypes.some((commandType: string) => command.ofMessageType(commandType));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCommandHandler<C2 extends C>(...handlers: Array<CommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: CommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofCreateAggregateHandler<C2 extends C>(...handlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\t\t\t\t\treturn handlers.some((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tofNullHandler<C2 extends C>(handlers: Array<CommandHandlerImpl<Aggregate, Command>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): any {\n\t\treturn (this as CommandBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((command: Command) => {\n\n\t\t\t\t\tif (!handlers) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !handlers.some((handler: CommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command)) &&\n\t\t\t\t\t\t!aggregateCommandHandlers.some((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => handler.forCommand(command));\n\t\t\t\t})\n\t\t\t);\n\t}\n\n}\n","import { OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\n\nimport { Command } from './command';\nimport { CommandDispatcher } from './command.dispatcher';\n\nimport { DomainEvent } from '../event/domain-event';\nimport { DomainEventBus } from '../event/domain-event.bus';\nimport { StatusResponse } from '../event/status/status.response';\n\n\nexport abstract class ReplayCommandDispatcher implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject();\n\n\tprivate subscriptions: Array<number> = [];\n\n\tprotected constructor(private readonly dispatcher: CommandDispatcher,\n\t\t\t\t\t\t  private readonly bus: DomainEventBus) {\n\t}\n\n\tprotected abstract mapEventToResponse(event: DomainEvent): StatusResponse;\n\n\tdispatch(command: Command): string {\n\n\t\tthis.dispatcher.dispatch(command);\n\n\t\treturn command.getMessageId();\n\t}\n\n\tdispatchAndWait(command: Command): Observable<StatusResponse> {\n\n\t\tconst response$ =\n\t\t\tthis.bus\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter((event: DomainEvent) => event.fromCommand(command)),\n\t\t\t\t\tfirst(),\n\t\t\t\t\tmap((event: DomainEvent) => {\n\t\t\t\t\t\treturn this.mapEventToResponse(event);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t\t);\n\n\t\tconst subscription = setTimeout(() => {\n\t\t\tthis.dispatcher.dispatch(command);\n\t\t});\n\n\t\tthis.subscriptions.push(subscription);\n\n\t\treturn response$;\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.subscriptions.forEach((handle: number) => {\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n\n}\n","import { AggregateId } from '../../aggregate-id';\n\nexport abstract class AggregateEvent {\n\n\tprotected constructor(\n\t\tprivate readonly aggregateId: AggregateId,\n\t\tprivate readonly type: string) {\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tequals(event: AggregateEvent): boolean {\n\t\treturn this.equalsByType(event) &&\n\t\t\tthis.getAggregateId().equals(event.getAggregateId());\n\t}\n\n\tequalsByType(event: AggregateEvent): boolean {\n\t\treturn this.getType() === event.getType();\n\t}\n\n}\n","import { Aggregate } from './aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateRepository<A extends Aggregate> {\n\n\tabstract getById(aggregateId: AggregateId): Optional<A>;\n\n\tabstract save(aggregate: A): void;\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class AggregateStore<S extends Aggregate> {\n\n\tabstract save(aggregate: S): void ;\n\n\tabstract getById(aggregateId: AggregateId): Optional<S>;\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { AggregateStore } from './aggregate.store';\nimport { AggregateId } from '../../aggregate-id';\n\nexport class AggregateStoreRegister {\n\n\tprivate readonly stores: Array<any> = [];\n\n\tregister(store: AggregateStore<Aggregate>): void {\n\t\tthis.stores.push(store);\n\t}\n\n\tcaptureAggregatesSnapshot(aggregateId: AggregateId): { [key: string]: Aggregate } {\n\n\t\tif (!aggregateId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tlet aggregates = {};\n\n\t\tthis.stores.forEach((store: AggregateStore<Aggregate>) => {\n\n\t\t\tconst aggregate = store.getById(aggregateId);\n\n\t\t\tif (aggregate) {\n\n\t\t\t\tlet aggregateName = aggregate.constructor.name;\n\n\t\t\t\taggregates[aggregateName] = aggregate;\n\t\t\t}\n\n\t\t});\n\n\t\treturn this.cloneAggregates(aggregates);\n\t}\n\n\tprivate cloneAggregates(aggregates: { [key: string]: Aggregate }): { [key: string]: Aggregate } {\n\t\treturn JSON.parse(JSON.stringify(aggregates));\n\t}\n}\n","import { AggregateEvent } from './aggregate-event';\nimport { AggregateId } from '../../aggregate-id';\n\nexport abstract class Aggregate {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprivate readonly events: Array<AggregateEvent>;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  private readonly type: string) {\n\t\tthis.aggregateId = aggregateId;\n\t\tthis.events = [];\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetEvents(): ReadonlyArray<AggregateEvent> {\n\t\treturn this.events as ReadonlyArray<AggregateEvent>;\n\t}\n\n\taddEvent(event: AggregateEvent): void;\n\taddEvent(events: Array<AggregateEvent>): void;\n\taddEvent(args: AggregateEvent | Array<AggregateEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\t\t\tfor (let event of args) {\n\t\t\t\tthis.events.push(event);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.events.push(args as AggregateEvent);\n\t\t}\n\t}\n\n\tclearEvents(): void {\n\t\tthis.events.length = 0;\n\t}\n}\n","export class AggregateId {\n\n\tprivate readonly uid: string;\n\n\tconstructor(uid: string) {\n\t\tthis.uid = uid;\n\t}\n\n\ttoString(): string {\n\t\treturn this.uid;\n\t}\n\n\tgetId(): string {\n\t\treturn this.uid;\n\t}\n\n\tequals(aggregateId: AggregateId): boolean {\n\t\treturn this.uid === aggregateId.getId();\n\t}\n}\n","export enum DomainEventStatus {\n\tSUCCESS,\n\tFAILURE\n}\n","import { DomainEventStatus } from './domain-event-status';\nimport { DomainEventPayload } from '../domain-event.payload';\n\nexport abstract class StatusResponse {\n\n\tprotected constructor(private readonly status: DomainEventStatus,\n\t\t\t\t\t\t  private readonly payload?: DomainEventPayload) {\n\t}\n\n\tgetStatus(): DomainEventStatus {\n\t\treturn this.status;\n\t}\n\n\tgetPayload(): DomainEventPayload {\n\t\treturn this.payload;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\nimport { Command } from '../command/command';\nimport { DomainEventPayload } from './domain-event.payload';\nimport { Message } from '../message';\n\n\nexport abstract class DomainEvent extends Message {\n\n\tprivate requestCommandId: string;\n\n\tprivate payload: DomainEventPayload;\n\n\tprotected constructor(aggregateId: AggregateId,\n\t\t\t\t\t\t  messageType: string,\n\t\t\t\t\t\t  payload?: any) {\n\t\tsuper(aggregateId, messageType);\n\t\tthis.payload = payload;\n\t}\n\n\tisSameType(event: DomainEvent): boolean {\n\t\treturn this.constructor.name === event.constructor.name;\n\t}\n\n\tsetRequestCommand(command: Command): void {\n\t\tthis.requestCommandId = command.getMessageId();\n\t}\n\n\tfromCommand(command: Command): boolean {\n\t\treturn command.getMessageId() === this.requestCommandId;\n\t}\n\n\tsetPayload(payload: DomainEventPayload): void {\n\t\tthis.payload = payload;\n\t}\n\n\tgetPayload(): any {\n\t\treturn this.payload;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, Subject, throwError } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventStore {\n\n\tprivate domainEvents: Array<DomainEvent> = [];\n\n\tprivate domainEvents$: Subject<DomainEvent> = new Subject<DomainEvent>();\n\n\tnext(event: DomainEvent): void {\n\t\tthis.domainEvents.push(event);\n\t\tthis.domainEvents$.next(event);\n\t}\n\n\tfindEventByType(eventType: string): DomainEvent {\n\n\t\tconst events: Array<DomainEvent> = this.getEvents();\n\n\t\treturn events.reverse()\n\t\t\t\t\t .find((event: DomainEvent) => {\n\t\t\t\t\t\t return event.constructor.name === eventType;\n\t\t\t\t\t });\n\t}\n\n\t/**\n\t * First tries to event event in the history,\n\t * than method waits for future occurrences of the event.\n\t */\n\twaitForEvent(eventType: string): Observable<DomainEvent> {\n\n\t\t// find in a history\n\t\tconst event = this.findEventByType(eventType);\n\n\t\tif (event) {\n\t\t\treturn of(event);\n\t\t}\n\n\t\t// wait for future occurrence\n\t\treturn this.waitForNextEventOccurrence(eventType);\n\t}\n\n\twaitForNextEventOccurrence(eventType: string): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(event: DomainEvent): Observable<DomainEvent>;\n\twaitForNextEventOccurrence(arg: string | DomainEvent): Observable<DomainEvent> {\n\n\t\tlet eventType: string;\n\n\t\tif (arg instanceof DomainEvent) {\n\t\t\teventType = arg.constructor.name;\n\t\t} else if (typeof arg === 'string') {\n\t\t\teventType = arg;\n\t\t} else {\n\t\t\treturn throwError(new Error('Unsupported argument type.'));\n\t\t}\n\n\t\treturn this.domainEvents$\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event) => event.constructor.name === eventType),\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tprivate getEvents(): Array<DomainEvent> {\n\t\treturn this.domainEvents;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStore } from './domain-event.store';\n\n\n@Injectable()\nexport class DomainEventStream extends Subject<DomainEvent> {\n\n\tconstructor(private eventStore: DomainEventStore) {\n\t\tsuper();\n\t}\n\n\tnext(event: DomainEvent): void {\n\t\tsuper.next(event);\n\t\tthis.eventStore.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Command } from '../command/command';\nimport { AggregateEvent } from '../command/aggregate/aggregate-event';\n\nimport { DomainEventStream } from './domain-event.stream';\nimport { DomainEvent } from './domain-event';\n\n\n@Injectable()\nexport class DomainEventPublisher {\n\n\tconstructor(private eventStream: DomainEventStream) {\n\t}\n\n\tpublish(event: DomainEvent): void;\n\tpublish(events: ReadonlyArray<DomainEvent>): void;\n\tpublish(args: DomainEvent | ReadonlyArray<DomainEvent>): void {\n\n\t\tif (Array.isArray(args)) {\n\n\t\t\tfor (let arg of args) {\n\t\t\t\tthis.publishEvent(arg);\n\t\t\t}\n\t\t} else if (args instanceof DomainEvent) {\n\t\t\tthis.publishEvent(args);\n\t\t}\n\t}\n\n\tdispatchAggregateEvent(aggregateEvent: AggregateEvent, command: Command): void {\n\n\t\t// TODO\n\t\t// const domainEventName = aggregateEvent.getDomainEventName() as typeof DomainEvent;\n\t\t//\n\t\t// const domainEvent: DomainEvent = new (domainEventName)(command.getAggregateId());\n\n\t\t// this.eventStream.next();\n\t}\n\n\tprivate publishEvent(event: DomainEvent): void {\n\n\t\tif (!event) {\n\t\t\tconsole.error(`${event} is not defined`);\n\t\t}\n\n\t\tif (!(event instanceof DomainEvent)) {\n\t\t\t// throw new Error(`${event} is not a DomainEvent`);\n\n\t\t\tconsole.error(`${event} is not a DomainEvent`);\n\t\t}\n\n\t\tthis.eventStream.next(event);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent } from './domain-event';\nimport { DomainEventStream } from './domain-event.stream';\n\n\n@Injectable()\nexport class DomainEventBus<E = DomainEvent> extends Observable<E> {\n\n\tconstructor(eventStream?: DomainEventStream) {\n\t\tsuper();\n\n\t\tif (eventStream) {\n\t\t\tthis.source = eventStream;\n\t\t}\n\t}\n\n\tlift<R>(operator: Operator<E, R>): Observable<R> {\n\t\tconst observable = new DomainEventBus<R>();\n\t\tobservable.source = this;\n\t\tobservable.operator = operator;\n\t\treturn observable;\n\t}\n\n\tofEvent<E2 extends E>(...events: Array<typeof DomainEvent>): Observable<any> {\n\t\treturn (this as DomainEventBus<any>)\n\t\t\t.pipe(\n\t\t\t\tfilter((domainEvent: DomainEvent) => {\n\t\t\t\t\treturn events.some((event: typeof DomainEvent) => {\n\t\t\t\t\t\tconst eventInstance = this.createEventInstance(event);\n\t\t\t\t\t\treturn eventInstance.equalsByType(domainEvent);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tprivate createEventInstance(event: typeof DomainEvent): DomainEvent {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = event.constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (event as any)(...args));\n\t}\n\n}\n","import { DomainEvent } from './domain-event';\n\nexport abstract class DomainEventHandler {\n\n\tabstract handle(event: DomainEvent): void;\n}\n","export class DomainEventPayload {\n\n\tconstructor(private readonly value: any) {\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n}\n","import { AggregateId } from '../aggregate-id';\n\nexport abstract class ReadModel {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(gui: AggregateId) {\n\t\tthis.aggregateId = gui;\n\t}\n\n\tgetId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n}\n","import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { DomainEvent } from '../../domain/event/domain-event';\nimport { DomainEventBus } from '../../domain/event/domain-event.bus';\n\nimport { Reactive } from '../../common/reactive';\n\nexport abstract class ReadModelRepository extends Reactive {\n\n\tprotected constructor(domainEventBus: DomainEventBus) {\n\t\tsuper();\n\t\tdomainEventBus\n\t\t\t.ofEvent(\n\t\t\t\t...this.forEvents()\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\ttry {\n\t\t\t\t\tthis.subscribe(event);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected abstract forEvents(): Array<typeof DomainEvent>;\n\n\tprotected abstract subscribe(event: DomainEvent): void;\n\n}\n","import { ReadModel } from '../read-model';\nimport { AggregateId } from '../../aggregate-id';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class ReadModelStore<Q extends ReadModel> {\n\n\tabstract getById(aggregateId: AggregateId): Optional<Q>;\n\n}\n","import { OnDestroy } from '@angular/core';\n\nimport { Reactive } from './reactive';\n\nexport abstract class ReactiveService extends Reactive implements OnDestroy {\n\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n}\n","import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '../domain/aggregate-id';\nimport { ReactiveService } from './reactive.service';\n\nexport interface DefaultAggregateValues<T> {\n\taggregateId: AggregateId;\n\tvalue: T;\n}\n\nexport abstract class AggregateArchive<T> extends ReactiveService {\n\n\tprivate archive = new Map<string, T>();\n\n\tprivate archive$: Subject<Map<string, T>>;\n\n\tprotected constructor(defaultValue?: DefaultAggregateValues<T>) {\n\t\tsuper();\n\t\tthis.initArchive(defaultValue);\n\t}\n\n\twhen(aggregateId: AggregateId): Observable<T> {\n\t\treturn this.archive$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, T>) => {\n\t\t\t\t\t\t   return map.get(aggregateId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n\tnext(aggregateId: AggregateId, value: T): void {\n\t\tthis.archive.set(aggregateId.toString(), value);\n\t\tthis.archive$.next(this.archive);\n\t}\n\n\tprivate initArchive(defaultValue?: DefaultAggregateValues<T>): void {\n\t\tif (defaultValue) {\n\t\t\tthis.archive.set(defaultValue.aggregateId.toString(), defaultValue.value);\n\t\t\tthis.archive$ = new BehaviorSubject<Map<string, T>>(this.archive);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject<Map<string, T>>(1);\n\t\t}\n\t}\n\n}\n","export class Optional<T> {\n\n\tstatic empty(): Optional<any> {\n\t\treturn new Optional<any>(null);\n\t}\n\n\tstatic of<U>(value: U): Optional<U> {\n\t\treturn new Optional<U>(value);\n\t}\n\n\tprivate static isEmpty(value: any): boolean {\n\t\treturn typeof value === 'undefined' || value === null;\n\t}\n\n\tprivate readonly value: T;\n\n\tprivate constructor(value: T) {\n\t\tif (!Optional.isEmpty(value) && Optional.isEmpty(value)) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t\tthis.value = value;\n\t\treturn this;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn Optional.isEmpty(this.value);\n\t}\n\n\tisPresent(): boolean {\n\t\treturn !this.isEmpty();\n\t}\n\n\tfilter(filterer: (value: T) => boolean): Optional<T> {\n\t\tif (this.isPresent() && filterer(this.value)) {\n\t\t\treturn this;\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\tforEach(callback: (value: T) => any): void {\n\t\tif (this.isPresent()) {\n\t\t\tcallback(this.value);\n\t\t}\n\t}\n\n\tmap<U>(mapper: (value: T) => U): Optional<U> {\n\t\tif (this.isPresent()) {\n\t\t\treturn new Optional<U>(mapper(this.value));\n\t\t}\n\t\treturn Optional.empty();\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tgetValueOrNullOrThrowError(): T {\n\t\treturn this.value;\n\t}\n\n\tgetOrThrow(): T {\n\t\tif (this.isEmpty()) {\n\t\t\tthrow new Error('Called getOrThrow on an empty Optional');\n\t\t}\n\t\treturn this.value;\n\t}\n\n\tgetOrElse<U extends T>(other: () => U): T {\n\t\tif (this.isPresent()) {\n\t\t\treturn this.value;\n\t\t}\n\t\treturn other();\n\t}\n\n\tifPresent(method: (value: T) => void): void {\n\t\tif (this.isPresent()) {\n\t\t\tmethod(this.value);\n\t\t}\n\t}\n\n\tifEmpty(method: () => void): void {\n\t\tif (this.isEmpty()) {\n\t\t\tmethod();\n\t\t}\n\t}\n\n\torElse<U extends T>(other: () => Optional<U>): Optional<T> {\n\t\tif (this.isPresent()) {\n\t\t\treturn this;\n\t\t}\n\t\treturn other();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nexport abstract class PersistAnemia {\n\n\tprivate readonly aggregateId: AggregateId;\n\n\tprotected constructor(uid: AggregateId) {\n\t\tthis.aggregateId = uid;\n\t}\n\n\tgetAggregateId(): AggregateId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.getAggregateId().toString();\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\n\nimport { PersistAnemia } from './persist-anemia';\nimport { Optional } from '../../common/optional';\n\n\nexport abstract class PersistStateStore<A extends PersistAnemia> {\n\n\tprivate readonly state: Map<string, A> = new Map();\n\n\tset(anemia: A): void {\n\t\tthis.state.set(anemia.getId(), anemia);\n\t}\n\n\tsetMany(anemias: Array<A>): void {\n\t\tanemias.forEach((anemia: A) => {\n\t\t\tthis.set(anemia);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<A> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<A> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { ReadModel } from '../../../domain/read/read-model';\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistReadModelStore<R extends ReadModel, A extends PersistAnemia> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(anemia: A): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): Array<R> {\n\t\treturn this.getAllValues();\n\t}\n\n\tprivate getAllValues(): Array<R> {\n\t\treturn this.stateStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((anemia: A) => this.toReadModel(anemia));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.toReadModel);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { PersistAnemia } from '../persist-anemia';\nimport { PersistStateStore } from '../persist-state.store';\nimport { Optional } from '../../../common/optional';\n\n\nexport abstract class PersistAggregateStore<D extends Aggregate, A extends PersistAnemia> extends AggregateStore<D> {\n\n\tprotected constructor(private readonly stateStore: PersistStateStore<A>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tabstract toAnemia(aggregate: D): A;\n\n\tabstract fromAnemia(anemia: A): D;\n\n\tsave(aggregate: D): void {\n\t\tthis.saveValue(aggregate);\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<D> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tprivate saveValue(aggregate: D): void {\n\n\t\tconst anemia = this.toAnemia(aggregate);\n\n\t\tthis.stateStore.set(anemia);\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<D> {\n\t\tconst optAnemia = this.stateStore.get(aggregateId);\n\n\t\treturn optAnemia.map(this.fromAnemia);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\n\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\nimport { AggregateStore } from '../../../domain/command/store/aggregate.store';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\nimport { InMemoryStore } from '../in-memory.store';\n\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryAggregateStore<T extends Aggregate> extends AggregateStore<T> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<T>,\n\t\t\t\t\t\t  private readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\t\tthis.aggregateStoreRegister.register(this);\n\t}\n\n\tsave(aggregate: T): void;\n\tsave(aggregates: Array<T>): void;\n\tsave(arg: T | Array<T>): void {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\targ.forEach((aggregate: T) => {\n\t\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t\t});\n\t\t} else {\n\t\t\tconst aggregate = arg;\n\n\t\t\tthis.inMemoryStore.set(aggregate);\n\t\t}\n\t}\n\n\tgetById(aggregateId: AggregateId): Optional<T> {\n\n\t\tconst optAggregate = this.inMemoryStore.get(aggregateId);\n\n\t\toptAggregate.ifPresent((a) => a.clearEvents());\n\n\t\treturn optAggregate;\n\t}\n\n\tgetAll(): Array<T> {\n\t\treturn this.inMemoryStore.getAll();\n\t}\n\n\tremove(aggregateId: AggregateId): void {\n\t\tthis.inMemoryStore.delete(aggregateId);\n\t}\n\n}\n","import { AggregateId } from '../../../domain/aggregate-id';\nimport { Aggregate } from '../../../domain/command/aggregate/aggregate';\n\nimport { ReadModel } from '../../../domain/read/read-model';\n\nimport { ReadModelStore } from '../../../domain/read/store/read-model.store';\n\nimport { InMemoryStore } from '../in-memory.store';\nimport { Optional } from '../../../common/optional';\n\nexport abstract class InMemoryReadModelStore<R extends ReadModel, D extends Aggregate> extends ReadModelStore<R> {\n\n\tprotected constructor(private readonly inMemoryStore: InMemoryStore<D>) {\n\t\tsuper();\n\t}\n\n\tabstract toReadModel(aggregate: D): R;\n\n\tgetById(aggregateId: AggregateId): Optional<R> {\n\t\treturn this.getValue(aggregateId);\n\t}\n\n\tgetAll(): ReadonlyArray<R> {\n\t\treturn this.inMemoryStore\n\t\t\t\t   .getAll()\n\t\t\t\t   .map((aggregate: D) => this.toReadModel(aggregate));\n\t}\n\n\tprivate getValue(aggregateId: AggregateId): Optional<R> {\n\t\tconst optAggregate: Optional<D> = this.inMemoryStore.get(aggregateId);\n\n\t\treturn optAggregate.map(this.toReadModel.bind(this));\n\t}\n\n}\n","import { AggregateId } from '../../domain/aggregate-id';\nimport { Aggregate } from '../../domain/command/aggregate/aggregate';\nimport { Optional } from '../../common/optional';\n\nexport abstract class InMemoryStore<S extends Aggregate> {\n\n\tprivate readonly state: Map<string, S> = new Map();\n\n\tset(aggregate: S): void {\n\t\tthis.state.set(aggregate.getId().toString(), aggregate);\n\t}\n\n\tsetMany(aggregates: Array<S>): void {\n\t\taggregates.forEach((aggregate: S) => {\n\t\t\tthis.set(aggregate);\n\t\t});\n\t}\n\n\tget(aggregateId: AggregateId): Optional<S> {\n\t\treturn Optional.of(this.state.get(aggregateId.toString()));\n\t}\n\n\tgetAll(): Array<S> {\n\t\treturn Array.from(this.state.values());\n\t}\n\n\thas(aggregateId: AggregateId): boolean {\n\t\treturn this.state.has(aggregateId.toString());\n\t}\n\n\tdelete(aggregateId: AggregateId): void {\n\t\tthis.state.delete(aggregateId.toString());\n\t}\n\n\tclear(): void {\n\t\tthis.state.clear();\n\t}\n\n}\n","export const COMMAND_LOGGER_ENABLED = 'GUI - COMMAND_LOGGER_ENABLED';\nexport const EVENT_LOGGER_ENABLED = 'GUI - EVENT_LOGGER_ENABLED';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { CommandBus } from '../../../domain/command/command.bus';\nimport { Command } from '../../../domain/command/command';\nimport { CommandLogger } from '../../../domain/command/command.logger';\n\n\n@Injectable()\nexport class ConsoleCommandLogger extends CommandLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(commandBus: CommandBus) {\n\t\tsuper();\n\n\t\tcommandBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tthis.log(command);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(command: Command): void {\n\t\tconsole.log(command.toString(), command);\n\t}\n\n}\n","import { CommandLogger } from '../../../domain/command/command.logger';\nimport { Command } from '../../../domain/command/command';\n\n\nexport class NoopCommandLogger extends CommandLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprotected print(command: Command): void {\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEventBus } from '../../../domain/event/domain-event.bus';\nimport { DomainEvent } from '../../../domain/event/domain-event';\nimport { AggregateStoreRegister } from '../../../domain/command/store/aggregate-store.register';\n\n\n@Injectable()\nexport class ConsoleEventLogger extends DomainEventLogger implements OnDestroy {\n\n\tprivate enabled = false;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(eventBus: DomainEventBus,\n\t\t\t\tprivate readonly aggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper();\n\n\t\teventBus\n\t\t\t.pipe(\n\t\t\t\tfilter(() => this.enabled),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((domainEvent: DomainEvent) => {\n\t\t\t\tthis.log(domainEvent);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tstart(): void {\n\t\tthis.enabled = true;\n\t}\n\n\tstop(): void {\n\t\tthis.enabled = false;\n\t}\n\n\tprotected print(domainEvent: DomainEvent): void {\n\t\tconst aggregateId = domainEvent.getAggregateId(),\n\t\t\taggregates = this.aggregateStoreRegister.captureAggregatesSnapshot(aggregateId);\n\n\t\tconsole.log(domainEvent.toString(), domainEvent, aggregates);\n\t}\n\n}\n","import { DomainEventLogger } from '../../../domain/event/domain-event.logger';\nimport { DomainEvent } from '../../../domain/event/domain-event';\n\nexport class NoopEventLogger extends DomainEventLogger {\n\n\tstart(): void {\n\t}\n\n\tstop(): void {\n\t}\n\n\tprint(event: DomainEvent): void {\n\t}\n\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { CommandLogger } from '../domain/command/command.logger';\n\n\n@Injectable()\nexport class HermesLoggersInitializer {\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate commandLogger: CommandLogger,\n\t\t\t\tprivate eventLogger: DomainEventLogger) {\n\t}\n\n\tstart(): void {\n\t\tthis.loggersStart();\n\t}\n\n\tstop(): void {\n\t\tthis.loggersStop();\n\t}\n\n\tprivate loggersStart(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.start();\n\t\t\tthis.eventLogger.start();\n\t\t}\n\t}\n\n\tprivate loggersStop(): void {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tthis.commandLogger.stop();\n\t\t\tthis.eventLogger.stop();\n\t\t}\n\t}\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { Command } from '../command';\nimport { AggregateCommandHandler } from './aggregate-command.handler';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../config/define';\nimport { AggregateFactory } from './aggregate.factory';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\n\n\nexport function aggregateCommandHandlerFactory<A extends Aggregate, C extends Command>(createAggregateCommandHandler: AggregateCommandHandler<A, C>, factoryArchive: AggregateFactoryArchive, aggregateRepositoryArchive: AggregateRepositoryArchive, aggregateName: string): AggregateCommandHandlerImpl<A, C> {\n\treturn new AggregateCommandHandlerImpl<A, C>(createAggregateCommandHandler, factoryArchive, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class AggregateCommandHandlerImpl<A extends Aggregate, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly createAggregateCommandHandler: AggregateCommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateFactoryArchive: AggregateFactoryArchive,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.createAggregateCommandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId();\n\n\t\tconst optFactory = this.aggregateFactoryArchive.get(this.aggregateType);\n\n\t\toptFactory.ifPresent((factory: AggregateFactory<A>) => {\n\n\t\t\tconst aggregate = factory.create(aggregateId);\n\n\t\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\t\toptRepository.ifPresent((repo: AggregateRepository<A>) => {\n\n\t\t\t\trepo.save(aggregate);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.createAggregateCommandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.createAggregateCommandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","/**\n * ngc for grid package for some reasons doesn't allow to use injection token\n */\nexport const AGGREGATE_COMMAND_HANDLERS = 'HERMES - AGGREGATE_COMMAND_HANDLERS';\n","import { AggregateFactory } from '../create-handler/aggregate.factory';\nimport { Aggregate } from '../aggregate/aggregate';\nimport { Optional } from '../../../common/optional';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../create-handler/aggregate-command.handler';\n\n\nexport class AggregateFactoryArchive {\n\n\tprivate readonly map = new Map();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, factory: AggregateFactory<Aggregate>): void {\n\n\t\tthis.map.set(key, factory);\n\t}\n\n\tget(key: string): Optional<AggregateFactory<Aggregate>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport class AggregateRepositoryArchive {\n\n\tprivate readonly map = new Map();\n\n\tconstructor() {\n\t}\n\n\tadd(key: string, repository: AggregateRepository<Aggregate>): void {\n\n\t\tthis.map.set(key, repository);\n\t}\n\n\tget(key: string): Optional<AggregateRepository<Aggregate>> {\n\t\treturn Optional.of(this.map.get(key));\n\t}\n}\n\nexport interface AggregateConfig {\n\n\trepository: AggregateRepository<Aggregate>;\n\n\tfactory: AggregateFactory<Aggregate>;\n\n\tkey: string;\n\n\tcreateHandler: AggregateCommandHandler<any, any>;\n\n\thandlers?: Array<any>\n\n}\n","export const aggregateDefinitionToken = 'Hermes - aggregateDefinitionToken';\n","import { NgModule, OnDestroy } from '@angular/core';\n\n@NgModule({})\nexport class HermesDomainModule implements OnDestroy {\n\n\tngOnDestroy() {\n\t}\n\n}\n","import { Aggregate } from '../aggregate/aggregate';\nimport { Command } from '../command';\nimport { AggregateRepositoryArchive } from '../config/define';\nimport { AggregateRepository } from '../aggregate/aggregate-repository';\nimport { CommandHandler } from './command.handler';\n\n\nexport function commandHandlerFactory<A extends Aggregate, C extends Command>(\n\tcommandHandler: CommandHandler<A, C>,\n\taggregateRepositoryArchive: AggregateRepositoryArchive,\n\taggregateName: string\n): CommandHandlerImpl<A, C> {\n\treturn new CommandHandlerImpl<A, C>(commandHandler, aggregateRepositoryArchive, aggregateName);\n}\n\nexport class CommandHandlerImpl<A extends Aggregate, C extends Command> {\n\n\tprivate readonly commandType: string;\n\n\tconstructor(private readonly commandHandler: CommandHandler<A, C>,\n\t\t\t\tprivate readonly aggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tprivate readonly aggregateType: string) {\n\t\tthis.commandType = this.createCommandInstance().getMessageType();\n\t}\n\n\tpublishDomainEvents(aggregate: A, command: C): void {\n\t\tthis.commandHandler.publishDomainEvents(aggregate, command);\n\t}\n\n\thandleCommand(command: C) {\n\n\t\tconst aggregateId = command.getAggregateId();\n\n\t\tconst optRepository = this.aggregateRepositoryArchive.get(this.aggregateType);\n\n\t\toptRepository.ifPresent((repo: AggregateRepository<A>) => {\n\n\t\t\tconst optAggregate = repo.getById(aggregateId);\n\n\t\t\toptAggregate.ifPresent((aggregate: A) => {\n\n\t\t\t\tthis.commandHandler.handleAggregate(aggregate, command);\n\n\t\t\t\tthis.publishDomainEvents(aggregate, command);\n\t\t\t});\n\t\t});\n\t}\n\n\tforCommand(command: C): boolean {\n\t\treturn this.commandType === command.getMessageType();\n\t}\n\n\tprivate createCommandInstance(): C {\n\t\tconst args: Array<void> = [],\n\t\t\targumentLength = this.commandHandler.forCommand().constructor.length;\n\n\t\targs.fill(undefined, 0, argumentLength);\n\n\t\treturn (new (this.commandHandler.forCommand() as any)(...args));\n\t}\n\n}\n","import { Inject, Injector, ModuleWithProviders, NgModule, OnDestroy, Optional, Provider, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Command\n */\nimport { Aggregate } from '../domain/command/aggregate/aggregate';\nimport { Command } from '../domain/command/command';\nimport { CommandBus } from '../domain/command/command.bus';\nimport { CommandDispatcher } from '../domain/command/command.dispatcher';\nimport { CommandLogger } from '../domain/command/command.logger';\nimport { CommandStream } from '../domain/command/command.stream';\nimport { FILTERED_COMMAND_STREAM } from '../domain/command/filtered-command-stream';\nimport { AggregateStoreRegister } from '../domain/command/store/aggregate-store.register';\nimport { DomainEvent } from '../domain/event/domain-event';\nimport { DOMAIN_EVENT_HANDLERS } from '../domain/event/domain-event-handlers';\nimport { DomainEventBus } from '../domain/event/domain-event.bus';\nimport { DomainEventPublisher } from '../domain/event/domain-event.publisher';\nimport { DomainEventHandler } from '../domain/event/domain-event.handler';\nimport { DomainEventLogger } from '../domain/event/domain-event.logger';\nimport { DomainEventStore } from '../domain/event/domain-event.store';\nimport { DomainEventStream } from '../domain/event/domain-event.stream';\n/**\n * APP\n */\nimport { HermesModuleConfig } from './hermes-module-config';\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED } from '../domain/hermes-tokens';\nimport { HermesApi } from '../ui-api/hermes-api';\n/**\n * Infrastructure\n */\nimport { ConsoleCommandLogger } from '../infrastructure/logger/command/console.command.logger';\nimport { NoopCommandLogger } from '../infrastructure/logger/command/noop.command.logger';\nimport { ConsoleEventLogger } from '../infrastructure/logger/event/console.event.logger';\nimport { NoopEventLogger } from '../infrastructure/logger/event/noop.event.logger';\nimport { RandomStringGenerator } from '../common/random-string.generator';\nimport { HermesLoggersInitializer } from './hermes.loggers.initializer';\nimport { aggregateCommandHandlerFactory, AggregateCommandHandlerImpl } from '../domain/command/create-handler/aggregate-command-handler.impl';\nimport { AGGREGATE_COMMAND_HANDLERS } from '../domain/command/create-handler/aggregate-command-handlers.token';\nimport { AggregateFactoryArchive, AggregateRepositoryArchive } from '../domain/command/config/define';\nimport { AggregateFactory } from '../domain/command/create-handler/aggregate.factory';\nimport { aggregateDefinitionToken } from '../domain/command/config/aggregate-definition.token';\nimport { AggregateDefinition } from '../domain/command/config/aggregate-definition';\nimport { AggregateRepository } from '../domain/command/aggregate/aggregate-repository';\nimport { AggregateCommandHandler } from '../domain/command/create-handler/aggregate-command.handler';\nimport { HermesDomainModule } from './hermes.domain.module';\nimport { COMMAND_HANDLERS } from '../domain/command/handler/command-handlers';\nimport { commandHandlerFactory, CommandHandlerImpl } from '../domain/command/handler/command-handler-impl';\nimport { CommandHandler } from '../domain/command/handler/command.handler';\n\n\nconst hermesProviders = [\n\tRandomStringGenerator,\n\t{ provide: FILTERED_COMMAND_STREAM, useExisting: CommandStream },\n\tCommandBus,\n\tCommandStream,\n\tCommandDispatcher,\n\tAggregateStoreRegister,\n\n\tDomainEventBus,\n\tDomainEventStream,\n\tDomainEventPublisher,\n\tDomainEventStore,\n\n\tHermesApi\n];\n\nconst providers = [\n\t{ provide: EVENT_LOGGER_ENABLED, useValue: true },\n\t{ provide: COMMAND_LOGGER_ENABLED, useValue: true },\n\t{ provide: CommandLogger, useFactory: commandLoggerFactory, deps: [COMMAND_LOGGER_ENABLED, ConsoleCommandLogger, NoopCommandLogger] },\n\t{ provide: DomainEventLogger, useFactory: eventLoggerFactory, deps: [EVENT_LOGGER_ENABLED, ConsoleEventLogger, NoopEventLogger] },\n\tConsoleCommandLogger,\n\tNoopCommandLogger,\n\tNoopEventLogger,\n\tConsoleEventLogger,\n\tHermesLoggersInitializer,\n\tAggregateFactoryArchive,\n\tAggregateRepositoryArchive,\n\t...hermesProviders\n];\n\nexport function commandLoggerFactory(enabled: boolean, consoleCommandLogger: ConsoleCommandLogger, noopCommandLogger: NoopCommandLogger) {\n\n\tif (enabled) {\n\t\treturn consoleCommandLogger;\n\t} else {\n\t\treturn noopCommandLogger;\n\t}\n}\n\nexport function eventLoggerFactory(enabled: boolean, consoleEventLogger: ConsoleEventLogger, noopEventLogger: NoopEventLogger) {\n\n\tif (enabled) {\n\t\treturn consoleEventLogger;\n\t} else {\n\t\treturn noopEventLogger;\n\t}\n}\n\n@NgModule({\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: providers\n})\nexport class HermesModule implements OnDestroy {\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tstatic defineAggregate<A extends Aggregate, C extends Command>(aggregateKey: string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   factory: Type<AggregateFactory<A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   repository: Type<AggregateRepository<A>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   createHandler: Type<AggregateCommandHandler<A, C>>,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   handlers: Array<Provider>): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesDomainModule,\n\t\t\tproviders: [{\n\t\t\t\tprovide: aggregateDefinitionToken,\n\t\t\t\tmulti: true,\n\t\t\t\tuseValue: {\n\t\t\t\t\tkey: aggregateKey,\n\t\t\t\t\tfactory: factory,\n\t\t\t\t\trepository: repository\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tprovide: aggregateKey,\n\t\t\t\tuseValue: aggregateKey\n\t\t\t},\n\t\t\t\tfactory,\n\t\t\t\trepository,\n\t\t\t\t...HermesModule.registerCreateCommandHandler(createHandler, aggregateKey),\n\t\t\t\t...handlers\n\t\t\t]\n\t\t};\n\t}\n\n\tstatic withConfig(config: HermesModuleConfig = { loggers: false }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: HermesModule,\n\t\t\tproviders: providers\n\t\t};\n\t}\n\n\tstatic registerCommandHandler<A extends Aggregate, C extends Command>(\n\t\tcommandHandlerType: Type<CommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: commandHandlerType,\n\t\t\t\tuseClass: commandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: COMMAND_HANDLERS,\n\t\t\t\tuseFactory: commandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcommandHandlerType,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}];\n\t}\n\n\tprivate static registerCreateCommandHandler<A extends Aggregate, C extends Command>(\n\t\tcreateCommandHandlerType: Type<AggregateCommandHandler<A, C>>,\n\t\taggregateName: string): Array<Provider> {\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tprovide: createCommandHandlerType,\n\t\t\t\tuseClass: createCommandHandlerType\n\t\t\t}, {\n\t\t\t\tprovide: AGGREGATE_COMMAND_HANDLERS,\n\t\t\t\tuseFactory: aggregateCommandHandlerFactory,\n\t\t\t\tmulti: true,\n\t\t\t\tdeps: [\n\t\t\t\t\tcreateCommandHandlerType,\n\t\t\t\t\tAggregateFactoryArchive,\n\t\t\t\t\tAggregateRepositoryArchive,\n\t\t\t\t\taggregateName\n\t\t\t\t]\n\t\t\t}\n\t\t];\n\t}\n\n\tconstructor(@Optional() @Inject(DOMAIN_EVENT_HANDLERS) eventHandlers: Array<DomainEventHandler>,\n\t\t\t\t@Optional() @Inject(AGGREGATE_COMMAND_HANDLERS) aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>,\n\t\t\t\t@Optional() @Inject(COMMAND_HANDLERS) handlers: Array<CommandHandlerImpl<Aggregate, Command>>,\n\t\t\t\t@Optional() @Inject(aggregateDefinitionToken) definedAggregate: Array<AggregateDefinition>,\n\t\t\t\tinjector: Injector,\n\t\t\t\taggregateFactoryArchive: AggregateFactoryArchive,\n\t\t\t\taggregateRepositoryArchive: AggregateRepositoryArchive,\n\t\t\t\tcommandBus: CommandBus,\n\t\t\t\tdomainEventBus: DomainEventBus,\n\t\t\t\tprivate hermesLoggersInitializer: HermesLoggersInitializer,\n\t\t\t\tprivate hermesApi: HermesApi) { // HermesApi initialization\n\n\t\tthis.hermesLoggersInitializer.start();\n\n\t\tthis.checkNullCommand(commandBus, handlers, aggregateCommandHandlers);\n\t\tthis.checkCommandHandlerIsCollection(handlers);\n\n\t\tif (definedAggregate) {\n\t\t\tdefinedAggregate.forEach((def: AggregateDefinition) => {\n\n\t\t\t\tconst factory = injector.get(def.factory),\n\t\t\t\t\trepository = injector.get(def.repository);\n\n\t\t\t\taggregateFactoryArchive.add(def.key, factory);\n\t\t\t\taggregateRepositoryArchive.add(def.key, repository);\n\t\t\t});\n\t\t}\n\n\t\tif (aggregateCommandHandlers) {\n\n\t\t\taggregateCommandHandlers.forEach((handler: AggregateCommandHandlerImpl<Aggregate, Command>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCreateAggregateHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (handlers) {\n\n\t\t\thandlers.forEach((handler: CommandHandlerImpl<Aggregate, Command>) => {\n\t\t\t\tcommandBus\n\t\t\t\t\t.ofCommandHandler(handler)\n\t\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t\t.subscribe((command: Command) => {\n\t\t\t\t\t\thandler.handleCommand(command);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (eventHandlers) {\n\t\t\tdomainEventBus\n\t\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\t\teventHandlers.forEach((handler: DomainEventHandler) => {\n\t\t\t\t\t\thandler.handle(event);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\n\t\tthis.hermesLoggersInitializer.stop();\n\t}\n\n\tprivate checkNullCommand(commandBus: CommandBus, commandHandlers: Array<CommandHandlerImpl<Aggregate, Command>>, aggregateCommandHandlers: Array<AggregateCommandHandlerImpl<Aggregate, Command>>): void {\n\t\tcommandBus\n\t\t\t.ofNullHandler(commandHandlers, aggregateCommandHandlers)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((command: Command) => {\n\t\t\t\tconsole.log(`Command ${command.toString()} was not intercepted by any CommandHandler.`);\n\t\t\t});\n\t}\n\n\tprivate checkCommandHandlerIsCollection(commandHandlers: Array<CommandHandlerImpl<Aggregate, Command>>): void {\n\t\tif (commandHandlers && !Array.isArray(commandHandlers)) {\n\t\t\tconsole.log(`You might provided commandHandler without specifying \"multi: true\".`);\n\t\t}\n\t}\n\n}\n","export const COMMAND_HANDLERS = 'HERMES - COMMAND_HANDLERS_TOKEN';\n","export function RootAggregate(target: Function) {\n}\n\nexport function Entity(target: Function) {\n}\n\nexport function ValueObject(target: Function) {\n}\n","import { AggregateEvent } from '../domain/command/aggregate/aggregate-event';\nimport { DomainEvent } from '../domain/event/domain-event';\n\ndeclare var expect: any;\n\nexport function assertDomainEvents(actualEvents: ReadonlyArray<DomainEvent>, expectedEvents: Array<DomainEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length);\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: DomainEvent) => {\n\t\t\treturn event.equalsByType(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t\texpect(actualEvent.equalsByType(expectedEvent)).toBeTruthy('Event type should be equal');\n\t\t// expect(actualEvent.aggregateId).toEqual(expectedEvent.aggregateId, 'Events aggregateId should be the same');\n\t\texpect(actualEvent.getPayload()).toEqual(expectedEvent.getPayload(), 'Events payload should be the same');\n\t}\n\n}\n\nexport function assertAggregateEvents(actualEvents: ReadonlyArray<AggregateEvent>, expectedEvents: Array<AggregateEvent>): void {\n\n\texpect(actualEvents.length).toEqual(expectedEvents.length, 'Aggregate events');\n\n\tfor (let actualEvent of actualEvents) {\n\n\t\tconst expectedEvent = expectedEvents.find((event: AggregateEvent) => {\n\t\t\treturn event.equals(actualEvent);\n\t\t});\n\n\t\texpect(expectedEvent).toBeDefined();\n\t}\n}\n","import { hermesApi } from './hermes-api';\n\ndeclare var window: any;\n\nexport function enableHermesLoggers(domainName?: string): void {\n\n\tif (domainName) {\n\t\twindow[hermesApi].domain = domainName;\n\t}\n\n\twindow[hermesApi].loggers = true;\n}\n\nexport function disableHermesLoggers(): void {\n\n\tdelete window[hermesApi].domain;\n\n\twindow[hermesApi].loggers = false;\n}\n","import { StaticProvider, Type } from '@angular/core';\n\nimport { DOMAIN_EVENT_HANDLERS } from './event/domain-event-handlers';\nimport { DomainEventHandler } from './event/domain-event.handler';\n\nexport function provideEventHandlers(handlers: Array<Type<DomainEventHandler>>): Array<StaticProvider> {\n\treturn handlers.map((handler: Type<DomainEventHandler>) => {\n\t\treturn {\n\t\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\t\tuseClass: handler,\n\t\t\tmulti: true\n\t\t};\n\t}) as any;\n}\n"]}