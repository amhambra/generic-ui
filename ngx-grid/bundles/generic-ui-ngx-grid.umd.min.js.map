{"version":3,"sources":["../../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/ngx-grid/gui/grid/app/grid.api.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/data-type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-type.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-aggregation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/cell-view.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-view.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-theme.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/theme/grid.theme.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/app/schema/row-coloring.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/coloring/grid.row-coloring.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-gateway.ts","ng://@generic-ui/ngx-grid/common/cdk/generic-builder.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-parent-component.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid-id.generator.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid.register.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/console/grid.console.api.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/config/structure.column-config.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/config/structure.column-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-fabric.imports.ts","ng://@generic-ui/ngx-grid/common/cdk/reactive.ts","ng://@generic-ui/ngx-grid/common/cdk/smart-component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/query/paging.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/global-structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/app/paging/paging-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/app/paging/paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/query/origin/structure.source-origin.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/app/source/source-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/query/paging.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/navigator/structure-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/select/structure-paging-select.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/stats/structure-paging-stats.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/navigator/structure-alternative-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/pages/structure-alternative-paging-pages.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.module.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.pipe.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/summary/structure.info-panel.ts","ng://@generic-ui/ngx-grid/common/cdk/reactive.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/summary/structure.summary-enabled.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/summary/structure.summary.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/summary/structure.summary.module.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/view/view-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/changed-value.emitter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/state/edit.event-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/edit-communication.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/template/input-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/template/number-edit-template.component.ts","ng://@generic-ui/ngx-grid/common/cdk/decorators.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/template/string-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/edit-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/template/boolean-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/composition/column-query.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/view/function-view.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-container-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/sort-status.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/view.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-entity.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/template/template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/view/view-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/view/view-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/edit-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/edit/edit-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/definition/cell-template-with-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/definition/cell-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/definition/cell-template-with-accessor.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/definition/column-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/definition/column-definition.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/composition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/query/in-memory.composition.query-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/query/composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/composition-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/query/in-memory.composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.events.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition-event.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/colum-field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/api/composition/composition.event-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/global-composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/api/composition/composition.query-service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/api/composition/composition.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/sort-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/change-sort.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/fields-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/column.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/composition-fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/api/composition/composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/api/composition/composition.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-id.generator.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/pagesize/pagesize-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/query/schema-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/app/schema/schema-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/app/schema/schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-row-coloring.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/app/formation/formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/query/formation-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/app/formation/formation-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/set-sorting.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command.ts","ng://@generic-ui/ngx-grid/lib/structure/app/structure/structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/app/structure/structure-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.params.ts","ng://@generic-ui/ngx-grid/lib/structure/app/source/source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-query.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/local-providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/schema/schema-css-class.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.store.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.edit-mode.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-component-token.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.state.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/gateway/structure.gateway.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/pagesize-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/app/paging/paging-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/app/source/event/editem-item.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/app/source/event/source-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/selected-row-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/app/formation/formation-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/columns/structure-header-columns.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/filter/structure.filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/filter/structure.quick-filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/structure-header.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure-header-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure.header-filter.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-content.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/entity.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/row/structure-row.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/cell/structure.cell.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-container.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/search/structure.search.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/quick-filters/structure.quick-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/searching/structure.searching.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/search/structure-search.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/app/structure-tokens.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/blueprint/structure.blueprint.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.ui-events-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/origin-item-entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/entity.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/query/selected-rows/selected-rows-list.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/query/formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/query/schema-css-class.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/query/schema.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/query/schema-column-header.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/paging.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/query/source.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/source.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/vertical-formation/vertical-formation.read-model.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/vertical-formation/vertical-formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/structure.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/structure.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/query/in-memory.structure.query-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/structure-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/set-source-loading.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/schema-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/schema-theme-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/schema-vertical-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/schema-top-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/schema-bottom-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/row-coloring-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/paging-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/formation-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/origin-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.filter-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/query/in-memory.structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/structure.origin-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source-coordinator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source-coordinator.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-range.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculators.token.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/structure.filter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.container.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.container-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-id.generator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/unknown-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/number-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/string-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/boolean-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/date-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field.container.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-container.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/column-header.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/structure.sorter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.container.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/sorting-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/set-sorting.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.config-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.config-searching-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.config-quick-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/structure.source.domain-event.publisher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.aggregation-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/filter/structure.config-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/searching/structure.config-searching-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/query/filter/structure.config-quick-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-model.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/app/paging/paging.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/app/schema/schema.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/app/formation/formation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/query/origin/structure.origin-changed.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/query/source.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/app/source/source.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/app/structure/structure.providers.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/console.logger.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.module.ts","ng://@generic-ui/ngx-grid/gui/grid/app/grid.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","UNKNOWN","NUMBER","STRING","BOOLEAN","DATE","CUSTOM","TEXT","CHIP","LINK","IMAGE","BOLD","ITALIC","CHECKBOX","FABRIC","MATERIAL","LIGHT","DARK","NONE","EVEN","ODD","GridColumnTypeConverter","convertType","type","convertTypeString","convertTypeEnum","enumType","GuiDataType","DataType","toLocaleLowerCase","COUNT","DISTINCT","SUM","AVERAGE","MIN","MAX","MEDIAN","TRUTHY","FALSY","EARLIEST","LATEST","GridColumnAggregationConverter","convert","aggregationConfig","columnAggregationConfig","undefined","enabled","aggregationTypes","convertAggregationTypes","configAggregationTypes","_this","forEach","aggregationType","convertAggregationType","AggregationType","FUNCTION","GridColumnViewConverter","view","convertString","convertEnum","CellView","GuiCellView","GridColumnConverter","columnTypeConverter","columnAggregationConverter","columnViewConverter","config","map","convertColumn","guiColumn","columnConfig","header","field","width","aggregation","GridThemeConverter","theme","SchemaTheme","GuiTheme","GridRowColoringConverter","rowColoring","RowColoring","GuiRowColoring","GridGateway","source","columns","pageChanged","EventEmitter","pageSizeChanged","itemsSelected","columnsChanged","containerWidthChanged","sourceEdited","cellEditEntered","cellEditCanceled","cellEditSubmitted","gridColumnConverter","gridThemeConverter","gridRowColoringConverter","ngOnChanges","changes","currentValue","columnsConfig","themeConfig","rowColoringConfig","onPageChange","page","emit","onPageSizeChange","pageSize","onItemSelect","item","onColumnsChange","onContainerWidthChange","containerWidth","onSourceEdit","onCellEditEnter","onCellEditSubmit","onCellEditCancel","Input","Output","GenericBuilder","build","buildObject","StructurePagingDefinitionBuilder","_super","tslib_1.__extends","StructurePagingDefinition","withEnabled","StructurePagingDefinitionDefaultBuilder","defaultEnabled","isEnabled","Builder","DefaultBuilder","StructureDefinitionBuilder","headerEnabled","bottomPaging","topPaging","border","StructureDefinition","withHeader","withBottomPaging","paging","withTopPaging","withBorder","StructureDefinitionDefaultBuilder","defaultHeaderEnabled","defaultBottomPaging","defaultTopPaging","isHeaderEnabled","isBorderEnabled","getBottomPaging","getTopPaging","gridStructureDefinition","gridProviders","provide","useValue","structureParentComponent","InjectionToken","GridIdGenerator","generateId","index","PREFIX","Injectable","GridRegister","gridMap","Map","register","gridId","component","structureId","set","unregister","delete","getValues","get","GridConsoleApiProvider","gridComponent","changeColumnHeaderTop","columnHeaderTop","detectChanges","GridComponent","platformId","elementRef","changeDetectorRef","gridRegister","gridIdGenerator","ngOnInit","localGridId","exposeGridId","structureRef","getStructureId","isPlatformBrowser","window","gridConsoleConfig","ngOnDestroy","getElementRef","getGridId","nativeElement","setAttribute","Component","args","selector","template","providers","useExisting","host","[class]","[style.height]","encapsulation","ViewEncapsulation","None","Inject","PLATFORM_ID","ElementRef","ChangeDetectorRef","ViewChild","static","StructureColumnConfigComponent","StructureColumnConfigService","dialogService","open","close","FabricDialogService","fabricImports","FabricBadgeModule","FabricButtonModule","FabricButtonGroupModule","FabricCheckboxModule","FabricChipModule","FabricRadioButtonModule","FabricRadioGroupModule","FabricProgressBarModule","FabricProgressSpinnerModule","FabricSelectModule","FabricSpinnerModule","FabricToggleButtonModule","FabricInputModule","FabricDialogModule","Reactive","unsubscribe$","Subject","unsubscribe","complete","takeUntil","SmartComponent","PagingRepository","structureRepository","select","pipe","filter","structure","getId","toString","getPaging","StructureRepository","StructureId","id","AggregateId","globalStructureId","PagingQueryService","pagingRepository","selectOne","take","SetPagingCommand","payload","Command","ChangePagesizeCommand","NextPageCommand","PrevPageCommand","PagingDispatcher","commandDispatcher","setPaging","dispatch","changePageSize","nextPage","prevPage","CommandDispatcher","PagingCommandService","pagingDispatcher","enable","disable","goToPage","pageNumber","currentPage","changePagerTop","pagerTop","changePagerBottom","pagerBottom","StructureSourceOriginRepository","origin","origin$","ReplaySubject","setOrigin","selectOrigin","asObservable","distinctUntilChanged","SourceQueryService","structureSourceOriginRepository","getEntities","ents1","ents2","flag","ent","equals","selectOriginSize","selectLoading","getSource","isLoading","StructurePagingComponent","pagingQueryService","pagingCommandService","sourceQueryService","alternativeDisplay","subscribe","size","sourceSize","changeDetection","ChangeDetectionStrategy","OnPush","Paging","pageSizes","getPage","getPageSize","getPageSizes","isPagerTop","isPagerBottom","isNextPageDisabled","Math","ceil","isPrevPageDisabled","calculateStart","firstItem","calculateEnd","lastItem","calculateVisiblePages","numberOfVisiblePages","sample","start","slice","StructurePagingNavigatorComponent","nextPageChanged","prevPageChanged","prevDisabled","nextDisabled","calculatePrev","calculateNext","StructurePagingSelectComponent","StructurePagingStatsComponent","calculate","firstItemIndex","lastItemIndex","isSourceNotEmpty","StructureAlternativePagingNavigatorComponent","firstPage","lastPage","numberOfPages","StructureAlternativePagingPagesComponent","pages","activePage","StructurePagingModule","NgModule","imports","CommonModule","FabricModule","declarations","exports","NumberFormatterPipe","transform","number","replace","Pipe","name","NumberFormatterModule","StructureInfoPanel","ReactiveArchive","archive$","BehaviorSubject","StructureSummaryEnabledArchive","StructureSummaryComponent","structureSummaryEnabledArchive","dialog","infoPanel","originSize","openInfo","StructureSummaryModule","entryComponents","ViewTemplatesComponent","getTemplate","textTemplate","chipTemplate","linkTemplate","imageTemplate","checkboxTemplate","boldTemplate","italicTemplate","customTemplate","functionTemplate","read","TemplateRef","ChangedValueEmitter","subject$","SUBMIT","BLUR","CANCEL","EditCommunicationComponent","ENTER_KEY_CODE","ESC_KEY_CODE","submit","emitStatus","EditEventType","cancel","status","InputEditTemplateComponent","formBuilder","filterFieldName","filterForm","group","_a","setValue","observeChanges","ngAfterViewInit","inputElement","inputRef","focusField","emitValueChange","fromEvent","keyup$","keyCode","focus","controls","valueChanges","NumberEditTemplateComponent","fb","FormBuilder","Override","container","getPrototypeOf","Error","StringEditTemplateComponent","setSelectionRange","tslib_1.__decorate","EditTemplatesComponent","dataType","stringTemplate","numberTemplate","booleanTemplate","emptyTemplate","BooleanEditTemplateComponent","checkboxRef","querySelector","debounceTime","toggle","changed","ColumnQueryComponent","ContentChild","FunctionViewComponent","sanitizer","safeHTML","bypassSecurityTrustHtml","element","DomSanitizer","PERCENTAGE","AUTO","ColumnWidth","baseWidth","setWidthAndType","getWidth","getColumnType","isTypePercentage","ColumnWidthType","isTypeAuto","isTypeNumber","setWidth","isPercentage","percentageToNumber","isStringNumber","clone","widthAsNumber","Number","isNaN","CompositionContainerWidthCalculator","MIN_COLUMN_WIDTH","calculateMinWidth","columnWidths","segregateColumns","staticColumns","fluidColumns","sum","columnWidth","CompositionWidthCalculator","adjustMinimalWidth","newColumns","column","evenWidth_1","adjustPercentageWidth","_b","tslib_1.__values","_c","adjustAutoWidth","leftWidth","autoColumns","splitWidth","autoColumns_1","autoColumns_1_1","ColumnWidthCollection","baseColumnWidths","setContainerWidth","getColumns","getColumnsWidth","getWidths","getMinWidth","setColumns","calculator","ASC","DESC","ViewEntity","columnView","templateFunction","getCellView","getTemplateFunction","ColumnEntity","columnField","sortStatus","SortStatus","getField","getHeader","getDataType","setSortStatus","setView","ColumnEntityFactory","data","isArray","createColumns","createColumn","params","getColumn","columnEntity","convertWidth","columnEntities","ColumnsSetAggregateEvent","aggregateId","AggregateEvent","CompositionWidthSetAggregateEvent","CompositionContainerWidthSetAggregateEvent","compositionId","CompositionResizeWidthSetAggregateEvent","CompositionAggregate","columnsParams","resizeWidth","columnWidthCollection","activeColumns","resizeWidthEnabled","columnFactory","param","baseParams","baseColumns","isResizeEnabled","isReady","composition","widths","updateColumnsWidths","setActiveColumnsWithEvent","setContainerWidthWithEvent","recalculateColumns","setWidthWithEvent","setResizeWidthWithEvent","setResizeWidth","changeSort","sortParams","fieldId","direction","this_1","sortParams_1","sortParams_1_1","addEvent","minWidth","Aggregate","InMemoryCompositionStore","InMemoryStore","InMemoryCompositionAggregateStore","inMemoryCompositionStore","aggregateStoreRegister","getById","AggregateStoreRegister","InMemoryAggregateStore","InMemoryCompositionAggregateRepository","inMemoryCompositionAggregateStore","save","aggregate","CompositionAggregateRepository","TemplateFactory","templatesComponentDefinition","componentFactoryResolver","templates","templatesComponent","createTemplatesComponent","getTemplates","destroy","componentFactory","resolveComponentFactory","injector","Injector","generateMap","generateMapKeys","findAndSetTemplate","dt","instance","ViewTemplateFactory","keys","ComponentFactoryResolver","ViewTemplateRepository","columnTemplateFactory","findTemplate","EditTemplateFactory","EditTemplateRepository","editTemplateFactory","CellTemplateWithContext","viewTemplate","editTemplate","context","getFieldId","getSortStatus","CellContext","FieldId","CellTemplateWithAccessor","editable","accessor","columnFieldId","ColumnDefinition","sort","setHeader","setField","getHeaderCellTemplateWithContext","headerCellContext","headerTemplate","getContentCellTemplateWithAccessor","cellTemplate","entity","getAccessor","ColumnDefinitionFactory","viewTemplateRepository","editTemplateRepository","columnDef","findViewTemplate","findEditTemplate","Composition","uid","ready","getHeaderColumns","getTemplateColumns","getContainerWidth","isResizeWidthEnabled","equalsByColumns","ReadModel","CompositionConverter","columnDefinitionFactory","columnDefs","convertColumnsToColumnDef","InMemoryCompositionQueryStore","compositionConverter","toReadModel","InMemoryReadModelStore","CompositionInitedEvent","DomainEvent","CompositionResizeWidthSetEvent","ColumnsSetEvent","CompositionContainerWidthSetEvent","CompositionWidthSetEvent","CompositionChangeSortStatusEvent","getCompositionId","InMemoryCompositionRepository","domainEventBus","inMemoryCompositionQueryStore","composition$","ofEvent","event","DomainEventBus","CompositionRepository","inMemoryCompositionCommandProviders","useClass","inMemoryCompositionQueryProviders","inMemoryCompositionProviders","CompositionAggregateFactory","InitCompositionCommand","SetColumnsCommand","getParams","SetCompositionWidthCommand","SetCompositionContainerWidthCommand","SetCompositionResizeWidthCommand","CompositionChangeSortStatusCommand","getSortParams","CompositionDispatcher","init","InitCompositionCommandHandler","compositionAggregateRepository","compositionAggregateFactory","domainEventPublisher","handle","command","compositionAggregate","DomainEventPublisher","CommandHandler","CompositionAggregateEvents","CompositionEventConverter","arg","convertEvents","convertEvent","aggregateEvents","aggregateEvent","getType","getAggregateId","SetColumnsCommandHandler","compositionEventConverter","setColumnsParams","publishEvents","events","getEvents","domainEvents","publish","SetCompositionWidthCommandHandler","columnConverter","SetCompositionResizeWidthCommandHandler","SetCompositionContainerWidthCommandHandler","publishAggregateEvents","CompositionChangeSortStatusCommandHandler","ColumnField","getValue","ColumnFieldFactory","CompositionEventService","selectColumnsChanged","selectWidthChanged","selectContainerWidthChanged","getPayload","CompositionId","globalCompositionId","CompositionQueryService","compositionRepository","selectWidth","selectContainerWidth","selectWidthForEachColumn","selectHeaderColumns","selectTemplateColumns","selectResizeWidth","CompositionCommandService","compositionDispatcher","SortToggledEvent","directions","getDirections","ColumnFieldId","ChangeSortParams","CompositionChangeSortStatusEventHandler","dir","DomainEventHandler","FieldsInitedEvent","fields","getFields","ColumnParams","CompositionFieldsInitedEventHandler","columnFieldFactory","fields_1","columnFieldIds_1","getAccessorMethod","commandProviders","COMMAND_HANDLERS","multi","queryProviders","DOMAIN_EVENT_HANDLERS","compositionProviders","components","exportDeclarations","CompositionModule","ReactiveFormsModule","FabricChipComponent","FabricCheckboxComponent","FabricButtonComponent","FabricInputComponent","StructureIdGenerator","increment","PageChangedAggregateEvent","PagesizeChangedAggregateEvent","PagingAggregate","logger","default","fromConfig","defaultPaginDefinition","isDisabled","change","pagingConfig","warn","find","ps","setPage","setPageSize","PagingAggregateFactory","createDefault","createFromConfig","Logger","LocalPagingCommandService","aggregateFactory","setDefaultPaging","defaultPaggingAggregate","LocalPagingQueryService","Observable","SetSchemaCommand","height","SetSchemaVerticalGridCommand","SetSchemaHorizontalGridCommand","SetSchemaThemeCommand","SetRowColoringCommand","coloring","ChangeSchemaTopHeaderCommand","ChangeSchemaBottomHeaderCommand","SchemaDispatcher","setSchema","changeVerticalGrid","changeHorizontalGrid","setTheme","setRowColoring","changeTopHeader","changeBottomHeader","SchemaRepository","getSchema","SchemaQueryService","schemaRepository","selectHeight","schema","getHeight","selectContainerHeight","getContainerHeight","selectCssClasses","getCssClasses","selectColumnHeader","getColumnHeader","SchemaCommandService","schemaDispatcher","schemaQueryService","setHeight","toggleVerticalGrid","css","verticalGrid","grid","toggleHorizontalGrid","horizontalGrid","toggleTopHeader","columnHeader","isTopHeaderEnabled","toggleBottomHeader","isBottomHeaderEnabled","LocalSchemaCommandService","setDefaultSchema","MAX_SAFE_INTEGER","LocalSchemaQueryService","SetFormationCommand","ToggleSelectedRowCommand","selectedRow","FormationDispatcher","setDefault","toggleSelectedRow","FormationCommandService","formationDispatcher","setDefaultFormation","LocalFormationCommandService","FormationRepository","getFormation","FormationQueryService","formationRepository","selectSelectedRows","formation","getSelectedRows","LocalFormationQueryService","StructureSetConfigFilterCommand","filterConfig","getConfig","StructureToggleFilterCommand","externalFilterId","filterValue","StructureFilterCommandService","setFilteringEnabled","addFilter","externalFieldId","SourceSetLoadingCommand","SetOriginCommand","items","StructureEditSourceItemCommand","SourceDispatcher","setLoading","editItem","InitStructureCommand","SetVerticalScrollEnabledCommand","SetScrollPositionCommand","position","SetSortingCommand","sortingConfig","getSortingConfig","ToggleSortCommand","StructureSetConfigQuickFilterCommand","quickFiltersConfig","StructureSetConfigSearchingCommand","searchConfig","InitFieldsCommand","StructureCommandService","structureFilterCommandService","sourceDispatcher","enableVerticalScroll","disableVerticalScroll","setScrollPosition","setSortingConfig","toggleSort","setFilterConfig","setQuickFiltersConfig","setSearchingConfig","initFields","LocalStructureCommandService","StructureQueryService","selectVerticalScrollEnabled","isVerticalScrollEnabled","LocalStructureQueryService","StructureFieldUiArchive","ReactiveAggregateArchive","StructureFieldUiRepository","structureFieldUiArchive","selectFields","StructureEditSourceItemParams","itemId","getItemId","getColumnFieldId","SourceCommandService","structureFieldUiRepository","editItemByIndex","itemIndex","fieldIndex","itemId$","entities","fieldId$","zip","array","LocalSourceCommandService","LocalSourceQueryService","LocalCompositionCommandService","LocalCompositionQueryService","localProviders","SchemaCssClassManager","rendererFactory2","VERTICAL_GRID_CLASS_NAME","HORIZONTAL_GRID_CLASS_NAME","THEME_FABRIC_CLASS_NAME","THEME_MATERIAL_CLASS_NAME","THEME_LIGHT_CLASS_NAME","THEME_DARK_CLASS_NAME","ROW_COLORING_ODD","ROW_COLORING_EVEN","cssClass","renderer","createRenderer","cssHostRef","classes","diff","updateState","renderCssClasses","diff_1","toggleCssClass","removeThemeCssClasses","addClass","resolveThemeClassName","removeRowColoringClasses","resolveRowColoringClassName","cssClassName","removeClass","className","SchemaRowColoring","RendererFactory2","StructureCellEditArchive","StructureCellEditStore","StructureEditModeArchive","StructureAggregationPanelConfig","top","bottom","itTopEnabled","itBottomEnabled","StructureAggregationArchive","StructureAggregationPanelConfigConverter","StructureSetAggregationEnabledCommand","StructureAggregationCommandService","setAggregationEnabled","StructureAggregationConfigService","structureAggregationPanelConfigConverter","structureAggregationArchive","structureAggregationCommandService","aggregationPanelConfig","structureComponentToken","ENTER","StructureGateway","structureCommandService","pagingEventService","sourceCommandService","sourceEventService","schemaCommandService","compositionCommandService","compositionEventService","formationEventService","structureEditModeArchive","structureCellEditArchive","structureAggregationConfigService","structureCellEditStore","simpleChanges","summaryPanel","editMode","cellEditing","autoResizeWidth","columnHeaderBottom","loading","virtualScroll","sorting","filtering","quickFilters","searching","selectPageChange","selectPageSizeChange","selectItemSelected","skip","selectSourceEdited","values","state","StructureCellEditState","NextPageEvent","PrevPageEvent","PageChangedEvent","PagesizeChangedEvent","PagingEventService","switchMap","EditemItemValues","after","before","StructureSourceItemEditedEvent","beforeItem","afterItem","getBeforeItem","getAfterItem","SourceEventService","getData","SelectedRowToggledEvent","FormationEventService","structureQueryService","str","getSelectedEntities","structureIdFactory","generator","compositionIdFactory","structureComponentSelfProviders","useFactory","deps","StructureComponent","structureDefinition","compositionQueryService","schemaStylesManager","loaderEnabled","circleLoaderEnabled","initialLoaderAnimation","structureHeight","isLoaderVisible","offsetWidth","timer","setStyle","isReadyToDisplay","[style.min-height.px]","[class.gui-structure-border]","[id]","Renderer2","StructureHeaderColumnsComponent","structureColumnConfigService","isSortAsc","isSortDesc","openConfigDialog","closeConfigDialog","StructureFilterRepository","enabled$","setEnabled","selectFilterEnabled","StructureQuickFilterRepository","selectQuickFilterEnabled","StructureFilterReadModelRepository","structureFilterRepository","structureQuickFilterRepository","selectFilteringEnabled","selectQuickFiltersEnabled","StructureHeaderComponent","eventBus","structureFilterReadModelRepository","headerColumns","filterRowEnabled","containerRef","StructureHeaderFiltersComponent","cd","closed","filterMode","f","phrase","clearFilters","reset","turnOnFilterMode","turnOffFilterMode","StructureHeaderFilterComponent","sub","editContext","StructureContentComponent","formationCommandService","formationQueryService","rowsList","clearSelectedRows","getIds","strippedId","selectedRowEl","trackByFn","translateY","querySelectorAll","el","Entity","version","RandomStringGenerator","generate","getUiId","getVersion","equalsById","StructureRowComponent","StructureCellComponent","inEditMode","cellEditingEnabled","enterEditMode","exitEditMode","forceCheck","valueChanges$","status$","cell","observeFieldStatus","observeValueChanges","publishEditEnter","markForCheck","submitChangesAndExit","updatedValue","actualValue","publishEditSubmit","publishEditCancel","publishEditState","StructureContainerComponent","ngZone","resizeDetector","structureParent","autoResizeWidthEnabled","scrollObservation$","combineLatest","combine","sourceSizeHeight","observe","recalculateContainer","enableScrollObservation","disableScrollObservation","containerHeight","topMargin","getTopMargin","runOutsideAngular","scrollTop","NgZone","ResizeDetector","Optional","StructureSearchComponent","searchForm","searchPhrase","console","log","StructureQuickFiltersComponent","StructureSearchingRepository","selectSearchingEnabled","StructureSearchReadModelRepository","structureSearchingRepository","selectSearchEnabled","STRUCTURE_CSS_CLASS_NAME","prefix","StructureBlueprintComponent","structureSearchReadModelRepository","searchEnabled","topAggregationPanelEnabled","bottomAggregationPanelEnabled","quickFiltersEnabled","summaryPanelEnabled","headerCssClass","contentCssClass","pagingReadModel","getHeaderTopClasses","getHeaderBottomClasses","isColumnHeaderTopEnabled","isColumnHeaderBottomEnabled","isPagingTopEnabled","isPagingBottomEnabled","StructureAggregationsChangedEvent","getAggregations","StructureAggregationUiEventsRepository","selectAggregationsChanged","StructureAggregationPanelComponent","structureAggregationUiEventsRepository","aggregations","isAggregateTypePresent","OriginItemEntity","rawData","bumpVersion","EntityFactory","createEntities","createEntity","InMemoryStructureStore","InMemoryStructureAggregateStore","inMemoryStructureStore","InMemoryStructureAggregateRepository","inMemoryStructureAggregateStore","clearEvents","StructureAggregateRepository","SelectedRowsList","rowIds","isRowSelected","Formation","selectedRows","selectedRowsList","FormationConverter","rows","SchemaCssClass","getRowColoring","Schema","verticalGridEnabled","horizontalGridEnabled","getTheme","isVerticalGridEnabled","isHorizontalGridEnabled","SchemaColumnHeader","SchemaConverter","convertColumnHeader","isHeaderOnTop","isHeaderOnBottom","PagingConverter","Source","SourceConverter","VerticalFormationReadModel","viewportHeight","getViewPortHeight","VerticalFormationConverter","verticalFormation","calcFullHeight","Structure","selectedIds","some","StructureConverter","formationConverter","schemaConverter","pagingConverter","sourceConverter","verticalFormationConverter","formationAggregate","schemaAggregate","pagingAggregate","sourceQuery","sourceCoordinator","getVerticalFormation","convertSource","originItem","InMemoryStructureQueryStore","inMemoryProjectStore","structureConverter","StructureInitedEvent","SetSourceLoadingEvent","SchemaSetEvent","SchemaThemeSetEvent","SchemaHorizontalGridSetEvent","SchemaVerticalGridSetEvent","SchemaTopHeaderChangedEvent","SchemaBottomHeaderChangedEvent","RowColoringSetEvent","PagingSetEvent","FormationSetEvent","VerticalScrollEnabledSetEvent","ScrollPositionSetEvent","OriginSetEvent","getOrigin","StructureFilterToggledEvent","InMemoryStructureRepository","inMemoryStructureQueryStore","structureIdToStructure","structure$","has","inMemoryStructureCommandProviders","inMemoryStructureQueryProviders","inMemoryStructureProviders","StructureSourceItemEditedAggregateEvent","StructureOriginChangedAggregateEvent","SourceCoordinator","fetched","slicedEntities","isFetched","setEntities","setSlicedEntities","getSlicedEntities","convertItems","createOriginChangedEvent","setConvertedOrigin","getOriginSize","editOriginItem","findOriginItem","itemBeforeChange","removeOriginItem","findOriginItemIndex","splice","findIndex","SourceCoordinatorFactory","VerticalRange","end","getStart","getEnd","VerticalFormation","scrollPosition","rowHeight","hiddenItemsTop","hiddenItemsBottom","isInteger","calculateRange","getRange","range","itemsInViewport","floor","hiddenElements","abs","setSourceSize","setTopHiddenItemsCount","count","setBottomHiddenItemsCount","setViewportHeight","setRowHeight","setLogger","VerticalFormationFactory","vf","AGGREGATION_CALCULATORS","StructureAggregationsChangedAggregateEvent","aggregatedValues","AggregationManager","calculators","calculations","calc","from","add","remove","update","AggregationManagerFactory","StructureFilter","filterId","getFilterValue","setFilterValue","filterString","filterNumber","filterBoolean","toLowerCase","indexOf","FilterId","FilterContainer","filters","setConfig","getAll","filteredEntities","filters_1","filters_1_1","arr","FilterContainerFactory","FieldIdGenerator","Field","aggregationEnabled","accessorMethod","possibleAggregations","assignPossibleAggregations","assignAggregations","getKey","isAggregation","isAggregationEnabled","assignDefaultAggregations","UnknownField","NumberField","StringField","BooleanField","DateField","FieldFactory","fieldIdGenerator","columnType","FieldContainer","fieldFactory","getAllFields","getAllFieldIds","addField","addFields","fields_1_1","FieldContainerFactory","FormationAggregate","toggleRow","ColumnHeaderEntity","setHeaderTop","setHeaderBottom","SchemaAggregate","headerHeight","pagerHeight","active","calculateContainerHeight","setVerticalGrid","setHorizontalGrid","getHeaderHeight","getPagerHeight","StructureAggregate","aggregationManager","sorterContainer","filterContainer","fieldContainer","search","calculateSource","editParams","calculateSourceBasedOnVirtualScroll","setFormation","changePaging","createFields","toggleFilter","ae","StructureSorter","rank","sorterId","getRank","getDirection","changeDirection","entityOne","entityTwo","valueOne","valueTwo","sortNumber","sortBoolean","sortString","sortUnknown","strOne","strTwo","localeCompare","numOne","numTwo","booleanOne","booleanTwo","sureBoolTwo","a","SorterId","SorterContainer","sorters","multiSorting","clear","sorter","addSorter","sortedEntities","sorters_1","sorters_1_1","sorterOne","sorterTwo","reverse","StructureAggregateFactory","pagingAggregateFactory","sourceCoordinatorFactory","verticalFormationFactory","aggregationManagerFactory","filterContainerFactory","fieldContainerFactory","InitStructureCommandHandler","structureAggregateRepository","structureAggregateFactory","SetVerticalScrollEnabledCommandHandler","SetScrollPositionCommandHandler","InitFieldsCommandHandler","ToggleSortCommandHandler","publishSortEvent","SortingSetEvent","SetSortingCommandHandler","StructureConfigFilterSetEvent","getEnabled","StructureSetConfigFilterCommandHandler","StructureConfigSearchingSetEvent","StructureSetConfigSearchingCommandHandler","searchingConfig","StructureConfigQuickFilterSetEvent","StructureSetConfigQuickFilterCommandHandler","StructureToggleFilterCommandHandler","StructureSourceDomainEventPublisher","publishEvent","structureOriginChangedAggregateEvent","domainEvent","structureSourceItemEditedAggregateEvent","structureAggregationsChangedAggregateEvent","StructureAggregationEnabledSetEvent","StructureSetAggregationEnabledCommandHandler","structureSourceDomainEventPublisher","AggregationCalculator","filteredFields","forDataType","distinct","Set","prepare","countForField","postCalculate","generateAggregatedValues","setCount","setDistinct","AggregatedValues","BooleanAggregatedValues","truthy","falsy","BooleanAggregationCalculator","booleanValue","truthyForField","falsyForField","DateAggregatedValues","DateAggregationCalculator","NumberAggregatedValues","min","max","average","median","setValueWithPrecision","toFixed","NumberAggregationCalculator","numberValue","sumForField","minForField","maxForField","StringAggregatedValues","StringAggregationCalculator","UnknownAggregatedValues","UnknownAggregationCalculator","provideAggregationCalculator","clazz","aggregationProviders","StructureConfigFilterSetEventHandler","StructureConfigSearchingSetEventHandler","StructureConfigQuickFilterSetEventHandler","StructureFieldUiModel","StructureFieldUiConverter","convertOne","StructureFieldsInitedEventHandler","structureFieldsRepository","structureFieldUiConverter","SetPagingCommandHandler","NextPageCommandHandler","PrevPageCommandHandler","ChangePagesizeCommandHandler","newPageSize","events_1","events_1_1","event_1","publishAggregateEvent","pageChangedEvent","pagesizeChangedEvent","pagingProviders","SetSchemaVerticalGridCommandHandler","SetSchemaHorizontalGridCommandHandler","SetSchemaThemeCommandHandler","ChangeSchemaBottomHeaderCommandHandler","ChangeSchemaTopHeaderCommandHandler","SetRowColoringCommandHandler","SetSchemaCommandHandler","schemaProviders","SetFormationCommandHandler","ToggleSelectedRowCommandHandler","formationProviders","SetOriginCommandHandler","StructureEditSourceItemCommandHandler","StructureOriginChangedEventHandler","origin_1","SourceRepository","SourceSetLoadingCommandHandler","sourceProviders","structureProviders","ConsoleLogger","text","LoggerModule","createStructureDefinition","HermesModule","StructureModule","loggers","withConfig","structureConfig","hermesModuleConfig","ngModule","COMMAND_LOGGER_ENABLED","EVENT_LOGGER_ENABLED","elementComponents","GridModule","imports$1","declarations$1","providers$1","entryComponents$1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export type FieldAccessor = (element?: any) => any;\nexport type ViewTemplateMethod = (cellValue: any) => string;\n\nexport interface GuiColumn {\n\n\tfield?: string | FieldAccessor;\n\n\ttype?: string | GuiDataType;\n\n\tview?: string | GuiCellView | ViewTemplateMethod;\n\n\theader?: string;\n\n\tcustomTemplate?: string;\n\n\twidth?: string | number;\n\n\taggregation?: GuiColumnAggregation;\n}\n\nexport enum GuiDataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n\nexport enum GuiCellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM\n}\n\nexport enum GuiNumberCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiStringCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiBooleanCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP,\n\tCHECKBOX\n}\n\nexport enum GuiDateCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport interface GuiPagingConfig {\n\n\tenabled?: boolean;\n\n\tpage?: number;\n\n\tpageSize?: number;\n\n\tpageSizes?: Array<number>;\n\n\tpagerTop?: boolean;\n\n\tpagerBottom?: boolean;\n\n}\n\nexport enum GuiTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n\nexport enum GuiRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n\nexport interface GuiSorting {\n\n\tenabled?: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\tmultiSorting?: boolean;\n\n}\n\nexport interface GuiFiltering {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiQuickFilters {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiSearching {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiAggregation {\n\n\tenabled?: boolean;\n\n\ttop?: boolean;\n\n\tbottom?: boolean;\n\n}\n\nexport interface GuiColumnAggregation {\n\n\tenabled?: boolean;\n\n\taggregationTypes?: Array<any>;\n}\n","export enum DataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n","import { GuiDataType } from '../../../../grid/app/grid.api';\nimport { DataType } from '../../../../../lib/structure/domain/structure/command/field/data-type/data-type';\n\nexport class GridColumnTypeConverter {\n\n\tconvertType(type: string | GuiDataType): DataType {\n\n\t\tif (typeof type === 'string') {\n\t\t\treturn this.convertTypeString(type);\n\t\t} else {\n\t\t\treturn this.convertTypeEnum(type);\n\t\t}\n\t}\n\n\tprivate convertTypeEnum(enumType: GuiDataType): DataType {\n\n\t\tswitch (enumType) {\n\n\t\t\tcase GuiDataType.STRING:\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase GuiDataType.NUMBER:\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase GuiDataType.BOOLEAN:\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase GuiDataType.DATE:\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase GuiDataType.UNKNOWN:\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase GuiDataType.CUSTOM:\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n\tprivate convertTypeString(type: string): DataType {\n\t\tconst loweredType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredType) {\n\n\t\t\tcase 'string':\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase 'number':\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase 'boolean':\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase 'date':\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase 'unknown':\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n}\n","export enum AggregationType {\n\tCOUNT = 1 << 10,\n\tDISTINCT = 1 << 0,\n\tSUM = 1 << 1,\n\tAVERAGE = 1 << 2,\n\tMIN = 1 << 3,\n\tMAX = 1 << 4,\n\tMEDIAN = 1 << 5,\n\tTRUTHY = 1 << 6,\n\tFALSY = 1 << 7,\n\tEARLIEST = 1 << 8,\n\tLATEST = 1 << 9,\n}\n\n// count\n// count distinct\n// percentile\n// std.dev\n// std.dev Pop\n// variance\n// variance pop\n","import { ColumnAggregationConfig } from '../../../../../lib/structure/domain/composition/column-aggregation.config';\nimport { AggregationType } from '../../../../../lib/structure/domain/structure/command/aggregation/aggregation.type';\n\nimport { GuiColumnAggregation } from '../../../../../grid.index';\n\n\nexport class GridColumnAggregationConverter {\n\n\tconvert(aggregationConfig: GuiColumnAggregation): ColumnAggregationConfig {\n\t\tlet columnAggregationConfig: ColumnAggregationConfig = {};\n\n\t\tif (aggregationConfig.enabled !== undefined && aggregationConfig.enabled !== null) {\n\t\t\tcolumnAggregationConfig.enabled = aggregationConfig.enabled;\n\t\t}\n\n\t\tif (aggregationConfig.aggregationTypes !== undefined && aggregationConfig.aggregationTypes !== null) {\n\t\t\tcolumnAggregationConfig.aggregationTypes = this.convertAggregationTypes(aggregationConfig.aggregationTypes);\n\t\t}\n\n\t\treturn columnAggregationConfig;\n\t}\n\n\tprivate convertAggregationTypes(configAggregationTypes: Array<string>): Array<AggregationType> {\n\n\t\tconst aggregationTypes: Array<AggregationType> = [];\n\n\t\tconfigAggregationTypes.forEach((type: string) => {\n\n\t\t\tconst aggregationType = this.convertAggregationType(type);\n\n\t\t\tif (aggregationType !== undefined && aggregationType !== null) {\n\t\t\t\taggregationTypes.push(aggregationType);\n\t\t\t}\n\t\t});\n\n\t\treturn aggregationTypes;\n\t}\n\n\tprivate convertAggregationType(type: string): AggregationType {\n\n\t\tconst loweredAggregationType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredAggregationType) {\n\n\t\t\tcase 'count':\n\t\t\t\treturn AggregationType.COUNT;\n\n\t\t\tcase 'distinct':\n\t\t\t\treturn AggregationType.DISTINCT;\n\n\t\t\tcase 'sum':\n\t\t\t\treturn AggregationType.SUM;\n\n\t\t\tcase 'average':\n\t\t\t\treturn AggregationType.AVERAGE;\n\n\t\t\tcase 'min':\n\t\t\t\treturn AggregationType.MIN;\n\n\t\t\tcase 'max':\n\t\t\t\treturn AggregationType.MAX;\n\n\t\t\tcase 'median':\n\t\t\t\treturn AggregationType.MEDIAN;\n\n\t\t\tcase 'truthy':\n\t\t\t\treturn AggregationType.TRUTHY;\n\n\t\t\tcase 'falsy':\n\t\t\t\treturn AggregationType.FALSY;\n\n\t\t\tcase 'earliest':\n\t\t\t\treturn AggregationType.EARLIEST;\n\n\t\t\tcase 'latest':\n\t\t\t\treturn AggregationType.LATEST;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\n\t\t}\n\t}\n\n}\n","export enum CellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM,\n\tFUNCTION\n}\n","import { GuiCellView, ViewTemplateMethod } from '../../../../grid/app/grid.api';\nimport { CellView } from '../../../../../lib/structure/domain/composition/cell-view';\n\nexport class GridColumnViewConverter {\n\n\tconvert(view: string | GuiCellView | ViewTemplateMethod): CellView | ViewTemplateMethod {\n\n\t\tif (typeof view === 'string') {\n\t\t\treturn this.convertString(view);\n\t\t} else if (typeof view === 'function') {\n\t\t\treturn view;\n\t\t} else {\n\t\t\treturn this.convertEnum(view);\n\t\t}\n\t}\n\n\tprivate convertString(view: string): CellView {\n\n\t\tconst loweredView = view.toLocaleLowerCase();\n\n\t\tswitch (loweredView) {\n\n\t\t\tcase 'text':\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase 'chip':\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase 'link':\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase 'image':\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase 'bold':\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase 'italic':\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase 'checkbox':\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n\tprivate convertEnum(view: GuiCellView): CellView {\n\n\t\tswitch (view) {\n\n\t\t\tcase GuiCellView.TEXT:\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase GuiCellView.CHIP:\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase GuiCellView.LINK:\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase GuiCellView.IMAGE:\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase GuiCellView.BOLD:\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase GuiCellView.ITALIC:\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase GuiCellView.CHECKBOX:\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase GuiCellView.CUSTOM:\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n}\n","import { GuiColumn } from '../../../../grid/app/grid.api';\nimport { ColumnConfig } from '../../../../../lib/structure/domain/composition/column.config';\n\nimport { GridColumnTypeConverter } from './grid.column-type.converter';\nimport { GridColumnAggregationConverter } from './grid.column-aggregation.converter';\nimport { GridColumnViewConverter } from './grid.column-view.converter';\n\n\nexport class GridColumnConverter {\n\n\tprivate readonly columnTypeConverter = new GridColumnTypeConverter();\n\n\tprivate readonly columnAggregationConverter = new GridColumnAggregationConverter();\n\n\tprivate readonly columnViewConverter = new GridColumnViewConverter();\n\n\tconvert(config: Array<GuiColumn>): Array<ColumnConfig> {\n\t\treturn config.map((c) => this.convertColumn(c));\n\t}\n\n\tprivate convertColumn(guiColumn: GuiColumn): ColumnConfig {\n\t\tlet columnConfig: ColumnConfig = {};\n\n\t\tif (guiColumn.type !== undefined && guiColumn.type !== null) {\n\t\t\tcolumnConfig.type = this.columnTypeConverter.convertType(guiColumn.type);\n\t\t}\n\n\t\tif (guiColumn.header !== undefined && guiColumn.header !== null) {\n\t\t\tcolumnConfig.header = guiColumn.header;\n\t\t}\n\n\t\tif (guiColumn.field !== undefined && guiColumn.field !== null) {\n\t\t\tcolumnConfig.field = guiColumn.field;\n\t\t}\n\n\t\tif (guiColumn.width !== undefined && guiColumn.width !== null) {\n\t\t\tcolumnConfig.width = guiColumn.width;\n\t\t}\n\n\t\tif (guiColumn.view !== undefined && guiColumn.view !== null) {\n\t\t\tcolumnConfig.view = this.columnViewConverter.convert(guiColumn.view);\n\t\t}\n\n\t\tif (guiColumn.aggregation !== undefined && guiColumn.aggregation !== null) {\n\t\t\tcolumnConfig.aggregation = this.columnAggregationConverter.convert(guiColumn.aggregation);\n\t\t}\n\n\t\treturn columnConfig;\n\t}\n\n}\n","export enum SchemaTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n","import { GuiTheme } from '../../../../grid/app/grid.api';\nimport { SchemaTheme } from '../../../../../lib/structure/domain/schema/schema-theme';\n\n\nexport class GridThemeConverter {\n\n\tconvert(theme: string | GuiTheme): SchemaTheme {\n\n\t\tif (typeof theme === 'string') {\n\t\t\treturn this.convertString(theme);\n\t\t} else {\n\t\t\treturn this.convertEnum(theme);\n\t\t}\n\n\t}\n\n\tprivate convertString(theme: string): SchemaTheme {\n\n\t\tconst loweredTheme = theme.toLocaleLowerCase();\n\n\t\tswitch (loweredTheme) {\n\n\t\t\tcase 'material':\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase 'fabric':\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase 'light':\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase 'dark':\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(theme: GuiTheme): SchemaTheme {\n\n\t\tswitch (theme) {\n\n\t\t\tcase GuiTheme.MATERIAL:\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase GuiTheme.FABRIC:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase GuiTheme.LIGHT:\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase GuiTheme.DARK:\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n}\n","export enum RowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { GuiRowColoring } from '../../../../grid/app/grid.api';\nimport { RowColoring } from '../../../../../lib/structure/app/schema/row-coloring';\n\n\nexport class GridRowColoringConverter {\n\n\tconvert(rowColoring: string | GuiRowColoring): RowColoring {\n\n\t\tif (typeof rowColoring === 'string') {\n\t\t\treturn this.convertString(rowColoring);\n\t\t} else {\n\t\t\treturn this.convertEnum(rowColoring);\n\t\t}\n\n\t}\n\n\tprivate convertString(rowColoring: string): RowColoring {\n\n\t\tconst loweredRowColoring = rowColoring.toLocaleLowerCase();\n\n\t\tswitch (loweredRowColoring) {\n\n\t\t\tcase 'none':\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase 'even':\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase 'odd':\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(rowColoring: GuiRowColoring): RowColoring {\n\n\t\tswitch (rowColoring) {\n\n\t\t\tcase GuiRowColoring.NONE:\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase GuiRowColoring.EVEN:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase GuiRowColoring.ODD:\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n}\n","import { EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\n\nimport {\n\tGuiAggregation,\n\tGuiColumn,\n\tGuiFiltering,\n\tGuiPagingConfig,\n\tGuiQuickFilters,\n\tGuiRowColoring,\n\tGuiSearching,\n\tGuiSorting,\n\tGuiTheme\n} from '../../../grid/app/grid.api';\nimport { ColumnConfig } from '../../../../lib/structure/domain/composition/column.config';\nimport { SchemaTheme } from '../../../../lib/structure/domain/schema/schema-theme';\n\nimport { GridColumnConverter } from './column/grid.column.converter';\nimport { GridThemeConverter } from './theme/grid.theme.converter';\nimport { GridRowColoringConverter } from './coloring/grid.row-coloring.converter';\n\nexport abstract class GridGateway implements OnChanges {\n\n\t/**\n\t * INPUTS\n\t */\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\theight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<GuiColumn> = [];\n\n\t@Input()\n\tpaging: boolean | GuiPagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: string | GuiTheme;\n\n\t@Input()\n\trowColoring: string | GuiRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | GuiSorting;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tfiltering: boolean | GuiFiltering;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tquickFilters: boolean | GuiQuickFilters;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tsearching: boolean | GuiSearching;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\teditMode: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tsummaryPanel: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\taggregation: GuiAggregation;\n\n\n\t/**\n\t * OUTPUTS\n\t */\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<{after: any, before: any}> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\t/** @internal */\n\tcolumnsConfig: Array<ColumnConfig>;\n\n\tthemeConfig: any; // SchemaTheme;\n\n\trowColoringConfig: any; // RowColoring;\n\n\tprivate readonly gridColumnConverter: GridColumnConverter = new GridColumnConverter();\n\n\tprivate readonly gridThemeConverter: GridThemeConverter = new GridThemeConverter();\n\n\tprivate readonly gridRowColoringConverter: GridRowColoringConverter = new GridRowColoringConverter();\n\n\tprotected constructor() {\n\t}\n\n\tngOnChanges(changes: SimpleChanges): void {\n\n\t\tif (changes.columns !== undefined && changes.columns.currentValue !== undefined) {\n\t\t\tthis.columnsConfig = this.gridColumnConverter.convert(this.columns);\n\t\t}\n\n\t\tif (changes.theme !== undefined && changes.theme.currentValue !== undefined) {\n\t\t\tthis.themeConfig = this.gridThemeConverter.convert(this.theme);\n\t\t}\n\n\t\tif (changes.rowColoring !== undefined && changes.rowColoring.currentValue !== undefined) {\n\t\t\tthis.rowColoringConfig = this.gridRowColoringConverter.convert(this.rowColoring);\n\t\t}\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n\tonPageSizeChange(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n\n\tonItemSelect(item: any): void {\n\t\tthis.itemsSelected.emit(item);\n\t}\n\n\tonColumnsChange(): void {\n\t\tthis.columnsChanged.emit();\n\t}\n\n\tonContainerWidthChange(containerWidth: number): void {\n\t\tthis.containerWidthChanged.emit(containerWidth);\n\t}\n\n\tonSourceEdit(value: any): void {\n\t\tthis.sourceEdited.emit(value);\n\t}\n\n\tonCellEditEnter(): void {\n\t\tthis.cellEditEntered.emit();\n\t}\n\n\tonCellEditSubmit(): void {\n\t\tthis.cellEditSubmitted.emit();\n\t}\n\n\tonCellEditCancel(): void {\n\t\tthis.cellEditCanceled.emit();\n\t}\n\n}\n","export abstract class GenericBuilder<T> {\n\n\tprotected abstract buildObject(): T;\n\n\tbuild(): T {\n\t\treturn  this.buildObject();\n\t}\n\n}\n","import { GenericBuilder } from '../../../../common/cdk/generic-builder';\n\nexport class StructurePagingDefinitionBuilder extends GenericBuilder<StructurePagingDefinition> {\n\n\tprivate enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tsuper();\n\t\tthis.enabled = enabled;\n\t}\n\n\tprotected buildObject(): StructurePagingDefinition {\n\t\treturn new StructurePagingDefinition(this.enabled);\n\t}\n\n\twithEnabled(enabled: boolean): StructurePagingDefinitionBuilder {\n\t\tthis.enabled = enabled;\n\t\treturn this;\n\t}\n}\n\nexport class StructurePagingDefinitionDefaultBuilder extends StructurePagingDefinitionBuilder {\n\n\tprivate static readonly defaultEnabled = true;\n\n\tconstructor() {\n\t\tsuper(StructurePagingDefinitionDefaultBuilder.defaultEnabled);\n\t}\n}\n\nexport class StructurePagingDefinition {\n\n\tprivate readonly enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tstatic Builder = StructurePagingDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructurePagingDefinitionDefaultBuilder;\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { GenericBuilder } from '../../../common/cdk/generic-builder';\nimport { StructurePagingDefinition } from './paging/structure-paging-definition';\n\nexport class StructureDefinitionBuilder extends GenericBuilder<StructureDefinition> {\n\n\tprivate border: boolean = true;\n\n\tconstructor(private headerEnabled: boolean,\n\t\t\t\tprivate bottomPaging: StructurePagingDefinition,\n\t\t\t\tprivate topPaging: StructurePagingDefinition) {\n\t\tsuper();\n\t}\n\n\tprotected buildObject(): StructureDefinition {\n\t\treturn new StructureDefinition(\n\t\t\tthis.headerEnabled,\n\t\t\tthis.bottomPaging,\n\t\t\tthis.topPaging,\n\t\t\tthis.border\n\t\t);\n\t}\n\n\twithHeader(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.headerEnabled = enabled;\n\t\treturn this;\n\t}\n\n\twithBottomPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.bottomPaging = paging;\n\t\treturn this;\n\t}\n\n\twithTopPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.topPaging = paging;\n\t\treturn this;\n\t}\n\n\twithBorder(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.border = enabled;\n\t\treturn this;\n\t}\n\n}\n\nexport class StructureDefinitionDefaultBuilder extends StructureDefinitionBuilder {\n\n\tprivate static readonly defaultHeaderEnabled: boolean = true;\n\tprivate static readonly defaultBottomPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\tprivate static readonly defaultTopPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\n\tconstructor() {\n\t\tsuper(\n\t\t\tStructureDefinitionDefaultBuilder.defaultHeaderEnabled,\n\t\t\tStructureDefinitionDefaultBuilder.defaultBottomPaging,\n\t\t\tStructureDefinitionDefaultBuilder.defaultTopPaging\n\t\t);\n\t}\n}\n\nexport class StructureDefinition {\n\n\tprivate readonly headerEnabled: boolean;\n\n\tprivate readonly bottomPaging: StructurePagingDefinition;\n\n\tprivate readonly topPaging: StructurePagingDefinition;\n\n\tprivate readonly border: boolean;\n\n\tconstructor(headerEnabled: boolean,\n\t\t\t\tbottomPaging: StructurePagingDefinition,\n\t\t\t\ttopPaging: StructurePagingDefinition,\n\t\t\t\tborder: boolean) {\n\t\tthis.headerEnabled = headerEnabled;\n\t\tthis.bottomPaging = bottomPaging;\n\t\tthis.topPaging = topPaging;\n\t\tthis.border = border;\n\t}\n\n\tstatic Builder = StructureDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructureDefinitionDefaultBuilder;\n\n\tisHeaderEnabled(): boolean {\n\t\treturn this.headerEnabled;\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.border;\n\t}\n\n\tgetBottomPaging(): StructurePagingDefinition {\n\t\treturn this.bottomPaging;\n\t}\n\n\tgetTopPaging(): StructurePagingDefinition {\n\t\treturn this.topPaging;\n\t}\n\n}\n","import { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\n/** @internal */\nexport const gridStructureDefinition = new StructureDefinition.DefaultBuilder().build();\n","import { Provider } from '@angular/core';\n\nimport { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\nimport { gridStructureDefinition } from './grid-structure-definition';\n\nexport const gridProviders = [{\n\tprovide: StructureDefinition,\n\tuseValue: gridStructureDefinition\n}] as Array<Provider>;\n","import { InjectionToken } from '@angular/core';\n\nexport const structureParentComponent = new InjectionToken('StructureParentComponent');\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class GridIdGenerator {\n\n\tprivate static readonly PREFIX = 'gui-grid-';\n\n\tprivate static index = 0;\n\n\tgenerateId(): string {\n\t\tGridIdGenerator.index++;\n\n\t\treturn GridIdGenerator.PREFIX + GridIdGenerator.index;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { GridComponent } from '../grid.component';\n\n@Injectable()\nexport class GridRegister {\n\n\tprivate readonly gridMap = new Map();\n\n\t// structureId: StructureId\n\tregister(gridId: string, component: GridComponent, structureId: any): void {\n\t\tthis.gridMap.set(gridId, { component, structureId });\n\t}\n\n\tunregister(gridId: string): void {\n\t\tthis.gridMap.delete(gridId);\n\t}\n\n\tgetValues(gridId: string): any {\n\t\treturn this.gridMap.get(gridId);\n\t}\n\n}\n","import { GridComponent } from '../grid.component';\n\nexport interface GridConsoleApi {\n\n\tchangeColumnHeaderTop(enabled: boolean): void;\n\n\n}\n\nexport class GridConsoleApiProvider {\n\n\tconstructor(private readonly gridComponent: GridComponent,\n\t\t\t\tprivate readonly structureId: any) {} // StructureId\n\n\tprovide(): GridConsoleApi {\n\n\t\tconst component = this.gridComponent;\n\n\t\treturn {\n\t\t\tchangeColumnHeaderTop(enabled: boolean): void {\n\t\t\t\tcomponent.columnHeaderTop = enabled;\n\t\t\t\tcomponent.detectChanges();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation, PLATFORM_ID, Inject } from '@angular/core';\n\nimport { GridGateway } from './grid-gateway';\nimport { gridProviders } from './grid.providers';\n\nimport { structureParentComponent } from '../../../../lib/structure/ui/structure-parent-component';\n\nimport { GridIdGenerator } from './register/grid-id.generator';\nimport { GridRegister } from './register/grid.register';\nimport { GridConsoleApiProvider } from './console/grid.console.api';\nimport { isPlatformBrowser } from '@angular/common';\n\nexport const gridSelector = 'gui-grid';\n\n@Component({\n\tselector: gridSelector,\n\ttemplateUrl: './grid.component.html',\n\tstyleUrls: [\n\t\t'../grid.ngx.scss'\n\t],\n\tproviders: [\n\t\t...gridProviders,\n\t\t{\n\t\t\tprovide: structureParentComponent,\n\t\t\tuseExisting: GridComponent\n\t\t}\n\t],\n\thost: {\n\t\t'[class]': `\"${gridSelector}\"`,\n\t\t'[style.height]': 'height'\n\t},\n\tencapsulation: ViewEncapsulation.None\n})\nexport class GridComponent extends GridGateway implements OnInit {\n\n\t@ViewChild('structure', { static: true })\n\tstructureRef: any;\n\n\t@Input()\n\tgridId: string; // can be set once\n\n\tprivate localGridId: string;\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate gridRegister: GridRegister,\n\t\t\t\tprivate gridIdGenerator: GridIdGenerator) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tlet gridId = this.gridId;\n\n\t\tif (gridId === undefined) {\n\t\t\tgridId = this.gridIdGenerator.generateId();\n\t\t}\n\n\t\tthis.localGridId = gridId;\n\n\t\tthis.exposeGridId();\n\n\t\t// register\n\t\tthis.gridRegister.register(gridId, this, this.structureRef.getStructureId());\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['getGuiGrid'] = (gridId: string) => {\n\n\t\t\t\tconst gridConsoleConfig = this.gridRegister.getValues(gridId);\n\n\t\t\t\tif (gridConsoleConfig) {\n\t\t\t\t\treturn new GridConsoleApiProvider(gridConsoleConfig.component, gridConsoleConfig.structureId).provide();\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.gridRegister.unregister(this.localGridId);\n\t}\n\n\tgetElementRef(): ElementRef {\n\t\treturn this.elementRef;\n\t}\n\n\tgetGridId(): string {\n\t\treturn '';\n\t}\n\n\tdetectChanges(): void {\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tprivate exposeGridId(): void {\n\t\tthis.elementRef.nativeElement.setAttribute('gui-grid-id', this.localGridId);\n\t}\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: '',\n\ttemplate: `\n\t\n\t\tCOLUMN CONFIG !!!\n\t\n\t`\n})\nexport class StructureColumnConfigComponent {\n}\n","import { Injectable } from '@angular/core';\n\nimport { FabricDialogService } from '@generic-ui/fabric';\n\nimport { StructureColumnConfigComponent } from './structure.column-config.component';\n\n@Injectable()\nexport class StructureColumnConfigService {\n\n\tconstructor(private dialogService: FabricDialogService) {\n\t}\n\n\n\topen(): void {\n\t\tthis.dialogService.open(StructureColumnConfigComponent);\n\t}\n\n\tclose(): void {\n\t\tthis.dialogService.close();\n\t}\n\n}\n","import { FabricBadgeModule, FabricDialogModule } from '@generic-ui/fabric';\nimport { FabricButtonModule } from '@generic-ui/fabric';\nimport { FabricButtonGroupModule } from '@generic-ui/fabric';\nimport { FabricCheckboxModule } from '@generic-ui/fabric';\nimport { FabricChipModule } from '@generic-ui/fabric';\nimport { FabricRadioButtonModule } from '@generic-ui/fabric';\nimport { FabricRadioGroupModule } from '@generic-ui/fabric';\nimport { FabricProgressBarModule } from '@generic-ui/fabric';\nimport { FabricProgressSpinnerModule } from '@generic-ui/fabric';\nimport { FabricSelectModule } from '@generic-ui/fabric';\nimport { FabricSpinnerModule } from '@generic-ui/fabric';\nimport { FabricToggleButtonModule } from '@generic-ui/fabric';\nimport { FabricInputModule } from '@generic-ui/fabric';\n\n\nexport const fabricImports = [\n\tFabricBadgeModule,\n\tFabricButtonModule,\n\tFabricButtonGroupModule,\n\tFabricCheckboxModule,\n\tFabricChipModule,\n\tFabricRadioButtonModule,\n\tFabricRadioGroupModule,\n\tFabricProgressBarModule,\n\tFabricProgressSpinnerModule,\n\tFabricSelectModule,\n\tFabricSpinnerModule,\n\tFabricToggleButtonModule,\n\tFabricInputModule,\n\tFabricDialogModule\n];\n","import { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive implements OnDestroy {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { Reactive } from './reactive';\n\nexport abstract class SmartComponent extends Reactive {\n}\n","import { Observable } from 'rxjs/';\n\nimport { AggregateId } from '@generic-ui/hermes';\nimport { Structure } from './structure';\n\n\n\nexport abstract class StructureRepository {\n\n\tabstract select(aggregateId: AggregateId): Observable<Structure>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/query/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Paging } from './paging';\nimport { Structure } from '../../structure/query/structure';\n\n\n@Injectable()\nexport class PagingRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Paging> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getPaging())\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class StructureId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { StructureId } from './structure-id';\n\nexport const globalStructureId = new StructureId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { PagingRepository } from '../../domain/paging/query/paging.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Paging } from '../../domain/paging/query/paging';\n\n\n@Injectable()\nexport class PagingQueryService {\n\n\tconstructor(private pagingRepository: PagingRepository) {\n\t}\n\n\tselect(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.pagingRepository.select(structureId);\n\t}\n\n\tselectOne(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { PagingConfig } from '../../paging-config';\n\nexport class SetPagingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload: PagingConfig) {\n\t\tsuper(structureId, 'SetPagingCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class ChangePagesizeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly pageSize: number) {\n\t\tsuper(structureId, 'ChangePagesizeCommand');\n\t}\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class NextPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'NextPageCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class PrevPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'PrevPageCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { PagingConfig } from '../paging-config';\nimport { SetPagingCommand } from './set/set-paging.command';\nimport { ChangePagesizeCommand } from './change-pagesize/change-pagesize.command';\nimport { NextPageCommand } from './next-page/next-page.command';\nimport { PrevPageCommand } from './prev-page/prev-page.command';\n\n\n@Injectable()\nexport class PagingDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetPaging(structureId: StructureId, paging: PagingConfig): void {\n\t\tthis.commandDispatcher.dispatch(new SetPagingCommand(structureId, paging));\n\t}\n\n\tchangePageSize(structureId: StructureId, pageSize: number): void {\n\t\tthis.commandDispatcher.dispatch(new ChangePagesizeCommand(structureId, pageSize));\n\t}\n\n\tnextPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new NextPageCommand(structureId));\n\t}\n\n\tprevPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new PrevPageCommand(structureId));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { PagingConfig } from '../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class PagingCommandService {\n\n\n\tconstructor(private pagingDispatcher: PagingDispatcher) {\n\t}\n\n\tenable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: true });\n\t}\n\n\tdisable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: false });\n\t}\n\n\tsetPaging(paging: PagingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, paging);\n\t}\n\n\tchangePageSize(pageSize: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.changePageSize(structureId, pageSize);\n\t}\n\n\tnextPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.nextPage(structureId);\n\t}\n\n\tprevPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.prevPage(structureId);\n\t}\n\n\tgoToPage(pageNumber: number, currentPage: number) {\n\n\t\tif (currentPage < pageNumber) {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.nextPage();\n\t\t\t\tcurrentPage += 1;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.prevPage();\n\t\t\t\tcurrentPage -= 1;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tchangePagerTop(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerTop: enabled });\n\t}\n\n\tchangePagerBottom(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerBottom: enabled });\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { OriginItemEntity } from '../../command/origin/origin-item-entity';\nimport { StructureId } from '../../../structure-id';\n\n\n\n@Injectable()\nexport class StructureSourceOriginRepository {\n\n\tprivate origin = new Map<string, Array<any>>();\n\n\tprivate origin$ = new ReplaySubject<Map<string, Array<any>>>();\n\n\tconstructor() {\n\t}\n\n\tsetOrigin(origin: Array<OriginItemEntity>, structureId: StructureId): void {\n\t\tthis.origin.set(structureId.toString(), origin);\n\t\tthis.origin$.next(this.origin);\n\t}\n\n\tselectOrigin(structureId: StructureId): Observable<Array<any>> {\n\n\t\treturn this.origin$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, Array<any>>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, take } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../domain/structure/query/structure.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/query/origin/structure.source-origin.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Entity } from '../../domain/source/entity';\nimport { Structure } from '../../domain/structure/query/structure';\n\n\n@Injectable()\nexport class SourceQueryService {\n\n\tconstructor(private structureRepository: StructureRepository,\n\t\t\t\tprivate structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t}\n\n\tselect(structureId: StructureId = globalStructureId): Observable<Array<Entity>> {\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getEntities()),\n\t\t\t\t\t   distinctUntilChanged((ents1: Array<Entity>, ents2: Array<Entity>) => {\n\t\t\t\t\t\t   if (ents1.length !== ents2.length) {\n\t\t\t\t\t\t\t   return false;\n\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t   let flag = true;\n\n\t\t\t\t\t\t   ents1.forEach((ent, index) => {\n\t\t\t\t\t\t\t   if (!ent.equals(ents2[index])) {\n\t\t\t\t\t\t\t\t   flag = false;\n\t\t\t\t\t\t\t\t   return;\n\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t   });\n\n\t\t\t\t\t\t   return flag;\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tselectOriginSize(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.structureSourceOriginRepository\n\t\t\t\t   .selectOrigin(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map(origin => origin.length)\n\t\t\t\t   );\n\t}\n\n\tselectOne(structureId: StructureId = globalStructureId): Observable<Array<Entity>> {\n\t\treturn this.select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tselectLoading(structureId: StructureId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getSource().isLoading())\n\t\t\t\t   );\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { Paging } from '../../domain/paging/query/paging';\nimport { PagingQueryService } from '../../app/paging/paging-query.service';\nimport { PagingCommandService } from '../../app/paging/paging-command.service';\nimport { SourceQueryService } from '../../app/source/source-query.service';\n\n\n@Component({\n\tselector: 'gui-structure-paging',\n\ttemplateUrl: 'structure-paging.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingComponent extends SmartComponent implements OnInit {\n\n\tsourceSize: number;\n\n\tpaging: Paging;\n\n\talternativeDisplay: boolean = false;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate pagingQueryService: PagingQueryService,\n\t\t\t\tprivate pagingCommandService: PagingCommandService,\n\t\t\t\tprivate sourceQueryService: SourceQueryService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\t\tthis.pagingQueryService\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.paging = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.sourceQueryService\n\t\t\t.selectOriginSize()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.sourceSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tchangePageSize(pageSize: number) {\n\t\tthis.pagingCommandService.changePageSize(pageSize);\n\t}\n\n\tnextPage(): void {\n\n\t\tif (!this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.pagingCommandService.nextPage();\n\t}\n\n\tprevPage(): void {\n\t\tthis.pagingCommandService.prevPage();\n\t}\n\n}\n","export class Paging {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly page: number,\n\t\t\t\tprivate readonly pageSize: number,\n\t\t\t\tprivate readonly pageSizes: Array<number>,\n\t\t\t\tprivate readonly pagerTop: boolean,\n\t\t\t\tprivate readonly pagerBottom: boolean) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\treturn this.pagerBottom;\n\t}\n\n\tisNextPageDisabled(sourceSize: number): boolean {\n\t\tif (sourceSize === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.page === Math.ceil(sourceSize / this.pageSize);\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.page === 1;\n\t}\n\n\tcalculateStart(sourceSize: number): number {\n\n\t\tconst firstItem = 1 + ((this.page - 1) * this.pageSize);\n\n\t\tif (sourceSize < firstItem) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn firstItem;\n\t}\n\n\tcalculateEnd(sourceSize: number): number {\n\n\t\tconst lastItem = this.page * this.pageSize;\n\n\t\tif (sourceSize < lastItem) {\n\t\t\treturn sourceSize;\n\t\t}\n\n\t\treturn lastItem;\n\t}\n\n\tcalculateVisiblePages(currentPage: number, numberOfVisiblePages: number, page: number): boolean {\n\t\treturn currentPage - numberOfVisiblePages < page && page < currentPage + numberOfVisiblePages;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tconst sourceSize = source.length;\n\n\t\tlet start = this.calculateStart(sourceSize);\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.calculateEnd(sourceSize));\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, OnChanges, Output, EventEmitter } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/query/paging';\n\n@Component({\n\tselector: 'gui-structure-paging-navigator',\n\ttemplateUrl: `structure-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled(this.sourceSize);\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/query/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-select',\n\ttemplateUrl: `structure-paging-select.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingSelectComponent {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Output()\n\tpageSizeChanged = new EventEmitter();\n\n\tchangePageSize(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n}\n","import { Component, ChangeDetectionStrategy, Input, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/query/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-stats',\n\ttemplateUrl: `structure-paging-stats.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingStatsComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number = 0;\n\n\tfirstItemIndex: number;\n\n\tlastItemIndex: number;\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging && this.sourceSize) {\n\t\t\tthis.firstItemIndex = this.paging.calculateStart(this.sourceSize);\n\t\t\tthis.lastItemIndex = this.paging.calculateEnd(this.sourceSize);\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/query/paging';\nimport { PagingCommandService } from '../../../../app/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-navigator',\n\ttemplateUrl: `structure-alternative-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tfirstPage(): void {\n\t\tthis.pagingCommandService.goToPage(1, this.paging.getPage());\n\t}\n\n\tlastPage(): void {\n\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\t\tthis.pagingCommandService.goToPage(numberOfPages, this.paging.getPage());\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled(this.sourceSize);\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/query/paging';\nimport { PagingCommandService } from '../../../../app/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-pages',\n\ttemplateUrl: `structure-alternative-paging-pages.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingPagesComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number = 0;\n\n\tcurrentPage: number;\n\n\tpages: Array<number>;\n\n\tnumberOfVisiblePages: number = 3;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging && this.sourceSize) {\n\t\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\n\t\t\tthis.currentPage = this.paging.getPage();\n\n\t\t\tthis.pages = [];\n\t\t\tif (this.pages.length <= numberOfPages) {\n\t\t\t\tfor (let i = 1; i <= numberOfPages; i++) {\n\t\t\t\t\tthis.pages.push(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n\tgoToPage(pageNumber: number) {\n\t\tconst currentPage = this.paging.getPage();\n\t\tthis.pagingCommandService.goToPage(pageNumber, currentPage);\n\t}\n\n\tcalculateVisiblePages(page: number): boolean {\n\t\treturn this.paging.calculateVisiblePages(this.currentPage, this.numberOfVisiblePages, page);\n\t}\n\n\tactivePage(page: number): boolean {\n\t\treturn this.currentPage === page;\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { StructurePagingComponent } from './structure-paging.component';\nimport { StructurePagingNavigatorComponent } from './navigator/structure-paging-navigator.component';\nimport { StructurePagingSelectComponent } from './select/structure-paging-select.component';\nimport { StructurePagingStatsComponent } from './stats/structure-paging-stats.component';\nimport { StructureAlternativePagingNavigatorComponent } from './alternative-paging/navigator/structure-alternative-paging-navigator.component';\nimport { StructureAlternativePagingPagesComponent } from './alternative-paging/pages/structure-alternative-paging-pages.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tFabricModule\n\t],\n\tdeclarations: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t],\n\texports: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t]\n})\nexport class StructurePagingModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'numberFormatter' })\nexport class NumberFormatterPipe implements PipeTransform {\n\n\ttransform(number: number): string {\n\t\treturn number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n\t}\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { NumberFormatterPipe } from './number-formatter.pipe';\n\n@NgModule({\n\tdeclarations: [\n\t\tNumberFormatterPipe\n\t],\n\texports: [\n\t\tNumberFormatterPipe\n\t]\n})\nexport class NumberFormatterModule {\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n\ttemplate: `\n\t\t<div class=\"gui-structure-info-panel\">\n\t\t\t<p>Generic UI Grid</p>\n\t\t\t<p>version 0.5.1</p>\n\n\t\t\t<p>Links:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/\">Website</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/guide/\">Documentation</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/tree/master/ngx-grid\">Github</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<p>Feedback:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Report a bug</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Suggest an idea</a>\n\t\t\t\t</li>\n\n\t\t\t</ul>\n\t\t</div>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureInfoPanel {\n\n}\n","import { Observable, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';\n\nexport abstract class ReactiveArchive<T> {\n\n\tprivate archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tset(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n\tselect(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveArchive } from '../../../../../common/cdk/reactive.archive';\n\n\n@Injectable()\nexport class StructureSummaryEnabledArchive extends ReactiveArchive<boolean> {\n\n\tconstructor() {\n\t\tsuper(false);\n\t}\n}\n","import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';\n\nimport { FabricDialogService } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { StructureInfoPanel } from './structure.info-panel';\n\nimport { StructureSummaryEnabledArchive } from './structure.summary-enabled.archive';\n\nimport { SourceQueryService } from '../../../app/source/source-query.service';\n\n\n@Component({\n\tselector: 'gui-structure-summary',\n\ttemplate: `\n\n\t\t<p>\n\t\t\tShowing <b>{{originSize | numberFormatter}}</b> items\n\t\t</p>\n\t\t<div>\n\t\t\t<p (click)=\"openInfo()\">\n\t\t\t\t<button>i</button>\n\t\t\t\tInfo\n\t\t\t</p>\n\t\t</div>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureSummaryComponent extends SmartComponent implements OnInit {\n\n\toriginSize: number;\n\n\tinfoPanel = StructureInfoPanel;\n\n\tconstructor(private structureSummaryEnabledArchive: StructureSummaryEnabledArchive,\n\t\t\t\tprivate sourceQueryService: SourceQueryService,\n\t\t\t\tprivate dialog: FabricDialogService,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef\n\t) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.sourceQueryService\n\t\t\t.selectOriginSize()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.originSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\topenInfo() {\n\t\tthis.dialog.open(this.infoPanel);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberFormatterModule } from '../../../../../common/cdk/number-formatter/number-formatter.module';\nimport { StructureSummaryComponent } from './structure.summary.component';\nimport { StructureInfoPanel } from './structure.info-panel';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tNumberFormatterModule\n\t],\n\tdeclarations: [\n\t\tStructureSummaryComponent,\n\t\tStructureInfoPanel\n\t],\n\texports: [\n\t\tStructureInfoPanel,\n\t\tStructureSummaryComponent\n\t],\n\tentryComponents: [\n\t\tStructureInfoPanel\n\t]\n})\nexport class StructureSummaryModule {\n\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { CellView } from '../../cell-view';\nimport { TemplatesComponent } from '../template/templates.component';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #text let-element=\"element\">\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #number let-element=\"element\">\n\t\t\t<span class=\"gui-cell-number\">\n\t\t\t\t{{ element }}\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #chip let-element=\"element\">\n\t\t\t<gui-chip>\n\t\t\t\t{{ element }}\n\t\t\t</gui-chip>\n\t\t</ng-template>\n\n\t\t<ng-template #link let-element=\"element\">\n\t\t\t<a gui-button link=\"true\" href=\"{{ element }}\">\n\t\t\t\t{{ element }}\n\t\t\t</a>\n\t\t</ng-template>\n\n\t\t<ng-template #image let-element=\"element\">\n\t\t\t<img src=\"{{ element }}\"/>\n\t\t</ng-template>\n\n\t\t<ng-template #checkbox let-element=\"element\">\n\t\t\t<span class=\"gui-cell-boolean\">\n\t\t\t\t<gui-checkbox [checked]=\"!!element\" [disabled]=\"true\"></gui-checkbox>\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #bold let-element=\"element\">\n\t\t\t<span class=\"gui-bold\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #italic let-element=\"element\">\n\t\t\t<span class=\"gui-italic\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #custom let-element=\"element\" >\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #function let-element=\"element\" >\n\t\t\t<gui-function-view [element]=\"element\" ></gui-function-view>\n\t\t</ng-template>\n\n\t`\n})\nexport class ViewTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('text', { read: TemplateRef, static: true })\n\ttextTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('chip', { read: TemplateRef, static: true })\n\tchipTemplate: TemplateRef<any>;\n\n\t@ViewChild('link', { read: TemplateRef, static: true })\n\tlinkTemplate: TemplateRef<any>;\n\n\t@ViewChild('image', { read: TemplateRef, static: true })\n\timageTemplate: TemplateRef<any>;\n\n\t@ViewChild('checkbox', { read: TemplateRef, static: true })\n\tcheckboxTemplate: TemplateRef<any>;\n\n\t@ViewChild('bold', { read: TemplateRef, static: true })\n\tboldTemplate: TemplateRef<any>;\n\n\t@ViewChild('italic', { read: TemplateRef, static: true })\n\titalicTemplate: TemplateRef<any>;\n\n\t@ViewChild('custom', { read: TemplateRef, static: true })\n\tcustomTemplate: TemplateRef<any>;\n\n\t@ViewChild('function', { read: TemplateRef, static: true })\n\tfunctionTemplate: TemplateRef<any>;\n\n\tgetTemplate(view: CellView): TemplateRef<any> {\n\n\t\tswitch (view) {\n\n\t\t\tcase CellView.TEXT:\n\t\t\t\treturn this.textTemplate;\n\n\t\t\tcase CellView.CHIP:\n\t\t\t\treturn this.chipTemplate;\n\n\t\t\tcase CellView.LINK:\n\t\t\t\treturn this.linkTemplate;\n\n\t\t\tcase CellView.IMAGE:\n\t\t\t\treturn this.imageTemplate;\n\n\t\t\tcase CellView.CHECKBOX:\n\t\t\t\treturn this.checkboxTemplate;\n\n\t\t\tcase CellView.BOLD:\n\t\t\t\treturn this.boldTemplate;\n\n\t\t\tcase CellView.ITALIC:\n\t\t\t\treturn this.italicTemplate;\n\n\t\t\tcase CellView.CUSTOM:\n\t\t\t\treturn this.customTemplate;\n\n\t\t\tcase CellView.FUNCTION:\n\t\t\t\treturn this.functionTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.textTemplate;\n\t\t}\n\t}\n\n}\n","import { Observable, ReplaySubject } from 'rxjs';\n\nexport class ChangedValueEmitter<T> {\n\n\tprivate subject$ = new ReplaySubject<T>(1);\n\n\tconstructor() {}\n\n\temit(value: T): void {\n\t\tthis.subject$.next(value);\n\t}\n\n\tselect(): Observable<T> {\n\t\treturn this.subject$.asObservable();\n\t}\n}\n","export enum EditEventType {\n\tSUBMIT,\n\tBLUR,\n\tCANCEL\n}\n","import { Input } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../../common/cdk/smart-component';\n\nimport { ChangedValueEmitter } from './changed-value.emitter';\nimport { EditEventType } from './state/edit.event-type';\n\n\nexport abstract class EditCommunicationComponent<T> extends SmartComponent {\n\n\t@Input()\n\tvalue: T;\n\n\t@Input()\n\tvalueChanges: ChangedValueEmitter<T>;\n\n\t@Input()\n\tstatus: ChangedValueEmitter<EditEventType>;\n\n\t@Input()\n\tfocus: boolean;\n\n\tprotected readonly ENTER_KEY_CODE = 13;\n\n\tprotected readonly ESC_KEY_CODE = 27;\n\n\tsubmit(): void {\n\t\tthis.emitStatus(EditEventType.SUBMIT);\n\t}\n\n\tcancel(): void {\n\t\tthis.emitStatus(EditEventType.CANCEL);\n\t}\n\n\tprivate emitStatus(status: EditEventType): void {\n\t\tif (this.status) {\n\t\t\tthis.status.emit(status);\n\t\t}\n\t}\n\n}\n","import { ElementRef, SimpleChanges, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\nexport abstract class InputEditTemplateComponent<T> extends EditCommunicationComponent<T> {\n\n\t@ViewChild('input', { static: true })\n\tinputRef: ElementRef;\n\n\tfilterForm: FormGroup;\n\n\treadonly filterFieldName = 'phrase';\n\n\tprotected constructor(private formBuilder: FormBuilder) {\n\t\tsuper();\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (changes.value !== undefined) {\n\t\t\tthis.filterForm.get(this.filterFieldName).setValue(this.value);\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.inputRef.nativeElement;\n\n\t\tthis.focusField(inputElement);\n\n\t\tthis.emitValueChange(inputElement.value);\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tconst keyup$ = fromEvent(inputElement, 'keyup');\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ENTER_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ESC_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.cancel();\n\t\t\t});\n\t}\n\n\tfocusField(inputElement: HTMLElement): void {\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t}\n\t}\n\n\tprivate observeChanges() {\n\t\tthis.filterForm\n\t\t\t.controls[this.filterFieldName]\n\t\t\t.valueChanges\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: string) => {\n\t\t\t\tthis.emitValueChange(value);\n\t\t\t});\n\t}\n\n\tprivate emitValueChange(value: any): void {\n\t\tif (this.valueChanges) {\n\t\t\tthis.valueChanges.emit(value);\n\t\t}\n\t}\n}\n","import { Inject, ChangeDetectionStrategy, ViewEncapsulation, Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-number-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"number\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class NumberEditTemplateComponent extends InputEditTemplateComponent<number> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n}\n","/**\n * Override decorator\n *\n * class Car {\n *     drive() {}\n * }\n *\n * class FastCar {\n *     @Override\n *     drive() {}}\n * }\n */\nexport function Override(container: { [key: string]: any }, key: string) {\n\tconst basePrototype = Object.getPrototypeOf(container);\n\tif (typeof basePrototype[key] !== 'function') {\n\t\tthrow new Error('Method \"' + key + '\" of class \"' + container.constructor.name + '\" doesn\\'t override any method of base class.');\n\t}\n};\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { Override } from '../../../../../../../common/cdk/decorators';\n\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-string-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"type\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StringEditTemplateComponent extends InputEditTemplateComponent<string> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n\n\t@Override\n\tfocusField(inputElement: any): void {\n\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t\tinputElement.setSelectionRange(0, inputElement.value.length);\n\t\t}\n\t}\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { TemplatesComponent } from '../template/templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #string let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-string-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-string-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #number let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-number-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-number-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #boolean let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-boolean-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-boolean-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #empty>\n\n\t\t</ng-template>\n\n\t`\n})\nexport class EditTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('string', { read: TemplateRef, static: true })\n\tstringTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('boolean', { read: TemplateRef, static: true })\n\tbooleanTemplate: TemplateRef<any>;\n\n\t@ViewChild('empty', { read: TemplateRef, static: true })\n\temptyTemplate: TemplateRef<any>;\n\n\tgetTemplate(dataType: DataType): TemplateRef<any> {\n\n\t\tswitch (dataType) {\n\n\t\t\tcase DataType.STRING:\n\t\t\t\treturn this.stringTemplate;\n\n\t\t\tcase DataType.NUMBER:\n\t\t\t\treturn this.numberTemplate;\n\n\t\t\tcase DataType.BOOLEAN:\n\t\t\t\treturn this.booleanTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.emptyTemplate;\n\t\t}\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\n@Component({\n\tselector: 'gui-boolean-edit',\n\ttemplate: `\n\n\t\t<gui-checkbox #checkbox\n\t\t\t\t\t  [checked]=\"value\"\n\t\t\t\t\t  [name]=\"filterFieldName\"\n\t\t\t\t\t  (changed)=\"toggle($event)\"></gui-checkbox>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class BooleanEditTemplateComponent extends EditCommunicationComponent<boolean> {\n\n\t@ViewChild('checkbox', { read: ElementRef, static: true })\n\tcheckboxRef: ElementRef;\n\n\treadonly filterFieldName = 'booleanEdit';\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.checkboxRef.nativeElement.querySelector('input[type=\"checkbox\"]');\n\n\t\tinputElement.focus();\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tdebounceTime(400),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\t}\n\n\ttoggle(changed: boolean): void {\n\t\tthis.valueChanges.emit(changed);\n\t}\n\n\n}\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\n\n\n@Component({\n\tselector: 'gui-column',\n\ttemplate: ''\n})\nexport class ColumnQueryComponent {\n\n\t@ContentChild(TemplateRef, { static: false })\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\t@Input()\n\theader: string;\n\n}\n","import { Component, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n\n@Component({\n\tselector: 'gui-function-view',\n\ttemplate: `\n\n\t\t<div [innerHTML]=\"safeHTML\"></div>\n\n\t`\n})\nexport class FunctionViewComponent {\n\n\t@Input()\n\telement: any;\n\n\tsafeHTML: SafeHtml;\n\n\tconstructor(private sanitizer: DomSanitizer) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.safeHTML = this.sanitizer.bypassSecurityTrustHtml(this.element);\n\t}\n\n}\n","export enum ColumnWidthType {\n\tPERCENTAGE,\n\tNUMBER,\n\tAUTO\n}\n","import { ColumnWidthType } from './column-width-type';\n\nexport class ColumnWidth {\n\n\tprivate template: ColumnWidthType;\n\n\tprivate baseWidth: number | string;\n\n\tprivate width: number;\n\n\tconstructor(width?: number | string) {\n\t\tthis.baseWidth = width;\n\t\tthis.setWidthAndType(width);\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetColumnType(): ColumnWidthType {\n\t\treturn this.template;\n\t}\n\n\tisTypePercentage(): boolean {\n\t\treturn this.template === ColumnWidthType.PERCENTAGE;\n\t}\n\n\tisTypeAuto(): boolean {\n\t\treturn this.template === ColumnWidthType.AUTO;\n\t}\n\n\tisTypeNumber(): boolean {\n\t\treturn this.template === ColumnWidthType.NUMBER;\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.width = width;\n\t}\n\n\tsetWidthAndType(width: number | string): void {\n\n\t\tif (width === undefined || width === null || width === 'auto') {\n\n\t\t\tthis.template = ColumnWidthType.AUTO;\n\t\t\tthis.setWidth(null);\n\n\t\t} else if (this.isPercentage(width)) {\n\n\t\t\tthis.template = ColumnWidthType.PERCENTAGE;\n\t\t\tthis.setWidth(this.percentageToNumber('' + width));\n\n\t\t} else if (this.isStringNumber(width)) {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t} else {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t}\n\t}\n\n\tclone(): ColumnWidth {\n\t\treturn new ColumnWidth(this.baseWidth);\n\t}\n\n\tprivate isPercentage(width: number | string): boolean {\n\t\treturn typeof width === 'string' && width[width.length - 1] === '%';\n\t}\n\n\t/**\n\t * Width needs to be in format '89%'\n\t * @param width\n\t */\n\tprivate percentageToNumber(width: string): number {\n\t\treturn +(width.slice(0, -1));\n\t}\n\n\tprivate isStringNumber(width: number | string): boolean {\n\t\tconst widthAsNumber = +width;\n\n\t\treturn Number.isNaN(widthAsNumber);\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\n\nexport class CompositionContainerWidthCalculator {\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number) {\n\t}\n\n\tcalculateMinWidth(columnWidths: Array<ColumnWidth>): number {\n\n\t\tconst { staticColumns, fluidColumns } = this.segregateColumns(columnWidths);\n\n\t\t// TODO reduce\n\t\tlet sum = 0;\n\t\tstaticColumns.forEach((c) => {\n\t\t\tsum += c.getWidth();\n\t\t});\n\n\t\tsum += fluidColumns.length * this.MIN_COLUMN_WIDTH;\n\n\t\treturn sum;\n\t}\n\n\tprivate segregateColumns(columns: Array<ColumnWidth>): { staticColumns: Array<ColumnWidth>, fluidColumns: Array<ColumnWidth> } {\n\n\t\tlet staticColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber() && columnWidth.getWidth() > this.MIN_COLUMN_WIDTH),\n\t\t\tfluidColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeAuto() || columnWidth.isTypePercentage() || (columnWidth.isTypeNumber() && columnWidth.getWidth() <= this.MIN_COLUMN_WIDTH));\n\n\t\treturn {\n\t\t\tstaticColumns: staticColumns,\n\t\t\tfluidColumns: fluidColumns\n\t\t};\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\nimport { ColumnWidthType } from '../column/column-width/column-width-type';\n\nexport class CompositionWidthCalculator {\n\n\tprivate readonly columns: Array<ColumnWidth>;\n\n\tconstructor(private source: Array<ColumnWidth>,\n\t\t\t\tprivate width: number,\n\t\t\t\tprivate readonly MIN_COLUMN_WIDTH: number) {\n\t\tthis.columns = this.source.map((c) => c.clone());\n\t}\n\n\tcalculate(): Array<ColumnWidth> {\n\n\t\tlet width = this.width,\n\t\t\tcolumns = [...this.columns];\n\n\t\t// adjust min value\n\t\tthis.adjustMinimalWidth(columns);\n\n\t\t// remove number columns\n\t\tlet newColumns: Array<ColumnWidth> = [];\n\n\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\twidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tnewColumns.push(column);\n\t\t\t}\n\t\t});\n\n\t\tcolumns = newColumns;\n\n\t\t// split even auto columns\n\t\tif (columns.length !== 0) {\n\n\t\t\tconst evenWidth = width / columns.length;\n\n\t\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\t\tcolumn.setWidth(evenWidth);\n\t\t\t});\n\t\t}\n\n\t\t// adjust number columns\n\t\t// let numberColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber());\n\t\t//\n\t\t// // sort by min values\n\t\t// numberColumns.sort((columnOne: ColumnWidth, columnTwo: ColumnWidth) => {\n\t\t// \treturn columnOne.getWidth() - columnTwo.getWidth();\n\t\t// });\n\t\t//\n\t\t// numberColumns.forEach(() => {\n\t\t// });\n\n\t\t// this.adjustMinimalWidth(ColumnWidthType.NUMBER);\n\t\t//\n\t\t// this.adjustPercentageWidth();\n\t\t//\n\t\t// this.adjustAutoWidth();\n\n\t\treturn this.columns;\n\t}\n\n\tprivate adjustMinimalWidth(columns: Array<ColumnWidth>): void {\n\t\tcolumns.forEach((column: ColumnWidth) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\tif (column.getWidth() < this.MIN_COLUMN_WIDTH) {\n\t\t\t\t\tcolumn.setWidthAndType(this.MIN_COLUMN_WIDTH);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate adjustPercentageWidth(): void {\n\n\t\tconst percentageColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypePercentage());\n\n\t\tfor (let column of this.columns) {\n\t\t\tif (column.getColumnType() === ColumnWidthType.PERCENTAGE) {\n\t\t\t\tcolumn.setWidth(this.width * column.getWidth() * 0.01);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate adjustAutoWidth(): void {\n\n\t\tlet leftWidth = this.width,\n\t\t\tautoColumns = [];\n\n\t\tfor (let i = 0; i < this.columns.length; i += 1) {\n\n\t\t\tlet column = this.columns[i];\n\n\t\t\tif (column.getColumnType() !== ColumnWidthType.AUTO) {\n\t\t\t\tleftWidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tautoColumns.push(column);\n\t\t\t}\n\t\t}\n\n\t\tif (autoColumns.length > 0) {\n\t\t\tconst splitWidth = leftWidth / autoColumns.length;\n\n\t\t\tfor (let column of autoColumns) {\n\t\t\t\tcolumn.setWidth(splitWidth);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import { ColumnWidth } from './column-width';\nimport { ColumnConfig } from '../../../column.config';\nimport { CompositionContainerWidthCalculator } from '../../width/composition-container-width.calculator';\nimport { CompositionWidthCalculator } from '../../width/composition-width.calculator';\n\n\nexport class ColumnWidthCollection {\n\n\tprivate baseColumnWidths: Array<ColumnWidth>;\n\n\tprivate columnWidths: Array<ColumnWidth>;\n\n\tprivate width: number;\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number,\n\t\t\t\tcolumns: Array<ColumnConfig> = [],\n\t\t\t\twidth: number = 100) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.setContainerWidth(width);\n\n\t\tthis.calculate();\n\t}\n\n\tgetColumns(): Array<ColumnWidth> {\n\t\treturn this.baseColumnWidths;\n\t}\n\n\tgetColumnsWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetWidths(): Array<number> {\n\t\treturn this.columnWidths.map(c => c.getWidth());\n\t}\n\n\tgetMinWidth(): number {\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\treturn calculator.calculateMinWidth(this.columnWidths);\n\t}\n\n\tsetWidth(width: number): void {\n\n\t\tthis.setContainerWidth(width);\n\t\tthis.calculate();\n\t}\n\n\tsetColumns(columns: Array<ColumnConfig>) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.calculate();\n\t}\n\n\tprivate calculate(): void {\n\n\t\tif (this.baseColumnWidths && this.width) {\n\n\t\t\tconst calculator = new CompositionWidthCalculator(this.baseColumnWidths, this.width, this.MIN_COLUMN_WIDTH);\n\n\t\t\tthis.columnWidths = calculator.calculate();\n\t\t}\n\t}\n\n\tprivate setContainerWidth(width: number): void {\n\t\tif (this.getMinWidth() > width) {\n\t\t\tthis.width = this.getMinWidth();\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.calculate();\n\t}\n}\n","export enum SortStatus {\n\tASC,\n\tDESC,\n\tNONE\n}\n","import { CellView } from '../../cell-view';\n\nexport class ViewEntity {\n\n\tprivate readonly view: CellView;\n\n\tprivate readonly templateFunction?: (entity: any) => string = (value: any) => value;\n\n\tconstructor(columnView: CellView | any) {\n\n\t\tif (typeof columnView === 'function') {\n\t\t\tthis.view = CellView.FUNCTION;\n\t\t\tthis.templateFunction = columnView;\n\t\t} else {\n\t\t\tthis.view = columnView;\n\t\t}\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view;\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.templateFunction;\n\t}\n\n}\n","import { CellView } from '../../cell-view';\nimport { ColumnId } from './column.id';\nimport { ColumnField } from './field/column-field';\nimport { HeaderTemplate } from '../../column.config';\nimport { SortStatus } from '../sort/sort-status';\nimport { ViewEntity } from './view.entity';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\nexport class ColumnEntity {\n\n\tcolumnId: ColumnId;\n\n\tcolumnField: ColumnField;\n\n\theader?: string | HeaderTemplate;\n\n\tsortStatus = SortStatus.NONE;\n\n\twidth?: number;\n\n\tsortable?: boolean;\n\n\tprivate view: ViewEntity = new ViewEntity(CellView.TEXT);\n\n\tconstructor(columnField: ColumnField,\n\t\t\t\theader?: string | HeaderTemplate,\n\t\t\t\tview?: ViewEntity,\n\t\t\t\twidth?: number) {\n\t\tthis.columnField = columnField;\n\n\t\tif (header) {\n\t\t\tthis.header = header;\n\t\t}\n\n\t\tif (view) {\n\t\t\tthis.view = view;\n\t\t}\n\n\t\tif (width) {\n\t\t\tthis.width = width;\n\t\t}\n\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.columnField;\n\t}\n\n\tgetHeader(): string | HeaderTemplate{\n\t\treturn this.header;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.columnField.getDataType();\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view.getCellView();\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.view.getTemplateFunction();\n\t}\n\n\tsetSortStatus(status: SortStatus): void {\n\t\tthis.sortStatus = status;\n\t}\n\n\tsetView(view: ViewEntity): void {\n\t\tthis.view = view;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnParams } from './set-columns/column.params';\nimport { ColumnEntity } from './column.entity';\nimport { ColumnConfig } from '../../column.config';\nimport { ColumnField } from './field/column-field';\nimport { ViewEntity } from './view.entity';\n\n\n@Injectable()\nexport class ColumnEntityFactory {\n\n\tcreate(params: ColumnParams): ColumnEntity;\n\tcreate(params: Array<ColumnParams>): Array<ColumnEntity>;\n\tcreate(data: ColumnParams | Array<ColumnParams>): ColumnEntity | Array<ColumnEntity> {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createColumns(data);\n\t\t} else {\n\t\t\treturn this.createColumn(data);\n\t\t}\n\t}\n\n\tprivate createColumn(params: ColumnParams): ColumnEntity {\n\n\t\tconst column: ColumnConfig = params.getColumn(),\n\t\t\tfield: ColumnField = params.getField();\n\n\t\tlet columnEntity = new ColumnEntity(field);\n\n\t\tif (column.header !== undefined) {\n\t\t\tcolumnEntity.header = column.header;\n\t\t}\n\n\t\tif (column.view !== undefined) {\n\t\t\tcolumnEntity.setView(new ViewEntity(column.view));\n\t\t}\n\n\t\tif (column.width !== undefined) {\n\t\t\tcolumnEntity.width = this.convertWidth(column.width);\n\t\t}\n\n\t\treturn columnEntity;\n\t}\n\n\tprivate createColumns(columns: Array<ColumnParams>): Array<ColumnEntity> {\n\n\t\tlet columnEntities = [] as Array<ColumnEntity>;\n\n\t\tcolumns.forEach((column: ColumnParams) => {\n\t\t\tcolumnEntities.push(this.createColumn(column));\n\t\t});\n\n\t\treturn columnEntities;\n\t}\n\n\tprivate convertWidth(width: string | number): number {\n\t\treturn +width;\n\t}\n}\n","import { AggregateId, AggregateEvent } from '@generic-ui/hermes';\n\nimport { ColumnEntity } from '../column.entity';\n\n\nexport class ColumnsSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'ColumnsSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionContainerWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId,\n\t\t\t\tpublic readonly containerWidth: number) {\n\t\tsuper(compositionId, 'CompositionContainerWidthSetAggregateEvent');\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionResizeWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId) {\n\t\tsuper(compositionId, 'CompositionResizeWidthSetAggregateEvent');\n\t}\n}\n","import { Aggregate, AggregateId } from '@generic-ui/hermes';\nimport { ColumnWidthCollection } from './column/column-width/column-width-collection';\nimport { ColumnEntity } from './column/column.entity';\nimport { ColumnConfig } from '../column.config';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { ColumnEntityFactory } from './column/column-entity.factory';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { SortStatus } from './sort/sort-status';\nimport { ColumnsSetAggregateEvent } from './column/set-columns/columns-set.aggregate-event';\nimport { CompositionContainerWidthCalculator } from './width/composition-container-width.calculator';\nimport { CompositionWidthSetAggregateEvent } from './width/set-width/composition-width-set.aggregate-event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionResizeWidthSetAggregateEvent } from './width/resize-width/composition-resize-width-set.aggregate-event';\n\n\nexport class CompositionAggregate extends Aggregate {\n\n\tprivate readonly MIN_COLUMN_WIDTH = 50;\n\n\t/**\n\t * Columns taken from user config.\n\t * This should not be modified and it should be used as a reference point.\n\t */\n\tprivate columnWidthCollection: ColumnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH);\n\n\t/**\n\t * Collection of columns which are used in the composition.\n\t */\n\tprivate activeColumns: Array<ColumnEntity> = [];\n\n\tprivate readonly baseColumns: Array<ColumnConfig>;\n\n\tprivate readonly baseParams: Array<ColumnParams>;\n\n\t/**\n\t * Value taken from user config [width]\n\t */\n\tprivate width: number;\n\n\t/**\n\t * DOM element's width\n\t */\n\tprivate containerWidth: number;\n\n\tprivate resizeWidthEnabled: boolean = true;\n\n\t/**\n\t * Autowired\n\t */\n\tprivate readonly columnFactory: ColumnEntityFactory = new ColumnEntityFactory();\n\n\tconstructor(id: AggregateId,\n\t\t\t\tcolumnsParams: Array<ColumnParams> = [],\n\t\t\t\twidth?: number,\n\t\t\t\tresizeWidth?: boolean) {\n\t\tsuper(id);\n\n\t\tconst columns = columnsParams.map((param) => param.getColumn());\n\n\t\tthis.baseParams = columnsParams;\n\t\tthis.baseColumns = columns;\n\t\tthis.width = width;\n\n\t\tthis.activeColumns = this.columnFactory.create(columnsParams);\n\t\tthis.columnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH, columns, width);\n\n\t\tif (resizeWidth !== undefined && resizeWidth !== null) {\n\t\t\tthis.resizeWidthEnabled = resizeWidth;\n\t\t}\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.activeColumns;\n\t}\n\n\tgetWidth(): number {\n\n\t\tif (this.resizeWidthEnabled) {\n\t\t\treturn this.containerWidth;\n\t\t} else {\n\t\t\treturn this.width;\n\t\t}\n\t}\n\n\tisResizeEnabled(): boolean {\n\t\treturn this.resizeWidthEnabled;\n\t}\n\n\tisReady(): boolean {\n\t\treturn !!this.getWidth() && this.activeColumns.length > 0;\n\t}\n\n\tclone(): CompositionAggregate {\n\n\t\tconst activeColumns = [...this.activeColumns];\n\n\t\tlet composition = new CompositionAggregate(\n\t\t\tthis.getId(),\n\t\t\tthis.baseParams,\n\t\t\tthis.width,\n\t\t\tthis.resizeWidthEnabled\n\t\t);\n\n\t\tcomposition.containerWidth = this.containerWidth;\n\t\tcomposition.activeColumns = activeColumns;\n\t\tcomposition.columnWidthCollection = this.columnWidthCollection;\n\n\t\treturn composition;\n\t}\n\n\tsetColumns(params: Array<ColumnParams>): void {\n\n\t\tconst columns: Array<ColumnConfig> = params.map((param: ColumnParams) => param.getColumn());\n\n\t\tthis.columnWidthCollection.setColumns(columns);\n\n\t\tconst newColumns = this.columnFactory.create(params),\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tsetContainerWidth(containerWidth: number): void {\n\n\t\tthis.setContainerWidthWithEvent(containerWidth);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.setWidthWithEvent(width);\n\n\t\tthis.setResizeWidthWithEvent(false);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetResizeWidth(enabled: boolean): void {\n\t\tthis.setResizeWidthWithEvent(enabled);\n\t}\n\n\t// TODO Aggregate events\n\tchangeSort(sortParams: Array<ChangeSortParams>): void {\n\n\t\tthis.activeColumns.forEach((column: ColumnEntity) => {\n\t\t\tcolumn.setSortStatus(SortStatus.NONE);\n\t\t});\n\n\t\tfor (let param of sortParams) {\n\n\t\t\tconst fieldId = param.fieldId,\n\t\t\t\tdirection = param.direction,\n\t\t\t\tsortStatus = direction ? SortStatus.ASC : SortStatus.DESC;\n\n\t\t\tconst columns = this.activeColumns.filter((column: ColumnEntity) => {\n\t\t\t\treturn column.getField().getId().getId() === fieldId.getId();\n\t\t\t});\n\n\t\t\tif (columns.length > 0) {\n\t\t\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\t\t\tcolumn.setSortStatus(sortStatus);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate recalculateColumns(): void {\n\n\t\tthis.columnWidthCollection.setWidth(this.getWidth());\n\n\t\tconst newColumns = [...this.activeColumns],\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tprivate updateColumnsWidths(columns: Array<ColumnEntity>, widths: Array<number>): void {\n\t\tcolumns.forEach((columnEntity: ColumnEntity, index: number) => {\n\t\t\tcolumnEntity.width = widths[index];\n\t\t});\n\t}\n\n\tprivate setActiveColumnsWithEvent(columns: Array<ColumnEntity>): void {\n\t\tthis.activeColumns = columns;\n\t\tthis.addEvent(new ColumnsSetAggregateEvent(this.getId(), columns));\n\t}\n\n\t// TODO Refactor\n\tprivate setWidthWithEvent(width: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > width) {\n\t\t\tthis.width = minWidth;\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.addEvent(new CompositionWidthSetAggregateEvent(this.getId()));\n\t}\n\n\t// TODO Refactor\n\tprivate setContainerWidthWithEvent(containerWidth: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > containerWidth) {\n\t\t\tthis.containerWidth = minWidth;\n\t\t} else {\n\t\t\tthis.containerWidth = containerWidth;\n\t\t}\n\n\t\tthis.addEvent(new CompositionContainerWidthSetAggregateEvent(this.getId(), containerWidth));\n\t}\n\n\tprivate setResizeWidthWithEvent(enabled: boolean): void {\n\t\tthis.resizeWidthEnabled = enabled;\n\t\tthis.addEvent(new CompositionResizeWidthSetAggregateEvent(this.getId()));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { CompositionAggregate } from '../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionStore extends InMemoryStore<CompositionAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore, AggregateStoreRegister, AggregateId } from '@generic-ui/hermes';\n\nimport { Override } from '../../../../../../common/cdk/decorators';\n\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateStore extends InMemoryAggregateStore<CompositionAggregate> {\n\n\tconstructor(inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryCompositionStore, aggregateStoreRegister);\n\t}\n\n\t@Override\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\tlet composition = super.getById(aggregateId);\n\n\t\tif (composition) {\n\t\t\treturn composition.clone();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}\n","import { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\nexport abstract class CompositionAggregateRepository {\n\n\tabstract getById(compositionId: CompositionId): CompositionAggregate;\n\n\tabstract save(aggregate: CompositionAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateStore } from './in-memory.composition.aggregate-store';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateRepository extends CompositionAggregateRepository {\n\n\tconstructor(private inMemoryCompositionAggregateStore: InMemoryCompositionAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\treturn this.inMemoryCompositionAggregateStore.getById(aggregateId);\n\t}\n\n\tsave(aggregate: CompositionAggregate): void {\n\t\tthis.inMemoryCompositionAggregateStore.save(aggregate);\n\t}\n\n}\n","import { ComponentFactoryResolver, ComponentRef, Injector, TemplateRef, Type } from '@angular/core';\nimport { TemplatesComponent } from './templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\nimport { CellView } from '../../cell-view';\n\n\n\nexport abstract class TemplateFactory<T extends TemplatesComponent> {\n\n\tprivate templates: Map<DataType | CellView, TemplateRef<any>> = new Map<DataType | CellView, TemplateRef<any>>();\n\n\tprivate templatesComponent: ComponentRef<T> = null;\n\n\tprotected constructor(private readonly templatesComponentDefinition: Type<T>,\n\t\t\t\t\t\t  private componentFactoryResolver: ComponentFactoryResolver) {\n\t\tthis.createTemplatesComponent();\n\t}\n\n\tabstract generateMapKeys(): Array<DataType | CellView>;\n\n\tgetTemplates(): Map<DataType | CellView, TemplateRef<any>> {\n\t\treturn this.templates;\n\t}\n\n\tdestroy(): void {\n\t\tif (this.templatesComponent) {\n\t\t\tthis.templatesComponent.destroy();\n\t\t\tthis.templatesComponent = null;\n\t\t}\n\t}\n\n\tprivate createTemplatesComponent(): void {\n\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.templatesComponentDefinition);\n\n\t\tconst injector: Injector = Injector.create({ providers: [] });\n\n\t\tthis.templatesComponent = componentFactory.create(injector);\n\n\t\tthis.generateMap();\n\t}\n\n\tprivate generateMap(): void {\n\t\tthis.generateMapKeys()\n\t\t\t.forEach((type: DataType | CellView) => {\n\t\t\t\tthis.findAndSetTemplate(type);\n\t\t\t});\n\t};\n\n\tprivate findAndSetTemplate(dt: DataType | CellView): void {\n\n\t\tconst template = this.templatesComponent.instance.getTemplate(dt);\n\n\t\tthis.templates.set(dt, template);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\n\nimport { ViewTemplatesComponent } from './view-templates.component';\nimport { CellView } from '../../cell-view';\nimport { TemplateFactory } from '../template/template.factory';\n\n\n@Injectable()\nexport class ViewTemplateFactory extends TemplateFactory<ViewTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tViewTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<CellView> {\n\t\treturn Object.keys(CellView)\n\t\t\t\t\t .map(key => CellView[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { ViewTemplateFactory } from './view-template.factory';\nimport { CellView } from '../../cell-view';\n\n\n\n@Injectable()\nexport class ViewTemplateRepository {\n\n\tconstructor(private columnTemplateFactory: ViewTemplateFactory) {\n\t}\n\n\tfindTemplate(view: CellView): TemplateRef<any> {\n\t\tconst typeToTemplate = this.columnTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(view);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { TemplateFactory } from '../template/template.factory';\nimport { EditTemplatesComponent } from './edit-templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateFactory extends TemplateFactory<EditTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tEditTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<DataType> {\n\t\treturn Object.keys(DataType)\n\t\t\t\t\t .map(key => DataType[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { EditTemplateFactory } from './edit-template.factory';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateRepository {\n\n\tconstructor(private editTemplateFactory: EditTemplateFactory) {\n\t}\n\n\tfindTemplate(dataType: DataType): TemplateRef<any> {\n\t\tconst typeToTemplate = this.editTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(dataType);\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { SortStatus } from '../../command/sort/sort-status';\n\n\nexport class CellTemplateWithContext {\n\n\tconstructor(public viewTemplate: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\t// public editContext: any,\n\t\t\t\tpublic context: CellContext,\n\t\t\t\tpublic width: number,\n\t\t\t\tprivate readonly fieldId: FieldId,\n\t\t\t\tprivate readonly sortStatus: SortStatus) {\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetSortStatus(): SortStatus {\n\t\treturn this.sortStatus;\n\t}\n}\n","export class CellContext {\n\n\tconstructor(public element: string) {\n\t}\n}\n","export class FieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n\n\tequals(fieldId: FieldId): boolean {\n\t\treturn fieldId.getId() === this.id;\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnFieldId } from '../../command/column/field/column-field.id';\n\n\nexport class CellTemplateWithAccessor {\n\n\tconstructor(public template: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\tpublic editable: boolean,\n\t\t\t\tpublic accessor: (element: any) => any,\n\t\t\t\tpublic width: number,\n\t\t\t\tpublic columnFieldId: ColumnFieldId) {\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnField } from '../../command/column/field/column-field';\nimport { SortStatus } from '../../command/sort/sort-status';\nimport { HeaderTemplate } from '../../column.config';\nimport { CellTemplateWithContext } from './cell-template-with-context';\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { CellTemplateWithAccessor } from './cell-template-with-accessor';\n\n\nexport class ColumnDefinition {\n\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\teditTemplate: TemplateRef<any>;\n\n\twidth: number;\n\n\ttemplateFunction: (i: any) => string;\n\n\tprivate field: ColumnField;\n\n\tprivate sortStatus: SortStatus;\n\n\tprivate header: string | HeaderTemplate;\n\n\tconstructor(field: ColumnField,\n\t\t\t\theader: string | HeaderTemplate,\n\t\t\t\tsort: SortStatus = SortStatus.NONE) {\n\t\tthis.field = field;\n\t\tthis.header = header;\n\t\tthis.sortStatus = sort;\n\t}\n\n\tsetHeader(header: string): void {\n\t\tthis.header = header;\n\t}\n\n\tsetField(field: ColumnField): void {\n\t\tthis.field = field;\n\t}\n\n\tgetHeaderCellTemplateWithContext(index: number): CellTemplateWithContext {\n\n\t\tconst header: any = this.header;\n\t\tlet headerCellContext: CellContext;\n\n\t\tif (typeof header === 'string') {\n\t\t\theaderCellContext = new CellContext(header);\n\t\t} else if (typeof header === 'function') {\n\t\t\theaderCellContext = new CellContext(header(index));\n\t\t}\n\n\t\tconst fieldId = new FieldId(this.field.getId().getId());\n\n\t\treturn new CellTemplateWithContext(this.headerTemplate, this.editTemplate, headerCellContext, this.width, fieldId, this.sortStatus);\n\t}\n\n\tgetContentCellTemplateWithAccessor(): CellTemplateWithAccessor {\n\n\t\tlet accessor = (entity: any) => {\n\t\t\treturn this.templateFunction(this.field.getAccessor()(entity));\n\t\t};\n\n\t\treturn new CellTemplateWithAccessor(this.cellTemplate, this.editTemplate, true, accessor, this.width, this.field.getId());\n\t}\n\n}\n","import { Injectable, TemplateRef } from '@angular/core';\n\nimport { ViewTemplateRepository } from '../view/view-template.repository';\nimport { EditTemplateRepository } from '../edit/edit-template.repository';\nimport { ColumnEntity } from '../../command/column/column.entity';\nimport { ColumnDefinition } from './column-definition';\nimport { CellView } from '../../cell-view';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class ColumnDefinitionFactory {\n\n\tconstructor(private viewTemplateRepository: ViewTemplateRepository,\n\t\t\t\tprivate editTemplateRepository: EditTemplateRepository) {\n\t}\n\n\tcreate(column: ColumnEntity): ColumnDefinition {\n\n\t\tlet columnDef = new ColumnDefinition(column.getField(), column.getHeader(), column.sortStatus);\n\n\t\tcolumnDef.cellTemplate = this.findViewTemplate(column.getCellView());\n\t\tcolumnDef.headerTemplate = this.findViewTemplate(CellView.TEXT);\n\n\t\tcolumnDef.templateFunction = column.getTemplateFunction();\n\n\t\tcolumnDef.editTemplate = this.findEditTemplate(column.getDataType());\n\n\t\tcolumnDef.width = +column.width;\n\n\t\treturn columnDef;\n\t}\n\n\tcreateColumns(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\t\treturn columns.map((column: ColumnEntity) => this.create(column));\n\t}\n\n\tprivate findViewTemplate(view: CellView): TemplateRef<any> {\n\n\t\tif (view === CellView.FUNCTION) {\n\t\t\treturn this.viewTemplateRepository.findTemplate(CellView.FUNCTION);\n\t\t} else {\n\t\t\treturn this.viewTemplateRepository.findTemplate(view);\n\t\t}\n\t}\n\n\tprivate findEditTemplate(dataType: DataType): TemplateRef<any> {\n\t\treturn this.editTemplateRepository.findTemplate(dataType);\n\t}\n\n}\n","import { ReadModel, AggregateId } from '@generic-ui/hermes';\n\nimport { ColumnDefinition } from './definition/column-definition';\nimport { CellTemplateWithContext } from './definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from './definition/cell-template-with-accessor';\n\n\nexport class Composition extends ReadModel {\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tprivate readonly ready: boolean,\n\t\t\t\tprivate readonly columns: Array<ColumnDefinition>,\n\t\t\t\tprivate readonly width: number,\n\t\t\t\tprivate readonly resizeWidth: boolean) {\n\t\tsuper(uid);\n\t}\n\n\tgetColumns(): Array<ColumnDefinition> {\n\t\treturn this.columns;\n\t}\n\n\tgetHeaderColumns(): Array<CellTemplateWithContext> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition, index: number) => column.getHeaderCellTemplateWithContext(index));\n\t}\n\n\tgetTemplateColumns(): Array<CellTemplateWithAccessor> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition) => column.getContentCellTemplateWithAccessor());\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetContainerWidth(): number {\n\t\treturn +this.width - 2;\n\t}\n\n\tisReady(): boolean {\n\t\treturn this.ready;\n\t}\n\n\tisResizeWidthEnabled(): boolean {\n\t\treturn this.resizeWidth;\n\t}\n\n\tequals(composition: Composition): boolean {\n\t\treturn this.width === composition.width &&\n\t\t\tthis.resizeWidth === composition.resizeWidth &&\n\t\t\tthis.equalsByColumns(composition.columns);\n\t}\n\n\tequalsByColumns(columns: Array<ColumnDefinition>): boolean {\n\t\treturn this.columns.length === columns.length;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnDefinitionFactory } from './query/definition/column-definition.factory';\nimport { CompositionAggregate } from './command/composition.aggregate';\nimport { Composition } from './query/composition';\nimport { ColumnEntity } from './command/column/column.entity';\nimport { ColumnDefinition } from './query/definition/column-definition';\n\n\n@Injectable()\nexport class CompositionConverter {\n\n\tconstructor(private columnDefinitionFactory: ColumnDefinitionFactory) {}\n\n\tconvert(aggregate: CompositionAggregate): Composition {\n\n\t\tconst ready = aggregate.isReady(),\n\t\t\tcolumns: Array<ColumnEntity> = aggregate.getColumns(),\n\t\t\tcolumnDefs: Array<ColumnDefinition> = this.convertColumnsToColumnDef(columns),\n\t\t\twidth = aggregate.getWidth(),\n\t\t\tresizeWidth = aggregate.isResizeEnabled(),\n\t\t\tid = aggregate.getId();\n\n\t\treturn new Composition(id, ready, columnDefs, width, resizeWidth);\n\t}\n\n\tprivate convertColumnsToColumnDef(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\n\t\tconst columnDefs: Array<ColumnDefinition> = [];\n\n\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\tconst columnDef = this.columnDefinitionFactory.create(column);\n\n\t\t\tcolumnDefs.push(columnDef);\n\t\t});\n\n\t\treturn columnDefs;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Composition } from '../../../../domain/composition/query/composition';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\nimport { CompositionConverter } from '../../../../domain/composition/composition.converter';\n\n\n@Injectable()\nexport class InMemoryCompositionQueryStore extends InMemoryReadModelStore<Composition, CompositionAggregate> {\n\n\tconstructor(private inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\tprivate compositionConverter: CompositionConverter) {\n\t\tsuper(inMemoryCompositionStore);\n\t}\n\n\ttoReadModel(aggregate: CompositionAggregate): Composition {\n\t\treturn this.compositionConverter.convert(aggregate);\n\t}\n\n}\n","import { Observable } from 'rxjs';\n\nimport { CompositionId } from '../composition-id';\nimport { Composition } from './composition';\n\n\nexport abstract class CompositionRepository {\n\n\tabstract select(compositionId: CompositionId): Observable<Composition>;\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class CompositionInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionInitedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionResizeWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionResizeWidthSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class ColumnsSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ColumnsSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionContainerWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tpayload: any) {\n\t\tsuper(aggregateId, 'CompositionContainerWidthSetEvent', payload);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ColumnEntity } from '../column/column.entity';\n\n\nexport class CompositionChangeSortStatusEvent extends DomainEvent {\n\n\tconstructor(aggregateId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'CompositionChangeSortStatusEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionRepository } from '../../../../domain/composition/query/composition.repository';\nimport { Composition } from '../../../../domain/composition/query/composition';\nimport { InMemoryCompositionQueryStore } from './in-memory.composition.query-store';\nimport { CompositionInitedEvent } from '../../../../domain/composition/command/init/composition-inited.event';\nimport { CompositionResizeWidthSetEvent } from '../../../../domain/composition/command/width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from '../../../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from '../../../../domain/composition/command/width/set-width/composition-width-set.event';\nimport { CompositionChangeSortStatusEvent } from '../../../../domain/composition/command/sort/composition-change-sort-status.event';\n\n\n@Injectable()\nexport class InMemoryCompositionRepository extends CompositionRepository implements OnDestroy {\n\n\tprivate readonly composition$ = new ReplaySubject<Composition>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryCompositionQueryStore: InMemoryCompositionQueryStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tCompositionInitedEvent,\n\t\t\t\tCompositionResizeWidthSetEvent,\n\t\t\t\tColumnsSetEvent,\n\t\t\t\tCompositionContainerWidthSetEvent,\n\t\t\t\tCompositionWidthSetEvent,\n\t\t\t\tCompositionChangeSortStatusEvent as any\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst composition = this.inMemoryCompositionQueryStore.getById(aggregateId);\n\n\t\t\t\tthis.composition$.next(composition);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tselect(aggregateId: AggregateId): Observable<Composition> {\n\n\t\treturn this.composition$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((composition: Composition) => composition.getId().toString() === aggregateId.toString()),\n\t\t\t\t\t   filter((composition: Composition) => composition.isReady())\n\t\t\t\t   );\n\t}\n\n}\n","import { InMemoryCompositionAggregateStore } from './command/in-memory.composition.aggregate-store';\nimport { CompositionAggregateRepository } from '../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateRepository } from './command/in-memory.composition.aggregate-repository';\nimport { InMemoryCompositionQueryStore } from './query/in-memory.composition.query-store';\nimport { CompositionRepository } from '../../../domain/composition/query/composition.repository';\nimport { InMemoryCompositionRepository } from './query/in-memory.composition.repository';\nimport { InMemoryCompositionStore } from './in-memory.composition.store';\n\nexport const inMemoryCompositionCommandProviders = [\n\tInMemoryCompositionAggregateStore,\n\t{\n\t\tprovide: CompositionAggregateRepository,\n\t\tuseClass: InMemoryCompositionAggregateRepository\n\t},\n];\n\nexport const inMemoryCompositionQueryProviders = [\n\tInMemoryCompositionQueryStore,\n\t{\n\t\tprovide: CompositionRepository,\n\t\tuseClass: InMemoryCompositionRepository\n\t}\n];\n\nexport const inMemoryCompositionProviders = [\n\tInMemoryCompositionStore\n];\n","import { Injectable } from '@angular/core';\n\nimport { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\n@Injectable()\nexport class CompositionAggregateFactory {\n\n\tcreate(id: CompositionId): CompositionAggregate {\n\t\treturn new CompositionAggregate(id);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\n\n\nexport class InitCompositionCommand extends Command {\n\n\tconstructor(public readonly compositionId: CompositionId) {\n\t\tsuper(compositionId, 'InitCompositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\nimport { ColumnParams } from './column.params';\n\n\nexport class SetColumnsCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnParams>) {\n\t\tsuper(compositionId, 'SetColumnsCommand');\n\t}\n\n\tgetParams(): Array<ColumnParams> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionContainerWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionContainerWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionResizeWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetCompositionResizeWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ChangeSortParams } from './change-sort.params';\n\n\nexport class CompositionChangeSortStatusCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly sortParams: Array<ChangeSortParams>) {\n\t\tsuper(compositionId, 'CompositionChangeSortStatusCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetSortParams(): Array<ChangeSortParams> {\n\t\treturn this.sortParams;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../composition-id';\nimport { InitCompositionCommand } from './init/init-composition.command';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { SetColumnsCommand } from './column/set-columns/set-columns.command';\nimport { SetCompositionWidthCommand } from './width/set-width/set-composition-width.command';\nimport { SetCompositionContainerWidthCommand } from './width/set-container-width/set-composition-container-width.command';\nimport { SetCompositionResizeWidthCommand } from './width/resize-width/set-composition-resize-width.command';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { CompositionChangeSortStatusCommand } from './sort/composition-change-sort-status.command';\n\n\n@Injectable()\nexport class CompositionDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId): void {\n\t\tthis.commandDispatcher.dispatch(new InitCompositionCommand(compositionId));\n\t}\n\n\tsetColumns(compositionId: CompositionId, params: Array<ColumnParams>): void {\n\t\tthis.commandDispatcher.dispatch(new SetColumnsCommand(compositionId, params));\n\t}\n\n\tsetWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionWidthCommand(compositionId, width));\n\t}\n\n\tsetContainerWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionContainerWidthCommand(compositionId, width));\n\t}\n\n\tsetResizeWidth(compositionId: CompositionId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionResizeWidthCommand(compositionId, enabled));\n\t}\n\n\tchangeSort(compositionId: CompositionId, params: Array<ChangeSortParams>): void {\n\t\tthis.commandDispatcher.dispatch(new CompositionChangeSortStatusCommand(compositionId, params));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionAggregateFactory } from '../composition.aggregate-factory';\nimport { InitCompositionCommand } from './init-composition.command';\nimport { CompositionInitedEvent } from './composition-inited.event';\n\n\n@Injectable()\nexport class InitCompositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly compositionAggregateFactory: CompositionAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitCompositionCommand,\n\t\t\tCompositionInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitCompositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.compositionId;\n\n\t\tconst compositionAggregate = this.compositionAggregateFactory.create(aggregateId);\n\n\t\tthis.compositionAggregateRepository.save(compositionAggregate);\n\t}\n\n}\n","export const CompositionAggregateEvents = {\n\tCompositionResizeWidthSetAggregateEvent: 'CompositionResizeWidthSetAggregateEvent',\n\tColumnsSetAggregateEvent: 'ColumnsSetAggregateEvent',\n\tCompositionContainerWidthSetAggregateEvent: 'CompositionContainerWidthSetAggregateEvent',\n\tCompositionWidthSetAggregateEvent: 'CompositionWidthSetAggregateEvent',\n};\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateEvents } from './composition.events';\nimport { CompositionResizeWidthSetEvent } from './width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from './column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionContainerWidthSetEvent } from './width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from './width/set-width/composition-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventConverter {\n\n\tconvert(event: AggregateEvent): DomainEvent;\n\tconvert(events: Array<AggregateEvent>): Array<DomainEvent>;\n\tconvert(arg: AggregateEvent | Array<AggregateEvent>): DomainEvent | Array<DomainEvent> {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn this.convertEvents(arg);\n\t\t} else {\n\t\t\treturn this.convertEvent(arg);\n\t\t}\n\t}\n\n\tprivate convertEvents(aggregateEvents: Array<AggregateEvent>): Array<DomainEvent> {\n\t\treturn aggregateEvents.map((event: AggregateEvent) => {\n\t\t\treturn this.convertEvent(event);\n\t\t});\n\t}\n\n\tprivate convertEvent(aggregateEvent: AggregateEvent): DomainEvent {\n\n\t\tswitch (aggregateEvent.getType()) {\n\t\t\tcase CompositionAggregateEvents.CompositionResizeWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionResizeWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.ColumnsSetAggregateEvent:\n\n\t\t\t\treturn new ColumnsSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.CompositionContainerWidthSetAggregateEvent:\n\n\t\t\t\tconst payload = (aggregateEvent as CompositionContainerWidthSetAggregateEvent).containerWidth;\n\n\t\t\t\treturn new CompositionContainerWidthSetEvent(aggregateEvent.getAggregateId(), payload);\n\n\t\t\tcase CompositionAggregateEvents.CompositionWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Command, DomainEventPublisher, CommandHandler, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { CompositionAggregate } from '../../composition.aggregate';\n\nimport { SetColumnsCommand } from './set-columns.command';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class SetColumnsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetColumnsCommand);\n\t}\n\n\thandle(command: SetColumnsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.getAggregateId(),\n\t\t\tsetColumnsParams: Array<ColumnParams> = command.getParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setColumns(setColumnsParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishEvents(composition, command);\n\t}\n\n\tprivate publishEvents(composition: CompositionAggregate, command: Command): void {\n\n\t\tconst events = composition.getEvents() as Array<AggregateEvent>;\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(events);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionWidthCommand } from './set-composition-width.command';\nimport { CompositionWidthSetEvent } from './composition-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionWidthCommand,\n\t\t\tCompositionWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionResizeWidthCommand } from './set-composition-resize-width.command';\nimport { CompositionResizeWidthSetEvent } from './composition-resize-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionResizeWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionResizeWidthCommand,\n\t\t\tCompositionResizeWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionResizeWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setResizeWidth(enabled);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { SetCompositionContainerWidthCommand } from './set-composition-container-width.command';\n\n\n@Injectable()\nexport class SetCompositionContainerWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetCompositionContainerWidthCommand);\n\t}\n\n\thandle(command: SetCompositionContainerWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setContainerWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishAggregateEvents(composition.getEvents() as Array<AggregateEvent>);\n\t}\n\n\tprivate publishAggregateEvents(aggregateEvents: Array<AggregateEvent>): void {\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(aggregateEvents);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../composition-event.converter';\nimport { CompositionChangeSortStatusCommand } from './composition-change-sort-status.command';\nimport { CompositionChangeSortStatusEvent } from './composition-change-sort-status.event';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(CompositionChangeSortStatusCommand);\n\t}\n\n\thandle(command: CompositionChangeSortStatusCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst compositionId = command.getCompositionId(),\n\t\t\tsortParams = command.getSortParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(compositionId);\n\n\t\tcomposition.changeSort(sortParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tconst columns = composition.getColumns();\n\n\t\tthis.domainEventPublisher.publish(new CompositionChangeSortStatusEvent(compositionId, columns));\n\t}\n\n}\n","import { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\n\n\nexport class ColumnField {\n\n\tprivate readonly fieldId: ColumnFieldId;\n\n\tprivate readonly accessor: ColumnFieldAccessor;\n\n\tprivate readonly dataType: DataType;\n\n\tconstructor(fieldId: ColumnFieldId,\n\t\t\t\taccessor: ColumnFieldAccessor,\n\t\t\t\tdataType: DataType) {\n\t\tthis.fieldId = fieldId;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\t}\n\n\tgetId(): ColumnFieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessor(entity);\n\t}\n\n\tgetAccessor(): ColumnFieldAccessor {\n\t\treturn this.accessor;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\nimport { ColumnField } from './column-field';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\n\n\n@Injectable()\nexport class ColumnFieldFactory {\n\n\tcreate(columnFieldId: ColumnFieldId, accessor: ColumnFieldAccessor, dataType: DataType): ColumnField {\n\t\treturn new ColumnField(columnFieldId, accessor, dataType);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { ColumnsSetEvent } from '../../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tselectColumnsChanged(compositionId: CompositionId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tselectWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tselectContainerWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   CompositionContainerWidthSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.getAggregateId().equals(compositionId)),\n\t\t\t\t\t   map((event: CompositionContainerWidthSetEvent) => {\n\t\t\t\t\t\t   return event.getPayload();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((width: number) => !!width)\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { CompositionId } from './composition-id';\n\nexport const globalCompositionId = new CompositionId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CompositionRepository } from '../../../domain/composition/query/composition.repository';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { Composition } from '../../../domain/composition/query/composition';\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../../domain/composition/query/definition/cell-template-with-accessor';\n\n\n\n@Injectable()\nexport class CompositionQueryService {\n\n\tconstructor(private compositionRepository: CompositionRepository) {\n\t}\n\n\tselectWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getWidth())\n\t\t\t\t   );\n\t}\n\n\tselectContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getContainerWidth())\n\t\t\t\t   );\n\t}\n\n\tselectWidthForEachColumn(compositionId: CompositionId = globalCompositionId): Observable<Array<number>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getColumns().map(c => c.width))\n\t\t\t\t   );\n\t}\n\n\tselectHeaderColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithContext>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getHeaderColumns())\n\t\t\t\t   );\n\t}\n\n\tselectTemplateColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getTemplateColumns()),\n\t\t\t\t   );\n\t}\n\n\tselectResizeWidth(compositionId: CompositionId = globalCompositionId): Observable<boolean> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.isResizeWidthEnabled())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CompositionDispatcher } from '../../../domain/composition/command/composition.dispatcher';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../../domain/composition/command/column/set-columns/column.params';\n\n\n\n@Injectable()\nexport class CompositionCommandService {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.init(compositionId);\n\t}\n\n\tsetColumns(params: Array<ColumnParams>, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setColumns(compositionId, params);\n\t}\n\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setWidth(compositionId, width);\n\t}\n\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setContainerWidth(compositionId, width);\n\t}\n\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setResizeWidth(compositionId, enabled);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class SortToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly directions: Array<{fieldId: FieldId, direction: boolean}>) {\n\t\tsuper(aggregateId, 'ToggleSortEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetDirections(): any {\n\t\treturn this.directions;\n\t}\n}\n","export class ColumnFieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n}\n","import { ColumnFieldId } from '../column/field/column-field.id';\n\nexport class ChangeSortParams {\n\n\tconstructor(public readonly fieldId: ColumnFieldId,\n\t\t\t\tpublic readonly direction: boolean) {}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent, DomainEventHandler } from '@generic-ui/hermes';\n\nimport { SortToggledEvent } from '../../../structure/command/sort/toggle/sort-toggled.event';\n\nimport { CompositionDispatcher } from '../composition.dispatcher';\nimport { ColumnFieldId } from '../column/field/column-field.id';\nimport { ChangeSortParams } from './change-sort.params';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof SortToggledEvent) {\n\n\t\t\tconst compositionId = event.getCompositionId(),\n\t\t\t\tdirs = event.getDirections();\n\n\t\t\tlet params = dirs.map((dir: any) => {\n\n\t\t\t\tconst columnFieldId = new ColumnFieldId(dir.fieldId.getId());\n\n\t\t\t\treturn new ChangeSortParams(columnFieldId, dir.direction);\n\t\t\t});\n\n\t\t\tthis.compositionDispatcher.changeSort(compositionId, params);\n\t\t}\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from '../data-type/field';\n\n\nexport class FieldsInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>, // TODO merge\n\t\t\t\tprivate readonly fields: Array<Field>) {\n\t\tsuper(aggregateId, 'FieldsInitedEvent');\n\t}\n\n\tgetFields(): Array<Field> {\n\t\treturn this.fields;\n\t}\n}\n","import { ColumnConfig } from '../../../column.config';\nimport { ColumnField } from '../field/column-field';\n\nexport class ColumnParams {\n\n\tconstructor(private readonly column: ColumnConfig,\n\t\t\t\tprivate readonly field: ColumnField) {\n\t}\n\n\tgetColumn(): ColumnConfig {\n\t\treturn this.column;\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.field;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler, DomainEvent } from '@generic-ui/hermes';\n\nimport { FieldsInitedEvent } from '../../../../structure/command/field/init/fields-inited.event';\nimport { Field } from '../../../../structure/command/field/data-type/field';\n\nimport { CompositionDispatcher } from '../../composition.dispatcher';\nimport { ColumnFieldFactory } from '../field/colum-field.factory';\nimport { ColumnFieldId } from '../field/column-field.id';\nimport { ColumnConfig } from '../../../column.config';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class CompositionFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher,\n\t\t\t\tprivate readonly columnFieldFactory: ColumnFieldFactory) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\t// TODO Move to different layer\n\t\t\tconst fields = event.getFields(),\n\t\t\t\tcolumnFieldIds = fields.map((field: Field) => new ColumnFieldId(field.getId().getId())),\n\t\t\t\tcolumns = event.columns,\n\t\t\t\tparams = columns.map((column: ColumnConfig, index: number) => {\n\n\t\t\t\t\tconst columnFieldId = columnFieldIds[index],\n\t\t\t\t\t\tfield = fields[index];\n\n\t\t\t\t\tconst columnField = this.columnFieldFactory.create(columnFieldId, field.getAccessorMethod(), field.getDataType());\n\n\t\t\t\t\treturn new ColumnParams(column, columnField);\n\t\t\t\t});\n\n\t\t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t\t}\n\t}\n\n\t// handle(event: DomainEvent): void {\n\t//\n\t// \tif (event instanceof FieldsInitedEvent) {\n\t//\n\t// \t\t// TODO Move to different layer\n\t// \t\tlet fields = event.getFields();\n\t//\n\t// \t\tif (!!fields) {\n\t// \t\t\tfields = [];\n\t// \t\t}\n\t// \t\tconst columnFieldIds = fields.map((field: Field) => new ColumnFieldId(field.getId().getId()));\n\t//\n\t// \t\tlet columns = event.columns || [];\n\t//\n\t// \t\tconst params = columns.map((column: ColumnConfig, index: number) => {\n\t// \t\t\tconst columnField = new ColumnField(columnFieldIds[index], fields[index].getAccessorMethod());\n\t//\n\t// \t\t\treturn new ColumnParams(column, columnField);\n\t// \t\t});\n\t//\n\t// \t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t// \t}\n\t// }\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryCompositionCommandProviders, inMemoryCompositionProviders,\n\tinMemoryCompositionQueryProviders\n} from '../../../infrastructure/in-memory/composition/in-memory.composition.providers';\nimport { CompositionAggregateFactory } from '../../../domain/composition/command/composition.aggregate-factory';\nimport { CompositionDispatcher } from '../../../domain/composition/command/composition.dispatcher';\nimport { InitCompositionCommandHandler } from '../../../domain/composition/command/init/init-composition.command-handler';\nimport { SetColumnsCommandHandler } from '../../../domain/composition/command/column/set-columns/set-columns.command-handler';\nimport { SetCompositionWidthCommandHandler } from '../../../domain/composition/command/width/set-width/set-composition-width.command-handler';\nimport { SetCompositionResizeWidthCommandHandler } from '../../../domain/composition/command/width/resize-width/set-composition-resize-width.command-handler';\nimport { SetCompositionContainerWidthCommandHandler } from '../../../domain/composition/command/width/set-container-width/set-composition-container-width.command-handler';\nimport { CompositionChangeSortStatusCommandHandler } from '../../../domain/composition/command/sort/composition-change-sort-status.command-handler';\nimport { ColumnEntityFactory } from '../../../domain/composition/command/column/column-entity.factory';\nimport { CompositionEventConverter } from '../../../domain/composition/command/composition-event.converter';\nimport { ColumnFieldFactory } from '../../../domain/composition/command/column/field/colum-field.factory';\nimport { CompositionEventService } from './composition.event-service';\nimport { CompositionQueryService } from './composition.query-service';\nimport { CompositionCommandService } from './composition.command-service';\nimport { CompositionConverter } from '../../../domain/composition/composition.converter';\nimport { EditTemplateRepository } from '../../../domain/composition/query/edit/edit-template.repository';\nimport { EditTemplateFactory } from '../../../domain/composition/query/edit/edit-template.factory';\nimport { ViewTemplateFactory } from '../../../domain/composition/query/view/view-template.factory';\nimport { ViewTemplateRepository } from '../../../domain/composition/query/view/view-template.repository';\nimport { ColumnDefinitionFactory } from '../../../domain/composition/query/definition/column-definition.factory';\nimport { CompositionChangeSortStatusEventHandler } from '../../../domain/composition/command/sort/composition-change-sort-status.event-handler';\nimport { CompositionFieldsInitedEventHandler } from '../../../domain/composition/command/column/set-columns/composition-fields-inited.event-handler';\n\n\nconst commandProviders = [\n\t...inMemoryCompositionCommandProviders,\n\tCompositionDispatcher,\n\tCompositionAggregateFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitCompositionCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetColumnsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionResizeWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionContainerWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusCommandHandler,\n\t\tmulti: true\n\t},\n\tColumnEntityFactory,\n\tCompositionEventConverter,\n\tColumnFieldFactory\n];\n\nconst queryProviders = [\n\t...inMemoryCompositionQueryProviders,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionFieldsInitedEventHandler,\n\t\tmulti: true\n\t}, \t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusEventHandler,\n\t\tmulti: true\n\t},\n\tColumnDefinitionFactory,\n\tViewTemplateRepository,\n\tViewTemplateFactory,\n\tEditTemplateFactory,\n\tEditTemplateRepository\n];\n\nexport const compositionProviders = [\n\t...inMemoryCompositionProviders,\n\t...commandProviders,\n\t...queryProviders,\n\n\tCompositionConverter,\n\n\tCompositionCommandService,\n\tCompositionQueryService,\n\tCompositionEventService\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport {\n\tFabricButtonComponent,\n\tFabricButtonModule,\n\tFabricCheckboxComponent,\n\tFabricCheckboxModule,\n\tFabricChipComponent,\n\tFabricChipModule,\n\tFabricInputComponent,\n\tFabricInputModule\n} from '@generic-ui/fabric';\nimport { ViewTemplatesComponent } from '../../../domain/composition/query/view/view-templates.component';\nimport { NumberEditTemplateComponent } from '../../../domain/composition/query/edit/template/number-edit-template.component';\nimport { StringEditTemplateComponent } from '../../../domain/composition/query/edit/template/string-edit-template.component';\nimport { EditTemplatesComponent } from '../../../domain/composition/query/edit/edit-templates.component';\nimport { BooleanEditTemplateComponent } from '../../../domain/composition/query/edit/template/boolean-edit-template.component';\nimport { ColumnQueryComponent } from '../../composition/column-query.component';\nimport { FunctionViewComponent } from '../../../domain/composition/query/view/function-view.component';\nimport { compositionProviders } from './composition.providers';\n\n\nconst components = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tStringEditTemplateComponent,\n\tNumberEditTemplateComponent,\n\tBooleanEditTemplateComponent,\n\tColumnQueryComponent,\n\tFunctionViewComponent\n];\n\nconst exportDeclarations = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tColumnQueryComponent,\n\n\tFabricChipModule,\n\tFabricCheckboxModule,\n\tFabricButtonModule,\n\tFabricInputModule,\n\tFunctionViewComponent\n];\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tReactiveFormsModule,\n\n\t\tFabricChipModule,\n\t\tFabricCheckboxModule,\n\t\tFabricButtonModule,\n\t\tFabricInputModule\n\t],\n\tproviders: [\n\t\t...compositionProviders\n\t],\n\tdeclarations: [\n\t\tcomponents\n\t],\n\texports: exportDeclarations,\n\tentryComponents: [\n\t\tViewTemplatesComponent,\n\t\tEditTemplatesComponent,\n\t\tFabricChipComponent,\n\t\tFabricCheckboxComponent,\n\t\tFabricButtonComponent,\n\t\tFabricInputComponent\n\t]\n})\nexport class CompositionModule {\n\n}\n","export class StructureIdGenerator {\n\n\tprivate increment = 0;\n\n\tgenerateId(): number {\n\t\tthis.increment++;\n\t\treturn this.increment;\n\t}\n\n}\n","export abstract class Logger {\n\n\tabstract warn(text: string): void;\n\n\tabstract error(text: string): void;\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class PageChangedAggregateEvent extends AggregateEvent{\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PageChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class PagesizeChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PagesizeChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\nimport { PagingConfigWithId } from '../paging-config-with-id';\nimport { PagingConfig } from '../paging-config';\nimport { PageChangedAggregateEvent } from './page/page-changed.aggregate-event';\nimport { StructureId } from '../../structure-id';\nimport { PagesizeChangedAggregateEvent } from './pagesize/pagesize-changed.aggregate-event';\n\n\n\n// Aggregate\nexport class PagingAggregate {\n\n\tprivate readonly events: Array<AggregateEvent> = [];\n\n\t// TODO Remove\n\tstatic default(logger: Logger) {\n\t\treturn new PagingAggregate(\n\t\t\tfalse,\n\t\t\t1,\n\t\t\t25,\n\t\t\t[10, 25, 50, 100],\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tprivate readonly logger: Logger;\n\n\tprivate constructor(private enabled: boolean,\n\t\t\t\t\t\tprivate page: number,\n\t\t\t\t\t\tprivate pageSize: number,\n\t\t\t\t\t\tprivate pageSizes: Array<number>,\n\t\t\t\t\t\tprivate pagerTop: boolean,\n\t\t\t\t\t\tprivate pagerBottom: boolean,\n\t\t\t\t\t\tlogger: Logger) {\n\t\tthis.logger = logger;\n\t}\n\n\t// TODO Remove\n\tstatic fromConfig(paging: PagingConfigWithId, logger: Logger): PagingAggregate {\n\n\t\tconst defaultPaginDefinition = PagingAggregate.default(logger),\n\t\t\tenabled = paging.enabled || defaultPaginDefinition.isEnabled(),\n\t\t\tpage = paging.page || defaultPaginDefinition.getPage(),\n\t\t\tpageSize = paging.pageSize || defaultPaginDefinition.getPageSize(),\n\t\t\tpageSizes = paging.pageSizes || defaultPaginDefinition.getPageSizes(),\n\t\t\tpagerTop = paging.pagerTop || defaultPaginDefinition.isPagerTop(),\n\t\t\tpagerBottom = paging.pagerBottom || defaultPaginDefinition.isPagerBottom();\n\n\t\treturn new PagingAggregate(\n\t\t\tenabled,\n\t\t\tpage,\n\t\t\tpageSize,\n\t\t\tpageSizes,\n\t\t\tpagerTop,\n\t\t\tpagerBottom,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn !this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerBottom;\n\t}\n\n\tchange(pagingConfig: PagingConfig): void {\n\n\t\tif (pagingConfig.enabled !== undefined) {\n\t\t\tthis.enabled = pagingConfig.enabled;\n\t\t}\n\n\t\tif (pagingConfig.page !== undefined) {\n\t\t\tthis.page = pagingConfig.page;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSize !== undefined) {\n\t\t\tthis.pageSize = pagingConfig.pageSize;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSizes !== undefined) {\n\t\t\tthis.pageSizes = pagingConfig.pageSizes;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerTop !== undefined) {\n\t\t\tthis.pagerTop = pagingConfig.pagerTop;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerBottom !== undefined) {\n\t\t\tthis.pagerBottom = pagingConfig.pagerBottom;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.enabled === true &&\n\t\t\tpagingConfig.pagerTop === false &&\n\t\t\tpagingConfig.pagerBottom === false) {\n\t\t\tthis.pagerBottom = true;\n\n\t\t\tthis.logger.warn('Pagers cannot be turn of when paging is enabled.');\n\t\t}\n\n\t}\n\n\tnextPage(sourceSize: number): void {\n\t\tlet nextPage = this.page;\n\n\t\tif (!this.isNextPageDisabled(sourceSize)) {\n\t\t\tnextPage += 1;\n\t\t}\n\n\t\tthis.page = nextPage;\n\t}\n\n\tprevPage(): void {\n\t\tlet prevPage = this.page;\n\n\t\tif (!this.isPrevPageDisabled()) {\n\t\t\tprevPage -= 1;\n\t\t}\n\n\t\tthis.page = prevPage;\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tif (this.pageSizes.find((ps: number) => ps === pageSize)) {\n\n\t\t\tthis.setPage(1);\n\t\t\tthis.setPageSize(pageSize);\n\t\t}\n\n\t\treturn this.events;\n\t}\n\n\tisNextPageDisabled(sourceSize: number): boolean {\n\t\treturn this.page === Math.ceil(sourceSize / this.pageSize);\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.page === 1;\n\t}\n\n\tcalculateStart(sourceSize: number): number {\n\n\t\tconst firstItem = 1 + ((this.page - 1) * this.pageSize);\n\n\t\tif (sourceSize < firstItem) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn firstItem;\n\t}\n\n\tcalculateEnd(sourceSize: number): number {\n\n\t\tconst lastItem = this.page * this.pageSize;\n\n\t\tif (sourceSize < lastItem) {\n\t\t\treturn sourceSize;\n\t\t}\n\n\t\treturn lastItem;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tif (this.isDisabled()) {\n\t\t\treturn source;\n\t\t}\n\n\t\tconst sourceSize = source.length;\n\n\t\tlet start = this.calculateStart(sourceSize);\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.calculateEnd(sourceSize));\n\t}\n\n\tprivate setPage(page: number): void {\n\t\tthis.page = page;\n\t\tthis.events.push(new PageChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n\tprivate setPageSize(pageSize: number): void {\n\t\tthis.pageSize = pageSize;\n\t\tthis.events.push(new PagesizeChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\n\nimport { PagingAggregate } from './paging.aggregate';\nimport { PagingConfigWithId } from '../paging-config-with-id';\n\n\n@Injectable()\nexport class PagingAggregateFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreateDefault(): PagingAggregate {\n\t\treturn PagingAggregate.default(this.logger);\n\t}\n\n\tcreateFromConfig(config: PagingConfigWithId): PagingAggregate {\n\t\treturn PagingAggregate.fromConfig(config, this.logger);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { PagingCommandService } from '../../../app/paging/paging-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingAggregateFactory } from '../../../domain/paging/command/paging.aggregate-factory';\nimport { PagingDispatcher } from '../../../domain/paging/command/paging.dispatcher';\nimport { PagingConfig } from '../../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class LocalPagingCommandService extends PagingCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tprivate aggregateFactory: PagingAggregateFactory,\n\t\t\t\tpagingDispatcher: PagingDispatcher) {\n\t\tsuper(pagingDispatcher);\n\t}\n\n\tsetDefaultPaging(): void {\n\n\t\tconst defaultPaggingAggregate = this.aggregateFactory.createDefault();\n\n\t\tsuper.setPaging({\n\t\t\tpage: defaultPaggingAggregate.getPage(),\n\t\t\tpageSize: defaultPaggingAggregate.getPageSize(),\n\t\t\tpageSizes: defaultPaggingAggregate.getPageSizes()\n\t\t}, this.structureId);\n\t}\n\n\t@Override\n\tsetPaging(paging: PagingConfig): void {\n\t\tsuper.setPaging(paging, this.structureId);\n\t}\n\n\t@Override\n\tchangePageSize(pageSize: number): void {\n\t\tsuper.changePageSize(pageSize, this.structureId);\n\t}\n\n\t@Override\n\tnextPage(): void {\n\t\tsuper.nextPage(this.structureId);\n\t}\n\n\t@Override\n\tprevPage(): void {\n\t\tsuper.prevPage(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PagingQueryService } from '../../../app/paging/paging-query.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingRepository } from '../../../domain/paging/query/paging.repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Paging } from '../../../domain/paging/query/paging';\n\n\n\n@Injectable()\nexport class LocalPagingQueryService extends PagingQueryService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tpagingRepository: PagingRepository) {\n\t\tsuper(pagingRepository);\n\t}\n\n\t@Override\n\tselect(): Observable<Paging> {\n\t\treturn super.select(this.structureId);\n\t}\n\n\t@Override\n\tselectOne(): Observable<Paging> {\n\t\treturn super.select(this.structureId)\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttake(1)\n\t\t\t\t\t);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetSchemaCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly height: number) {\n\t\tsuper(structureId, 'SetSchemaCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaVerticalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaVerticalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaHorizontalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaHorizontalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\nimport { SchemaTheme } from '../../schema-theme';\n\nexport class SetSchemaThemeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly theme: SchemaTheme) {\n\t\tsuper(structureId, 'SetSchemaThemeCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SchemaRowColoring } from '../../../schema-row-coloring';\n\nexport class SetRowColoringCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly coloring: SchemaRowColoring) {\n\t\tsuper(structureId, 'SetRowColoringCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaTopHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaTopHeaderCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaBottomHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaBottomHeaderCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SetSchemaCommand } from './set/set-schema.command';\nimport { SetSchemaVerticalGridCommand } from './grid/vertical/set-schema-vertical-grid.command';\nimport { SetSchemaHorizontalGridCommand } from './grid/horizontal/set-schema-horizontal-grid.command';\nimport { SchemaTheme } from '../schema-theme';\nimport { SetSchemaThemeCommand } from './theme/set-schema-theme.command';\nimport { globalStructureId } from '../../global-structure-id';\nimport { SchemaRowColoring } from '../schema-row-coloring';\nimport { SetRowColoringCommand } from './coloring/set/set-row-coloring.command';\nimport { ChangeSchemaTopHeaderCommand } from './column-header/top/change-schema-top-header.command';\nimport { ChangeSchemaBottomHeaderCommand } from './column-header/bottom/change-schema-bottom-header.command';\n\n\n@Injectable()\nexport class SchemaDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetSchema(structureId: StructureId, height: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaCommand(structureId, height));\n\t}\n\n\tchangeVerticalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaVerticalGridCommand(structureId, enabled));\n\t}\n\n\tchangeHorizontalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaHorizontalGridCommand(structureId, enabled));\n\t}\n\n\tsetTheme(structureId: StructureId, theme: SchemaTheme): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaThemeCommand(structureId, theme));\n\t}\n\n\tsetRowColoring(structureId: StructureId = globalStructureId, coloring: SchemaRowColoring): void {\n\t\tthis.commandDispatcher.dispatch(new SetRowColoringCommand(structureId, coloring));\n\t}\n\n\tchangeTopHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaTopHeaderCommand(structureId, enabled));\n\t}\n\n\tchangeBottomHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaBottomHeaderCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/query/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from './schema';\nimport { Structure } from '../../structure/query/structure';\n\n\n@Injectable()\nexport class SchemaRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { SchemaRepository } from '../../domain/schema/query/schema-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Schema } from '../../domain/schema/query/schema';\nimport { SchemaColumnHeader } from '../../domain/schema/query/schema-column-header';\nimport { SchemaCssClass } from '../../domain/schema/query/schema-css-class';\n\n\n@Injectable()\nexport class SchemaQueryService {\n\n\tconstructor(private schemaRepository: SchemaRepository) {\n\t}\n\n\tselect(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.schemaRepository.select(structureId);\n\t}\n\n\tselectHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tselectContainerHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getContainerHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tselectOne(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tselectCssClasses(structureId: StructureId = globalStructureId): Observable<SchemaCssClass> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getCssClasses();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tselectColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getColumnHeader();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, map, take, takeUntil } from 'rxjs/operators';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SchemaQueryService } from './schema-query.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SchemaCssClass } from '../../domain/schema/query/schema-css-class';\nimport { SchemaColumnHeader } from '../../domain/schema/query/schema-column-header';\n\n\n@Injectable()\nexport class SchemaCommandService implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject<void>();\n\n\tconstructor(private schemaDispatcher: SchemaDispatcher,\n\t\t\t\tprivate schemaQueryService: SchemaQueryService) {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete()\n\t}\n\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tsetHeight(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tchangeVerticalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeVerticalGrid(structureId, enabled);\n\t}\n\n\tchangeHorizontalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeHorizontalGrid(structureId, enabled);\n\t}\n\n\tsetTheme(theme: SchemaTheme, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setTheme(structureId, theme);\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setRowColoring(structureId, coloring);\n\t}\n\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeTopHeader(structureId, enabled);\n\t}\n\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeBottomHeader(structureId, enabled);\n\t}\n\n\ttoggleVerticalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.selectCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.verticalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeVerticalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleHorizontalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.selectCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.horizontalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeHorizontalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleTopHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.selectColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isTopHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeTopHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n\ttoggleBottomHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.selectColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isBottomHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeBottomHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n}\n","export enum SchemaRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaCommandService } from '../../../app/schema/schema-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaQueryService } from '../../../app/schema/schema-query.service';\nimport { SchemaDispatcher } from '../../../domain/schema/command/schema.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaTheme } from '../../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class LocalSchemaCommandService extends SchemaCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaQueryService: SchemaQueryService,\n\t\t\t\tschemaDispatcher: SchemaDispatcher) {\n\t\tsuper(schemaDispatcher, schemaQueryService);\n\t}\n\n\tsetDefaultSchema(): void {\n\t\tsuper.setSchema(Number.MAX_SAFE_INTEGER, this.structureId);\n\t}\n\n\t@Override\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSchema(height, this.structureId);\n\t}\n\n\t@Override\n\tsetHeight(height: number): void {\n\t\tsuper.setHeight(height, this.structureId);\n\t}\n\n\t@Override\n\tchangeVerticalGrid(enabled: boolean): void {\n\t\tsuper.changeVerticalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeHorizontalGrid(enabled: boolean): void {\n\t\tsuper.changeHorizontalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleVerticalGrid(): void {\n\t\tsuper.toggleVerticalGrid(this.structureId);\n\t}\n\n\t@Override\n\ttoggleHorizontalGrid(): void {\n\t\tsuper.toggleHorizontalGrid(this.structureId);\n\t}\n\n\t@Override\n\tsetTheme(theme: SchemaTheme): void {\n\t\tsuper.setTheme(theme, this.structureId);\n\t}\n\n\t@Override\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setRowColoring(coloring, this.structureId);\n\t}\n\n\t@Override\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeTopHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeBottomHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleTopHeader(): void {\n\t\tsuper.toggleTopHeader(this.structureId);\n\t}\n\n\t@Override\n\ttoggleBottomHeader(): void {\n\t\tsuper.toggleBottomHeader(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SchemaQueryService } from '../../../app/schema/schema-query.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaRepository } from '../../../domain/schema/query/schema-repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Schema } from '../../../domain/schema/query/schema';\nimport { SchemaCssClass } from '../../../domain/schema/query/schema-css-class';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaColumnHeader } from '../../../domain/schema/query/schema-column-header';\n\n\n\n@Injectable()\nexport class LocalSchemaQueryService extends SchemaQueryService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaRepository: SchemaRepository) {\n\t\tsuper(schemaRepository);\n\t}\n\n\t@Override\n\tselect(): Observable<Schema> {\n\t\treturn super.select(this.structureId);\n\t}\n\n\t@Override\n\tselectHeight(): Observable<number> {\n\t\treturn super.selectHeight(this.structureId);\n\t}\n\n\t@Override\n\tselectContainerHeight(): Observable<number> {\n\t\treturn super.selectContainerHeight(this.structureId);\n\t}\n\n\t@Override\n\tselectOne(): Observable<Schema> {\n\t\treturn super.selectOne(this.structureId);\n\t}\n\n\t@Override\n\tselectCssClasses(): Observable<SchemaCssClass> {\n\t\treturn super.selectCssClasses(this.structureId);\n\t}\n\n\t@Override\n\tselectColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn super.selectColumnHeader(this.structureId);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetFormationCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload?: any) {\n\t\tsuper(structureId, 'SetFormationCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class ToggleSelectedRowCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly selectedRow: string) {\n\t\tsuper(structureId, 'ToggleSelectedRowCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../structure-id';\nimport { SetFormationCommand } from './set/set-formation.command';\nimport { ToggleSelectedRowCommand } from './toggle/toggle-selected-row.command';\n\n@Injectable()\nexport class FormationDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetDefault(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetFormationCommand(structureId));\n\t}\n\n\ttoggleSelectedRow(structureId: StructureId, selectedRow: string): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSelectedRowCommand(structureId, selectedRow));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\n\n\n@Injectable()\nexport class FormationCommandService {\n\n\tconstructor(private formationDispatcher: FormationDispatcher) {\n\t}\n\n\tsetDefaultFormation(structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.setDefault(structureId);\n\t}\n\n\ttoggleSelectedRow(selectedRow: string, structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.toggleSelectedRow(structureId, selectedRow);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { FormationCommandService } from '../../../app/formation/formation-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationDispatcher } from '../../../domain/formation/command/formation.dispatcher';\n\n\n@Injectable()\nexport class LocalFormationCommandService extends FormationCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationDispatcher: FormationDispatcher) {\n\t\tsuper(formationDispatcher);\n\t}\n\n\tsetDefault(): void {\n\t\tsuper.setDefaultFormation(this.structureId);\n\t}\n\n\t@Override\n\ttoggleSelectedRow(selectedRow: string): void {\n\t\tsuper.toggleSelectedRow(selectedRow, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/query/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Formation } from './formation';\nimport { Structure } from '../../structure/query/structure';\n\n\n@Injectable()\nexport class FormationRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Formation> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getFormation())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { FormationRepository } from '../../domain/formation/query/formation-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SelectedRowsList } from '../../domain/formation/query/selected-rows/selected-rows-list';\nimport { Formation } from '../../domain/formation/query/formation';\n\n\n@Injectable()\nexport class FormationQueryService {\n\n\tconstructor(private formationRepository: FormationRepository) {\n\t}\n\n\tselectSelectedRows(structureId: StructureId = globalStructureId): Observable<SelectedRowsList> {\n\t\treturn this.formationRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((formation: Formation) => formation.getSelectedRows())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationQueryService } from '../../../app/formation/formation-query.service';\nimport { FormationRepository } from '../../../domain/formation/query/formation-repository';\nimport { SelectedRowsList } from '../../../domain/formation/query/selected-rows/selected-rows-list';\n\n\n@Injectable()\nexport class LocalFormationQueryService extends FormationQueryService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationRepository: FormationRepository) {\n\t\tsuper(formationRepository);\n\t}\n\n\t@Override\n\tselectSelectedRows(): Observable<SelectedRowsList> {\n\t\treturn super.selectSelectedRows(this.structureId);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FilterConfig } from '../../../../../ui-api/structure/filter/filter-config';\n\nexport class StructureSetConfigFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly filterConfig: FilterConfig) {\n\t\tsuper(structureId, 'StructureSetConfigFilterCommand');\n\t}\n\n\tgetConfig(): FilterConfig {\n\t\treturn this.filterConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class StructureToggleFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly fieldId: FieldId,\n\t\t\t\tpublic readonly externalFilterId: string,\n\t\t\t\tpublic readonly filterValue: string) {\n\t\tsuper(structureId, 'StructureToggleFilterCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { FilterConfig } from './filter-config';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetConfigFilterCommand } from '../../../domain/structure/command/filter/config/structure.set-config-filter.command';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { StructureToggleFilterCommand } from '../../../domain/structure/command/filter/toggle/structure.toggle-filter.command';\n\n\n@Injectable()\nexport class StructureFilterCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {}\n\n\tsetFilteringEnabled(config: FilterConfig, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigFilterCommand(structureId, config));\n\t}\n\n\taddFilter(fieldId: FieldId, externalFieldId: string, filterValue: string, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureToggleFilterCommand(structureId, fieldId, externalFieldId, filterValue));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class SourceSetLoadingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SourceSetLoadingCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetOriginCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly items: Array<any> = []) {\n\t\tsuper(structureId, 'SetOriginCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemParams } from './structure.edit-source-item.params';\nimport { StructureId } from '../../../../structure-id';\n\nexport class StructureEditSourceItemCommand extends Command {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly params: StructureEditSourceItemParams) {\n\t\tsuper(structureId, 'StructureEditSourceItemCommand');\n\t}\n\n\tgetParams(): StructureEditSourceItemParams {\n\t\treturn this.params;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SourceSetLoadingCommand } from './loading/source-set-loading.command';\nimport { SetOriginCommand } from './origin/set-origin/set-origin.command';\nimport { StructureEditSourceItemParams } from './origin/edit/structure.edit-source-item.params';\nimport { StructureEditSourceItemCommand } from './origin/edit/structure.edit-source-item.command';\n\n\n@Injectable()\nexport class SourceDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetLoading(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SourceSetLoadingCommand(structureId, enabled));\n\t}\n\n\tsetOrigin(structureId: StructureId, items: Array<any>): void {\n\t\tthis.commandDispatcher.dispatch(new SetOriginCommand(structureId, items));\n\t}\n\n\teditItem(structureId: StructureId, params: StructureEditSourceItemParams): void {\n\t\tthis.commandDispatcher.dispatch(new StructureEditSourceItemCommand(structureId, params));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class InitStructureCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'InitStructureCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetVerticalScrollEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetVerticalScrollEnabledCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class SetScrollPositionCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly position: number) {\n\t\tsuper(structureId, 'SetScrollPositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SortingConfig } from '../../../../../ui-api/structure/sorting-config';\n\n\nexport class SetSortingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly sortingConfig: SortingConfig) {\n\t\tsuper(structureId, 'SetSortingCommand');\n\t}\n\n\tgetSortingConfig(): SortingConfig {\n\t\treturn this.sortingConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class ToggleSortCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly fieldId: FieldId) {\n\t\tsuper(structureId, 'ToggleSortCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { QuickFiltersConfig } from '../../../../../ui-api/structure/filter/quick-filters.config';\n\n\n\nexport class StructureSetConfigQuickFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly quickFiltersConfig: QuickFiltersConfig) {\n\t\tsuper(structureId, 'StructureSetConfigQuickFilterCommand');\n\t}\n\n\tgetConfig(): QuickFiltersConfig {\n\t\treturn this.quickFiltersConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SearchConfig } from '../../../../../ui-api/structure/search/search-config';\n\n\nexport class StructureSetConfigSearchingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly searchConfig: SearchConfig) {\n\t\tsuper(structureId, 'StructureSetConfigSearchingCommand');\n\t}\n\n\tgetConfig(): SearchConfig {\n\t\treturn this.searchConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\n\n\nexport class InitFieldsCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>) {\n\t\tsuper(structureId, 'InitFieldsCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureFilterCommandService } from '../../ui-api/structure/filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { InitStructureCommand } from '../../domain/structure/command/init/init-structure.command';\nimport { SetVerticalScrollEnabledCommand } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command';\nimport { SetScrollPositionCommand } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command';\nimport { SortingConfig } from '../../ui-api/structure/sorting-config';\nimport { SetSortingCommand } from '../../domain/structure/command/sort/set/set-sorting.command';\nimport { FieldId } from '../../domain/structure/command/field/data-type/field.id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { ToggleSortCommand } from '../../domain/structure/command/sort/toggle/toggle-sort.command';\nimport { FilterConfig } from '../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../ui-api/structure/filter/quick-filters.config';\nimport { StructureSetConfigQuickFilterCommand } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command';\nimport { SearchConfig } from '../../ui-api/structure/search/search-config';\nimport { StructureSetConfigSearchingCommand } from '../../domain/structure/command/search/config/structure.set-config-searching.command';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { InitFieldsCommand } from '../../domain/structure/command/field/init/init-fields.command';\n\n\n@Injectable()\nexport class StructureCommandService {\n\n\tconstructor(private readonly commandDispatcher: CommandDispatcher,\n\t\t\t\tprivate readonly structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate readonly sourceDispatcher: SourceDispatcher) {\n\t}\n\n\tinit(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitStructureCommand(structureId));\n\t}\n\n\tenableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, true));\n\t}\n\n\tdisableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, false));\n\t}\n\n\tsetScrollPosition(position: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetScrollPositionCommand(structureId, position));\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetSortingCommand(structureId, config));\n\t}\n\n\ttoggleSort(fieldId: FieldId, compositionId?: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSortCommand(structureId, compositionId, fieldId));\n\t}\n\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.structureFilterCommandService.setFilteringEnabled(config, structureId);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigQuickFilterCommand(structureId, config));\n\t}\n\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigSearchingCommand(structureId, config));\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>, compositionId: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitFieldsCommand(structureId, compositionId, columns));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureCommandService } from '../../../app/structure/structure-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\nimport { ColumnConfig } from '../../../domain/composition/column.config';\n\n\n\n@Injectable()\nexport class LocalStructureCommandService extends StructureCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tcommandDispatcher: CommandDispatcher,\n\t\t\t\tstructureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tsourceDispatcher: SourceDispatcher) {\n\t\tsuper(commandDispatcher, structureFilterCommandService, sourceDispatcher);\n\t}\n\n\t@Override\n\tinit(): void {\n\t\tsuper.init(this.structureId);\n\t}\n\n\t@Override\n\tenableVerticalScroll(): void {\n\t\tsuper.enableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tdisableVerticalScroll(): void {\n\t\tsuper.disableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetScrollPosition(position: number): void {\n\t\tsuper.setScrollPosition(position, this.structureId)\n\t}\n\n\t@Override\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSortingConfig(config, this.structureId)\n\t}\n\n\t@Override\n\ttoggleSort(fieldId: FieldId): void {\n\t\tsuper.toggleSort(fieldId, this.compositionId, this.structureId)\n\t}\n\n\t@Override\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setFilterConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setQuickFiltersConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSearchingConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tinitFields(columns: Array<ColumnConfig>): void {\n\t\tsuper.initFields(columns, this.compositionId, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../domain/structure/query/structure.repository';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Structure } from '../../domain/structure/query/structure';\n\n\n@Injectable()\nexport class StructureQueryService {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(aggregateId: AggregateId = globalStructureId): Observable<Structure> {\n\t\treturn this.structureRepository.select(aggregateId);\n\t}\n\n\tselectVerticalScrollEnabled(aggregateId: AggregateId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .select(aggregateId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.isVerticalScrollEnabled()),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureQueryService } from '../../../app/structure/structure-query.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/query/structure.repository';\nimport { Structure } from '../../../domain/structure/query/structure';\n\n\n@Injectable()\nexport class LocalStructureQueryService extends StructureQueryService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository) {\n\t\tsuper(structureRepository);\n\t}\n\n\t@Override\n\tselect(): Observable<Structure> {\n\t\treturn super.select(this.structureId);\n\t}\n\n\t@Override\n\tselectVerticalScrollEnabled(): Observable<boolean> {\n\t\treturn super.selectVerticalScrollEnabled(this.structureId)\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveAggregateArchive } from '@generic-ui/hermes';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n\n@Injectable()\nexport class StructureFieldUiArchive extends ReactiveAggregateArchive<Array<StructureFieldUiModel>> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiRepository {\n\n\tconstructor(private structureFieldUiArchive: StructureFieldUiArchive) {\n\t}\n\n\tselectFields(structureId: StructureId): Observable<Array<StructureFieldUiModel>> {\n\t\treturn this.structureFieldUiArchive.select(structureId);\n\t}\n\n}\n","import { ColumnFieldId } from '../../../../composition/command/column/field/column-field.id';\n\nexport class StructureEditSourceItemParams {\n\n\tconstructor(private readonly itemId: string,\n\t\t\t\tprivate readonly columnFieldId: ColumnFieldId, // TODO Rethink\n\t\t\t\tprivate readonly value: any) {}\n\n\tgetItemId(): string {\n\t\treturn this.itemId;\n\t}\n\n\tgetColumnFieldId(): ColumnFieldId {\n\t\treturn this.columnFieldId;\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { zip } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { Reactive } from '../../../../common/cdk/reactive';\n\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../../ui-api/structure/field/structure.field.ui-repository';\nimport { SourceQueryService } from './source-query.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { StructureEditSourceItemParams } from '../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { Entity } from '../../domain/source/entity';\n\n\n\n@Injectable()\nexport class SourceCommandService extends Reactive {\n\n\tconstructor(private sourceDispatcher: SourceDispatcher,\n\t\t\t\tprivate structureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tprivate sourceQueryService: SourceQueryService) {\n\t\tsuper();\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetLoading(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setLoading(structureId, enabled);\n\t}\n\n\teditItem(params: StructureEditSourceItemParams, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.editItem(structureId, params);\n\t}\n\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any, structureId: StructureId = globalStructureId): void {\n\n\t\tconst itemId$ = this.sourceQueryService\n\t\t\t\t\t\t\t.selectOne()\n\t\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\t\tmap((entities: Array<Entity>) => {\n\t\t\t\t\t\t\t\t\treturn entities[itemIndex].getId();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\n\t\tconst fieldId$ = this.structureFieldUiRepository\n\t\t\t\t\t\t\t .selectFields(structureId);\n\n\t\tzip(itemId$, fieldId$)\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((array: Array<any>) => {\n\n\t\t\t\tconst itemId = array[0],\n\t\t\t\t\tfields = array[1];\n\n\t\t\t\tthis.editItem(\n\t\t\t\t\tnew StructureEditSourceItemParams(itemId, fields[fieldIndex], value),\n\t\t\t\t\tstructureId\n\t\t\t\t);\n\t\t\t});\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceCommandService } from '../../../app/source/source-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../../../ui-api/structure/field/structure.field.ui-repository';\nimport { SourceQueryService } from '../../../app/source/source-query.service';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\n\n\n@Injectable()\nexport class LocalSourceCommandService extends SourceCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tsourceDispatcher: SourceDispatcher,\n\t\t\t\tstructureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tsourceQueryService: SourceQueryService) {\n\t\tsuper(sourceDispatcher, structureFieldUiRepository, sourceQueryService);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetLoading(enabled: boolean): void {\n\t\tsuper.setLoading(enabled, this.structureId);\n\t}\n\n\t@Override\n\teditItem(params: StructureEditSourceItemParams): void {\n\t\tsuper.editItem(params, this.structureId);\n\t}\n\n\t@Override\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any): void {\n\t\tsuper.editItemByIndex(itemIndex, fieldIndex, value, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceQueryService } from '../../../app/source/source-query.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/query/structure.repository';\nimport { StructureSourceOriginRepository } from '../../../domain/source/query/origin/structure.source-origin.repository';\nimport { Entity } from '../../../domain/source/entity';\n\n\n@Injectable()\nexport class LocalSourceQueryService extends SourceQueryService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository,\n\t\t\t\tstructureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper(structureRepository, structureSourceOriginRepository);\n\t}\n\n\t@Override\n\tselect(): Observable<Array<Entity>> {\n\t\treturn super.select(this.structureId);\n\t}\n\n\t@Override\n\tselectOriginSize(): Observable<number> {\n\t\treturn super.selectOriginSize(this.structureId);\n\t}\n\n\t@Override\n\tselectOne(): Observable<Array<Entity>> {\n\t\treturn super.selectOne(this.structureId);\n\t}\n\n\t@Override\n\tselectLoading(): Observable<boolean> {\n\t\treturn super.selectLoading(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionCommandService } from '../../api/composition/composition.command-service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionDispatcher } from '../../../domain/composition/command/composition.dispatcher';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../../domain/composition/command/column/set-columns/column.params';\n\n\n@Injectable()\nexport class LocalCompositionCommandService extends CompositionCommandService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionDispatcher: CompositionDispatcher) {\n\t\tsuper(compositionDispatcher);\n\t}\n\n\t@Override\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.init(this.compositionId);\n\t}\n\n\t@Override\n\tsetColumns(params: Array<ColumnParams>): void {\n\t\tsuper.setColumns(params, this.compositionId);\n\t}\n\n\t@Override\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setContainerWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setResizeWidth(enabled, this.compositionId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionQueryService } from '../../api/composition/composition.query-service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionRepository } from '../../../domain/composition/query/composition.repository';\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../../domain/composition/query/definition/cell-template-with-accessor';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\n\n\n\n@Injectable()\nexport class LocalCompositionQueryService extends CompositionQueryService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionRepository: CompositionRepository) {\n\t\tsuper(compositionRepository);\n\t}\n\n\t@Override\n\tselectHeaderColumns(): Observable<Array<CellTemplateWithContext>> {\n\t\treturn super.selectHeaderColumns(this.compositionId);\n\t}\n\n\t@Override\n\tselectTemplateColumns(): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn super.selectTemplateColumns(this.compositionId);\n\t}\n\n\t@Override\n\tselectWidthForEachColumn(): Observable<Array<number>> {\n\t\treturn super.selectWidthForEachColumn(this.compositionId);\n\t}\n\n\t@Override\n\tselectWidth(): Observable<number> {\n\t\treturn super.selectWidth(this.compositionId);\n\t}\n\n\t@Override\n\tselectContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn super.selectContainerWidth(this.compositionId);\n\t}\n\n\t@Override\n\tselectResizeWidth(): Observable<boolean> {\n\t\treturn super.selectResizeWidth(this.compositionId);\n\t}\n\n}\n","import { CompositionCommandService } from '../api/composition/composition.command-service';\nimport { PagingCommandService } from '../../app/paging/paging-command.service';\nimport { LocalPagingCommandService } from './paging/local-paging-command.service';\nimport { LocalPagingQueryService } from './paging/local-paging-query.service';\nimport { SchemaCommandService } from '../../app/schema/schema-command.service';\nimport { LocalSchemaCommandService } from './schema/local-schema-command.service';\nimport { SchemaQueryService } from '../../app/schema/schema-query.service';\nimport { LocalSchemaQueryService } from './schema/local-schema-query.service';\nimport { FormationCommandService } from '../../app/formation/formation-command.service';\nimport { LocalFormationCommandService } from './formation/local-formation-command.service';\nimport { FormationQueryService } from '../../app/formation/formation-query.service';\nimport { LocalFormationQueryService } from './formation/local-formation-query.service';\nimport { StructureCommandService } from '../../app/structure/structure-command.service';\nimport { LocalStructureCommandService } from './structure/local-structure-command.service';\nimport { StructureQueryService } from '../../app/structure/structure-query.service';\nimport { LocalStructureQueryService } from './structure/local-structure-query.service';\nimport { SourceCommandService } from '../../app/source/source-command.service';\nimport { LocalSourceCommandService } from './source/local-source-command.service';\nimport { SourceQueryService } from '../../app/source/source-query.service';\nimport { LocalSourceQueryService } from './source/local-source-query.service';\nimport { LocalCompositionCommandService } from './composition/local-composition-command.service';\nimport { CompositionQueryService } from '../api/composition/composition.query-service';\nimport { LocalCompositionQueryService } from './composition/local-composition-query.service';\nimport { PagingQueryService } from '../../app/paging/paging-query.service';\n\nexport const localProviders = [\n\t{ provide: PagingCommandService, useClass: LocalPagingCommandService},\n\t{ provide: PagingQueryService, useClass: LocalPagingQueryService},\n\t{ provide: SchemaCommandService, useClass: LocalSchemaCommandService},\n\t{ provide: SchemaQueryService, useClass: LocalSchemaQueryService},\n\t{ provide: FormationCommandService, useClass: LocalFormationCommandService},\n\t{ provide: FormationQueryService, useClass: LocalFormationQueryService},\n\t{ provide: StructureCommandService, useClass: LocalStructureCommandService},\n\t{ provide: StructureQueryService, useClass: LocalStructureQueryService},\n\t{ provide: SourceCommandService, useClass: LocalSourceCommandService},\n\t{ provide: SourceQueryService, useClass: LocalSourceQueryService},\n\n\t{ provide: CompositionCommandService, useClass: LocalCompositionCommandService },\n\t{ provide: CompositionQueryService, useClass: LocalCompositionQueryService},\n];\n","import { ElementRef, Injectable, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { SchemaCssClass } from '../../domain/schema/query/schema-css-class';\nimport { SchemaQueryService } from '../../app/schema/schema-query.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class SchemaCssClassManager implements OnDestroy {\n\n\tprivate readonly VERTICAL_GRID_CLASS_NAME = 'gui-vertical-grid';\n\n\tprivate readonly HORIZONTAL_GRID_CLASS_NAME = 'gui-horizontal-grid';\n\n\tprivate readonly THEME_FABRIC_CLASS_NAME = 'gui-fabric';\n\n\tprivate readonly THEME_MATERIAL_CLASS_NAME = 'gui-material';\n\n\tprivate readonly THEME_LIGHT_CLASS_NAME = 'gui-light';\n\n\tprivate readonly THEME_DARK_CLASS_NAME = 'gui-dark';\n\n\tprivate readonly ROW_COLORING_ODD = 'gui-rows-odd';\n\n\tprivate readonly ROW_COLORING_EVEN = 'gui-rows-even';\n\n\tprivate readonly renderer: Renderer2;\n\n\tprivate cssClass: SchemaCssClass = null;\n\n\tprivate cssHostRef: ElementRef;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(private rendererFactory2: RendererFactory2,\n\t\t\t\tprivate schemaQueryService: SchemaQueryService) {\n\t\tthis.renderer = this.rendererFactory2.createRenderer(null, null);\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tinit(elementRef: ElementRef, structureId: StructureId): void {\n\n\t\tthis.cssHostRef = elementRef;\n\n\t\tthis.schemaQueryService\n\t\t\t.selectCssClasses(structureId)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((classes: SchemaCssClass) => {\n\n\t\t\t\tconst diff = this.updateState(classes);\n\n\t\t\t\tthis.renderCssClasses(diff);\n\t\t\t});\n\t}\n\n\tprivate updateState(css: SchemaCssClass): Partial<SchemaCssClass> {\n\n\t\tif (!this.cssClass) {\n\t\t\tthis.cssClass = css;\n\t\t\treturn this.cssClass;\n\t\t} else {\n\n\t\t\tlet diff = {};\n\n\t\t\tObject.keys(this.cssClass)\n\t\t\t\t  .forEach((key: string) => {\n\t\t\t\t\t  if (css[key] !== this.cssClass[key]) {\n\t\t\t\t\t\t  diff[key] = css[key];\n\t\t\t\t\t  }\n\t\t\t\t  });\n\n\t\t\tthis.cssClass = css;\n\n\t\t\treturn diff;\n\t\t}\n\t}\n\n\tprivate renderCssClasses(diff: Partial<SchemaCssClass>): void {\n\n\t\tif (diff.hasOwnProperty('verticalGrid')) {\n\t\t\tthis.toggleCssClass(diff.verticalGrid, this.VERTICAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('horizontalGrid')) {\n\t\t\tthis.toggleCssClass(diff.horizontalGrid, this.HORIZONTAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('theme')) {\n\t\t\tthis.removeThemeCssClasses();\n\t\t\tthis.addClass(this.resolveThemeClassName(diff.theme));\n\t\t}\n\n\t\tif (diff.hasOwnProperty('rowColoring')) {\n\t\t\tthis.removeRowColoringClasses();\n\t\t\tthis.addClass(this.resolveRowColoringClassName(diff.rowColoring));\n\t\t}\n\t}\n\n\tprivate toggleCssClass(toggle: boolean, cssClassName: string): void {\n\t\tif (toggle) {\n\t\t\tthis.addClass(cssClassName);\n\t\t} else {\n\t\t\tthis.removeClass(cssClassName);\n\t\t}\n\t}\n\n\tprivate removeThemeCssClasses(): void {\n\t\tObject.keys(SchemaTheme)\n\t\t\t  .map((key: string) => SchemaTheme[key])\n\t\t\t  .map((theme: SchemaTheme) => this.resolveThemeClassName(theme))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate resolveThemeClassName(theme: SchemaTheme | string): string {\n\t\tswitch (theme) {\n\t\t\tcase SchemaTheme.FABRIC:\n\t\t\tcase SchemaTheme[SchemaTheme.FABRIC]:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.MATERIAL:\n\t\t\tcase SchemaTheme[SchemaTheme.MATERIAL]:\n\t\t\t\treturn this.THEME_MATERIAL_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.LIGHT:\n\t\t\tcase SchemaTheme[SchemaTheme.LIGHT]:\n\t\t\t\treturn this.THEME_LIGHT_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.DARK:\n\t\t\tcase SchemaTheme[SchemaTheme.DARK]:\n\t\t\t\treturn this.THEME_DARK_CLASS_NAME;\n\n\t\t\tdefault:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\t\t}\n\t}\n\n\tprivate resolveRowColoringClassName(coloring: SchemaRowColoring | string): string {\n\t\tswitch (coloring) {\n\t\t\tcase SchemaRowColoring.ODD:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.ODD]:\n\t\t\t\treturn this.ROW_COLORING_ODD;\n\n\t\t\tcase SchemaRowColoring.EVEN:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.EVEN]:\n\t\t\t\treturn this.ROW_COLORING_EVEN;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate removeRowColoringClasses(): void {\n\t\tObject.keys(SchemaRowColoring)\n\t\t\t  .map((key: string) => SchemaRowColoring[key])\n\t\t\t  .map((coloring: SchemaRowColoring) => this.resolveRowColoringClassName(coloring))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate addClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.addClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n\tprivate removeClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.removeClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveArchive } from '../../../../common/cdk/reactive.archive';\n\n\n@Injectable()\nexport class StructureCellEditArchive extends ReactiveArchive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveArchive } from '../../../../common/cdk/reactive.archive';\n\nimport { StructureCellEditState } from './structure.cell-edit.state';\n\n\n@Injectable()\nexport class StructureCellEditStore extends ReactiveArchive<StructureCellEditState> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveArchive } from '../../../../common/cdk/reactive.archive';\n\n@Injectable()\nexport class StructureEditModeArchive extends ReactiveArchive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","export class StructureAggregationPanelConfig {\n\n\tprivate readonly top: boolean = false;\n\n\tprivate readonly bottom: boolean = true;\n\n\tconstructor(top?: boolean,\n\t\t\t\tbottom?: boolean) {\n\n\t\tif (top !== undefined && top !== null) {\n\t\t\tthis.top = top;\n\t\t}\n\n\t\tif (bottom !== undefined && bottom !== null) {\n\t\t\tthis.bottom = bottom;\n\t\t}\n\n\t}\n\n\titTopEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\titBottomEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReactiveArchive } from '../../../../../common/cdk/reactive.archive';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\n\n\n@Injectable()\nexport class StructureAggregationArchive extends ReactiveArchive<StructureAggregationPanelConfig> {\n\n\tconstructor() {\n\t\tsuper(new StructureAggregationPanelConfig());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n@Injectable()\nexport class StructureAggregationPanelConfigConverter {\n\n\tconvert(config: AggregationConfig): StructureAggregationPanelConfig {\n\n\t\tif (config.enabled) {\n\t\t\treturn new StructureAggregationPanelConfig(config.top, config.bottom);\n\t\t} else {\n\t\t\treturn new StructureAggregationPanelConfig(false, false);\n\t\t}\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\n\nexport class StructureSetAggregationEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'StructureSetAggregationEnabledCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetAggregationEnabledCommand } from '../../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command';\n\n\n\n@Injectable()\nexport class StructureAggregationCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetAggregationEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetAggregationEnabledCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfigConverter } from './structure.aggregation-panel.config-converter';\nimport { StructureAggregationArchive } from './structure.aggregation.archive';\n\nimport { StructureAggregationCommandService } from '../../../ui-api/structure/aggregation/structure.aggregation.command-service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n\n@Injectable()\nexport class StructureAggregationConfigService {\n\n\tconstructor(private structureAggregationPanelConfigConverter: StructureAggregationPanelConfigConverter,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureAggregationCommandService: StructureAggregationCommandService,\n\t\t\t\tprivate structureId: StructureId) {}\n\n\tset(config: AggregationConfig): void {\n\n\t\tconst aggregationPanelConfig = this.structureAggregationPanelConfigConverter.convert(config);\n\n\t\tthis.structureAggregationArchive.set(aggregationPanelConfig);\n\n\t\tthis.structureAggregationCommandService.setAggregationEnabled(config.enabled, this.structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { StructureComponent } from './structure.component';\n\nexport const structureComponentToken = new InjectionToken<StructureComponent>('StructureComponentToken');\n","export enum StructureCellEditState {\n\tENTER,\n\tSUBMIT,\n\tCANCEL\n}\n","import {\n\tEventEmitter,\n\tInput,\n\tOnChanges,\n\tOnInit,\n\tOutput,\n\tSimpleChanges\n} from '@angular/core';\nimport { skip } from 'rxjs/operators';\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { PagingConfig } from '../../domain/paging/paging-config';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SortingConfig } from '../../ui-api/structure/sorting-config';\nimport { FilterConfig } from '../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../ui-api/structure/search/search-config';\nimport { AggregationConfig } from '../../ui-api/structure/aggregation/aggregation-config';\nimport { EditemItemValues } from '../../app/source/event/editem-item.values';\nimport { StructureId } from '../../domain/structure-id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { StructureCommandService } from '../../app/structure/structure-command.service';\nimport { PagingCommandService } from '../../app/paging/paging-command.service';\nimport { PagingEventService } from '../../app/paging/paging-event.service';\nimport { SourceCommandService } from '../../app/source/source-command.service';\nimport { SourceEventService } from '../../app/source/event/source-event.service';\nimport { SchemaCommandService } from '../../app/schema/schema-command.service';\nimport { CompositionCommandService } from '../api/composition/composition.command-service';\nimport { CompositionEventService } from '../api/composition/composition.event-service';\nimport { FormationEventService } from '../../app/formation/formation-event.service';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureSummaryEnabledArchive } from '../panel/summary/structure.summary-enabled.archive';\nimport { StructureAggregationConfigService } from '../panel/aggregation/structure.aggregation-config.service';\nimport { StructureCellEditStore } from '../edit/structure.cell-edit.store';\nimport { StructureCellEditState } from '../edit/structure.cell-edit.state';\n\n\n\n\n/** @internal */\nexport abstract class StructureGateway extends SmartComponent implements OnChanges, OnInit {\n\n\t/***********************\n\t * INPUTS\n\t ***********************/\n\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\theight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<ColumnConfig> = [];\n\n\t@Input()\n\tpaging: boolean | PagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: SchemaTheme;\n\n\t@Input()\n\trowColoring: SchemaRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | SortingConfig;\n\n\t@Input()\n\tfiltering: boolean | FilterConfig;\n\n\t@Input()\n\tquickFilters: boolean | QuickFiltersConfig;\n\n\t@Input()\n\tsearching: boolean | SearchConfig;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tsummaryPanel: boolean;\n\n\t@Input()\n\taggregation: AggregationConfig;\n\n\n\t/***********************\n\t * OUTPUTS\n\t ***********************/\n\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<EditemItemValues> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\tprotected constructor(\n\t\tpublic structureId: StructureId,\n\t\tprotected compositionId: CompositionId,\n\t\tprotected structureCommandService: StructureCommandService,\n\t\tprotected pagingCommandService: PagingCommandService,\n\t\tprotected pagingEventService: PagingEventService,\n\t\tprotected sourceCommandService: SourceCommandService,\n\t\tprotected sourceEventService: SourceEventService,\n\t\tprotected schemaCommandService: SchemaCommandService,\n\t\tprotected compositionCommandService: CompositionCommandService,\n\t\tprotected compositionEventService: CompositionEventService,\n\t\tprotected formationEventService: FormationEventService,\n\t\tprotected structureEditModeArchive: StructureEditModeArchive,\n\t\tprotected structureCellEditArchive: StructureCellEditArchive,\n\t\tprotected structureSummaryEnabledArchive: StructureSummaryEnabledArchive,\n\t\tprotected structureAggregationConfigService: StructureAggregationConfigService,\n\t\tprotected structureCellEditStore: StructureCellEditStore\n\t) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(simpleChanges: SimpleChanges) {\n\n\t\tif (simpleChanges.summaryPanel !== undefined && simpleChanges.summaryPanel.currentValue !== undefined) {\n\t\t\tthis.structureSummaryEnabledArchive.set(this.summaryPanel);\n\t\t}\n\n\t\tif (simpleChanges.aggregation !== undefined && simpleChanges.aggregation.currentValue !== undefined) {\n\t\t\tthis.structureAggregationConfigService.set(this.aggregation);\n\t\t}\n\n\t\tif (simpleChanges.editMode !== undefined && simpleChanges.editMode.currentValue !== undefined) {\n\t\t\tthis.structureEditModeArchive.set(this.editMode);\n\t\t}\n\n\t\tif (simpleChanges.cellEditing !== undefined && simpleChanges.cellEditing.currentValue !== undefined) {\n\t\t\tthis.structureCellEditArchive.set(this.cellEditing);\n\t\t}\n\n\t\tif (simpleChanges.width !== undefined && simpleChanges.width.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setWidth(this.width);\n\t\t}\n\n\t\tif (simpleChanges.autoResizeWidth !== undefined && simpleChanges.autoResizeWidth.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setResizeWidth(this.autoResizeWidth);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderTop !== undefined && simpleChanges.columnHeaderTop.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeTopHeader(this.columnHeaderTop);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderBottom !== undefined && simpleChanges.columnHeaderBottom.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeBottomHeader(this.columnHeaderBottom);\n\t\t}\n\n\t\tif (simpleChanges.loading !== undefined && simpleChanges.loading.currentValue !== undefined) {\n\t\t\tthis.sourceCommandService.setLoading(this.loading);\n\t\t}\n\n\t\tif (simpleChanges.paging !== undefined && simpleChanges.paging.currentValue !== undefined) {\n\n\t\t\tlet pagingConfig: PagingConfig;\n\n\t\t\tif (typeof this.paging === 'boolean') {\n\t\t\t\tpagingConfig = {\n\t\t\t\t\tenabled: this.paging\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tpagingConfig = this.paging;\n\t\t\t}\n\n\t\t\tthis.pagingCommandService.setPaging(pagingConfig);\n\t\t}\n\n\t\tif (simpleChanges.columns) {\n\t\t\tthis.structureCommandService.initFields(this.columns, this.compositionId, this.structureId)\n\t\t\t// this.compositionCommandService.setColumns(this.columns);\n\t\t}\n\n\t\tif (simpleChanges.verticalGrid !== undefined && simpleChanges.verticalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeVerticalGrid(this.verticalGrid);\n\t\t}\n\n\t\tif (simpleChanges.horizontalGrid !== undefined && simpleChanges.horizontalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeHorizontalGrid(this.horizontalGrid);\n\t\t}\n\n\t\tif (simpleChanges.theme !== undefined && simpleChanges.theme.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setTheme(this.theme);\n\t\t}\n\n\t\tif (simpleChanges.rowColoring !== undefined && simpleChanges.rowColoring.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setRowColoring(this.rowColoring);\n\t\t}\n\n\t\tif (simpleChanges.height && this.height) {\n\t\t\tthis.schemaCommandService.setHeight(this.height);\n\t\t}\n\n\t\tif (simpleChanges.virtualScroll !== undefined  && simpleChanges.virtualScroll.currentValue !== undefined) {\n\t\t\tif (this.virtualScroll) {\n\t\t\t\tthis.structureCommandService.enableVerticalScroll();\n\t\t\t} else {\n\t\t\t\tthis.structureCommandService.disableVerticalScroll();\n\t\t\t}\n\t\t}\n\n\t\tif (simpleChanges.sorting !== undefined && simpleChanges.sorting.currentValue !== undefined) {\n\n\t\t\tlet sorting: SortingConfig;\n\n\t\t\tif (typeof this.sorting === 'boolean') {\n\t\t\t\tsorting = {\n\t\t\t\t\tenabled: this.sorting\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsorting = this.sorting;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSortingConfig(sorting);\n\t\t}\n\n\t\tif (simpleChanges.filtering !== undefined && simpleChanges.filtering.currentValue !== undefined) {\n\n\t\t\tlet filtering: FilterConfig;\n\n\t\t\tif (typeof this.filtering === 'boolean') {\n\t\t\t\tfiltering = {\n\t\t\t\t\tenabled: this.filtering\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tfiltering = this.filtering;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setFilterConfig(filtering);\n\t\t}\n\n\t\tif (simpleChanges.quickFilters !== undefined && simpleChanges.quickFilters.currentValue !== undefined) {\n\n\t\t\tlet quickFilters: QuickFiltersConfig;\n\n\t\t\tif (typeof this.quickFilters === 'boolean') {\n\t\t\t\tquickFilters = {\n\t\t\t\t\tenabled: this.quickFilters\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tquickFilters = this.quickFilters;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setQuickFiltersConfig(quickFilters);\n\t\t}\n\n\t\tif (simpleChanges.searching !== undefined && simpleChanges.searching.currentValue !== undefined) {\n\n\t\t\tlet searching: SearchConfig;\n\n\t\t\tif (typeof this.searching === 'boolean') {\n\t\t\t\tsearching = {\n\t\t\t\t\tenabled: this.searching\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsearching = this.searching;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSearchingConfig(searching);\n\t\t}\n\n\t\t/**\n\t\t * Setting source should be last step\n\t\t */\n\t\tif (simpleChanges.source) {\n\t\t\tthis.sourceCommandService.setOrigin(this.source);\n\t\t}\n\t}\n\n\tngOnInit() {\n\n\t\tthis.pagingEventService\n\t\t\t.selectPageChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageNumber: number) => {\n\t\t\t\tthis.pageChanged.emit(pageNumber);\n\t\t\t});\n\n\t\tthis.pagingEventService\n\t\t\t.selectPageSizeChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageSize: number) => {\n\t\t\t\tthis.pageSizeChanged.emit(pageSize);\n\t\t\t});\n\n\t\tthis.formationEventService\n\t\t\t.selectItemSelected(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((items: Array<any>) => {\n\t\t\t\tthis.itemsSelected.emit(items);\n\t\t\t});\n\n\t\tthis.compositionEventService\n\t\t\t.selectColumnsChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\tskip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil())\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.columnsChanged.emit();\n\t\t\t});\n\n\n\t\tthis.compositionEventService\n\t\t\t.selectContainerWidthChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\t// skip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((containerWidth: number) => {\n\t\t\t\tthis.containerWidthChanged.emit(containerWidth);\n\t\t\t});\n\n\t\tthis.sourceEventService\n\t\t\t.selectSourceEdited(this.structureId)\n\t\t\t.pipe(\n\t\t\t\t// this.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((values: EditemItemValues) => {\n\t\t\t\tthis.sourceEdited.emit(values);\n\t\t\t});\n\n\t\tthis.structureCellEditStore\n\t\t\t.select()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((state: StructureCellEditState) => {\n\n\t\t\t\tswitch(state) {\n\n\t\t\t\t\tcase StructureCellEditState.ENTER:\n\t\t\t\t\t\tthis.cellEditEntered.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.SUBMIT:\n\t\t\t\t\t\tthis.cellEditSubmitted.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.CANCEL:\n\t\t\t\t\t\tthis.cellEditCanceled.emit();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t});\n\n\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class NextPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'NextPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PrevPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PrevPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PageChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PageChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagesizeChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagesizeChangedEvent');\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { PagingQueryService } from './paging-query.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { NextPageEvent } from '../../domain/paging/command/next-page/next-page.event';\nimport { PrevPageEvent } from '../../domain/paging/command/prev-page/prev-page.event';\nimport { PageChangedEvent } from '../../domain/paging/command/page/page-changed.event';\nimport { Paging } from '../../domain/paging/query/paging';\nimport { PagesizeChangedEvent } from '../../domain/paging/command/change-pagesize/pagesize-changed.event';\n\n\n@Injectable()\nexport class PagingEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate readonly pagingQueryService: PagingQueryService) {\n\t}\n\n\tselectPageChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   NextPageEvent,\n\t\t\t\t\t   PrevPageEvent,\n\t\t\t\t\t   PageChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .select(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPage()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tselectPageSizeChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   PagesizeChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .select(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPageSize()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","export class EditemItemValues {\n\n\tconstructor(public readonly after: any,\n\t\t\t\tpublic readonly before: any) {}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class StructureSourceItemEditedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { EditemItemValues } from './editem-item.values';\nimport { StructureSourceItemEditedEvent } from '../../../domain/source/command/origin/edit/structure.source-item-edited.event';\n\n\n@Injectable()\nexport class SourceEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tselectSourceEdited(structureId: StructureId): Observable<EditemItemValues> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   StructureSourceItemEditedEvent as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   map((event: StructureSourceItemEditedEvent) => {\n\n\t\t\t\t\t\t   const afterItem = event.getAfterItem().getData(),\n\t\t\t\t\t\t\t   beforeItem = event.getBeforeItem().getData();\n\n\t\t\t\t\t\t   return new EditemItemValues(afterItem, beforeItem);\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SelectedRowToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SelectedRowToggledEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureQueryService } from '../structure/structure-query.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SelectedRowToggledEvent } from '../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { Structure } from '../../domain/structure/query/structure';\nimport { Entity } from '../../domain/source/entity';\n\n\n@Injectable()\nexport class FormationEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate structureQueryService: StructureQueryService) {\n\t}\n\n\tselectItemSelected(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   SelectedRowToggledEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.structureQueryService\n\t\t\t\t\t\t\t\t\t  .select(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((str: Structure) => str.getSelectedEntities()),\n\t\t\t\t\t\t\t\t\t\t  map((entities: Array<Entity>) => entities.map(ent => ent.getData()))\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tOnChanges,\n\tOnDestroy,\n\tOnInit,\n\tRenderer2,\n\tSimpleChanges,\n\tViewEncapsulation\n} from '@angular/core';\nimport { timer } from 'rxjs';\n\n\nimport { StructureDefinition } from './structure-definition';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureId } from '../domain/structure-id';\nimport { CompositionId } from '../domain/composition/composition-id';\nimport { localProviders } from './local/local-providers';\nimport { SchemaCssClassManager } from './schema/schema-css-class.manager';\nimport { StructureCellEditArchive } from './edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from './edit/structure.cell-edit.store';\nimport { StructureEditModeArchive } from './edit/structure.edit-mode.archive';\nimport { StructureSummaryEnabledArchive } from './panel/summary/structure.summary-enabled.archive';\nimport { StructureAggregationArchive } from './panel/aggregation/structure.aggregation.archive';\nimport { StructureAggregationConfigService } from './panel/aggregation/structure.aggregation-config.service';\nimport { structureComponentToken } from './structure-component-token';\nimport { StructureGateway } from './gateway/structure.gateway';\nimport { SchemaColumnHeader } from '../domain/schema/query/schema-column-header';\nimport { Structure } from '../domain/structure/query/structure';\nimport { PagingCommandService } from '../app/paging/paging-command.service';\nimport { PagingEventService } from '../app/paging/paging-event.service';\nimport { SourceCommandService } from '../app/source/source-command.service';\nimport { SourceEventService } from '../app/source/event/source-event.service';\nimport { SchemaCommandService } from '../app/schema/schema-command.service';\nimport { CompositionCommandService } from './api/composition/composition.command-service';\nimport { CompositionEventService } from './api/composition/composition.event-service';\nimport { FormationEventService } from '../app/formation/formation-event.service';\nimport { StructureCommandService } from '../app/structure/structure-command.service';\nimport { StructureQueryService } from '../app/structure/structure-query.service';\nimport { CompositionQueryService } from './api/composition/composition.query-service';\nimport { SchemaQueryService } from '../app/schema/schema-query.service';\n\n/** @internal */\nexport function structureIdFactory(generator: StructureIdGenerator): StructureId {\n\treturn new StructureId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport function compositionIdFactory(generator: StructureIdGenerator): CompositionId {\n\treturn new CompositionId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport const structureComponentSelfProviders = [\n\t{\n\t\tprovide: StructureId,\n\t\tuseFactory: structureIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t{\n\t\tprovide: CompositionId,\n\t\tuseFactory: compositionIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t...localProviders,\n\n\tSchemaCssClassManager,\n\tStructureCellEditArchive,\n\tStructureCellEditStore,\n\tStructureEditModeArchive,\n\tStructureSummaryEnabledArchive,\n\tStructureAggregationArchive,\n\tStructureAggregationConfigService\n\n];\n\n/** @internal */\n@Component({\n\tselector: 'gui-structure',\n\ttemplateUrl: './structure.component.html',\n\tstyleUrls: [\n\t\t'./style/styles.ngx.scss',\n\t\t'./style/structure.ngx.scss',\n\t\t'./style/structure-paging.ngx.scss',\n\t\t'./style/structure-responsive.ngx.scss',\n\t\t'./style/structure-flex.ngx.scss',\n\t\t'./composition/composition.ngx.scss',\n\t\t'./style/themes/material.structure.ngx.scss',\n\t\t'./style/themes/dark.structure.ngx.scss',\n\t\t'./style/themes/light.structure.ngx.scss'\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None,\n\thost: {\n\t\t'[class]': `\"gui-structure\"`,\n\t\t'[style.min-height.px]': 'structureHeight',\n\t\t'[class.gui-structure-border]': 'isBorderEnabled()',\n\t\t'[id]': 'structureId.toString()'\n\t},\n\tproviders: [\n\t\t...structureComponentSelfProviders,\n\t\t{\n\t\t\tprovide: structureComponentToken,\n\t\t\tuseExisting: StructureComponent\n\t\t}\n\t]\n})\nexport class StructureComponent extends StructureGateway implements OnChanges, OnInit, AfterViewInit {\n\n\tloaderEnabled: boolean = false;\n\n\tcircleLoaderEnabled: boolean = true;\n\n\tinitialLoaderAnimation: boolean = false;\n\n\tstructureHeight: number;\n\n\tprivate columnHeader: SchemaColumnHeader;\n\n\tprivate structure: Structure;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tcompositionId: CompositionId,\n\t\t\t\tpagingCommandService: PagingCommandService,\n\t\t\t\tpagingEventService: PagingEventService,\n\t\t\t\tsourceCommandService: SourceCommandService,\n\t\t\t\tsourceEventService: SourceEventService,\n\t\t\t\tschemaCommandService: SchemaCommandService,\n\t\t\t\tcompositionCommandService: CompositionCommandService,\n\t\t\t\tcompositionEventService: CompositionEventService,\n\t\t\t\tformationEventService: FormationEventService,\n\t\t\t\tstructureCommandService: StructureCommandService,\n\t\t\t\tstructureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tstructureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tstructureSummaryEnabledArchive: StructureSummaryEnabledArchive,\n\t\t\t\tstructureAggregationConfigService: StructureAggregationConfigService,\n\t\t\t\tstructureCellEditStore: StructureCellEditStore,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureQueryService: StructureQueryService,\n\t\t\t\tprivate compositionQueryService: CompositionQueryService,\n\t\t\t\tprivate schemaQueryService: SchemaQueryService,\n\t\t\t\tprivate schemaStylesManager: SchemaCssClassManager) {\n\n\t\tsuper(\n\t\t\tstructureId,\n\t\t\tcompositionId,\n\t\t\tstructureCommandService,\n\t\t\tpagingCommandService,\n\t\t\tpagingEventService,\n\t\t\tsourceCommandService,\n\t\t\tsourceEventService,\n\t\t\tschemaCommandService,\n\t\t\tcompositionCommandService,\n\t\t\tcompositionEventService,\n\t\t\tformationEventService,\n\t\t\tstructureEditModeArchive,\n\t\t\tstructureCellEditArchive,\n\t\t\tstructureSummaryEnabledArchive,\n\t\t\tstructureAggregationConfigService,\n\t\t\tstructureCellEditStore\n\t\t);\n\n\t\tthis.structureCommandService.init();\n\t\tcompositionCommandService.init();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tsuper.ngOnChanges(changes);\n\t}\n\n\tngOnInit() {\n\t\tsuper.ngOnInit();\n\n\t\tthis.schemaQueryService\n\t\t\t.selectHeight()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((height: number) => {\n\t\t\t\tthis.structureHeight = height;\n\t\t\t});\n\n\t\tthis.schemaQueryService\n\t\t\t.selectColumnHeader()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columnHeader: SchemaColumnHeader) => {\n\t\t\t\tthis.columnHeader = columnHeader;\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.select()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\n\t\t\t\tthis.loaderEnabled = structure.getSource().isLoading();\n\n\t\t\t\tthis.circleLoaderEnabled = structure.isLoaderVisible();\n\n\t\t\t\tif (this.loaderEnabled && !this.initialLoaderAnimation) {\n\t\t\t\t\tthis.initialLoaderAnimation = true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\t\tlet width = this.elementRef.nativeElement.offsetWidth;\n\n\t\tif (width > 0) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * When gui-grid is in dynamic container which is created later then grid.\n\t\t\t */\n\t\t\ttimer(0)\n\t\t\t\t.pipe(\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe(() => {\n\n\t\t\t\t\twidth = this.elementRef.nativeElement.offsetWidth;\n\n\t\t\t\t\tif (width > 0) {\n\t\t\t\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tthis.schemaStylesManager\n\t\t\t.init(this.elementRef, this.structureId);\n\n\t\tthis.compositionQueryService\n\t\t\t.selectWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.structureDefinition.isBorderEnabled() && this.structure.isReadyToDisplay();\n\t}\n\n\tgetStructureId(): StructureId {\n\t\treturn this.structureId;\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\nimport { StructureCommandService } from '../../../app/structure/structure-command.service';\nimport { StructureColumnConfigService } from '../config/structure.column-config.service';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\n\n\n\n@Component({\n\tselector: 'gui-structure-header-columns',\n\ttemplateUrl: './structure-header-columns.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderColumnsComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\tconstructor(private structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureColumnConfigService: StructureColumnConfigService) {\n\t}\n\n\ttoggleSort(column: CellTemplateWithContext) {\n\t\tthis.structureCommandService.toggleSort(column.getFieldId());\n\t}\n\n\tisSortAsc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.ASC;\n\t}\n\n\tisSortDesc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.DESC;\n\t}\n\n\topenConfigDialog(): void {\n\t\tthis.structureColumnConfigService.open();\n\t}\n\n\tcloseConfigDialog(): void {\n\t\tthis.structureColumnConfigService.close();\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureQuickFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectQuickFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFilterRepository } from '../../../domain/structure/query/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../../domain/structure/query/filter/structure.quick-filter.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureFilterReadModelRepository {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository,\n\t\t\t\tprivate structureQuickFilterRepository: StructureQuickFilterRepository) {}\n\n\tselectFilteringEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureFilterRepository.selectFilterEnabled(structureId);\n\t}\n\n\tselectQuickFiltersEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureQuickFilterRepository.selectQuickFilterEnabled(structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnInit, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { DomainEventBus } from '@generic-ui/hermes';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { StructureHeaderColumnsComponent } from './columns/structure-header-columns.component';\nimport { CellTemplateWithContext } from '../../domain/composition/query/definition/cell-template-with-context';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { CompositionQueryService } from '../api/composition/composition.query-service';\n\n\n@Component({\n\tselector: 'gui-structure-header',\n\ttemplateUrl: './structure-header.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderComponent extends SmartComponent implements OnInit {\n\n\t@ViewChild(StructureHeaderColumnsComponent, { read: ElementRef, static: true })\n\tcontainerRef: ElementRef;\n\n\theaderColumns: Array<CellTemplateWithContext> = [];\n\n\tfilterRowEnabled: boolean = false;\n\n\tconstructor(private readonly changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate readonly renderer: Renderer2,\n\t\t\t\tprivate readonly eventBus: DomainEventBus,\n\t\t\t\tprivate readonly structureId: StructureId,\n\t\t\t\tprivate readonly structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate readonly compositionQueryService: CompositionQueryService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.compositionQueryService\n\t\t\t.selectHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.selectContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.selectFilteringEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\n\t\t\t\tthis.filterRowEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\n\n\n@Component({\n\tselector: 'gui-structure-header-filters',\n\ttemplate: `\n\t\t\n\t\t<ng-container *ngIf=\"!filterMode\">\n\n\t\t\t<div *ngFor=\"let cell of columns\"\n\t\t\t\t [style.width.px]=\"cell.width\"\n\t\t\t\t class=\"gui-header-cell\">\n\n\t\t\t\t<!--\t\t\t\t<gui-structure-header-filter [column]=\"cell\">-->\n\t\t\t\t<!--\t\t\t\t</gui-structure-header-filter>-->\n\n\t\t\t\t<button (click)=\"turnOnFilterMode()\">Add Filter</button>\n\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t\t<ng-container *ngIf=\"filterMode\">\n\n\t\t\t<gui-select [options]=\"['has value', 'is the same as', 'starts with', 'ends with']\" [selected]=\"'has value'\" >\n\n\t\t\t</gui-select>\n\n\t\t\t<form [formGroup]=\"filterForm\">\n\t\t\t\t<input type=\"text\" [formControlName]=\"filterFieldName\" gui-input/>\n\t\t\t</form>\n\n\t\t\t<button gui-button (click)=\"clearFilters()\">Clear All</button>\n\t\t\t<button gui-button (click)=\"turnOffFilterMode()\">Close</button>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFiltersComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\t@Output()\n\tclosed = new EventEmitter<void>();\n\n\treadonly filterFieldName = 'phrase';\n\n\tfilterForm: FormGroup;\n\n\tfilterMode: boolean = false;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate formBuilder: FormBuilder,\n\t\t\t\tprivate cd: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\n\t}\n\n\tngOnInit() {\n\t\tthis.filterForm\n\t\t\t.valueChanges\n\t\t\t// .pipe(\n\t\t\t// debounceTime(500)\n\t\t\t// )\n\t\t\t.subscribe((f) => {\n\t\t\t\tthis.filter(f[this.filterFieldName]);\n\t\t\t});\n\t}\n\n\tfilter(phrase: string): void {\n\n\t\tif (phrase === undefined || phrase === null) {\n\t\t\tphrase = '';\n\t\t}\n\n\t\tthis.structureFilterCommandService.addFilter(this.columns[0].getFieldId(), '1', phrase, this.structureId);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.filterForm.reset();\n\t}\n\n\tturnOnFilterMode(): void {\n\t\tthis.filterMode = true;\n\t\tthis.cd.detectChanges();\n\t}\n\n\tturnOffFilterMode(): void {\n\t\tthis.filterMode = false;\n\t\tthis.cd.detectChanges();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\nimport { ChangedValueEmitter } from '../../../domain/composition/query/edit/changed-value.emitter';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n\n@Component({\n\tselector: 'gui-structure-header-filter',\n\ttemplate: `\n\t\t\n<!--\t\t<ng-container-->\n<!--\t\t\t\t*ngTemplateOutlet=\"column.editTemplate; context: editContext\">-->\n<!--\t\t</ng-container>-->\n\t\t\n\t\t<button gui-button [primary]=\"true\" >Add Filter</button>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFilterComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tcolumn: CellTemplateWithContext;\n\n\tsub = new ChangedValueEmitter();\n\n\teditContext: any;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tsuper();\n\n\t\tthis.editContext = {\n\t\t\tchanges: this.sub\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.sub\n\t\t\t.select()\n\t\t\t.subscribe((phrase: string) => this.filter(phrase));\n\t}\n\n\tfilter(phrase: string): void {\n\t\tthis.structureFilterCommandService.addFilter(this.column.getFieldId(), '1', phrase, this.structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, Input, OnInit, Renderer2, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { Entity } from '../../domain/source/entity';\nimport { CellTemplateWithAccessor } from '../../domain/composition/query/definition/cell-template-with-accessor';\nimport { FormationCommandService } from '../../app/formation/formation-command.service';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { FormationQueryService } from '../../app/formation/formation-query.service';\nimport { SelectedRowsList } from '../../domain/formation/query/selected-rows/selected-rows-list';\n\n\n\n@Component({\n\tselector: 'gui-structure-content',\n\ttemplateUrl: `structure-content.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContentComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tsource: Array<Entity>;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\teditMode = false;\n\n\tcellEditing = false;\n\n\tconstructor(private renderer: Renderer2,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate formationCommandService: FormationCommandService,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tprivate formationQueryService: FormationQueryService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.formationQueryService\n\t\t\t.selectSelectedRows()\n\t\t\t.subscribe((rowsList: SelectedRowsList) => {\n\n\t\t\t\tthis.clearSelectedRows();\n\n\t\t\t\trowsList.getIds().forEach((id: string) => {\n\n\t\t\t\t\tconst strippedId = 'gui' + id.replace(/-/g, ''),\n\t\t\t\t\t\tselectedRowEl = this.elementRef.nativeElement.querySelector(`#${strippedId}`);\n\n\t\t\t\t\tif (selectedRowEl) {\n\t\t\t\t\t\tthis.renderer.addClass(selectedRowEl, 'selected');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\tthis.structureEditModeArchive\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.editMode = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureCellEditArchive\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.cellEditing = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\ttrackByFn() {\n\t\treturn 0;\n\t}\n\n\ttranslateY(index: number): string {\n\t\treturn `translateY(${index * 30}px)`;\n\t}\n\n\ttoggleSelectedRow(entity: Entity): void {\n\t\tthis.formationCommandService.toggleSelectedRow((entity as any).id);\n\t}\n\n\tprivate clearSelectedRows(): void {\n\t\tconst selectedElements = this.elementRef.nativeElement.querySelectorAll('.selected');\n\n\t\tselectedElements.forEach((el: any) => {\n\t\t\tthis.renderer.removeClass(el, 'selected');\n\t\t})\n\n\t}\n\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nexport class Entity {\n\n\tprivate readonly id: string;\n\n\tprivate readonly data: any;\n\n\tprivate readonly version: number = 0;\n\n\tconstructor(data: any,\n\t\t\t\tid?: string,\n\t\t\t\tversion: number = 0) {\n\t\tthis.data = data;\n\t\tthis.version = version;\n\t\tif (!id) {\n\t\t\tthis.id = RandomStringGenerator.generate();\n\t\t} else {\n\t\t\tthis.id = id;\n\t\t}\n\t}\n\n\tgetData(): any {\n\t\treturn this.data;\n\t}\n\n\tgetUiId(): string {\n\t\treturn 'gui' + this.id.replace(/-/g, '');\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tequals(entity: Entity): boolean {\n\t\treturn this.id === entity.id && this.getVersion() === entity.getVersion();\n\t}\n\n\tequalsById(id: string): boolean {\n\t\treturn this.id === id;\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\nimport { Entity } from '../../../domain/source/entity';\nimport { CellTemplateWithAccessor } from '../../../domain/composition/query/definition/cell-template-with-accessor';\n\n\n@Component({\n\tselector: 'gui-structure-row',\n\ttemplateUrl: `structure-row.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureRowComponent {\n\n\t@Input()\n\tentity: Entity;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\ttrackByFn(): number {\n\t\treturn 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, SimpleChanges } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithAccessor } from '../../../domain/composition/query/definition/cell-template-with-accessor';\nimport { Entity } from '../../../domain/source/entity';\nimport { StructureCellEditArchive } from '../../edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from '../../edit/structure.cell-edit.store';\nimport { SourceCommandService } from '../../../app/source/source-command.service';\nimport { ChangedValueEmitter } from '../../../domain/composition/query/edit/changed-value.emitter';\nimport { EditEventType } from '../../../domain/composition/query/edit/state/edit.event-type';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { StructureCellEditState } from '../../edit/structure.cell-edit.state';\n\n\n\n@Component({\n\tselector: 'gui-structure-cell',\n\ttemplate: `\n\n\t\t<span *ngIf=\"!inEditMode\"\n\t\t\t  (click)=\"enterEditMode()\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.template;\n\t\t\t\t\tcontext: { element: cell.accessor(entity) }\">\n\t\t\t</ng-container>\n\t\t</span>\n\t\t\n\t\t<span *ngIf=\"inEditMode\" class=\"gui-cell-edit-mode\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.editTemplate;\n\t\t\t\t\tcontext: editContext\">\n\t\t\t</ng-container>\n\t\t</span>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureCellComponent extends SmartComponent {\n\n\t@Input()\n\tentity: Entity;\n\n\t@Input()\n\tcell: CellTemplateWithAccessor;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditingEnabled: boolean;\n\n\tinEditMode: boolean = false;\n\n\teditContext: any;\n\n\tvalueChanges$: any;\n\n\tstatus$: any;\n\n\tactualValue: any;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureCellEditStore: StructureCellEditStore,\n\t\t\t\tprivate sourceCommandService: SourceCommandService) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\n\t\tif (changes.editMode !== undefined) {\n\t\t\tif (this.editMode) {\n\t\t\t\tthis.cellEditingEnabled = true;\n\t\t\t\tthis.enterEditMode(false);\n\t\t\t} else if (!this.editMode) {\n\t\t\t\tthis.exitEditMode();\n\t\t\t}\n\t\t}\n\t}\n\n\tenterEditMode(forceCheck: boolean = true): void {\n\n\t\tif (!this.cellEditingEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.inEditMode = true;\n\n\t\tthis.valueChanges$ = new ChangedValueEmitter();\n\t\tthis.status$ = new ChangedValueEmitter<EditEventType>();\n\n\t\tthis.editContext = {\n\t\t\tstatus: this.status$,\n\t\t\tvalueChanges: this.valueChanges$,\n\t\t\tvalue: this.cell.accessor(this.entity),\n\t\t\tfocus: forceCheck\n\t\t};\n\n\t\tthis.observeFieldStatus();\n\t\tthis.observeValueChanges();\n\n\t\tthis.publishEditEnter();\n\n\t\tif (!forceCheck) {\n\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t} else {\n\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t}\n\n\t}\n\n\texitEditMode(): void {\n\t\tthis.inEditMode = false;\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tsubmitChangesAndExit(): void {\n\n\t\tconst itemId = this.entity.getId(),\n\t\t\tupdatedValue = this.actualValue,\n\t\t\tfieldId = this.cell.columnFieldId;\n\n\t\tthis.sourceCommandService.editItem(new StructureEditSourceItemParams(itemId, fieldId, updatedValue));\n\n\t\tthis.exitEditMode();\n\t}\n\n\tprivate observeFieldStatus(): void {\n\n\t\tthis.status$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((status: EditEventType) => {\n\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase EditEventType.SUBMIT:\n\t\t\t\t\t\tthis.submitChangesAndExit();\n\t\t\t\t\t\tthis.publishEditSubmit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EditEventType.CANCEL:\n\t\t\t\t\t\tthis.exitEditMode();\n\t\t\t\t\t\tthis.publishEditCancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate observeValueChanges(): void {\n\n\t\tthis.valueChanges$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: any) => {\n\t\t\t\tthis.actualValue = value;\n\t\t\t});\n\t}\n\n\tprivate publishEditState(state: StructureCellEditState): void {\n\t\tthis.structureCellEditStore.set(state);\n\t}\n\n\tprivate publishEditEnter(): void {\n\t\tthis.publishEditState(StructureCellEditState.ENTER);\n\t}\n\n\tprivate publishEditCancel(): void {\n\t\tthis.publishEditState(StructureCellEditState.CANCEL);\n\t}\n\n\tprivate publishEditSubmit(): void {\n\t\tthis.publishEditState(StructureCellEditState.SUBMIT);\n\t}\n\n}\n","import {\n\tComponent,\n\tChangeDetectionStrategy,\n\tViewChild,\n\tElementRef,\n\tRenderer2,\n\tOnDestroy,\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tOnInit,\n\tInject,\n\tOptional,\n\tViewEncapsulation,\n\tNgZone\n} from '@angular/core';\nimport { Subject, combineLatest, fromEvent } from 'rxjs';\nimport { distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\n\nimport { ResizeDetector } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { CellTemplateWithAccessor } from '../../domain/composition/query/definition/cell-template-with-accessor';\nimport { Entity } from '../../domain/source/entity';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureCommandService } from '../../app/structure/structure-command.service';\nimport { StructureQueryService } from '../../app/structure/structure-query.service';\nimport { SourceQueryService } from '../../app/source/source-query.service';\nimport { SchemaQueryService } from '../../app/schema/schema-query.service';\nimport { CompositionCommandService } from '../api/composition/composition.command-service';\nimport { CompositionQueryService } from '../api/composition/composition.query-service';\nimport { FormationQueryService } from '../../app/formation/formation-query.service';\nimport { structureParentComponent } from '../structure-parent-component';\nimport { Structure } from '../../domain/structure/query/structure';\n\n\n\n@Component({\n\tselector: 'gui-structure-container',\n\ttemplateUrl: `structure-container.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContainerComponent extends SmartComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\t@ViewChild('container', { static: false })\n\tcontainerRef: ElementRef;\n\n\tcolumns: Array<CellTemplateWithAccessor> = [];\n\n\tsource: Array<Entity> = [];\n\n\theight: number;\n\n\trowColoring: SchemaRowColoring;\n\n\tprivate autoResizeWidthEnabled: boolean = false;\n\n\tprivate scrollObservation$ = new Subject();\n\n\tconstructor(private elementRef: ElementRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate ngZone: NgZone,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureQueryService: StructureQueryService,\n\t\t\t\tprivate sourceQueryService: SourceQueryService,\n\t\t\t\tprivate schemaQueryService: SchemaQueryService,\n\t\t\t\tprivate compositionCommandService: CompositionCommandService,\n\t\t\t\tprivate compositionQueryService: CompositionQueryService,\n\t\t\t\tprivate formationQueryService: FormationQueryService,\n\t\t\t\tprivate resizeDetector: ResizeDetector,\n\t\t\t\t@Optional() @Inject(structureParentComponent) private structureParent: any) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\t/**\n\t\t * TODO One source of truth\n\t\t *\n\t\t * There should only one sub here.\n\t\t */\n\t\tthis.sourceQueryService\n\t\t\t.select()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((source: Array<Entity>) => {\n\t\t\t\tthis.source = source;\n\t\t\t\tthis.setHeight(source.length * 30);\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.selectTemplateColumns()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columns: Array<CellTemplateWithAccessor>) => {\n\t\t\t\tthis.columns = columns;\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.selectResizeWidth()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.autoResizeWidthEnabled = enabled;\n\t\t\t});\n\n\t\tcombineLatest(\n\t\t\tthis.sourceQueryService.select(),\n\t\t\tthis.schemaQueryService.selectContainerHeight()\n\t\t)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((combine: Array<any>) => {\n\n\t\t\t\tconst source: Array<Entity> = combine[0],\n\t\t\t\t\theight: number = combine[1];\n\n\t\t\t\tconst sourceSizeHeight = source.length * 27;\n\n\t\t\t\tif (sourceSizeHeight > height) {\n\t\t\t\t\tthis.setHeight(height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setHeight(sourceSizeHeight);\n\t\t\t\t}\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\n\t\t// turn on when structure is ready\n\t\tif (this.structureParent) {\n\t\t\tthis.resizeDetector\n\t\t\t\t.observe(this.structureParent.getElementRef().nativeElement)\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter(() => this.autoResizeWidthEnabled),\n\t\t\t\t\tmap((element: HTMLElement) => element.offsetWidth),\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe((width: number) => {\n\t\t\t\t\tthis.recalculateContainer(width);\n\t\t\t\t});\n\t\t}\n\n\t\tthis.compositionQueryService\n\t\t\t.selectContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.selectVerticalScrollEnabled()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tif (enabled) {\n\t\t\t\t\tthis.enableScrollObservation();\n\t\t\t\t} else {\n\t\t\t\t\tthis.disableScrollObservation();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t// never runs ??\n\t\tthis.structureQueryService\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tfilter((str: Structure) => {\n\t\t\t\t\treturn str.isVerticalScrollEnabled();\n\t\t\t\t}),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((structure: Structure) => {\n\n\t\t\t\tconst containerHeight = structure.getContainerHeight(),\n\t\t\t\t\ttopMargin = structure.getTopMargin();\n\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'padding-top', topMargin + 'px');\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'height', containerHeight + 'px');\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.resizeDetector.destroy(this.elementRef.nativeElement);\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'height', this.height + 'px');\n\t}\n\n\tprivate recalculateContainer(width: number): void {\n\t\tif (this.autoResizeWidthEnabled) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t}\n\t}\n\n\tprivate enableScrollObservation(): void {\n\t\tthis.ngZone\n\t\t\t.runOutsideAngular(() => {\n\n\t\t\t\tfromEvent(this.elementRef.nativeElement, 'scroll')\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\t// auditTime(10),\n\t\t\t\t\t\ttakeUntil(this.scrollObservation$),\n\t\t\t\t\t\tthis.takeUntil()\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe((event: any) => {\n\n\t\t\t\t\t\tconst scrollTop = event.target.scrollTop;\n\n\t\t\t\t\t\tthis.structureCommandService.setScrollPosition(scrollTop);\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate disableScrollObservation(): void {\n\t\tthis.scrollObservation$.next();\n\t\tthis.scrollObservation$.complete();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\n\n@Component({\n\tselector: 'gui-structure-search-bar',\n\ttemplate: `\n\t\t<form [formGroup]=\"searchForm\">\n\t\t\t<div class=\"gui-search-icon\"></div>\n\t\t\t<input formControlName=\"searchPhrase\" [placeholder]=\"'Search ...'\">\n\t\t</form>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureSearchComponent extends SmartComponent implements OnInit {\n\n\tsearchForm: FormGroup;\n\n\tconstructor(private formBuilder: FormBuilder) {\n\t\tsuper();\n\t\tthis.searchForm = this.formBuilder.group({\n\t\t\t'searchPhrase': ''\n\t\t});\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tprivate observeChanges(): void {\n\t\tthis.searchForm.controls['searchPhrase'].valueChanges\n\t\t\t\t\t\t\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\t\t\t\t\t\t\t// debounceTime(0),\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.takeUntil()\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t.subscribe((name) => console.log(name));\n\t}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'gui-structure-quick-fitlers',\n\ttemplate: `\n\t\n\t\tQuickFilters\n\t\t\n\t`\n})\nexport class StructureQuickFiltersComponent {}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureSearchingRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectSearchingEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureSearchingRepository } from '../../../domain/structure/query/searching/structure.searching.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureSearchReadModelRepository {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {}\n\n\tselectSearchEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureSearchingRepository.selectSearchingEnabled(structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nconst prefix = 'Structure -';\n\nexport const STRUCTURE_CSS_CLASS_NAME = new InjectionToken<string>(`${prefix} - css className`);\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { Structure } from '../../domain/structure/query/structure';\nimport { Paging } from '../../domain/paging/query/paging';\nimport { StructureDefinition } from '../structure-definition';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureQueryService } from '../../app/structure/structure-query.service';\nimport { PagingQueryService } from '../../app/paging/paging-query.service';\nimport { StructureSummaryEnabledArchive } from '../panel/summary/structure.summary-enabled.archive';\nimport { StructureAggregationArchive } from '../panel/aggregation/structure.aggregation.archive';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { StructureSearchReadModelRepository } from '../../ui-api/structure/search/structure-search.read-model.repository';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../../app/structure-tokens';\nimport { StructureAggregationPanelConfig } from '../panel/aggregation/structure.aggregation-panel.config';\n\n\n\n@Component({\n\tselector: 'gui-structure-blueprint',\n\ttemplateUrl: `structure.blueprint.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureBlueprintComponent extends SmartComponent {\n\n\tstructure: Structure;\n\n\tsearchEnabled: boolean = false;\n\n\ttopAggregationPanelEnabled: boolean = false;\n\n\tbottomAggregationPanelEnabled: boolean = false;\n\n\tquickFiltersEnabled: boolean = false;\n\n\tsummaryPanelEnabled: boolean = false;\n\n\treadonly contentCssClass: string;\n\n\treadonly headerCssClass: string;\n\n\tprivate pagingReadModel: Paging;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureQueryService: StructureQueryService,\n\t\t\t\tprivate pagingQueryService: PagingQueryService,\n\t\t\t\tprivate structureSummaryEnabledArchive: StructureSummaryEnabledArchive,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate structureSearchReadModelRepository: StructureSearchReadModelRepository,\n\t\t\t\t@Inject(STRUCTURE_CSS_CLASS_NAME) private className: string) {\n\t\tsuper();\n\n\t\tthis.headerCssClass = `gui-${this.className}-header`;\n\t\tthis.contentCssClass = `gui-${this.className}-content`;\n\t}\n\n\tngOnInit() {\n\t\tthis.structureQueryService\n\t\t\t.select()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.pagingQueryService\n\t\t\t.select()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.pagingReadModel = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureSearchReadModelRepository\n\t\t\t.selectSearchEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.searchEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.selectQuickFiltersEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.quickFiltersEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureAggregationArchive\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((config: StructureAggregationPanelConfig) => {\n\t\t\t\tthis.topAggregationPanelEnabled = config.itTopEnabled();\n\t\t\t\tthis.bottomAggregationPanelEnabled = config.itBottomEnabled();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureSummaryEnabledArchive\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.summaryPanelEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tgetHeaderTopClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-top';\n\t}\n\n\tgetHeaderBottomClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-bottom';\n\t}\n\n\tisColumnHeaderTopEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isTopHeaderEnabled();\n\t}\n\n\tisColumnHeaderBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isBottomHeaderEnabled();\n\t}\n\n\tisPagingTopEnabled(): boolean {\n\t\treturn this.structureDefinition.getTopPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerTop();\n\t}\n\n\tisPagingBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.getBottomPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerBottom();\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedEvent extends DomainEvent {\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly values: Map<string, AggregatedValues>) {\n\t\tsuper(structureId, 'StructureAggregationsChangedEvent');\n\t}\n\n\tgetAggregations() {\n\t\treturn this.values;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\n\n\n@Injectable()\nexport class StructureAggregationUiEventsRepository {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tselectAggregationsChanged(structureId: StructureId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event instanceof StructureAggregationsChangedEvent),\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/query/definition/cell-template-with-context';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationUiEventsRepository } from '../../../ui-api/structure/aggregation/structure.aggregation.ui-events-repository';\nimport { CompositionQueryService } from '../../api/composition/composition.query-service';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\n\n@Component({\n\tselector: 'gui-structure-aggregation-panel',\n\ttemplate: `\n\n\t\t<ng-container *ngIf=\"enabled && aggregations\">\n\n\t\t\t<div *ngFor=\"let column of headerColumns\"\n\t\t\t\t [style.width.px]=\"column.width\"\n\t\t\t\t class=\"gui-header-cell gui-structure-aggregation-cell\">\n\n\t\t\t\t<ng-container *ngIf=\"aggregations && !!aggregations.get(column.getFieldId().getId())\">\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).count)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tCount: <span>{{ aggregations.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).distinct)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tDistinct: <span>{{ aggregations.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).sum)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&sum;</span> Sum</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).sum }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).average)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-mean\"><span>_</span><span>X Average</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).average }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).min)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&and;</span> Min</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).min }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).max)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&or;</span> Max</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).max }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).median)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-median\"><span>~</span><span>X Median</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).truthy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tTruthy: <span>{{ aggregations.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).falsy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tFalsy: <span>{{ aggregations.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureAggregationPanelComponent extends SmartComponent {\n\n\t@Input()\n\tenabled: boolean;\n\n\theaderColumns: Array<CellTemplateWithContext>;\n\n\taggregations: Map<string, any>;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureAggregationUiEventsRepository: StructureAggregationUiEventsRepository,\n\t\t\t\tprivate readonly compositionQueryService: CompositionQueryService) {\n\t\tsuper();\n\n\t\tthis.structureAggregationUiEventsRepository\n\t\t\t.selectAggregationsChanged(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: StructureAggregationsChangedEvent) => {\n\n\t\t\t\tthis.aggregations = event.getAggregations();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngOnInit() {\n\n\t\tthis.compositionQueryService\n\t\t\t.selectHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\tisAggregateTypePresent(aggregation: number): boolean {\n\t\treturn aggregation !== undefined && aggregation !== null;\n\t}\n}\n","export class OriginItemEntity {\n\n\tid: string;\n\n\trawData: any;\n\n\tprivate version: number;\n\n\tconstructor(id: string,\n\t\t\t\trawData: any,\n\t\t\t\tversion: number = 0) {\n\t\tthis.id = id;\n\t\tthis.rawData = rawData;\n\t\tthis.version = version;\n\t}\n\n\tgetData(): any {\n\t\treturn this.rawData;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tbumpVersion(): void {\n\t\tthis.version += 1;\n\t}\n\n\tclone(): OriginItemEntity {\n\n\t\tconst rawData = {...this.rawData};\n\n\t\treturn new OriginItemEntity(this.id, rawData, this.version);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Entity } from './entity';\nimport { OriginItemEntity } from './command/origin/origin-item-entity';\n\n@Injectable()\nexport class EntityFactory {\n\n\tcreate(data: any): Entity;\n\tcreate(data: Array<any>): Array<Entity>;\n\tcreate(data: any): any {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createEntities(data);\n\t\t} else {\n\t\t\treturn this.createEntity(data);\n\t\t}\n\t}\n\n\tcreateEntities(data: Array<any>): Array<Entity> {\n\t\treturn data.map((data: any) => this.createEntity(data));\n\t}\n\n\tprivate createEntity(item: OriginItemEntity | any): Entity {\n\n\t\tif (item instanceof OriginItemEntity) {\n\t\t\treturn new Entity(item.rawData, item.id, item.getVersion());\n\t\t} else {\n\t\t\treturn new Entity(item);\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../domain/structure/command/structure.aggregate';\n\n\n@Injectable()\nexport class InMemoryStructureStore extends InMemoryStore<StructureAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore } from '@generic-ui/hermes';\nimport { AggregateStoreRegister } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateStore extends InMemoryAggregateStore<StructureAggregate> {\n\n\tconstructor(inMemoryStructureStore: InMemoryStructureStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryStructureStore, aggregateStoreRegister);\n\t}\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from './structure.aggregate';\n\nexport abstract class StructureAggregateRepository {\n\n\tabstract getById(aggregateId: AggregateId): StructureAggregate;\n\n\tabstract save(aggregate: StructureAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../domain/structure/command/structure-aggregate.repository';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\n\nimport { InMemoryStructureAggregateStore } from './in-memory.structure.aggregate-store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateRepository extends StructureAggregateRepository {\n\n\tconstructor(private inMemoryStructureAggregateStore: InMemoryStructureAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): StructureAggregate {\n\t\tconst structure = this.inMemoryStructureAggregateStore.getById(aggregateId);\n\n\t\tstructure.clearEvents();\n\n\t\treturn structure;\n\t}\n\n\tsave(aggregate: StructureAggregate): void {\n\t\tthis.inMemoryStructureAggregateStore.save(aggregate);\n\t}\n\n}\n","import { Entity } from '../../../source/entity';\n\nexport class SelectedRowsList {\n\n\tconstructor(private readonly rowIds: Array<string>) {\n\t}\n\n\tisRowSelected(entity: Entity): boolean {\n\t\treturn !!(this.rowIds.find((id) => entity.equalsById(id)));\n\t}\n\n\tgetIds(): Array<string> {\n\t\treturn this.rowIds;\n\t}\n}\n","import { SelectedRowsList } from './selected-rows/selected-rows-list';\n\nexport class Formation {\n\n\tprivate readonly selectedRowsList: SelectedRowsList;\n\n\tconstructor(selectedRows: Array<string>) {\n\t\tthis.selectedRowsList = new SelectedRowsList(selectedRows);\n\t}\n\n\tgetSelectedRows(): SelectedRowsList {\n\t\treturn this.selectedRowsList;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationAggregate } from './command/formation-aggregate';\nimport { Formation } from './query/formation';\n\n\n@Injectable()\nexport class FormationConverter {\n\n\tconvert(aggregate: FormationAggregate): Formation {\n\n\t\tconst rows = aggregate.getSelectedRows();\n\n\t\treturn new Formation(rows);\n\t}\n}\n","import { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaCssClass {\n\n\tconstructor(public readonly verticalGrid: boolean,\n\t\t\t\tpublic readonly horizontalGrid: boolean,\n\t\t\t\tpublic readonly theme: SchemaTheme,\n\t\t\t\tpublic readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n}\n","import { SchemaRowColoring } from '../schema-row-coloring';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaColumnHeader } from './schema-column-header';\nimport { SchemaCssClass } from './schema-css-class';\n\nexport class Schema {\n\n\tconstructor(private readonly width: number,\n\t\t\t\tprivate readonly height: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly verticalGridEnabled: boolean,\n\t\t\t\tprivate readonly horizontalGridEnabled: boolean,\n\t\t\t\tprivate readonly theme: SchemaTheme,\n\t\t\t\tprivate readonly columnHeader: SchemaColumnHeader,\n\t\t\t\tprivate readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGridEnabled;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGridEnabled;\n\t}\n\n\tgetColumnHeader(): SchemaColumnHeader {\n\t\treturn this.columnHeader;\n\t}\n\n\tgetCssClasses(): SchemaCssClass {\n\t\treturn new SchemaCssClass(\n\t\t\tthis.isVerticalGridEnabled(),\n\t\t\tthis.isHorizontalGridEnabled(),\n\t\t\tthis.getTheme(),\n\t\t\tthis.getRowColoring()\n\t\t);\n\t}\n\n}\n","export class SchemaColumnHeader {\n\n\tconstructor(private readonly top: boolean,\n\t\t\t\tprivate readonly bottom: boolean) {\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaAggregate } from './command/schema-aggregate';\nimport { Schema } from './query/schema';\nimport { ColumnHeaderEntity } from './command/column-header/column-header.entity';\nimport { SchemaColumnHeader } from './query/schema-column-header';\n\n\n@Injectable()\nexport class SchemaConverter {\n\n\tconvert(aggregate: SchemaAggregate): Schema {\n\n\t\tconst columnHeader = aggregate.getColumnHeader();\n\n\t\treturn new Schema(\n\t\t\taggregate.getWidth(),\n\t\t\taggregate.getHeight(),\n\t\t\taggregate.getContainerHeight(),\n\t\t\taggregate.isVerticalGridEnabled(),\n\t\t\taggregate.isHorizontalGridEnabled(),\n\t\t\taggregate.getTheme(),\n\t\t\tthis.convertColumnHeader(columnHeader),\n\t\t\taggregate.getRowColoring()\n\t\t);\n\t}\n\n\tprivate convertColumnHeader(columnHeader: ColumnHeaderEntity): SchemaColumnHeader {\n\t\treturn new SchemaColumnHeader(columnHeader.isHeaderOnTop(), columnHeader.isHeaderOnBottom());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregate } from './command/paging.aggregate';\nimport { Paging } from './query/paging';\n\n\n@Injectable()\nexport class PagingConverter {\n\n\tconvert(aggregate: PagingAggregate): Paging {\n\t\treturn new Paging(\n\t\t\taggregate.isEnabled(),\n\t\t\taggregate.getPage(),\n\t\t\taggregate.getPageSize(),\n\t\t\taggregate.getPageSizes(),\n\t\t\taggregate.isPagerTop(),\n\t\t\taggregate.isPagerBottom()\n\t\t);\n\t}\n\n}\n","export class Source {\n\n\tconstructor(private readonly loading: boolean) {}\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Source } from './query/source';\nimport { SourceCoordinator } from './command/source-coordinator';\n\n@Injectable()\nexport class SourceConverter {\n\n\tconvert(aggregate: SourceCoordinator): Source {\n\t\treturn new Source(aggregate.isLoading());\n\t}\n\n}\n","export class VerticalFormationReadModel {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly topMargin: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly viewportHeight: number) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.topMargin;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { VerticalFormation } from '../../command/vertical-formation/vertical-formation';\nimport { VerticalFormationReadModel } from './vertical-formation.read-model';\n\n\n@Injectable()\nexport class VerticalFormationConverter {\n\n\tconvert(verticalFormation: VerticalFormation): VerticalFormationReadModel {\n\n\t\tconst enabled = verticalFormation.isEnabled(),\n\t\t\ttopMargin = verticalFormation.getTopMargin(),\n\t\t\tcontainerHeight = verticalFormation.calcFullHeight(),\n\t\t\tviewportHeight = verticalFormation.getViewPortHeight();\n\n\t\treturn new VerticalFormationReadModel(enabled, topMargin, containerHeight, viewportHeight);\n\t}\n\n}\n","import { AggregateId, ReadModel } from '@generic-ui/hermes';\n\nimport { Formation } from '../../formation/query/formation';\nimport { Schema } from '../../schema/query/schema';\nimport { Paging } from '../../paging/query/paging';\nimport { Entity } from '../../source/entity';\nimport { Source } from '../../source/query/source';\nimport { VerticalFormationReadModel } from './vertical-formation/vertical-formation.read-model';\n\n\n\nexport class Structure extends ReadModel {\n\n\tprivate readonly formation: Formation;\n\n\tprivate readonly schema: Schema;\n\n\tprivate readonly paging: Paging;\n\n\tprivate readonly entities: Array<Entity>;\n\n\tprivate readonly source: Source;\n\n\tprivate readonly verticalFormation: VerticalFormationReadModel;\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tformation: Formation,\n\t\t\t\tschema: Schema,\n\t\t\t\tpaging: Paging,\n\t\t\t\tentities: Array<Entity>,\n\t\t\t\tsource: Source,\n\t\t\t\tverticalFormation: VerticalFormationReadModel) {\n\t\tsuper(uid);\n\t\tthis.formation = formation;\n\t\tthis.schema = schema;\n\t\tthis.paging = paging;\n\t\tthis.entities = entities;\n\t\tthis.source = source;\n\t\tthis.verticalFormation = verticalFormation;\n\t}\n\n\tgetFormation(): Formation {\n\t\treturn this.formation;\n\t}\n\n\tgetSchema(): Schema {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): Paging {\n\t\treturn this.paging;\n\t}\n\n\tgetEntities(): Array<Entity> {\n\t\treturn this.entities;\n\t}\n\n\tgetSource(): Source {\n\t\treturn this.source;\n\t}\n\n\tgetSelectedEntities(): Array<Entity> {\n\n\t\tconst selectedIds = this.formation.getSelectedRows().getIds();\n\n\t\treturn this.entities.filter((entity: Entity) => {\n\t\t\treturn selectedIds.some((id: string) => entity.equalsById(id));\n\t\t});\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.verticalFormation.getTopMargin();\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.verticalFormation.getContainerHeight();\n\t}\n\n\tisLoaderVisible(): boolean {\n\t\tif (this.getSchema().getHeight() > 150) {\n\t\t\treturn this.getSource().isLoading();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isTopHeaderEnabled();\n\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.topHeader to presentation\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isBottomHeaderEnabled();\n\t\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.bottomHeader to presentation\n\t}\n\n\tisReadyToDisplay(): boolean {\n\t\treturn this.entities.length > 0;\n\t\t// this.presentation.getColumns().length > 0; // TODO presentation getColumns\n\t}\n\n\tisVerticalScrollEnabled(): boolean {\n\t\treturn this.verticalFormation.isEnabled();\n\t}\n\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { FormationConverter } from '../formation/formation.converter';\nimport { SchemaConverter } from '../schema/schema.converter';\nimport { PagingConverter } from '../paging/paging.converter';\nimport { SourceConverter } from '../source/source.converter';\nimport { VerticalFormationConverter } from './query/vertical-formation/vertical-formation.converter';\nimport { StructureAggregate } from './command/structure.aggregate';\nimport { Structure } from './query/structure';\nimport { OriginItemEntity } from '../source/command/origin/origin-item-entity';\nimport { Entity } from '../source/entity';\n\n\n@Injectable()\nexport class StructureConverter {\n\n\tconstructor(private formationConverter: FormationConverter,\n\t\t\t\tprivate schemaConverter: SchemaConverter,\n\t\t\t\tprivate pagingConverter: PagingConverter,\n\t\t\t\tprivate sourceConverter: SourceConverter,\n\t\t\t\tprivate verticalFormationConverter: VerticalFormationConverter) {}\n\n\tconvert(aggregate: StructureAggregate): Structure {\n\n\t\tconst formationAggregate = aggregate.getFormation(),\n\t\t\tschemaAggregate = aggregate.getSchema(),\n\t\t\tpagingAggregate = aggregate.getPaging(),\n\t\t\tsourceQuery = aggregate.getEntities(),\n\t\t\tsourceCoordinator = aggregate.getSource(),\n\t\t\tverticalFormation = aggregate.getVerticalFormation();\n\n\t\treturn new Structure(\n\t\t\taggregate.getId(),\n\t\t\t// this.originConverter.convert(originAggregate),\n\t\t\tthis.formationConverter.convert(formationAggregate),\n\t\t\tthis.schemaConverter.convert(schemaAggregate),\n\t\t\tthis.pagingConverter.convert(pagingAggregate),\n\t\t\tthis.convertSource(sourceQuery),\n\t\t\tthis.sourceConverter.convert(sourceCoordinator),\n\t\t\tthis.verticalFormationConverter.convert(verticalFormation)\n\t\t);\n\t}\n\n\tprivate convertSource(source: Array<OriginItemEntity>): Array<Entity> {\n\t\treturn source.map((originItem: OriginItemEntity) => new Entity(originItem.rawData, originItem.id, originItem.getVersion()));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Structure } from '../../../../domain/structure/query/structure';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\nimport { StructureConverter } from '../../../../domain/structure/structure.converter';\n\n\n@Injectable()\nexport class InMemoryStructureQueryStore extends InMemoryReadModelStore<Structure, StructureAggregate> {\n\n\tconstructor(private inMemoryProjectStore: InMemoryStructureStore,\n\t\t\t\tprivate structureConverter: StructureConverter) {\n\t\tsuper(inMemoryProjectStore);\n\t}\n\n\ttoReadModel(aggregate: StructureAggregate): Structure {\n\t\treturn this.structureConverter.convert(aggregate);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureInitedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SetSourceLoadingEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SetSourceLoadingEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaThemeSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaThemeSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaHorizontalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaHorizontalGridSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaVerticalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaVerticalGridSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaTopHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaTopHeaderChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaBottomHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaBottomHeaderChangedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class RowColoringSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'RowColoringSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagingSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class FormationSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'FormationSetEvent');\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class VerticalScrollEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'VerticalScrollEnabledSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class ScrollPositionSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ScrollPositionSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class OriginSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'OriginSetEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureFilterToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureFilterToggledEvent');\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../../../domain/structure/query/structure.repository';\nimport { Structure } from '../../../../domain/structure/query/structure';\nimport { InMemoryStructureQueryStore } from './in-memory.structure.query-store';\nimport { StructureInitedEvent } from '../../../../domain/structure/command/init/structure-inited.event';\nimport { SetSourceLoadingEvent } from '../../../../domain/source/command/loading/set-source-loading.event';\nimport { SchemaSetEvent } from '../../../../domain/schema/command/set/schema-set.event';\nimport { SchemaThemeSetEvent } from '../../../../domain/schema/command/theme/schema-theme-set.event';\nimport { SchemaHorizontalGridSetEvent } from '../../../../domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event';\nimport { SchemaVerticalGridSetEvent } from '../../../../domain/schema/command/grid/vertical/schema-vertical-grid-set.event';\nimport { SchemaTopHeaderChangedEvent } from '../../../../domain/schema/command/column-header/top/schema-top-header-changed.event';\nimport { SchemaBottomHeaderChangedEvent } from '../../../../domain/schema/command/column-header/bottom/schema-bottom-header-changed.event';\nimport { RowColoringSetEvent } from '../../../../domain/schema/command/coloring/set/row-coloring-set.event';\nimport { PagingSetEvent } from '../../../../domain/paging/command/set/paging-set.event';\nimport { PrevPageEvent } from '../../../../domain/paging/command/prev-page/prev-page.event';\nimport { NextPageEvent } from '../../../../domain/paging/command/next-page/next-page.event';\nimport { PagesizeChangedEvent } from '../../../../domain/paging/command/change-pagesize/pagesize-changed.event';\nimport { FormationSetEvent } from '../../../../domain/formation/command/set/formation-set.event';\nimport { SelectedRowToggledEvent } from '../../../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { VerticalScrollEnabledSetEvent } from '../../../../domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event';\nimport { ScrollPositionSetEvent } from '../../../../domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event';\nimport { SortToggledEvent } from '../../../../domain/structure/command/sort/toggle/sort-toggled.event';\nimport { OriginSetEvent } from '../../../../domain/source/command/origin/set-origin/origin-set.event';\nimport { StructureFilterToggledEvent } from '../../../../domain/structure/command/filter/toggle/structure.filter-toggled.event';\n\n\n\n@Injectable()\nexport class InMemoryStructureRepository extends StructureRepository implements OnDestroy {\n\n\tprivate readonly structureIdToStructure = new Map<string, Structure>();\n\n\tprivate readonly structure$ = new ReplaySubject<Map<string, Structure>>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryStructureQueryStore: InMemoryStructureQueryStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tStructureInitedEvent,\n\t\t\t\tSetSourceLoadingEvent,\n\t\t\t\tSchemaSetEvent,\n\t\t\t\tSchemaThemeSetEvent,\n\t\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\t\tSchemaVerticalGridSetEvent,\n\t\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\t\tRowColoringSetEvent,\n\t\t\t\tPagingSetEvent,\n\t\t\t\tPrevPageEvent,\n\t\t\t\tNextPageEvent,\n\t\t\t\tPagesizeChangedEvent,\n\t\t\t\tFormationSetEvent,\n\t\t\t\tSelectedRowToggledEvent,\n\t\t\t\tVerticalScrollEnabledSetEvent,\n\t\t\t\tScrollPositionSetEvent,\n\t\t\t\tSortToggledEvent as any,\n\t\t\t\tStructureFilterToggledEvent,\n\t\t\t\tOriginSetEvent as any\n\t\t\t)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst structure = this.inMemoryStructureQueryStore.getById(aggregateId),\n\t\t\t\t\tkey = structure.getId().toString();\n\n\t\t\t\tthis.structureIdToStructure.set(key, structure);\n\n\t\t\t\tthis.structure$.next(this.structureIdToStructure);\n\t\t\t});\n\t}\n\n\tselect(aggregateId: AggregateId): Observable<Structure> {\n\n\t\treturn this.structure$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structureIdToStructure: Map<string, Structure>) => {\n\n\t\t\t\t\t\t   const key = aggregateId.getId();\n\n\t\t\t\t\t\t   return structureIdToStructure.has(key);\n\t\t\t\t\t   }),\n\t\t\t\t\t   map((structureIdToStructure: Map<string, Structure>) => structureIdToStructure.get(aggregateId.getId()))\n\t\t\t\t   );\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n}\n","import { InMemoryStructureAggregateStore } from './commad/in-memory.structure.aggregate-store';\n\nimport { InMemoryStructureAggregateRepository } from './commad/in-memory.structure-aggregate.repository';\nimport { StructureAggregateRepository } from '../../../domain/structure/command/structure-aggregate.repository';\nimport { InMemoryStructureQueryStore } from './query/in-memory.structure.query-store';\nimport { StructureRepository } from '../../../domain/structure/query/structure.repository';\nimport { InMemoryStructureRepository } from './query/in-memory.structure.repository';\nimport { InMemoryStructureStore } from './in-memory.structure.store';\n\nexport const inMemoryStructureCommandProviders = [\n\tInMemoryStructureAggregateStore,\n\t{\n\t\tprovide: StructureAggregateRepository,\n\t\tuseClass: InMemoryStructureAggregateRepository\n\t},\n];\n\nexport const inMemoryStructureQueryProviders = [\n\tInMemoryStructureQueryStore,\n\t{\n\t\tprovide: StructureRepository,\n\t\tuseClass: InMemoryStructureRepository\n\t}\n];\n\nexport const inMemoryStructureProviders = [\n\tInMemoryStructureStore\n];\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\nexport class StructureSourceItemEditedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedAggregateEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin-item-entity';\n\nexport class StructureOriginChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructureOriginChangedAggregateEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateEvent, RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin/origin-item-entity';\nimport { StructureId } from '../../structure-id';\nimport { Field } from '../../structure/command/field/data-type/field';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\n\n\nexport class SourceCoordinator {\n\n\tprivate loading: boolean = false;\n\n\tprivate fetched: boolean = false;\n\n\tprivate origin: Array<OriginItemEntity>;\n\n\tprivate entities: Array<OriginItemEntity> = [];\n\n\tprivate slicedEntities: Array<OriginItemEntity> = [];\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n\tisFetched(): boolean {\n\t\treturn this.fetched;\n\t}\n\n\tsetLoading(enabled: boolean): void {\n\t\tthis.loading = enabled;\n\t}\n\n\tsetEntities(ent: Array<OriginItemEntity>): void {\n\t\tthis.entities = ent;\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.entities;\n\t}\n\n\tsetSlicedEntities(ent: Array<OriginItemEntity>) {\n\t\tthis.slicedEntities = ent;\n\t}\n\n\tgetSlicedEntities(): Array<OriginItemEntity> {\n\t\treturn this.slicedEntities;\n\t}\n\n\tsetOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = this.convertItems(items);\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tsetConvertedOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = items;\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n\n\tgetOriginSize(): number {\n\t\treturn this.origin.length;\n\t}\n\n\t// editOriginItemByProperty(byField, value: any, field: Field, structureId: StructureId): AggregateEvent {\n\t//\n\t// }\n\n\teditOriginItem(itemId: string, value: any, field: Field, structureId: StructureId): ReadonlyArray<AggregateEvent> {\n\n\t\tconst item: OriginItemEntity = this.findOriginItem(itemId),\n\t\t\titemBeforeChange = item.clone();\n\n\t\tif (item) {\n\t\t\titem.rawData[field.getAccessor()] = value;\n\t\t\titem.bumpVersion();\n\t\t}\n\n\t\treturn [\n\t\t\tnew StructureSourceItemEditedAggregateEvent(structureId, itemBeforeChange, item.clone()),\n\t\t\tthis.createOriginChangedEvent(structureId)\n\t\t];\n\t}\n\n\tremoveOriginItem(itemId: string, structureId: StructureId): Array<AggregateEvent> {\n\n\t\tconst index = this.findOriginItemIndex(itemId);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.origin.splice(index, 1);\n\n\t\t\treturn [this.createOriginChangedEvent(structureId)];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate convertItems(items: Array<any>): Array<OriginItemEntity> {\n\t\treturn items.map((item: any) => new OriginItemEntity(RandomStringGenerator.generate(), item));\n\t}\n\n\tprivate createOriginChangedEvent(structureId: StructureId): AggregateEvent {\n\t\treturn new StructureOriginChangedAggregateEvent(structureId, this.origin);\n\t}\n\n\tprivate findOriginItem(itemId: string): OriginItemEntity {\n\t\treturn this.origin.find((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n\tprivate findOriginItemIndex(itemId: string): number {\n\t\treturn this.origin.findIndex((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SourceCoordinator } from './source-coordinator';\n\n\n@Injectable()\nexport class SourceCoordinatorFactory {\n\n\tcreateDefault(): SourceCoordinator {\n\t\treturn new SourceCoordinator();\n\t}\n\n\tcreate(): SourceCoordinator {\n\t\treturn new SourceCoordinator();\n\t}\n\n}\n","export class VerticalRange {\n\n\tconstructor(private readonly start: number,\n\t\t\t\tprivate readonly end: number) {\n\t}\n\n\tgetStart(): number {\n\t\treturn this.start;\n\t}\n\n\tgetEnd(): number {\n\t\treturn this.end;\n\t}\n\n}\n","import { VerticalRange } from './vertical-range';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\n\nexport class VerticalFormation {\n\n\tprivate rowHeight: number = 30;\n\n\tprivate hiddenItemsTop = 0;\n\n\tprivate hiddenItemsBottom = 0;\n\n\tprivate viewportHeight: number;\n\n\tprivate scrollPosition: number;\n\n\tprivate range: VerticalRange;\n\n\tprivate sourceSize: number;\n\n\tprivate logger: Logger;\n\n\tconstructor(private enabled: boolean = false,\n\t\t\t\tviewportHeight: number = 0,\n\t\t\t\tsourceSize: number = 0,\n\t\t\t\tscrollPosition: number = 0,\n\t\t\t\trowHeight?: number,\n\t\t\t\thiddenItemsTop?: number,\n\t\t\t\thiddenItemsBottom?: number) {\n\t\tthis.viewportHeight = viewportHeight;\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.scrollPosition = scrollPosition;\n\n\t\tif (Number.isInteger(rowHeight)) {\n\t\t\tthis.rowHeight = rowHeight;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsTop)) {\n\t\t\tthis.hiddenItemsTop = hiddenItemsTop;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsBottom)) {\n\t\t\tthis.hiddenItemsBottom = hiddenItemsBottom;\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled &&\n\t\t\tthis.viewportHeight > 0 &&\n\t\t\tthis.sourceSize > 0;\n\t}\n\n\tgetRange(): VerticalRange {\n\t\treturn this.range;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.range.getStart() * this.rowHeight;\n\t}\n\n\tcalculateRange(): any {\n\n\t\tif (this.calcFullHeight() <= this.viewportHeight) {\n\t\t\tthis.range = new VerticalRange(0, this.sourceSize);\n\t\t\treturn;\n\t\t}\n\n\t\tconst itemsInViewport = Math.floor(this.viewportHeight / this.rowHeight);\n\n\t\tconst hiddenElements = Math.floor(this.scrollPosition / this.rowHeight);\n\n\t\tconst topMargin = Math.abs(hiddenElements - this.hiddenItemsTop) * this.rowHeight;\n\n\t\tlet start = (hiddenElements - this.hiddenItemsTop);\n\n\t\tconst viewportElements = Math.ceil(this.viewportHeight / this.rowHeight);\n\n\t\tlet end = start + viewportElements + this.hiddenItemsBottom;\n\n\t\tif (end > this.sourceSize) {\n\t\t\tend = this.sourceSize;\n\t\t\tstart = end - itemsInViewport;\n\t\t}\n\n\t\tthis.range = new VerticalRange(start, end);\n\n\t\treturn {\n\t\t\tstart,\n\t\t\tend,\n\t\t\ttopMargin\n\t\t};\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\n\t\t// TODO dispatch aggregate event\n\t\tif (this.enabled && this.viewportHeight === 0) {\n\t\t\tthis.logger.warn('Height needs to be specified in order for virtual scroll to work.');\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\tsetSourceSize(sourceSize: number = 0): void {\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.calculateRange();\n\t}\n\n\tsetTopHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsTop = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetBottomHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsBottom = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetScrollPosition(scrollPosition: number): void {\n\t\tthis.scrollPosition = scrollPosition;\n\t\tthis.calculateRange();\n\t}\n\n\tsetViewportHeight(height: number): void {\n\t\tthis.viewportHeight = height;\n\t\tthis.calculateRange();\n\t}\n\n\tsetRowHeight(height: number): void {\n\t\tthis.rowHeight = height;\n\t}\n\n\tsetLogger(logger: Logger): void {\n\t\tthis.logger = logger;\n\t}\n\n\tcalcFullHeight(): number {\n\t\treturn this.sourceSize * this.rowHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\nimport { VerticalFormation } from './vertical-formation';\n\n\n@Injectable()\nexport class VerticalFormationFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreate(enabled: boolean = false,\n\t\t   viewportHeight: number = 0,\n\t\t   sourceSize: number = 0,\n\t\t   scrollPosition: number = 0,\n\t\t   rowHeight?: number,\n\t\t   hiddenItemsTop?: number,\n\t\t   hiddenItemsBottom?: number): VerticalFormation {\n\n\t\tconst vf = new VerticalFormation(\n\t\t\tenabled,\n\t\t\tviewportHeight,\n\t\t\tsourceSize,\n\t\t\tscrollPosition,\n\t\t\trowHeight,\n\t\t\thiddenItemsTop,\n\t\t\thiddenItemsBottom\n\t\t);\n\n\t\tvf.setLogger(this.logger);\n\n\t\treturn vf;\n\t}\n\n}\n","export const AGGREGATION_CALCULATORS = 'GUI - Aggregation Calculators';\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly aggregatedValues: Map<string, AggregatedValues>) {\n\t\tsuper(aggregateId, 'StructureAggregationsChangedAggregateEvent');\n\t}\n\n\tgetAggregations(): Map<string, AggregatedValues> {\n\t\treturn this.aggregatedValues;\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { StructureAggregationsChangedAggregateEvent } from './structure.aggregations-changed.aggregate-event';\n\n\nexport class AggregationManager {\n\n\tprivate readonly structureId: StructureId;\n\n\tprivate enabled: boolean = false;\n\n\tprivate readonly values = new Map<FieldId, any>();\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly calculators: Array<AggregationCalculator<any, any>>) {\n\t\tthis.structureId = structureId;\n\t}\n\n\tcalculate(fields: Array<Field>, entities: Array<OriginItemEntity>): Array<AggregateEvent> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst calculations = new Map();\n\n\t\tthis.calculators.forEach((calc: AggregationCalculator<any, any>) => {\n\n\t\t\tconst aggregatedValues = calc.calculate(fields, entities);\n\n\t\t\tif (aggregatedValues) {\n\t\t\t\tArray.from(aggregatedValues.keys())\n\t\t\t\t\t .forEach((key: any) => {\n\t\t\t\t\t\t calculations.set(key, aggregatedValues.get(key));\n\t\t\t\t\t });\n\t\t\t}\n\t\t});\n\n\t\tif (calculations.size > 0) {\n\t\t\treturn [\n\t\t\t\tnew StructureAggregationsChangedAggregateEvent(this.structureId, calculations)\n\t\t\t];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\t}\n\n\tadd() {\n\t}\n\n\tremove() {\n\t}\n\n\tupdate() {\n\t}\n\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { StructureId } from '../../../structure-id';\nimport { AggregationManager } from './aggregation.manager';\n\n\n\n@Injectable()\nexport class AggregationManagerFactory {\n\n\tconstructor(@Inject(AGGREGATION_CALCULATORS) private calculators: Array<AggregationCalculator<any, any>>) {}\n\n\tcreate(structureId: StructureId): AggregationManager {\n\t\treturn new AggregationManager(structureId, this.calculators);\n\t}\n\n}\n","import { FilterId } from './filter.id';\nimport { Field } from '../field/data-type/field';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureFilter {\n\n\tprivate readonly filterId: FilterId;\n\n\tprivate field: Field;\n\n\tprivate filterValue: any;\n\n\tconstructor(id: FilterId,\n\t\t\t\tfield: Field,\n\t\t\t\tfilterValue: any) {\n\t\tthis.filterId = id;\n\t\tthis.field = field;\n\t\tthis.filterValue = filterValue;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.field.getId();\n\t}\n\n\tgetFilterValue(): any {\n\t\treturn this.filterValue;\n\t}\n\n\tsetFilterValue(filterValue: any): void {\n\t\tthis.filterValue = filterValue;\n\t}\n\n\t// Move to container\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.filter((item: OriginItemEntity) => {\n\n\t\t\tif (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.filterString(item);\n\t\t\t} else if (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.filterNumber(item);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.filterBoolean(item);\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate filterString(item: OriginItemEntity): boolean {\n\t\tconst value = this.field.getValue(item);\n\n\t\treturn value.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1;\n\t}\n\n\tprivate filterNumber(item: OriginItemEntity): boolean {\n\t\tconst numberValue = this.field.getValue(item);\n\n\t\treturn numberValue > this.filterValue;\n\t}\n\n\tprivate filterBoolean(item: OriginItemEntity): boolean {\n\t\tconst booleanValue = this.field.getValue(item);\n\n\t\treturn booleanValue === this.filterValue;\n\t}\n\n}\n","import { Field } from '../field/data-type/field';\n\nexport class FilterId {\n\n\tprivate readonly id: string;\n\n\tconstructor(field: Field,\n\t\t\t\tfilterId: string) {\n\n\t\tconst fieldId = field.getId().toString();\n\n\t\tthis.id = fieldId + '@' + filterId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n}\n","import { StructureFilter } from './structure.filter';\nimport { FilterConfig } from '../../../../ui-api/structure/filter/filter-config';\nimport { Field } from '../field/data-type/field';\nimport { FilterId } from './filter.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\n\n\nexport class FilterContainer {\n\n\tprivate enabled: boolean;\n\n\tprivate readonly filters = new Map<string, StructureFilter>();\n\n\tconstructor(enabled: boolean = false) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tsetConfig(config: FilterConfig): void {\n\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.enabled = config.enabled;\n\t\t}\n\t}\n\n\taddFilter(field: Field, externalFilterId: string, filterValue: string): void {\n\n\t\tconst filterId = new FilterId(field, externalFilterId),\n\t\t\tfilter = new StructureFilter(filterId, field, filterValue);\n\n\t\tif (filterValue === '') {\n\t\t\tthis.filters.delete(filterId.getId());\n\t\t} else {\n\t\t\tthis.filters.set(filterId.getId(), filter);\n\t\t}\n\t}\n\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst filters = this.getAll();\n\n\t\tlet filteredEntities = [...entities];\n\n\t\tfor (let filter of filters) {\n\t\t\tfilteredEntities = filter.filter(filteredEntities);\n\t\t}\n\n\t\treturn filteredEntities;\n\t}\n\n\tgetAll(): Array<StructureFilter> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn Array.from(this.filters)\n\t\t\t\t\t.map((arr) => arr[1]);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FilterContainer } from './filter.container';\n\n\n@Injectable()\nexport class FilterContainerFactory {\n\n\tcreate(enabled: boolean = false): FilterContainer {\n\t\treturn new FilterContainer(enabled);\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { FieldId } from './data-type/field.id';\n\nexport class FieldIdGenerator {\n\n\tgenerateId(): FieldId {\n\n\t\tconst id = RandomStringGenerator.generate();\n\t\treturn new FieldId(id);\n\t}\n\n}\n","import { FieldId } from './field.id';\nimport { DataType } from './data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../../aggregation/aggregation.type';\nimport { ColumnAggregationConfig } from '../../../../composition/column-aggregation.config';\n\nexport abstract class Field {\n\n\tprivate readonly id: FieldId;\n\n\t// TODO\n\tprivate readonly accessor: string | any; //(rawData: any) => any;\n\n\tprivate readonly dataType: DataType;\n\n\tprivate readonly accessorMethod: (entity: OriginItemEntity) => any;\n\n\tprivate aggregationEnabled: boolean = true;\n\n\tprivate aggregations: AggregationType;\n\n\tprivate readonly possibleAggregations: AggregationType;\n\n\tprotected constructor(id: FieldId,\n\t\t\t\t\t\t  accessor: any,\n\t\t\t\t\t\t  dataType: DataType,\n\t\t\t\t\t\t  aggregationConfig?: ColumnAggregationConfig) {\n\t\tthis.id = id;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\n\t\tif (typeof accessor === 'string') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => entity.getData()[accessor];\n\t\t} else if (typeof accessor === 'function') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => accessor(entity.getData());\n\t\t}\n\n\t\tthis.possibleAggregations = this.assignPossibleAggregations();\n\n\t\tthis.assignAggregations(aggregationConfig);\n\t}\n\n\tabstract assignDefaultAggregations(): AggregationType;\n\n\tabstract assignPossibleAggregations(): AggregationType;\n\n\tgetId(): FieldId {\n\t\treturn this.id;\n\t}\n\n\tgetKey(): string {\n\t\treturn this.getId().getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n\tgetAccessor(): string {\n\t\treturn this.accessor;\n\t}\n\n\tgetAccessorMethod(): (entity: OriginItemEntity) => any {\n\t\treturn this.accessorMethod;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessorMethod(entity);\n\t}\n\n\tisAggregation(type: AggregationType): boolean {\n\n\t\tif (!this.isAggregationEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(this.aggregations & type);\n\t}\n\n\tisAggregationEnabled(): boolean {\n\t\treturn this.aggregationEnabled;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): void {\n\t\tthis.aggregationEnabled = enabled;\n\t}\n\n\tprivate assignAggregations(aggregationConfig: ColumnAggregationConfig): void {\n\n\t\tif (!!aggregationConfig && Object.keys(aggregationConfig).length !== 0) {\n\n\t\t\tif (aggregationConfig.enabled) {\n\t\t\t\tthis.aggregationEnabled = !!aggregationConfig.enabled;\n\t\t\t}\n\n\t\t\tif (aggregationConfig.aggregationTypes) {\n\n\t\t\t\tthis.aggregations = 0;\n\n\t\t\t\taggregationConfig.aggregationTypes.forEach((t) => {\n\t\t\t\t\tthis.aggregations |= t;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t}\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class UnknownField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.UNKNOWN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class NumberField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.NUMBER,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.SUM |\n\t\t// \tAggregationType.MIN |\n\t\t// \tAggregationType.MAX |\n\t\t// \tAggregationType.AVERAGE |\n\t\t// \tAggregationType.MEDIAN;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.SUM |\n\t\t\tAggregationType.MIN |\n\t\t\tAggregationType.MAX |\n\t\t\tAggregationType.AVERAGE |\n\t\t\tAggregationType.MEDIAN;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class StringField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.STRING,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class BooleanField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.BOOLEAN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.TRUTHY |\n\t\t// \tAggregationType.FALSY;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.TRUTHY |\n\t\t\tAggregationType.FALSY;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class DateField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.DATE,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FieldIdGenerator } from '../field-id.generator';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from './field';\nimport { DataType } from './data-type';\nimport { UnknownField } from './fields/unknown-field';\nimport { NumberField } from './fields/number-field';\nimport { StringField } from './fields/string-field';\nimport { BooleanField } from './fields/boolean-field';\nimport { DateField } from './fields/date-field';\n\n\n\n@Injectable()\nexport class FieldFactory {\n\n\tconstructor(private readonly fieldIdGenerator: FieldIdGenerator) {\n\t}\n\n\tcreate(column: ColumnConfig): Field {\n\n\t\tlet columnType = column.type;\n\n\t\tif (columnType === undefined) {\n\t\t\tcolumnType = DataType.STRING;\n\t\t}\n\n\t\tif (columnType === DataType.UNKNOWN) {\n\t\t\treturn new UnknownField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.NUMBER) {\n\t\t\treturn new NumberField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.STRING) {\n\t\t\treturn new StringField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.BOOLEAN) {\n\t\t\treturn new BooleanField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.DATE) {\n\t\t\treturn new DateField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t}\n\n\n}\n","import { Field } from './data-type/field';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldId } from './data-type/field.id';\nimport { ColumnConfig } from '../../../composition/column.config';\n\n\nexport class FieldContainer {\n\n\tprivate readonly fields = new Map<string, Field>();\n\n\tconstructor(private readonly fieldFactory: FieldFactory) {}\n\n\tgetField(fieldId: FieldId): Field {\n\n\t\tif (fieldId === null) {\n\t\t\treturn this.getAllFields()[0];\n\t\t}\n\n\t\treturn this.fields.get(fieldId.getId());\n\t}\n\n\tgetAllFieldIds(): Array<string> {\n\t\treturn Array.from(this.fields.keys());\n\t}\n\n\tgetAllFields(): Array<Field> {\n\t\treturn Array.from(this.fields.values());\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>): void {\n\n\t\tif (!columns) {\n\t\t\treturn;\n\t\t}\n\n\t\tcolumns.forEach((column: ColumnConfig) => {\n\n\t\t\tconst field = this.fieldFactory.create(column);\n\n\t\t\tthis.addField(field);\n\t\t});\n\t}\n\n\taddFields(fields: Array<Field>): void {\n\t\tfor (let field of fields) {\n\t\t\tthis.addField(field);\n\t\t}\n\t}\n\n\tprivate addField(field: Field): void {\n\t\tthis.fields.set(field.getId().toString(), field);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldContainer } from './field.container';\n\n\n\n@Injectable()\nexport class FieldContainerFactory {\n\n\tconstructor(private fieldFactory: FieldFactory) {\n\t}\n\n\tcreate(): FieldContainer {\n\t\treturn new FieldContainer(this.fieldFactory);\n\t}\n\n}\n","export class FormationAggregate {\n\n\t/**\n\t * In the future this class can be responsible for managing:\n\t * - expanded / collapsed nodes\n\t * - sorting?\n\t * - filtering?\n\t */\n\n\tstatic default() {\n\t\treturn new FormationAggregate([]);\n\t}\n\n\tconstructor(private selectedRows: Array<string>) {\n\t}\n\n\tgetSelectedRows(): Array<string> {\n\t\treturn this.selectedRows;\n\t}\n\n\ttoggleRow(selectedRow: string): void {\n\n\t\tif (this.selectedRows.length > 0) {\n\n\t\t\tif (this.selectedRows[0] === selectedRow) {\n\t\t\t\tthis.selectedRows = [];\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.selectedRows = [selectedRow];\n\t}\n}\n","export class ColumnHeaderEntity {\n\n\tconstructor(private top: boolean,\n\t\t\t\tprivate bottom: boolean) {\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.top = enabled;\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.bottom = enabled;\n\t}\n\n\tisHeaderOnTop(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisHeaderOnBottom(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { ColumnHeaderEntity } from './column-header/column-header.entity';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaAggregate {\n\n\tstatic default() {\n\t\treturn new SchemaAggregate();\n\t}\n\n\tprivate headerHeight = 28;\n\n\tprivate pagerHeight = 35;\n\n\tprivate containerHeight: number;\n\n\tprivate active: boolean = false;\n\n\tprivate horizontalGrid: boolean = true;\n\n\tprivate verticalGrid: boolean = true;\n\n\tprivate columnHeader: ColumnHeaderEntity = new ColumnHeaderEntity(true, false);\n\n\tprivate theme: SchemaTheme = SchemaTheme.FABRIC;\n\n\tprivate rowColoring: SchemaRowColoring = SchemaRowColoring.EVEN;\n\n\tconstructor(private width?: number,\n\t\t\t\tprivate height?: number) {\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tsetTheme(theme: SchemaTheme): void {\n\t\tthis.theme = theme;\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring): void {\n\t\tthis.rowColoring = coloring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.height;\n\t\t// return this.containerHeight;\n\t}\n\n\tgetColumnHeader(): ColumnHeaderEntity {\n\t\treturn this.columnHeader;\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderTop(enabled);\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderBottom(enabled);\n\t}\n\n\tsetVerticalGrid(enabled: boolean): void {\n\t\tthis.verticalGrid = enabled;\n\t}\n\n\tsetHorizontalGrid(enabled: boolean): void {\n\t\tthis.horizontalGrid = enabled;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGrid;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGrid;\n\t}\n\n\tprivate getHeaderHeight(): number {\n\t\treturn this.headerHeight;\n\t}\n\n\tprivate getPagerHeight(): number {\n\t\treturn this.pagerHeight;\n\t}\n\n\tprivate calculateContainerHeight(): void {\n\n\t\tif (!this.height) {\n\t\t\tthis.active = false;\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.active = true;\n\t\t}\n\n\t\tthis.containerHeight = this.height - this.getHeaderHeight() - this.getPagerHeight();\n\t}\n\n}\n","import { Aggregate, AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { PagingAggregate } from '../../paging/command/paging.aggregate';\nimport { SourceCoordinator } from '../../source/command/source-coordinator';\nimport { VerticalFormation } from './vertical-formation/vertical-formation';\nimport { AggregationManager } from './aggregation/aggregation.manager';\nimport { SorterContainer } from './sort/sorter.container';\nimport { FilterContainer } from './filter/filter.container';\nimport { FieldContainer } from './field/field.container';\nimport { FormationAggregate } from '../../formation/command/formation-aggregate';\nimport { SchemaAggregate } from '../../schema/command/schema-aggregate';\nimport { StructureId } from '../../structure-id';\nimport { StructureEditSourceItemParams } from '../../source/command/origin/edit/structure.edit-source-item.params';\nimport { PagingConfig } from '../../paging/paging-config';\nimport { OriginItemEntity } from '../../source/command/origin/origin-item-entity';\nimport { ColumnConfig } from '../../composition/column.config';\nimport { Field } from './field/data-type/field';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { FieldId } from './field/data-type/field.id';\nimport { StructureSorter } from './sort/structure.sorter';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\n\n\nexport class StructureAggregate extends Aggregate {\n\n\t// TODO Get rid of\n\tstatic default(uid: AggregateId, paging: PagingAggregate, sourceCoordinator: SourceCoordinator, verticalFormation: VerticalFormation, aggregationManager: AggregationManager,  sorterContainer: SorterContainer, filterContainer: FilterContainer, fieldContainer: FieldContainer): StructureAggregate {\n\t\treturn new StructureAggregate(uid, paging, sourceCoordinator, verticalFormation, aggregationManager, sorterContainer, filterContainer, fieldContainer);\n\t}\n\n\tprivate formation: FormationAggregate = FormationAggregate.default();\n\n\tprivate schema: SchemaAggregate = SchemaAggregate.default();\n\n\tprivate paging: PagingAggregate;\n\n\tprivate sourceCoordinator: SourceCoordinator;\n\n\tprivate sorterContainer: SorterContainer;\n\n\tprivate filterContainer: FilterContainer;\n\n\tprivate verticalFormation: VerticalFormation;\n\n\tprivate fieldContainer: FieldContainer;\n\n\tprivate aggregationManager: AggregationManager;\n\n\tprivate search: boolean = false;\n\n\tprivate quickFilters: boolean = false;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tpaging: PagingAggregate,\n\t\t\t\tsource: SourceCoordinator,\n\t\t\t\tverticalFormation: VerticalFormation,\n\t\t\t\taggregationManager: AggregationManager,\n\t\t\t\tsorterContainer: SorterContainer,\n\t\t\t\tfilterContainer: FilterContainer,\n\t\t\t\tfieldContainer: FieldContainer) {\n\t\tsuper(structureId);\n\t\tthis.paging = paging;\n\t\tthis.sourceCoordinator = source;\n\t\tthis.verticalFormation = verticalFormation;\n\t\tthis.aggregationManager = aggregationManager;\n\t\tthis.sorterContainer = sorterContainer;\n\t\tthis.filterContainer = filterContainer;\n\t\tthis.fieldContainer = fieldContainer;\n\t}\n\n\tgetVerticalFormation(): VerticalFormation {\n\t\treturn this.verticalFormation;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.aggregationManager.setEnabled(enabled);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetOrigin(items: Array<any>): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.addEvent(\n\t\t\tthis.sourceCoordinator.setOrigin(items, this.getId())\n\t\t);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\teditItem(editParams: StructureEditSourceItemParams): ReadonlyArray<AggregateEvent> {\n\n\t\tconst itemId = editParams.getItemId(),\n\t\t\tfieldId = editParams.getColumnFieldId(),\n\t\t\tfield = this.fieldContainer.getField(fieldId as any), // as FieldId\n\t\t\tvalue = editParams.getValue();\n\n\t\tconst editItemEvents = this.sourceCoordinator.editOriginItem(itemId, value, field, this.getId());\n\n\t\teditItemEvents.forEach((e) => this.addEvent(e));\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.getSchema().setHeight(height);\n\n\t\tconst viewportHeight = this.getSchema().getContainerHeight();\n\n\t\tthis.verticalFormation.setViewportHeight(viewportHeight);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tsetFormation(formation: FormationAggregate): void {\n\t\tthis.formation = formation;\n\t}\n\n\tsetScrollPosition(position: number): void {\n\t\tthis.verticalFormation.setScrollPosition(position);\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tgetFormation(): FormationAggregate {\n\t\treturn this.formation;\n\t}\n\n\tsetSchema(schema: SchemaAggregate): void {\n\t\tthis.schema = schema;\n\t}\n\n\tgetSchema(): SchemaAggregate {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): PagingAggregate {\n\t\treturn this.paging;\n\t}\n\n\tchangePaging(config: PagingConfig) {\n\t\tthis.paging.change(config);\n\t\tthis.calculateSource();\n\t}\n\n\tsetPaging(paging: PagingAggregate): void {\n\t\tthis.paging = paging;\n\t\tthis.calculateSource();\n\t}\n\n\tnextPage(): void {\n\n\t\tconst sourceSize = this.sourceCoordinator.getOriginSize();\n\n\t\tthis.paging.nextPage(sourceSize);\n\n\t\tthis.calculateSource();\n\t}\n\n\tprevPage(): void {\n\t\tthis.paging.prevPage();\n\t\tthis.calculateSource();\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tconst pagingEvents = this.paging.changePageSize(pageSize);\n\n\t\t// TODO\n\t\tpagingEvents.forEach((event) => {\n\t\t\tthis.addEvent(event);\n\t\t});\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.sourceCoordinator.getSlicedEntities();\n\t}\n\n\tgetSource(): SourceCoordinator {\n\t\treturn this.sourceCoordinator;\n\t}\n\n\tcreateFields(columns: Array<ColumnConfig>): Array<Field> {\n\t\tthis.fieldContainer.initFields(columns);\n\n\t\t// TODO Should throw event fields created\n\t\treturn this.fieldContainer.getAllFields();\n\t}\n\n\tsetSortingConfig(config: SortingConfig): void {\n\t\tthis.sorterContainer.setConfig(config);\n\t}\n\n\ttoggleSort(fieldId: FieldId): Array<StructureSorter> {\n\n\t\tconst field = this.fieldContainer.getField(fieldId);\n\n\t\tthis.sorterContainer.toggle(field);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.sorterContainer.getAll();\n\t}\n\n\tsetFilterConfig(config: FilterConfig): void {\n\t\tthis.filterContainer.setConfig(config);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig): void {\n\t\tthis.quickFilters = config.enabled;\n\t}\n\n\tsetSearchingConfig(config: SearchConfig): void {\n\t\tthis.search = config.enabled;\n\t}\n\n\ttoggleFilter(fieldId: FieldId, externalFilterId: string, filterValue: string): Array<AggregateEvent> {\n\n\t\tconst field = this.fieldContainer.getField(fieldId);\n\n\t\t// Field not found\n\t\t// TODO throw aggregate event\n\t\tif (field === undefined) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.filterContainer.addFilter(field, externalFilterId, filterValue);\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\tprivate calculateSource(): void {\n\n\t\tif (!this.sourceCoordinator.getOrigin() || !this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO Refactor\n\t\tthis.sourceCoordinator.setEntities(this.sourceCoordinator.getOrigin());\n\n\t\t// aggregations\n\t\tconst aggregationEvents = this.aggregationManager.calculate(\n\t\t\tthis.fieldContainer.getAllFields(),\n\t\t\tthis.sourceCoordinator.getEntities()\n\t\t);\n\n\t\taggregationEvents.forEach((ae: AggregateEvent) => {\n\t\t\tthis.addEvent(ae);\n\t\t});\n\n\t\t// filtering\n\t\tthis.sourceCoordinator.setEntities(this.filterContainer.filter(this.sourceCoordinator.getEntities()));\n\n\t\t// search\n\n\t\t// sorting\n\t\tthis.sourceCoordinator.setEntities(this.sorterContainer.sort(this.sourceCoordinator.getEntities()));\n\n\t\t// paging\n\t\tthis.sourceCoordinator.setEntities(this.paging.sample(this.sourceCoordinator.getEntities()));\n\n\t\tthis.verticalFormation.setSourceSize(this.sourceCoordinator.getEntities().length);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tprivate calculateSourceBasedOnVirtualScroll(): void {\n\n\t\tif (this.verticalFormation.isEnabled()) {\n\n\t\t\tconst range = this.verticalFormation.getRange();\n\n\t\t\tthis.sourceCoordinator.setSlicedEntities(\n\t\t\t\tthis.sourceCoordinator.getEntities().slice(range.getStart(), range.getEnd())\n\t\t\t);\n\t\t} else {\n\t\t\tthis.sourceCoordinator.setSlicedEntities(\n\t\t\t\tthis.sourceCoordinator.getEntities()\n\t\t\t);\n\t\t}\n\t}\n\n}\n","import { SorterId } from './sorter.id';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureSorter {\n\n\tprivate readonly sorterId: SorterId;\n\n\tprivate columnId: string;\n\n\tprivate field: Field;\n\n\tprivate rank: number = 1;\n\n\tprivate direction: boolean;\n\n\tconstructor(id: SorterId,\n\t\t\t\tfield: Field,\n\t\t\t\tdirection: boolean = true) {\n\t\tthis.sorterId = id;\n\t\tthis.field = field;\n\t\tthis.direction = direction;\n\t}\n\n\tgetId(): SorterId {\n\t\treturn this.sorterId;\n\t}\n\n\tgetRank(): number {\n\t\treturn this.rank;\n\t}\n\n\tgetField(): Field {\n\t\treturn this.field;\n\t}\n\n\tgetDirection(): boolean {\n\t\treturn this.direction;\n\t}\n\n\tchangeDirection(): void {\n\t\tthis.direction = !this.direction;\n\t}\n\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.sort((entityOne: OriginItemEntity, entityTwo: OriginItemEntity) => {\n\n\t\t\tlet valueOne = this.direction ? this.field.getValue(entityOne) : this.field.getValue(entityTwo),\n\t\t\t\tvalueTwo = this.direction ? this.field.getValue(entityTwo) : this.field.getValue(entityOne);\n\n\t\t\tif (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.sortNumber(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.sortBoolean(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.sortString(valueOne, valueTwo);\n\t\t\t} else {\n\t\t\t\treturn this.sortUnknown(valueOne, valueTwo);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate sortString(strOne: string, strTwo: string): number {\n\n\t\tconst sureStrOne = '' + strOne,\n\t\t\tsureStrTwo = '' + strTwo;\n\n\t\treturn sureStrOne.localeCompare(sureStrTwo);\n\t}\n\n\tprivate sortNumber(numOne: number, numTwo: number): number {\n\n\t\tconst sureNumOne = +numOne,\n\t\t\tsureNumTwo = +numTwo;\n\n\t\treturn sureNumOne - sureNumTwo;\n\t}\n\n\tprivate sortBoolean(booleanOne: boolean, booleanTwo: boolean): number {\n\n\t\tconst sureBoolOne = !!booleanOne,\n\t\t\tsureBoolTwo = !!booleanTwo;\n\n\t\treturn (sureBoolOne === sureBoolTwo) ? 0 : sureBoolTwo ? -1 : 1;\n\t}\n\n\tprivate sortUnknown(a: any, b: any): number {\n\t\treturn 0;\n\t}\n\n}\n","export class SorterId {\n\n\tprivate readonly sorterId: string;\n\n\tconstructor(id: string) {\n\t\tthis.sorterId = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.sorterId;\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { StructureSorter } from './structure.sorter';\nimport { SortingConfig } from '../../../../ui-api/structure/sorting-config';\nimport { Field } from '../field/data-type/field';\nimport { SorterId } from './sorter.id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\n\n\n\nexport class SorterContainer {\n\n\tprivate enabled: boolean;\n\n\tprivate multi: boolean;\n\n\tprivate readonly sorters = new Map<string, StructureSorter>();\n\n\tconstructor(enabled: boolean = false,\n\t\t\t\tmulti: boolean = false) {\n\t\tthis.enabled = enabled;\n\t\tthis.multi = multi;\n\t}\n\n\tsetConfig(config: SortingConfig): void {\n\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.enabled = config.enabled;\n\t\t}\n\n\t\tif (config && config.multiSorting !== undefined && config.multiSorting !== null) {\n\t\t\tthis.multi = config.multiSorting;\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t}\n\n\ttoggle(field: Field): void {\n\n\t\tconst fieldId = field.getId(),\n\t\t\tsorter = this.sorters.get(fieldId.getId());\n\n\t\tif (sorter) {\n\t\t\tif (sorter.getDirection()) {\n\t\t\t\tsorter.changeDirection();\n\t\t\t} else {\n\t\t\t\tthis.delete(fieldId);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.add(field);\n\t\t}\n\n\t}\n\n\tadd(field: Field): void {\n\t\tthis.addSorter(field.getId(), new StructureSorter(new SorterId(RandomStringGenerator.generate()), field));\n\t}\n\n\taddSorter(fieldId: FieldId, sorter: StructureSorter): void {\n\n\t\tif (!this.multi) {\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t\tthis.sorters.set(fieldId.getId(), sorter);\n\t}\n\n\tdelete(fieldId: FieldId): void {\n\t\tthis.sorters.delete(fieldId.getId());\n\t}\n\n\tupdate(): void {\n\t}\n\n\t// TODO Remove the loop from sorter.sort\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst sorters = this.getAll();\n\n\t\tlet sortedEntities = [...entities];\n\n\t\tfor (let sorter of sorters) {\n\t\t\tsortedEntities = sorter.sort(sortedEntities);\n\t\t}\n\n\t\treturn sortedEntities;\n\t}\n\n\tgetAll(): Array<StructureSorter> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn Array.from(this.sorters)\n\t\t\t\t\t.map((arr) => arr[1])\n\t\t\t\t\t.sort((sorterOne: StructureSorter, sorterTwo: StructureSorter) => {\n\t\t\t\t\t\treturn sorterOne.getRank() - sorterTwo.getRank();\n\t\t\t\t\t})\n\t\t\t\t\t.reverse();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregateFactory } from '../../paging/command/paging.aggregate-factory';\nimport { SourceCoordinatorFactory } from '../../source/command/source-coordinator.factory';\nimport { VerticalFormationFactory } from './vertical-formation/vertical-formation.factory';\nimport { AggregationManagerFactory } from './aggregation/aggregation.manager.factory';\nimport { FilterContainerFactory } from './filter/filter.container-factory';\nimport { FieldContainerFactory } from './field/field-container.factory';\nimport { StructureId } from '../../structure-id';\nimport { StructureAggregate } from './structure.aggregate';\nimport { SorterContainer } from './sort/sorter.container';\n\n\n\n@Injectable()\nexport class StructureAggregateFactory {\n\n\tconstructor(private readonly pagingAggregateFactory: PagingAggregateFactory,\n\t\t\t\tprivate readonly sourceCoordinatorFactory: SourceCoordinatorFactory,\n\t\t\t\tprivate readonly verticalFormationFactory: VerticalFormationFactory,\n\t\t\t\tprivate readonly aggregationManagerFactory: AggregationManagerFactory,\n\t\t\t\tprivate readonly filterContainerFactory: FilterContainerFactory,\n\t\t\t\tprivate readonly fieldContainerFactory: FieldContainerFactory) {\n\t}\n\n\tcreate(structureId: StructureId): StructureAggregate {\n\n\t\tconst paging = this.pagingAggregateFactory.createDefault(),\n\t\t\tsource = this.sourceCoordinatorFactory.createDefault(),\n\t\t\tverticalFormation = this.verticalFormationFactory.create();\n\n\t\tconst sorterContainer: SorterContainer = new SorterContainer(),\n\t\t\tfilterContainer = this.filterContainerFactory.create(false),\n\t\t\tfieldContainer = this.fieldContainerFactory.create(),\n\t\t\taggregationManager = this.aggregationManagerFactory.create(structureId);\n\n\t\treturn new StructureAggregate(structureId,\n\t\t\tpaging,\n\t\t\tsource,\n\t\t\tverticalFormation,\n\t\t\taggregationManager,\n\t\t\tsorterContainer,\n\t\t\tfilterContainer,\n\t\t\tfieldContainer\n\t\t);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../structure.aggregate-factory';\nimport { InitStructureCommand } from './init-structure.command';\nimport { StructureInitedEvent } from './structure-inited.event';\n\n\n\n@Injectable()\nexport class InitStructureCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitStructureCommand,\n\t\t\tStructureInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitStructureCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId;\n\n\t\tconst structure = this.structureAggregateFactory.create(aggregateId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetVerticalScrollEnabledCommand } from './set-vertical-scroll-enabled.command';\nimport { VerticalScrollEnabledSetEvent } from './vertical-scroll-enabled-set.event';\n\n\n\n@Injectable()\nexport class SetVerticalScrollEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetVerticalScrollEnabledCommand);\n\t}\n\n\thandle(command: SetVerticalScrollEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst formation = structure.getVerticalFormation();\n\n\t\tformation.setEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new VerticalScrollEnabledSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetScrollPositionCommand } from './set-scroll-position.command';\nimport { ScrollPositionSetEvent } from './scroll-position-set.event';\n\n\n\n@Injectable()\nexport class SetScrollPositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetScrollPositionCommand);\n\t}\n\n\thandle(command: SetScrollPositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tposition = command.position;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setScrollPosition(position);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new ScrollPositionSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { InitFieldsCommand } from './init-fields.command';\nimport { FieldsInitedEvent } from './fields-inited.event';\n\n\n\n@Injectable()\nexport class InitFieldsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitFieldsCommand);\n\t}\n\n\thandle(command: InitFieldsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tcompositionId = command.compositionId,\n\t\t\tcolumns = command.columns;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst fields = structure.createFields(columns); // tODO convert don't let dandruff into the domain\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new FieldsInitedEvent(structureId, compositionId, columns, fields));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AggregateId, CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { ToggleSortCommand } from './toggle-sort.command';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureSorter } from '../structure.sorter';\nimport { SortToggledEvent } from './sort-toggled.event';\n\n\n@Injectable()\nexport class ToggleSortCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSortCommand);\n\t}\n\n\thandle(command: ToggleSortCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tcompositionId = command.getCompositionId(),\n\t\t\tfieldId = command.getFieldId();\n\n\t\tconst structure = this.structureAggregateRepository.getById(aggregateId);\n\n\t\tconst sorters = structure.toggleSort(fieldId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.publishSortEvent(aggregateId, compositionId, fieldId, sorters);\n\t}\n\n\tpublishSortEvent(aggregateId: AggregateId, compositionId: CompositionId, fieldId: FieldId, sorters: Array<StructureSorter>): void {\n\n\t\tconst directions = sorters.map((sorter: StructureSorter) => {\n\t\t\treturn {\n\t\t\t\tdirection: sorter.getDirection(),\n\t\t\t\tfieldId: sorter.getField().getId()\n\t\t\t};\n\t\t});\n\n\t\tthis.domainEventPublisher.publish(new SortToggledEvent(aggregateId, compositionId, directions));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SortingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SortingSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetSortingCommand } from './set-sorting.command';\nimport { SortingSetEvent } from './sorting-set.event';\n\n\n\n@Injectable()\nexport class SetSortingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSortingCommand);\n\t}\n\n\thandle(command: SetSortingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsortingConfig = command.getSortingConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSortingConfig(sortingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new SortingSetEvent(structureId));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigFilterCommand } from './structure.set-config-filter.command';\nimport { StructureConfigFilterSetEvent } from './structure.config-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfilterConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setFilterConfig(filterConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigFilterSetEvent(structureId, filterConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigSearchingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigSearchingSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigSearchingCommand } from './structure.set-config-searching.command';\nimport { StructureConfigSearchingSetEvent } from './structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigSearchingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigSearchingCommand);\n\t}\n\n\thandle(command: StructureSetConfigSearchingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsearchingConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSearchingConfig(searchingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigSearchingSetEvent(structureId, searchingConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\n\nexport class StructureConfigQuickFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigQuickFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigQuickFilterCommand } from './structure.set-config-quick-filter.command';\nimport { StructureConfigQuickFilterSetEvent } from './structure.config-quick-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigQuickFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigQuickFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigQuickFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tquickFiltersConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setQuickFiltersConfig(quickFiltersConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigQuickFilterSetEvent(structureId, quickFiltersConfig.enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureToggleFilterCommand } from './structure.toggle-filter.command';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureFilterToggledEvent } from './structure.filter-toggled.event';\n\n\n\n@Injectable()\nexport class StructureToggleFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureToggleFilterCommand);\n\t}\n\n\thandle(command: StructureToggleFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfieldId: FieldId = command.fieldId,\n\t\t\texternalFieldId: string = command.externalFilterId,\n\t\t\tfilterValue = command.filterValue;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.toggleFilter(fieldId, externalFieldId, filterValue);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureFilterToggledEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\nimport { OriginSetEvent } from './origin/set-origin/origin-set.event';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureSourceItemEditedEvent } from './origin/edit/structure.source-item-edited.event';\nimport { StructureAggregationsChangedAggregateEvent } from '../../structure/command/aggregation/structure.aggregations-changed.aggregate-event';\nimport { StructureAggregationsChangedEvent } from '../../structure/command/aggregation/structure.aggregations-changed.event';\n\n\n@Injectable()\nexport class StructureSourceDomainEventPublisher {\n\n\tconstructor(private domainEventPublisher: DomainEventPublisher) {\n\t}\n\n\tpublish(events: ReadonlyArray<AggregateEvent>): void {\n\n\t\tevents.forEach((event) => {\n\t\t\tthis.publishEvent(event);\n\t\t});\n\t}\n\n\tprivate publishEvent(event: AggregateEvent): void {\n\n\t\tif (event.getType() === 'StructureOriginChangedAggregateEvent') {\n\n\t\t\tconst structureOriginChangedAggregateEvent = (event as StructureOriginChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new OriginSetEvent(structureOriginChangedAggregateEvent.getAggregateId(), structureOriginChangedAggregateEvent.getOrigin());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureSourceItemEditedAggregateEvent') {\n\n\t\t\tconst structureSourceItemEditedAggregateEvent = (event as StructureSourceItemEditedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureSourceItemEditedEvent(\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAggregateId(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getBeforeItem(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAfterItem()\n\t\t\t);\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureAggregationsChangedAggregateEvent') {\n\n\t\t\tconst structureAggregationsChangedAggregateEvent = (event as StructureAggregationsChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureAggregationsChangedEvent(structureAggregationsChangedAggregateEvent.getAggregateId(), structureAggregationsChangedAggregateEvent.getAggregations());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\n\t\t}\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class StructureAggregationEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureAggregationEnabledSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { StructureSourceDomainEventPublisher } from '../../../../source/command/structure.source.domain-event.publisher';\nimport { StructureSetAggregationEnabledCommand } from './structure.set-aggregation-enabled.command';\nimport { StructureAggregationEnabledSetEvent } from './structure.aggregation-enabled-set.event';\n\n\n@Injectable()\nexport class StructureSetAggregationEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate readonly structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetAggregationEnabledCommand);\n\t}\n\n\thandle(command: StructureSetAggregationEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.setAggregationEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureAggregationEnabledSetEvent(structureId, enabled));\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { AggregatedValues } from './aggregated.values';\nimport { DataType } from '../../field/data-type/data-type';\nimport { Field } from '../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../aggregation.type';\n\n\nexport abstract class AggregationCalculator<T, A extends AggregatedValues> {\n\n\tabstract forDataType(dataType: DataType): boolean;\n\n\tabstract prepare(field: Field): void;\n\n\tabstract postCalculate(field: Field, items: Array<OriginItemEntity>): void;\n\n\tabstract aggregate(field: Field, value: T): void;\n\n\tabstract generateAggregatedValues(field: Field): A;\n\n\tcalculate(fields: Array<Field>, items: Array<OriginItemEntity>): Map<string, A> {\n\n\t\tconst filteredFields = fields.filter((field: Field) => this.forDataType(field.getDataType()));\n\n\t\tif (!filteredFields || filteredFields.length === 0 || items.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet count = new Map<string, number>(),\n\t\t\tdistinct = new Map<string, Set<string>>();\n\n\t\t// init\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getKey();\n\n\t\t\tcount.set(key, 0);\n\t\t\tdistinct.set(key, new Set());\n\n\t\t\tthis.prepare(field);\n\t\t});\n\n\t\t// calculate\n\t\titems.forEach((item: OriginItemEntity) => {\n\n\t\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\t\tconst key = field.getKey(),\n\t\t\t\t\tvalue = field.getValue(item);\n\n\t\t\t\tif (value !== null || value !== undefined || value !== '') {\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\t\t\tconst countForField = count.get(key);\n\t\t\t\t\t\tcount.set(key, countForField + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\t\t\tconst distinctSet = distinct.get(key);\n\t\t\t\t\t\tdistinctSet.add(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.aggregate(field, value);\n\t\t\t});\n\t\t});\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tthis.postCalculate(field, items);\n\n\t\t});\n\n\t\tlet aggregations = new Map();\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getId().getId();\n\n\t\t\tlet aggregatedValues = this.generateAggregatedValues(field);\n\n\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\taggregatedValues.setCount(count.get(key));\n\t\t\t}\n\n\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\taggregatedValues.setDistinct((distinct.get(key)).size);\n\t\t\t}\n\n\t\t\taggregations.set(key, aggregatedValues);\n\t\t});\n\n\t\treturn aggregations;\n\t}\n\n}\n","export abstract class AggregatedValues {\n\n\tpublic count: number;\n\tpublic distinct: number;\n\n\tsetCount(value: number): void {\n\t\tthis.count = value;\n\t}\n\n\tsetDistinct(value: number): void {\n\t\tthis.distinct = value;\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class BooleanAggregatedValues extends AggregatedValues {\n\n\tpublic readonly truthy: number;\n\n\tpublic readonly falsy: number;\n\n\tconstructor(truthy: number,\n\t\t\t\tfalsy: number) {\n\t\tsuper();\n\t\tthis.truthy = truthy;\n\t\tthis.falsy = falsy;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { BooleanAggregatedValues } from './boolean-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class BooleanAggregationCalculator extends AggregationCalculator<boolean, BooleanAggregatedValues> {\n\n\tprivate readonly truthy = new Map<string, number>();\n\tprivate readonly falsy = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.BOOLEAN;\n\t}\n\n\taggregate(field: Field, value: boolean): void {\n\n\t\tconst booleanValue = value, // (value as any === 'true'),\n\t\t\tkey = field.getKey(),\n\t\t\ttruthyForField = this.truthy.get(key),\n\t\t\tfalsyForField = this.falsy.get(key);\n\n\t\tif (booleanValue) {\n\t\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\t\tthis.truthy.set(key, truthyForField + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\t\tthis.falsy.set(key, falsyForField + 1);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): BooleanAggregatedValues {\n\n\t\tconst key = field.getKey();\n\n\t\treturn new BooleanAggregatedValues(\n\t\t\tthis.truthy.get(key),\n\t\t\tthis.falsy.get(key)\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\tthis.truthy.set(key, 0);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\tthis.falsy.set(key, 0);\n\t\t}\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class DateAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { DateAggregatedValues } from './date-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class DateAggregationCalculator extends AggregationCalculator<Date, DateAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.DATE;\n\t}\n\n\taggregate(field: Field, value: Date): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): DateAggregatedValues {\n\t\treturn new DateAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class NumberAggregatedValues extends AggregatedValues{\n\n\tpublic readonly sum: number;\n\tpublic readonly min: number;\n\tpublic readonly max: number;\n\tpublic readonly average: number;\n\tpublic readonly median: number;\n\n\tconstructor(sum: number,\n\t\t\t\tmin: number,\n\t\t\t\tmax: number,\n\t\t\t\taverage: number,\n\t\t\t\tmedian: number) {\n\t\tsuper();\n\t\tthis.sum = this.setValueWithPrecision(sum);\n\t\tthis.min = this.setValueWithPrecision(min);\n\t\tthis.max = this.setValueWithPrecision(max);\n\t\tthis.average = this.setValueWithPrecision(average);\n\t\tthis.median = this.setValueWithPrecision(median);\n\t}\n\n\tprivate setValueWithPrecision(value: number): number {\n\t\tif (!value && value !== 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (value === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn +((value).toFixed(2));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { NumberAggregatedValues } from './number-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class NumberAggregationCalculator extends AggregationCalculator<number, NumberAggregatedValues> {\n\n\tprivate readonly sum = new Map<string, number>();\n\tprivate readonly min = new Map<string, number>();\n\tprivate readonly max = new Map<string, number>();\n\tprivate readonly average = new Map<string, number>();\n\tprivate readonly median = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.NUMBER;\n\t}\n\n\taggregate(field: Field, value: number): void {\n\n\t\tconst numberValue = +value,\n\t\t\tkey = field.getKey(),\n\t\t\tsumForField = this.sum.get(key),\n\t\t\tminForField = this.min.get(key),\n\t\t\tmaxForField = this.max.get(key);\n\n\t\tif (field.isAggregation(AggregationType.SUM) || field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.sum.set(key, sumForField + numberValue);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MIN)) {\n\t\t\tif (minForField > numberValue) {\n\t\t\t\tthis.min.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MAX)) {\n\t\t\tif (maxForField < numberValue) {\n\t\t\t\tthis.max.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): NumberAggregatedValues {\n\n\t\tconst key = field.getKey(),\n\t\t\tsum = field.isAggregation(AggregationType.SUM) ? this.sum.get(key) : undefined,\n\t\t\tmin = field.isAggregation(AggregationType.MIN) ? this.min.get(key) : undefined,\n\t\t\tmax = field.isAggregation(AggregationType.MAX) ? this.max.get(key) : undefined,\n\t\t\taverage = field.isAggregation(AggregationType.AVERAGE) ? this.average.get(key) : undefined,\n\t\t\tmedian = field.isAggregation(AggregationType.MEDIAN) ? this.median.get(key) : undefined;\n\n\t\treturn new NumberAggregatedValues(\n\t\t\tsum,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\taverage,\n\t\t\tmedian\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tthis.sum.set(key, 0);\n\t\tthis.min.set(key, Number.MAX_SAFE_INTEGER);\n\t\tthis.max.set(key, 0);\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.average.set(key, this.sum.get(key) / items.length);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MEDIAN)) {\n\t\t\tthis.median.set(key, field.getValue(items[Math.floor(items.length / 2)]));\n\t\t}\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class StringAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { StringAggregatedValues } from './string-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class StringAggregationCalculator extends AggregationCalculator<string, StringAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.STRING;\n\t}\n\n\taggregate(field: Field, value: string): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): StringAggregatedValues {\n\t\treturn new StringAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class UnknownAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { UnknownAggregatedValues } from './unknown-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class UnknownAggregationCalculator extends AggregationCalculator<any, UnknownAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.UNKNOWN;\n\t}\n\n\taggregate(field: Field, value: any): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): UnknownAggregatedValues {\n\t\treturn new UnknownAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { Type, Provider } from '@angular/core';\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { BooleanAggregationCalculator } from './calculation/boolean/boolean-aggregation.calculator';\nimport { DateAggregationCalculator } from './calculation/date/date-aggregation.calculator';\nimport { NumberAggregationCalculator } from './calculation/number/number-aggregation.calculator';\nimport { StringAggregationCalculator } from './calculation/string/string-aggregation.calculator';\nimport { UnknownAggregationCalculator } from './calculation/unknown/unknown-aggregation.calculator';\nimport { AggregationManagerFactory } from './aggregation.manager.factory';\n\n\n\nexport function provideAggregationCalculator(clazz: Type<any>): Provider {\n\treturn {\n\t\tprovide: AGGREGATION_CALCULATORS,\n\t\tuseClass: clazz,\n\t\tmulti: true\n\t};\n}\n\nexport const aggregationProviders = [\n\tprovideAggregationCalculator(BooleanAggregationCalculator),\n\tprovideAggregationCalculator(DateAggregationCalculator),\n\tprovideAggregationCalculator(NumberAggregationCalculator),\n\tprovideAggregationCalculator(StringAggregationCalculator),\n\tprovideAggregationCalculator(UnknownAggregationCalculator),\n\n\tAggregationManagerFactory\n];\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureFilterRepository } from './structure.filter.repository';\nimport { StructureConfigFilterSetEvent } from '../../command/filter/config/structure.config-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigFilterSetEvent) {\n\t\t\tthis.structureFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureSearchingRepository } from './structure.searching.repository';\n\nimport { StructureConfigSearchingSetEvent } from '../../command/search/config/structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureConfigSearchingSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigSearchingSetEvent): void {\n\n\t\tif (event instanceof StructureConfigSearchingSetEvent) {\n\t\t\tthis.structureSearchingRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureQuickFilterRepository } from './structure.quick-filter.repository';\nimport { StructureConfigQuickFilterSetEvent } from '../../command/filter/quick/structure.config-quick-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigQuickFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureQuickFilterRepository: StructureQuickFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigQuickFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigQuickFilterSetEvent) {\n\t\t\tthis.structureQuickFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { DataType } from '../../../domain/structure/command/field/data-type/data-type';\n\n\nexport class StructureFieldUiModel {\n\n\tconstructor(private readonly id: FieldId,\n\t\t\t\tprivate readonly dataType: DataType) {\n\t}\n\n\tgetId(): string {\n\t\treturn this.id.getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Field } from '../../../domain/structure/command/field/data-type/field';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiConverter {\n\n\tconvert(fields: Array<Field>): Array<StructureFieldUiModel> {\n\t\treturn fields.map((field: Field) => {\n\t\t\treturn this.convertOne(field);\n\t\t});\n\t}\n\n\tprivate convertOne(field: Field): StructureFieldUiModel {\n\n\t\treturn new StructureFieldUiModel(field.getId(), field.getDataType());\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureFieldUiConverter } from './structure.field.ui-converter';\nimport { FieldsInitedEvent } from '../../../domain/structure/command/field/init/fields-inited.event';\n\n\n@Injectable()\nexport class StructureFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFieldsRepository: StructureFieldUiArchive,\n\t\t\t\tprivate structureFieldUiConverter: StructureFieldUiConverter) {\n\t\tsuper();\n\t}\n\n\thandle(event: FieldsInitedEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\tconst fields = this.structureFieldUiConverter.convert(event.getFields());\n\n\t\t\tthis.structureFieldsRepository.set(event.getAggregateId(), fields);\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetPagingCommand } from './set-paging.command';\nimport { PagingSetEvent } from './paging-set.event';\nimport { PagingConfig } from '../../paging-config';\n\n\n@Injectable()\nexport class SetPagingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetPagingCommand,\n\t\t\tPagingSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetPagingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst pagingConfig = command.payload as PagingConfig,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.changePaging(pagingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { NextPageCommand } from './next-page.command';\nimport { NextPageEvent } from './next-page.event';\n\n\n@Injectable()\nexport class NextPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(NextPageCommand,\n\t\t\tNextPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: NextPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.nextPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { PrevPageCommand } from './prev-page.command';\nimport { PrevPageEvent } from './prev-page.event';\n\n\n@Injectable()\nexport class PrevPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(PrevPageCommand,\n\t\t\tPrevPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: PrevPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.prevPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher, AggregateEvent } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ChangePagesizeCommand } from './change-pagesize.command';\nimport { PageChangedEvent } from '../page/page-changed.event';\nimport { PagesizeChangedEvent } from './pagesize-changed.event';\n\n\n@Injectable()\nexport class ChangePagesizeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangePagesizeCommand);\n\t}\n\n\thandle(command: ChangePagesizeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst newPageSize = command.pageSize as number,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.changePageSize(newPageSize);\n\n\t\t// aggregateEvents => DomainEvents\n\n\t\t// DomainEvent\n\t\t// causationId -> aka commandId\n\t\t// correlationId -> actual or previous commandId\n\n\t\t// event publisher should take aggregate events\n\t\t// and convert them to domain events\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\t// TODO\n\t\t(aggregateEvents as any).forEach((event: AggregateEvent) => {\n\t\t\t(event as any).aggregateId = structureId;\n\t\t});\n\n\t\tthis.publishAggregateEvents(aggregateEvents, command);\n\t}\n\n\tprivate publishAggregateEvents(events: ReadonlyArray<AggregateEvent>, command: ChangePagesizeCommand): void {\n\n\t\tfor (let event of events) {\n\t\t\tthis.publishAggregateEvent(event, command);\n\t\t}\n\t}\n\n\tprivate publishAggregateEvent(event: AggregateEvent, command: ChangePagesizeCommand): void {\n\n\t\tswitch (event.getType()) {\n\t\t\tcase 'PageChangedAggregateEvent':\n\n\t\t\t\tconst pageChangedEvent = new PageChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pageChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PagesizeChangedAggregateEvent':\n\n\t\t\t\tconst pagesizeChangedEvent = new PagesizeChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pagesizeChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { SetPagingCommandHandler } from '../../domain/paging/command/set/set-paging.command-handler';\nimport { NextPageCommandHandler } from '../../domain/paging/command/next-page/next-page.command-handler';\nimport { PrevPageCommandHandler } from '../../domain/paging/command/prev-page/prev-page.command-handler';\nimport { ChangePagesizeCommandHandler } from '../../domain/paging/command/change-pagesize/change-pagesize.command-handler';\nimport { PagingRepository } from '../../domain/paging/query/paging.repository';\nimport { PagingAggregateFactory } from '../../domain/paging/command/paging.aggregate-factory';\nimport { PagingConverter } from '../../domain/paging/paging.converter';\nimport { PagingCommandService } from './paging-command.service';\nimport { PagingQueryService } from './paging-query.service';\nimport { PagingEventService } from './paging-event.service';\n\n\nconst commandProviders = [\n\tPagingDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetPagingCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: NextPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: PrevPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangePagesizeCommandHandler,\n\t\tmulti: true\n\t}\n];\n\nconst queryProviders = [\n\tPagingRepository\n];\n\nexport const pagingProviders = [\n\t...commandProviders,\n\t...queryProviders,\n\n\tPagingAggregateFactory,\n\tPagingConverter,\n\n\tPagingCommandService,\n\tPagingQueryService,\n\tPagingEventService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaVerticalGridCommand } from './set-schema-vertical-grid.command';\nimport { SchemaVerticalGridSetEvent } from './schema-vertical-grid-set.event';\n\n\n@Injectable()\nexport class SetSchemaVerticalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaVerticalGridCommand,\n\t\t\tSchemaVerticalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaVerticalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setVerticalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaHorizontalGridCommand } from './set-schema-horizontal-grid.command';\nimport { SchemaHorizontalGridSetEvent } from './schema-horizontal-grid-set.event';\n\n@Injectable()\nexport class SetSchemaHorizontalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaHorizontalGridCommand,\n\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaHorizontalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHorizontalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaThemeCommand } from './set-schema-theme.command';\nimport { SchemaThemeSetEvent } from './schema-theme-set.event';\n\n@Injectable()\nexport class SetSchemaThemeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaThemeCommand,\n\t\t\tSchemaThemeSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaThemeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst theme = command.theme,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setTheme(theme);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaBottomHeaderCommand } from './change-schema-bottom-header.command';\nimport { SchemaBottomHeaderChangedEvent } from './schema-bottom-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaBottomHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaBottomHeaderCommand,\n\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaBottomHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderBottom(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaTopHeaderCommand } from './change-schema-top-header.command';\nimport { SchemaTopHeaderChangedEvent } from './schema-top-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaTopHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaTopHeaderCommand,\n\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaTopHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderTop(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetRowColoringCommand } from './set-row-coloring.command';\nimport { RowColoringSetEvent } from './row-coloring-set.event';\n\n\n@Injectable()\nexport class SetRowColoringCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetRowColoringCommand,\n\t\t\tRowColoringSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetRowColoringCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst coloring = command.coloring,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setRowColoring(coloring);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaCommand } from './set-schema.command';\nimport { SchemaSetEvent } from './schema-set.event';\n\n\n@Injectable()\nexport class SetSchemaCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaCommand,\n\t\t\tSchemaSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst height = command.height,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setHeight(height);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SetSchemaVerticalGridCommandHandler } from '../../domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler';\nimport { SetSchemaHorizontalGridCommandHandler } from '../../domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler';\nimport { SetSchemaThemeCommandHandler } from '../../domain/schema/command/theme/set-schema-theme.command-handler';\nimport { ChangeSchemaBottomHeaderCommandHandler } from '../../domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler';\nimport { ChangeSchemaTopHeaderCommandHandler } from '../../domain/schema/command/column-header/top/change-schema-top-header.command-handler';\nimport { SetRowColoringCommandHandler } from '../../domain/schema/command/coloring/set/set-row-coloring.command-handler';\nimport { SetSchemaCommandHandler } from '../../domain/schema/command/set/set-schema.command-handler';\nimport { SchemaRepository } from '../../domain/schema/query/schema-repository';\nimport { SchemaConverter } from '../../domain/schema/schema.converter';\nimport { SchemaCommandService } from './schema-command.service';\nimport { SchemaQueryService } from './schema-query.service';\n\n\nconst commandProviders = [\n\tSchemaDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaVerticalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaHorizontalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaThemeCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaBottomHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaTopHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetRowColoringCommandHandler,\n\t\tmulti: true\n\t}\n];\n\nconst queryProviders = [\n\tSchemaRepository\n];\n\nexport const schemaProviders = [\n\t...commandProviders,\n\t...queryProviders,\n\n\tSchemaConverter,\n\n\tSchemaCommandService,\n\tSchemaQueryService\n\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetFormationCommand } from './set-formation.command';\nimport { FormationSetEvent } from './formation-set.event';\n\n\n@Injectable()\nexport class SetFormationCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetFormationCommand,\n\t\t\tFormationSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetFormationCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst rawFormation = command.payload as any,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\t// missing implementation\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ToggleSelectedRowCommand } from './toggle-selected-row.command';\nimport { SelectedRowToggledEvent } from './selected-row-toggled.event';\n\n\n@Injectable()\nexport class ToggleSelectedRowCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSelectedRowCommand,\n\t\t\tSelectedRowToggledEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ToggleSelectedRowCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst selectedRow = command.selectedRow,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst formation = structure.getFormation();\n\n\t\tformation.toggleRow(selectedRow);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { SetFormationCommandHandler } from '../../domain/formation/command/set/set-formation.command-handler';\nimport { ToggleSelectedRowCommandHandler } from '../../domain/formation/command/toggle/toggle-selected-row.command-handler';\nimport { FormationRepository } from '../../domain/formation/query/formation-repository';\nimport { FormationEventService } from './formation-event.service';\nimport { FormationConverter } from '../../domain/formation/formation.converter';\nimport { FormationCommandService } from './formation-command.service';\nimport { FormationQueryService } from './formation-query.service';\n\nconst commandProviders = [\n\tFormationDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetFormationCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSelectedRowCommandHandler,\n\t\tmulti: true\n\t}\n];\n\nconst queryProviders = [\n\tFormationRepository\n];\n\nexport const formationProviders = [\n\t...commandProviders,\n\t...queryProviders,\n\n\tFormationEventService,\n\n\tFormationConverter,\n\n\tFormationCommandService,\n\tFormationQueryService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\nimport { SetOriginCommand } from './set-origin.command';\n\n\n@Injectable()\nexport class SetOriginCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(SetOriginCommand);\n\t}\n\n\thandle(command: SetOriginCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\titems = command.items as Array<any>;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst aggregateEvents = structure.setOrigin(items);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemCommand } from './structure.edit-source-item.command';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\n\n\n@Injectable()\nexport class StructureEditSourceItemCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(StructureEditSourceItemCommand);\n\t}\n\n\thandle(command: StructureEditSourceItemCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.getAggregateId(),\n\t\t\tparams = command.getParams();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.editItem(params);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureSourceOriginRepository } from './structure.source-origin.repository';\nimport { OriginSetEvent } from '../../command/origin/set-origin/origin-set.event';\n\n\n\n@Injectable()\nexport class StructureOriginChangedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: OriginSetEvent): void {\n\n\t\tif (event instanceof OriginSetEvent) {\n\t\t\tconst origin = event.getOrigin();\n\n\t\t\tthis.structureSourceOriginRepository.setOrigin(origin, event.getAggregateId());\n\t\t}\n\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/query/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from '../../schema/query/schema';\nimport { Structure } from '../../structure/query/structure';\n\n\n@Injectable()\nexport class SourceRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSourceLoadingEvent } from './set-source-loading.event';\nimport { SourceSetLoadingCommand } from './source-set-loading.command';\n\n\n@Injectable()\nexport class SourceSetLoadingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SourceSetLoadingCommand,\n\t\t\tSetSourceLoadingEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SourceSetLoadingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tsource = structure.getSource();\n\n\t\tsource.setLoading(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { SourceCoordinatorFactory } from '../../domain/source/command/source-coordinator.factory';\nimport { SetOriginCommandHandler } from '../../domain/source/command/origin/set-origin/set-origin.command-handler';\nimport { StructureEditSourceItemCommandHandler } from '../../domain/source/command/origin/edit/structure.edit-source-item.command-handler';\nimport { StructureSourceDomainEventPublisher } from '../../domain/source/command/structure.source.domain-event.publisher';\nimport { StructureOriginChangedEventHandler } from '../../domain/source/query/origin/structure.origin-changed.event-handler';\nimport { SourceConverter } from '../../domain/source/source.converter';\nimport { SourceCommandService } from './source-command.service';\nimport { SourceQueryService } from './source-query.service';\nimport { SourceEventService } from './event/source-event.service';\nimport { SourceRepository } from '../../domain/source/query/source.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/query/origin/structure.source-origin.repository';\nimport { SourceSetLoadingCommandHandler } from '../../domain/source/command/loading/source-set-loading.command-handler';\n\n\nconst commandProviders = [\n\tSourceDispatcher,\n\tSourceCoordinatorFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SourceSetLoadingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetOriginCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureEditSourceItemCommandHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceDomainEventPublisher\n];\n\nconst queryProviders = [\n\tSourceRepository,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureOriginChangedEventHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceOriginRepository\n];\n\nexport const sourceProviders = [\n\t...commandProviders,\n\t...queryProviders,\n\n\tSourceConverter,\n\n\tSourceCommandService,\n\tSourceQueryService,\n\tSourceEventService\n];\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryStructureCommandProviders,\n\tinMemoryStructureProviders,\n\tinMemoryStructureQueryProviders\n} from '../../infrastructure/in-memory/structure/in-memory.structure.providers';\nimport { InitStructureCommandHandler } from '../../domain/structure/command/init/init-structure.command-handler';\nimport { SetVerticalScrollEnabledCommandHandler } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler';\nimport { SetScrollPositionCommandHandler } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler';\nimport { InitFieldsCommandHandler } from '../../domain/structure/command/field/init/init-fields.command-handler';\nimport { ToggleSortCommandHandler } from '../../domain/structure/command/sort/toggle/toggle-sort.command-handler';\nimport { SetSortingCommandHandler } from '../../domain/structure/command/sort/set/set-sorting.command-handler';\nimport { StructureSetConfigFilterCommandHandler } from '../../domain/structure/command/filter/config/structure.set-config-filter.command-handler';\nimport { StructureSetConfigSearchingCommandHandler } from '../../domain/structure/command/search/config/structure.set-config-searching.command-handler';\nimport { StructureSetConfigQuickFilterCommandHandler } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler';\nimport { StructureToggleFilterCommandHandler } from '../../domain/structure/command/filter/toggle/structure.toggle-filter.command-handler';\nimport { StructureSetAggregationEnabledCommandHandler } from '../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler';\nimport { VerticalFormationFactory } from '../../domain/structure/command/vertical-formation/vertical-formation.factory';\nimport { FieldContainerFactory } from '../../domain/structure/command/field/field-container.factory';\nimport { FilterContainerFactory } from '../../domain/structure/command/filter/filter.container-factory';\nimport { FieldIdGenerator } from '../../domain/structure/command/field/field-id.generator';\nimport { StructureFilterCommandService } from '../../ui-api/structure/filter/structure.filter.command.service';\nimport { FieldFactory } from '../../domain/structure/command/field/data-type/field.factory';\nimport { aggregationProviders } from '../../domain/structure/command/aggregation/aggregation.providers';\nimport { StructureConfigFilterSetEventHandler } from '../../domain/structure/query/filter/structure.config-filter-set.event-handler';\nimport { StructureConfigSearchingSetEventHandler } from '../../domain/structure/query/searching/structure.config-searching-set.event-handler';\nimport { StructureConfigQuickFilterSetEventHandler } from '../../domain/structure/query/filter/structure.config-quick-filter-set.event-handler';\nimport { StructureFieldsInitedEventHandler } from '../../ui-api/structure/field/structure.fields-inited.event-handler';\nimport { VerticalFormationConverter } from '../../domain/structure/query/vertical-formation/vertical-formation.converter';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { StructureFilterRepository } from '../../domain/structure/query/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../domain/structure/query/filter/structure.quick-filter.repository';\nimport { StructureSearchingRepository } from '../../domain/structure/query/searching/structure.searching.repository';\nimport { StructureSearchReadModelRepository } from '../../ui-api/structure/search/structure-search.read-model.repository';\nimport { StructureFieldUiArchive } from '../../ui-api/structure/field/structure.field.ui-archive';\nimport { StructureFieldUiConverter } from '../../ui-api/structure/field/structure.field.ui-converter';\nimport { StructureFieldUiRepository } from '../../ui-api/structure/field/structure.field.ui-repository';\nimport { StructureAggregationCommandService } from '../../ui-api/structure/aggregation/structure.aggregation.command-service';\nimport { StructureAggregationUiEventsRepository } from '../../ui-api/structure/aggregation/structure.aggregation.ui-events-repository';\nimport { StructureCommandService } from './structure-command.service';\nimport { StructureConverter } from '../../domain/structure/structure.converter';\nimport { StructureAggregateFactory } from '../../domain/structure/command/structure.aggregate-factory';\nimport { StructureQueryService } from './structure-query.service';\nimport { pagingProviders } from '../paging/paging.providers';\nimport { schemaProviders } from '../schema/schema.providers';\nimport { formationProviders } from '../formation/formation.providers';\nimport { sourceProviders } from '../source/source.providers';\n\n\n\nconst commandProviders = [\n\t...inMemoryStructureCommandProviders,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitStructureCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetVerticalScrollEnabledCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetScrollPositionCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitFieldsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSortCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSortingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigSearchingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigQuickFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureToggleFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetAggregationEnabledCommandHandler,\n\t\tmulti: true\n\t},\n\tVerticalFormationFactory,\n\tFieldContainerFactory,\n\tFilterContainerFactory,\n\tFieldIdGenerator,\n\tStructureFilterCommandService,\n\tFieldFactory,\n\n\t...aggregationProviders\n];\n\nconst queryProviders = [\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigSearchingSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigQuickFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureFieldsInitedEventHandler,\n\t\tmulti: true\n\t},\n\t...inMemoryStructureQueryProviders,\n\tVerticalFormationConverter,\n\tStructureFilterReadModelRepository,\n\tStructureFilterRepository,\n\tStructureQuickFilterRepository,\n\tStructureSearchingRepository,\n\tStructureSearchReadModelRepository,\n\tStructureFieldUiArchive,\n\tStructureFieldUiConverter,\n\tStructureFieldUiRepository\n];\n\nexport const structureProviders = [\n\t...inMemoryStructureProviders,\n\n\t...commandProviders,\n\t...queryProviders,\n\n\tStructureAggregationCommandService,\n\tStructureAggregationUiEventsRepository,\n\n\tStructureAggregateFactory,\n\tStructureConverter,\n\n\tStructureQueryService,\n\tStructureCommandService,\n\n\t...pagingProviders,\n\t...schemaProviders,\n\t...formationProviders,\n\t...sourceProviders\n];\n","import { Logger } from './logger';\n\nexport class ConsoleLogger extends Logger {\n\n\twarn(text: string): void {\n\t\tconsole.warn(text);\n\t}\n\n\terror(text: string): void {\n\t\tconsole.error(text);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { Logger } from './logger';\nimport { ConsoleLogger } from './console.logger';\n\n\n@NgModule({\n\tproviders: [{\n\t\tprovide: Logger,\n\t\tuseClass: ConsoleLogger\n\t}]\n})\nexport class LoggerModule {}\n","import { ModuleWithProviders, NgModule, PLATFORM_ID, Inject } from '@angular/core';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, HermesModule } from '@generic-ui/hermes';\n\nimport { StructureColumnConfigService } from './header/config/structure.column-config.service';\nimport { fabricImports } from './structure-fabric.imports';\nimport { StructurePagingModule } from './paging/structure-paging.module';\nimport { StructureSummaryModule } from './panel/summary/structure.summary.module';\nimport { CompositionModule } from './api/composition/composition.module';\nimport { StructureComponent } from './structure.component';\nimport { StructureHeaderComponent } from './header/structure-header.component';\nimport { StructureHeaderColumnsComponent } from './header/columns/structure-header-columns.component';\nimport { StructureHeaderFiltersComponent } from './header/filters/structure-header-filters.component';\nimport { StructureHeaderFilterComponent } from './header/filters/structure.header-filter.component';\nimport { StructureContentComponent } from './content/structure-content.component';\nimport { StructureRowComponent } from './content/row/structure-row.component';\nimport { StructureCellComponent } from './content/cell/structure.cell.component';\nimport { StructureContainerComponent } from './content/structure-container.component';\nimport { StructureSearchComponent } from './header/search/structure.search.component';\nimport { StructureQuickFiltersComponent } from './header/quick-filters/structure.quick-filters.component';\nimport { StructureBlueprintComponent } from './blueprint/structure.blueprint.component';\nimport { StructureAggregationPanelComponent } from './panel/aggregation/structure.aggregation-panel.component';\nimport { StructureColumnConfigComponent } from './header/config/structure.column-config.component';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../app/structure-tokens';\nimport { StructureDefinition } from './structure-definition';\nimport { EntityFactory } from '../domain/source/entity.factory';\nimport { SourceQueryService } from '../app/source/source-query.service';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureAggregationPanelConfigConverter } from './panel/aggregation/structure.aggregation-panel.config-converter';\nimport { structureProviders } from '../app/structure/structure.providers';\nimport { StructureModuleConfig } from './structure-module-config';\nimport { LoggerModule } from '../../../common/cdk/logger/logger.module';\n\nexport function createStructureDefinition() {\n\treturn new StructureDefinition.DefaultBuilder().build();\n}\n\n\nconst imports = [\n\tCommonModule,\n\tReactiveFormsModule,\n\tHermesModule,\n\t// .withConfig({\n\t// \tloggers: false\n\t// }),\n\t...fabricImports,\n\n\tStructurePagingModule,\n\tStructureSummaryModule,\n\n\tCompositionModule,\n\n\tLoggerModule\n];\n\nconst declarations = [\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureHeaderColumnsComponent,\n\tStructureHeaderFiltersComponent,\n\tStructureHeaderFilterComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureCellComponent,\n\tStructureContainerComponent,\n\tStructureSearchComponent,\n\tStructureQuickFiltersComponent,\n\tStructureBlueprintComponent,\n\tStructureAggregationPanelComponent,\n\tStructureColumnConfigComponent\n];\n\nconst entryComponents = [\n\tStructureColumnConfigComponent\n];\n\nconst providers = [\n\t{\n\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\tuseValue: 'structure'\n\t},\n\t{\n\t\tprovide: StructureDefinition,\n\t\tuseFactory: createStructureDefinition\n\t},\n\tEntityFactory,\n\n\tSourceQueryService,\n\n\tStructureIdGenerator,\n\n\tStructureAggregationPanelConfigConverter,\n\tStructureColumnConfigService,\n\n\t...structureProviders\n\n];\n\nconst exportDeclarations = [\n\tFabricModule,\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureContainerComponent,\n\tStructureSearchComponent,\n\n\t...fabricImports,\n\tStructurePagingModule\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class StructureModule {\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic withConfig(structureConfig: StructureModuleConfig = { cssClassName: '', hermesModuleConfig: { loggers: false } }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: StructureModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\t\t\t\tuseValue: structureConfig.cssClassName\n\t\t\t\t},\n\t\t\t\t{ provide: COMMAND_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t{ provide: EVENT_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t...providers\n\t\t\t]\n\t\t};\n\t}\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any) {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['hermesApi'].loggers = false;\n\t\t}\n\t}\n\n}\n","import { NgModule, Provider } from '@angular/core';\n\nimport { GridComponent } from '../ui/grid/grid.component';\n\nimport { StructureModule } from '../../../lib/structure/ui/structure.module';\n\nimport { GridIdGenerator } from '../ui/grid/register/grid-id.generator';\nimport { GridRegister } from '../ui/grid/register/grid.register';\n\n\nconst imports = [\n\tStructureModule.withConfig({\n\t\t\tcssClassName: 'grid',\n\t\t\thermesModuleConfig: {\n\t\t\t\tloggers: true\n\t\t\t}\n\t\t})\n];\n\nconst declarations = [\n\tGridComponent\n];\n\nconst providers = [\n\tGridIdGenerator,\n\tGridRegister\n] as Array<Provider>;\n\nconst exportDeclarations = [\n\tGridComponent\n];\n\nconst entryComponents = [] as Array<any>;\n\nconst elementComponents = [\n\tGridComponent\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\tproviders,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class GridModule {\n\n\tstatic entryComponents = [...entryComponents];\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic elementComponents = [...elementComponents];\n}\n"]}