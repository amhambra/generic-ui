{"version":3,"sources":["../../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/ngx-grid/gui/grid/ui-api/grid.api.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/data-type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-type.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-aggregation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/cell-view.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-view.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-theme.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/theme/grid.theme.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/row-coloring.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/coloring/grid.row-coloring.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/menu/grid.column-menu.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-gateway.ts","ng://@generic-ui/ngx-grid/common/cdk/generic-builder.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-parent-component.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid-id.generator.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid.register.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/console/grid.console.api.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-fabric.imports.ts","ng://@generic-ui/ngx-grid/common/cdk/reactive.ts","ng://@generic-ui/ngx-grid/common/cdk/smart-component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/read/paging.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/global-structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/origin/structure.source-origin.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/prepared/structure.prepared-items.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/read/paging.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/navigator/structure-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/select/structure-paging-select.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/stats/structure-paging-stats.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/navigator/structure-alternative-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/pages/structure-alternative-paging-pages.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.module.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.pipe.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure-info-modal.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel.module.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/changed-value.emitter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/state/edit.event-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-communication.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/input-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/number-edit-template.component.ts","ng://@generic-ui/ngx-grid/common/cdk/decorators.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/string-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/boolean-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/composition/column-query.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/function-view.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-container-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/sort-status.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/view.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-entity.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/template/template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-template-with-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-template-with-accessor.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/column-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/column-definition.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/composition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/read/in-memory.composition.read-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/composition-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/read/in-memory.composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.events.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition-event.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/colum-field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.event-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/global-composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/sort-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/change-sort.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/order/sort-order-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/fields-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/column.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/composition-fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-id.generator.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/pagesize/pagesize-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-row-coloring.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/formation-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set-config/set-sorting.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.set-search-phrase.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/order/set-sort-order.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.params.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/local-providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/schema/schema-css-class.manager.ts","ng://@generic-ui/ngx-grid/common/cdk/archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.store.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.edit-mode.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel-enabled.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-component-token.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.state.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/gateway/structure.gateway.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/pagesize-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/event/editem-item.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/event/source-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/selected-row-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/menu/config/structure.column-menu-config.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/menu/config/structure.column-menu-config.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/menu/structure.column-config.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/menu/structure.column-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/columns/structure-header-columns.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.quick-filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/structure-header.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure-header-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure.header-filter.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-content.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/item.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/row/structure-row.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/cell/structure.cell.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-container.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/quick-filters/structure.quick-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/searching/structure.searching.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/search/structure-search.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-tokens.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/blueprint/structure.blueprint.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.ui-events-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/selected-rows/selected-rows-list.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-css-class.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-column-header.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/paging.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/source.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/source.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/vertical-formation/vertical-formation.read-model.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/vertical-formation/vertical-formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/structure.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/structure.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/read/in-memory-structure.read-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/structure-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/set-source-loading.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/schema-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/schema-theme-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/schema-vertical-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/schema-top-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/schema-bottom-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/row-coloring-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/paging-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/formation-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/origin-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.filter-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.search-phrase-set.domain-event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/read/in-memory.structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/origin-item-entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/structure.origin-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-range.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculators.token.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/structure.filter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.settings.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-id.generator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/unknown-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/number-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/string-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/boolean-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/date-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field.collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-collection.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/structure.sorter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/column-header.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/search.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/prepared/structure.prepared-entities-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/search.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set-config/sorting-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set-config/set-sorting.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.config-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.config-searching-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.config-quick-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/prepared/structure.prepared-entities-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/structure.source.domain-event.publisher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.aggregation-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.config-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/searching/structure.config-searching-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.config-quick-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-model.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/origin/structure.origin-changed.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/source.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/prepared/structure.prepared-items.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.set-search-phrase.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/order/set-sort-order.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure.providers.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/console.logger.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.module.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/item.entity-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/structure.top-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/search/structure.search.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/structure.top-panel.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/menu/structure.column-config-trigger.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/empty-source/structure-empty-source.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.module.ts","ng://@generic-ui/ngx-grid/gui/grid/ui-api/grid.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","UNKNOWN","NUMBER","STRING","BOOLEAN","DATE","CUSTOM","TEXT","CHIP","LINK","IMAGE","BOLD","ITALIC","CHECKBOX","FABRIC","MATERIAL","LIGHT","DARK","NONE","EVEN","ODD","GridColumnTypeConverter","convertType","type","convertTypeString","convertTypeEnum","enumType","GuiDataType","DataType","toLocaleLowerCase","COUNT","DISTINCT","SUM","AVERAGE","MIN","MAX","MEDIAN","TRUTHY","FALSY","EARLIEST","LATEST","GridColumnAggregationConverter","convert","aggregationConfig","columnAggregationConfig","undefined","enabled","aggregationTypes","convertAggregationTypes","configAggregationTypes","_this","forEach","aggregationType","convertAggregationType","AggregationType","FUNCTION","GridColumnViewConverter","view","convertString","convertEnum","CellView","GuiCellView","GridColumnConverter","columnTypeConverter","columnAggregationConverter","columnViewConverter","config","map","convertColumn","guiColumn","columnConfig","header","field","width","aggregation","GridThemeConverter","theme","SchemaTheme","GuiTheme","GridRowColoringConverter","rowColoring","RowColoring","GuiRowColoring","GridColumnMenuConverter","Injectable","GridGateway","source","columns","pageChanged","EventEmitter","pageSizeChanged","itemsSelected","columnsChanged","containerWidthChanged","sourceEdited","cellEditEntered","cellEditCanceled","cellEditSubmitted","gridColumnConverter","gridThemeConverter","gridRowColoringConverter","gridColumnMenuConverter","ngOnChanges","changes","currentValue","columnsConfig","themeConfig","rowColoringConfig","columnMenu","columnMenuConfig","onPageChange","page","emit","onPageSizeChange","pageSize","onItemSelect","item","onColumnsChange","onContainerWidthChange","containerWidth","onSourceEdit","onCellEditEnter","onCellEditSubmit","onCellEditCancel","Input","Output","GenericBuilder","build","buildObject","StructurePagingDefinitionBuilder","_super","tslib_1.__extends","StructurePagingDefinition","withEnabled","StructurePagingDefinitionDefaultBuilder","defaultEnabled","isEnabled","Builder","DefaultBuilder","StructureDefinitionBuilder","headerEnabled","bottomPaging","topPaging","border","StructureDefinition","withHeader","withBottomPaging","paging","withTopPaging","withBorder","StructureDefinitionDefaultBuilder","defaultHeaderEnabled","defaultBottomPaging","defaultTopPaging","isHeaderEnabled","isBorderEnabled","getBottomPaging","getTopPaging","gridStructureDefinition","gridProviders","provide","useValue","structureParentComponent","InjectionToken","GridIdGenerator","generateId","index","PREFIX","GridRegister","gridMap","Map","register","gridId","component","structureId","set","unregister","delete","getValues","get","GridConsoleApiProvider","gridComponent","changeColumnHeaderTop","columnHeaderTop","detectChanges","GridComponent","platformId","elementRef","changeDetectorRef","gridRegister","gridIdGenerator","ngOnInit","localGridId","exposeGridId","structureRef","getStructureId","isPlatformBrowser","window","gridConsoleConfig","ngOnDestroy","getElementRef","getGridId","nativeElement","setAttribute","Component","args","selector","template","providers","useExisting","host","[class]","[style.height]","encapsulation","ViewEncapsulation","None","Inject","PLATFORM_ID","ElementRef","ChangeDetectorRef","ViewChild","static","fabricImports","FabricBadgeModule","FabricButtonModule","FabricButtonGroupModule","FabricCheckboxModule","FabricChipModule","FabricDropdownModule","FabricRadioButtonModule","FabricRadioGroupModule","FabricProgressBarModule","FabricProgressSpinnerModule","FabricSelectModule","FabricSpinnerModule","FabricTabModule","FabricToggleButtonModule","FabricInputModule","FabricDialogModule","FabricInlineDialogModule","Reactive","unsubscribe$","Subject","unsubscribe","complete","takeUntil","SmartComponent","PagingRepository","structureRepository","on","onStructure","pipe","filter","structure","getId","toString","getPaging","StructureRepository","StructureId","id","AggregateId","globalStructureId","PagingReadModelService","pagingRepository","onPaging","onSinglePaging","take","SetPagingCommand","payload","Command","ChangePagesizeCommand","NextPageCommand","PrevPageCommand","PagingDispatcher","commandDispatcher","setPaging","dispatch","changePageSize","nextPage","prevPage","CommandDispatcher","PagingCommandService","pagingDispatcher","enable","disable","goToPage","pageNumber","currentPage","changePagerTop","pagerTop","changePagerBottom","pagerBottom","StructureSourceOriginRepository","origin","origin$","ReplaySubject","setOrigin","onOrigin","asObservable","distinctUntilChanged","StructurePreparedItemsRepository","setItems","onPreparedItems","SourceReadModelService","structurePreparedItemsRepository","structureSourceOriginRepository","onEntities","getEntities","ents1","ents2","flag","ent","equals","onEntitiesSize","entities","onSingleEntities","onOriginSize","onLoading","getSource","isLoading","onPreparedEntities","StructurePagingComponent","pagingQueryService","pagingCommandService","sourceQueryService","alternativeDisplay","subscribe","size","sourceSize","changeDetection","ChangeDetectionStrategy","OnPush","Paging","pageSizes","isNextDisabled","isPrevDisabled","start","end","getPage","getPageSize","getPageSizes","isPagerTop","isPagerBottom","isNextPageDisabled","isPrevPageDisabled","getStart","getEnd","getSourceSize","calculateVisiblePages","numberOfVisiblePages","sample","slice","StructurePagingNavigatorComponent","nextPageChanged","prevPageChanged","prevDisabled","nextDisabled","calculatePrev","calculateNext","StructurePagingSelectComponent","StructurePagingStatsComponent","calculate","firstItemIndex","lastItemIndex","isSourceNotEmpty","StructureAlternativePagingNavigatorComponent","firstPage","lastPage","numberOfPages","Math","ceil","StructureAlternativePagingPagesComponent","pages","activePage","StructurePagingModule","NgModule","imports","CommonModule","FabricModule","declarations","exports","NumberFormatterPipe","transform","number","replace","Pipe","name","NumberFormatterModule","StructureInfoModalComponent","StructureInfoPanelComponent","dialog","infoPanel","totalItemsSize","preparedItems","preparedItemsSize","openInfo","open","FabricDialogService","StructureInfoPanelModule","entryComponents","ViewTemplatesComponent","getTemplate","textTemplate","chipTemplate","linkTemplate","imageTemplate","checkboxTemplate","boldTemplate","italicTemplate","customTemplate","functionTemplate","read","TemplateRef","ChangedValueEmitter","subject$","select","SUBMIT","BLUR","CANCEL","EditCommunicationComponent","ENTER_KEY_CODE","ESC_KEY_CODE","submit","emitStatus","EditEventType","cancel","status","InputEditTemplateComponent","formBuilder","filterFieldName","filterForm","group","_a","setValue","observeChanges","ngAfterViewInit","inputElement","inputRef","focusField","emitValueChange","fromEvent","keyup$","keyCode","focus","controls","valueChanges","NumberEditTemplateComponent","fb","FormBuilder","Override","container","getPrototypeOf","Error","StringEditTemplateComponent","setSelectionRange","tslib_1.__decorate","EditTemplatesComponent","dataType","stringTemplate","numberTemplate","booleanTemplate","emptyTemplate","BooleanEditTemplateComponent","checkboxRef","querySelector","debounceTime","toggle","changed","ColumnQueryComponent","ContentChild","FunctionViewComponent","sanitizer","safeHTML","bypassSecurityTrustHtml","element","DomSanitizer","PERCENTAGE","AUTO","ColumnWidth","baseWidth","setWidthAndType","getWidth","getColumnType","isTypePercentage","ColumnWidthType","isTypeAuto","isTypeNumber","setWidth","isPercentage","percentageToNumber","isStringNumber","clone","widthAsNumber","Number","isNaN","CompositionContainerWidthCalculator","MIN_COLUMN_WIDTH","calculateMinWidth","columnWidths","segregateColumns","staticColumns","fluidColumns","sum","columnWidth","CompositionWidthCalculator","adjustMinimalWidth","newColumns","column","evenWidth_1","adjustPercentageWidth","_b","tslib_1.__values","_c","adjustAutoWidth","leftWidth","autoColumns","splitWidth","autoColumns_1","autoColumns_1_1","ColumnWidthCollection","baseColumnWidths","setContainerWidth","getColumns","getColumnsWidth","getWidths","getMinWidth","setColumns","calculator","ASC","DESC","ViewEntity","columnView","templateFunction","getCellView","getTemplateFunction","ColumnEntity","columnField","sortStatus","SortStatus","getField","getHeader","getDataType","setSortStatus","setView","ColumnEntityFactory","data","isArray","createColumns","createColumn","params","getColumn","columnEntity","convertWidth","columnEntities","ColumnsSetAggregateEvent","aggregateId","AggregateEvent","CompositionWidthSetAggregateEvent","CompositionContainerWidthSetAggregateEvent","compositionId","CompositionResizeWidthSetAggregateEvent","CompositionAggregate","columnsParams","resizeWidth","columnWidthCollection","activeColumns","resizeWidthEnabled","columnFactory","param","baseParams","baseColumns","isResizeEnabled","isReady","composition","CompositionAggregate_1","widths","updateColumnsWidths","setActiveColumnsWithEvent","setContainerWidthWithEvent","recalculateColumns","setWidthWithEvent","setResizeWidthWithEvent","setResizeWidth","changeSort","sortParams","fieldId","direction","this_1","sortParams_1","sortParams_1_1","addEvent","minWidth","RootAggregate","Boolean","Aggregate","InMemoryCompositionStore","InMemoryStore","InMemoryCompositionAggregateStore","inMemoryCompositionStore","aggregateStoreRegister","getById","AggregateStoreRegister","InMemoryAggregateStore","InMemoryCompositionAggregateRepository","inMemoryCompositionAggregateStore","save","aggregate","CompositionAggregateRepository","TemplateFactory","templatesComponentDefinition","componentFactoryResolver","templates","templatesComponent","createTemplatesComponent","getTemplates","destroy","componentFactory","resolveComponentFactory","injector","Injector","generateMap","generateMapKeys","findAndSetTemplate","dt","instance","ViewTemplateFactory","keys","ComponentFactoryResolver","ViewTemplateRepository","columnTemplateFactory","findTemplate","EditTemplateFactory","EditTemplateRepository","editTemplateFactory","CellTemplateWithContext","viewTemplate","editTemplate","context","getFieldId","getSortStatus","isAscSort","isDescSort","isNoSort","CellContext","FieldId","CellTemplateWithAccessor","editable","accessor","columnFieldId","ColumnDefinition","sort","setHeader","setField","getHeaderCellTemplateWithContext","headerCellContext","headerTemplate","getContentCellTemplateWithAccessor","cellTemplate","entity","getAccessor","ColumnDefinitionFactory","viewTemplateRepository","editTemplateRepository","columnDef","findViewTemplate","findEditTemplate","Composition","uid","ready","getHeaderColumns","getTemplateColumns","getContainerWidth","isResizeWidthEnabled","equalsByColumns","ReadModel","CompositionConverter","columnDefinitionFactory","columnDefs","convertColumnsToColumnDef","InMemoryCompositionReadStore","compositionConverter","toReadModel","InMemoryReadModelStore","CompositionInitedEvent","DomainEvent","CompositionResizeWidthSetEvent","ColumnsSetEvent","CompositionContainerWidthSetEvent","CompositionWidthSetEvent","CompositionChangeSortStatusEvent","getCompositionId","InMemoryCompositionRepository","domainEventBus","inMemoryCompositionQueryStore","composition$","ofEvent","event","DomainEventBus","CompositionRepository","inMemoryCompositionCommandProviders","useClass","inMemoryCompositionQueryProviders","inMemoryCompositionProviders","CompositionAggregateFactory","InitCompositionCommand","SetColumnsCommand","getParams","SetCompositionWidthCommand","SetCompositionContainerWidthCommand","SetCompositionResizeWidthCommand","CompositionChangeSortStatusCommand","getSortParams","CompositionDispatcher","init","InitCompositionCommandHandler","compositionAggregateRepository","compositionAggregateFactory","domainEventPublisher","handle","command","compositionAggregate","DomainEventPublisher","CommandHandler","CompositionAggregateEvents","CompositionEventConverter","arg","convertEvents","convertEvent","aggregateEvents","aggregateEvent","getType","getAggregateId","SetColumnsCommandHandler","compositionEventConverter","setColumnsParams","publishEvents","events","getEvents","domainEvents","publish","SetCompositionWidthCommandHandler","columnConverter","SetCompositionResizeWidthCommandHandler","SetCompositionContainerWidthCommandHandler","publishAggregateEvents","CompositionChangeSortStatusCommandHandler","ColumnField","getValue","ColumnFieldFactory","CompositionEventService","onColumnsChanged","onWidthChanged","onContainerWidthChanged","getPayload","CompositionId","globalCompositionId","CompositionReadModelService","compositionRepository","onWidth","onContainerWidth","onWidthForEachColumn","onHeaderColumns","onSortOrder","onTemplateColumns","onResizeWidth","CompositionCommandService","compositionDispatcher","SortToggledEvent","directions","getDirections","ColumnFieldId","ChangeSortParams","SortOrderSetEvent","CompositionChangeSortStatusEventHandler","dir","DomainEventHandler","FieldsInitedEvent","fields","getFields","ColumnParams","CompositionFieldsInitedEventHandler","columnFieldFactory","columnFieldIds","convertColumnFieldIds","convertColumns","getAccessorMethod","commandProviders","COMMAND_HANDLERS","multi","readProviders","DOMAIN_EVENT_HANDLERS","compositionProviders","components","exportDeclarations","CompositionModule","ReactiveFormsModule","FabricChipComponent","FabricCheckboxComponent","FabricButtonComponent","FabricInputComponent","StructureIdGenerator","increment","PageChangedAggregateEvent","PagesizeChangedAggregateEvent","PagingAggregate","logger","default","fromConfig","defaultPagingDefinition","isDisabled","change","pagingConfig","warn","setSourceSize","find","ps","setPage","setPageSize","calculateStart","firstItem","calculateEnd","lastItem","PagingAggregateFactory","createDefault","createFromConfig","Logger","LocalPagingCommandService","aggregateFactory","setDefaultPaging","defaultPaggingAggregate","LocalPagingReadModelService","Observable","SetSchemaCommand","height","SetSchemaVerticalGridCommand","SetSchemaHorizontalGridCommand","SetSchemaThemeCommand","SetRowColoringCommand","coloring","ChangeSchemaTopHeaderCommand","ChangeSchemaBottomHeaderCommand","SchemaDispatcher","setSchema","changeVerticalGrid","changeHorizontalGrid","setTheme","setRowColoring","changeTopHeader","changeBottomHeader","SchemaRepository","getSchema","SchemaReadModelService","schemaRepository","onSchema","onSingleSchema","onHeight","schema","getHeight","onContainerHeight","getContainerHeight","onCssClasses","getCssClasses","onColumnHeader","getColumnHeader","SchemaCommandService","schemaDispatcher","schemaQueryService","setHeight","toggleVerticalGrid","css","verticalGrid","grid","toggleHorizontalGrid","horizontalGrid","toggleTopHeader","columnHeader","isTopHeaderEnabled","toggleBottomHeader","isBottomHeaderEnabled","LocalSchemaCommandService","setDefaultSchema","MAX_SAFE_INTEGER","LocalSchemaReadModelService","SetFormationCommand","ToggleSelectedRowCommand","selectedRow","FormationDispatcher","setDefault","toggleSelectedRow","FormationCommandService","formationDispatcher","setDefaultFormation","LocalFormationCommandService","FormationRepository","onFormation","getFormation","FormationReadModelService","formationRepository","onSelectedRows","formation","getSelectedRows","LocalFormationReadModelService","StructureSetConfigFilterCommand","filterConfig","getConfig","StructureToggleFilterCommand","externalFilterId","filterValue","StructureFilterCommandService","setFilteringEnabled","addFilter","externalFieldId","SourceSetLoadingCommand","SetOriginCommand","items","StructureEditSourceItemCommand","SourceDispatcher","setLoading","editItem","InitStructureCommand","SetVerticalScrollEnabledCommand","SetScrollPositionCommand","position","SetSortingCommand","sortingConfig","getSortingConfig","ToggleSortCommand","StructureSetConfigQuickFilterCommand","quickFiltersConfig","StructureSetConfigSearchingCommand","searchConfig","InitFieldsCommand","StructureSetSearchPhraseCommand","phrase","SetSortOrderCommand","sortOrder","getSortOrder","StructureCommandService","structureFilterCommandService","sourceDispatcher","enableVerticalScroll","disableVerticalScroll","setScrollPosition","setSortingConfig","toggleSort","setSortOrder","setFilterConfig","setQuickFiltersConfig","initFields","setSearchingConfig","search","LocalStructureCommandService","StructureReadModelService","onVerticalScrollEnabled","isVerticalScrollEnabled","LocalStructureReadModelService","StructureFieldUiArchive","AggregateArchive","StructureFieldUiRepository","structureFieldUiArchive","onFields","when","StructureEditSourceItemParams","itemId","getItemId","getColumnFieldId","SourceCommandService","structureFieldUiRepository","editItemByIndex","itemIndex","fieldIndex","itemId$","fieldId$","zip","array","LocalSourceCommandService","LocalSourceReadModelService","LocalCompositionCommandService","LocalCompositionReadModelService","localProviders","SchemaCssClassManager","rendererFactory2","VERTICAL_GRID_CLASS_NAME","HORIZONTAL_GRID_CLASS_NAME","THEME_FABRIC_CLASS_NAME","THEME_MATERIAL_CLASS_NAME","THEME_LIGHT_CLASS_NAME","THEME_DARK_CLASS_NAME","ROW_COLORING_ODD","ROW_COLORING_EVEN","cssClass","renderer","createRenderer","cssHostRef","classes","diff","updateState","renderCssClasses","diff_1","toggleCssClass","removeThemeCssClasses","addClass","resolveThemeClassName","removeRowColoringClasses","resolveRowColoringClassName","cssClassName","removeClass","className","SchemaRowColoring","RendererFactory2","Archive","archive$","BehaviorSubject","onValue","StructureCellEditArchive","StructureCellEditStore","StructureEditModeArchive","StructureInfoPanelEnabledArchive","StructureAggregationPanelConfig","top","bottom","itTopEnabled","itBottomEnabled","StructureAggregationArchive","StructureAggregationPanelConfigConverter","StructureSetAggregationEnabledCommand","StructureAggregationCommandService","setAggregationEnabled","StructureAggregationConfigService","structureAggregationPanelConfigConverter","structureAggregationArchive","structureAggregationCommandService","aggregationPanelConfig","structureComponentToken","ENTER","StructureGateway","structureCommandService","pagingEventService","sourceCommandService","sourceEventService","schemaCommandService","compositionCommandService","compositionEventService","formationEventService","structureEditModeArchive","structureCellEditArchive","structureInfoPanelEnabledArchive","structureAggregationConfigService","structureCellEditStore","structureColumnMenuConfigArchive","simpleChanges","nextConfig","editMode","cellEditing","autoResizeWidth","columnHeaderBottom","loading","maxHeight","virtualScroll","sorting","filtering","quickFilters","searching","onItemSelected","skip","onSourceEdited","values","state","StructureCellEditState","NextPageEvent","PrevPageEvent","PageChangedEvent","PagesizeChangedEvent","PagingEventService","switchMap","EditemItemValues","after","before","StructureSourceItemEditedEvent","beforeItem","afterItem","getBeforeItem","getAfterItem","SourceEventService","getData","SelectedRowToggledEvent","FormationEventService","structureQueryService","str","getSelectedEntities","StructureColumnMenuConfig","isMainEnabled","isSort","isFilter","isColumns","getMenus","menus","getMainMenu","getFilterMenu","getColumnMenu","getActiveMenu","MAIN","FILTER","COLUMNS","StructureColumnMenuConfigArchive","menuConfig","structureIdFactory","generator","compositionIdFactory","structureComponentSelfProviders","useFactory","deps","StructureComponent","structureDefinition","compositionQueryService","schemaReadModelService","schemaStylesManager","loaderEnabled","circleLoaderEnabled","initialLoaderAnimation","structureHeight","isLoaderVisible","offsetWidth","timer","setStyle","[class.gui-structure-border]","[id]","Renderer2","StructureColumnConfigComponent","compositionReadModelService","placement","Placement","Right","isNoneSort","StructureColumnConfigService","inlineDialogService","parent","InlineDialogPlacement","Top","close","FabricInlineDialogService","StructureHeaderColumnsComponent","isSortAsc","isSortDesc","StructureFilterRepository","enabled$","setEnabled","selectFilterEnabled","StructureQuickFilterRepository","selectQuickFilterEnabled","StructureFilterReadModelRepository","structureFilterRepository","structureQuickFilterRepository","onFilteringEnabled","onQuickFiltersEnabled","StructureHeaderComponent","eventBus","structureFilterReadModelRepository","headerColumns","filterRowEnabled","containerRef","StructureHeaderFiltersComponent","cd","closed","filterMode","f","clearFilters","reset","turnOnFilterMode","turnOffFilterMode","StructureHeaderFilterComponent","sub","editContext","StructureContentComponent","formationCommandService","formationQueryService","rowsList","clearSelectedRows","getIds","strippedId","selectedRowEl","trackByFn","translateY","selectedElements","querySelectorAll","el","ItemEntity","version","RandomStringGenerator","generate","getUiId","getVersion","getPosition","isEven","isOdd","equalsById","Entity","StructureRowComponent","StructureCellComponent","inEditMode","cellEditingEnabled","enterEditMode","exitEditMode","forceCheck","valueChanges$","status$","cell","observeFieldStatus","observeValueChanges","publishEditEnter","markForCheck","submitChangesAndExit","updatedValue","actualValue","publishEditSubmit","publishEditCancel","publishEditState","StructureContainerComponent","ngZone","resizeDetector","structureParent","autoResizeWidthEnabled","scrollObservation$","combineLatest","combine","sourceSizeHeight","observe","recalculateContainer","enableScrollObservation","disableScrollObservation","containerHeight","topMargin","getTopMargin","runOutsideAngular","scrollTop","NgZone","ResizeDetector","Optional","StructureQuickFiltersComponent","StructureSearchingRepository","selectSearchingEnabled","StructureSearchReadModelRepository","structureSearchingRepository","onSearchEnabled","STRUCTURE_CSS_CLASS_NAME","prefix","StructureBlueprintComponent","structureSearchReadModelRepository","searchEnabled","topAggregationPanelEnabled","bottomAggregationPanelEnabled","quickFiltersEnabled","infoPanelEnabled","headerCssClass","contentCssClass","pagingReadModel","getHeaderTopClasses","getHeaderBottomClasses","isColumnHeaderTopEnabled","isColumnHeaderBottomEnabled","isPagingTopEnabled","isPagingBottomEnabled","isSourceEmpty","StructureAggregationsChangedEvent","getAggregations","StructureAggregationUiEventsRepository","onAggregationsChanged","StructureAggregationPanelComponent","structureAggregationUiEventsRepository","sourceReadModelService","sourceEmpty","aggregations","isAggregateTypePresent","InMemoryStructureStore","InMemoryStructureAggregateStore","inMemoryStructureStore","InMemoryStructureAggregateRepository","inMemoryStructureAggregateStore","clearEvents","StructureAggregateRepository","SelectedRowsList","rowIds","isRowSelected","Formation","selectedRows","selectedRowsList","FormationConverter","rows","SchemaCssClass","getRowColoring","Schema","verticalGridEnabled","horizontalGridEnabled","getTheme","isVerticalGridEnabled","isHorizontalGridEnabled","SchemaColumnHeader","SchemaConverter","convertColumnHeader","isHeaderOnTop","isHeaderOnBottom","PagingConverter","Source","SourceConverter","VerticalFormationReadModel","viewportHeight","getViewPortHeight","VerticalFormationConverter","verticalFormation","calcFullHeight","Structure","selectedIds","some","isReadyToDisplay","StructureConverter","formationConverter","schemaConverter","pagingConverter","sourceConverter","verticalFormationConverter","formationAggregate","schemaAggregate","pagingAggregate","sourceQuery","sourceCoordinator","getVerticalFormation","convertSource","originItem","rawData","InMemoryStructureReadStore","inMemoryProjectStore","structureConverter","StructureInitedEvent","SetSourceLoadingEvent","SchemaSetEvent","SchemaThemeSetEvent","SchemaHorizontalGridSetEvent","SchemaVerticalGridSetEvent","SchemaTopHeaderChangedEvent","SchemaBottomHeaderChangedEvent","RowColoringSetEvent","PagingSetEvent","FormationSetEvent","VerticalScrollEnabledSetEvent","ScrollPositionSetEvent","OriginSetEvent","getOrigin","StructureFilterToggledEvent","StructureSearchPhraseSetDomainEvent","InMemoryStructureRepository","inMemoryStructureQueryStore","structureIdToStructure","structure$","has","inMemoryStructureCommandProviders","inMemoryStructureReadProviders","inMemoryStructureProviders","OriginItemEntity","bumpVersion","setPosition","StructureSourceItemEditedAggregateEvent","StructureOriginChangedAggregateEvent","SourceManager","fetched","preparedEntities","slicedEntities","isFetched","setEntities","recalculatePositions","setPreparedEntities","getPreparedEntities","setSlicedEntities","getSlicedEntities","convertItems","createOriginChangedEvent","setConvertedOrigin","getOriginSize","editOriginItem","findOriginItem","itemBeforeChange","removeOriginItem","findOriginItemIndex","splice","findIndex","SourceManagerFactory","VerticalRange","VerticalFormation","scrollPosition","rowHeight","hiddenItemsTop","hiddenItemsBottom","isInteger","calculateRange","getRange","range","itemsInViewport","floor","hiddenElements","abs","setTopHiddenItemsCount","count","setBottomHiddenItemsCount","setViewportHeight","setRowHeight","setLogger","VerticalFormationFactory","vf","AGGREGATION_CALCULATORS","StructureAggregationsChangedAggregateEvent","aggregatedValues","AggregationManager","calculators","calculations","calc","from","add","remove","update","AggregationManagerFactory","StructureFilter","filterId","getFilterValue","setFilterValue","filterString","filterNumber","filterBoolean","toLowerCase","indexOf","FilterId","FilterSettings","filteringEnabled","isFilteringEnabled","isQuickFilteringEnabled","isSearchingEnabled","FilterManager","filterSettings","filters","getAll","arr","getSettings","filteredEntities","filters_1","filters_1_1","FilterManagerFactory","FieldIdGenerator","Field","aggregationEnabled","accessorMethod","possibleAggregations","assignPossibleAggregations","assignAggregations","getKey","isAggregation","isAggregationEnabled","assignDefaultAggregations","UnknownField","NumberField","StringField","BooleanField","DateField","FieldFactory","fieldIdGenerator","columnType","FieldCollection","fieldFactory","getAllFields","getAllFieldIds","addField","addFields","fields_1","fields_1_1","FieldCollectionFactory","StructureSorter","rank","sorterId","getRank","hasDirection","changeDirection","setDirection","entityOne","entityTwo","valueOne","valueTwo","sortNumber","sortBoolean","sortString","sortUnknown","strOne","strTwo","localeCompare","numOne","numTwo","booleanOne","booleanTwo","sureBoolTwo","a","SorterId","SorterCollection","sorters","setConfig","multiSorting","clear","sorter","addSorter","sortedEntities","sorters_1","sorters_1_1","sorterOne","sorterTwo","reverse","FormationAggregate","toggleRow","ColumnHeaderEntity","setHeaderTop","setHeaderBottom","SchemaAggregate","headerHeight","pagerHeight","active","calculateContainerHeight","setVerticalGrid","setHorizontalGrid","getHeaderHeight","getPagerHeight","SearchManager","searchFields","addSearchPhrase","searchPhrase","searchableFields","removeSearchFilters","searchedItems","Set","e_1","StructurePreparedEntitiesSetAggregateEvent","getPreparedItems","StructureAggregate","sourceManager","aggregationManager","sorterCollection","filterCollection","searchManager","fieldCollection","filterManager","calculateSource","editParams","calculateSourceBasedOnVirtualScroll","setFormation","changePaging","createFields","toggleFilter","removeSearchPhrase","searchedEntities","ents","ae","SchemaAggregateFactory","FormationAggregateFactory","SearchManagerFactory","StructureAggregateFactory","pagingAggregateFactory","sourceManagerFactory","formationAggregateFactory","verticalFormationFactory","aggregationManagerFactory","filterManagerFactory","searchManagerFactory","fieldCollectionFactory","schemaAggregateFactory","sorterContainer","filterContainer","fieldContainer","InitStructureCommandHandler","structureAggregateRepository","structureAggregateFactory","SetVerticalScrollEnabledCommandHandler","SetScrollPositionCommandHandler","InitFieldsCommandHandler","ToggleSortCommandHandler","publishSortEvent","SortingSetEvent","SetSortingCommandHandler","StructureConfigFilterSetEvent","getEnabled","StructureSetConfigFilterCommandHandler","StructureConfigSearchingSetEvent","StructureSetConfigSearchingCommandHandler","searchingConfig","StructureConfigQuickFilterSetEvent","StructureSetConfigQuickFilterCommandHandler","StructureToggleFilterCommandHandler","StructurePreparedEntitiesSetEvent","StructureSourceDomainEventPublisher","publishEvent","structureOriginChangedAggregateEvent","domainEvent","structureSourceItemEditedAggregateEvent","structureAggregationsChangedAggregateEvent","structurePreparedEntitiesSetAggregateEvent","StructureAggregationEnabledSetEvent","StructureSetAggregationEnabledCommandHandler","structureSourceDomainEventPublisher","AggregationCalculator","filteredFields","forDataType","distinct","prepare","countForField","postCalculate","generateAggregatedValues","setCount","setDistinct","AggregatedValues","BooleanAggregatedValues","truthy","falsy","BooleanAggregationCalculator","booleanValue","truthyForField","falsyForField","DateAggregatedValues","DateAggregationCalculator","NumberAggregatedValues","min","max","average","median","setValueWithPrecision","toFixed","NumberAggregationCalculator","numberValue","sumForField","minForField","maxForField","StringAggregatedValues","StringAggregationCalculator","UnknownAggregatedValues","UnknownAggregationCalculator","provideAggregationCalculator","clazz","aggregationProviders","StructureConfigFilterSetEventHandler","StructureConfigSearchingSetEventHandler","StructureConfigQuickFilterSetEventHandler","StructureFieldUiModel","StructureFieldUiConverter","convertOne","StructureFieldsInitedEventHandler","structureFieldsRepository","structureFieldUiConverter","SetPagingCommandHandler","NextPageCommandHandler","PrevPageCommandHandler","ChangePagesizeCommandHandler","newPageSize","events_1","events_1_1","event_1","publishAggregateEvent","pageChangedEvent","pagesizeChangedEvent","pagingProviders","SetSchemaVerticalGridCommandHandler","SetSchemaHorizontalGridCommandHandler","SetSchemaThemeCommandHandler","ChangeSchemaBottomHeaderCommandHandler","ChangeSchemaTopHeaderCommandHandler","SetRowColoringCommandHandler","SetSchemaCommandHandler","schemaProviders","SetFormationCommandHandler","ToggleSelectedRowCommandHandler","console","formationProviders","SetOriginCommandHandler","StructureEditSourceItemCommandHandler","StructureOriginChangedEventHandler","origin_1","SourceRepository","SourceSetLoadingCommandHandler","StructurePreparedItemsEventHandler","sourceProviders","StructureSetSearchPhraseCommandHandler","SetSortOrderCommandHandler","structureProviders","ConsoleLogger","text","LoggerModule","ItemEntityFactory","createEntities","createEntity","StructureTopPanelComponent","StructureSearchComponent","searchForm","StructureTopPanelModule","StructureColumnConfigTriggerComponent","structureColumnConfigService","openConfigDialog","headerDialogContainer","closeConfigDialog","StructureEmptySourceComponent","[class.gui-structure-empty-source]","createStructureDefinition","HermesModule","StructureModule","loggers","withConfig","structureConfig","hermesModuleConfig","ngModule","COMMAND_LOGGER_ENABLED","EVENT_LOGGER_ENABLED","elementComponents","GridModule","imports$1","declarations$1","providers$1","entryComponents$1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export type FieldAccessor = (element?: any) => any;\nexport type ViewTemplateMethod = (cellValue: any) => string;\n\nexport interface GuiColumn {\n\n\tfield?: string | FieldAccessor;\n\n\ttype?: string | GuiDataType;\n\n\tview?: string | GuiCellView | ViewTemplateMethod;\n\n\theader?: string;\n\n\tcustomTemplate?: string;\n\n\twidth?: string | number;\n\n\taggregation?: GuiColumnAggregation;\n}\n\nexport enum GuiDataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n\nexport enum GuiCellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM\n}\n\nexport enum GuiNumberCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiStringCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiBooleanCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP,\n\tCHECKBOX\n}\n\nexport enum GuiDateCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport interface GuiPagingConfig {\n\n\tenabled?: boolean;\n\n\tpage?: number;\n\n\tpageSize?: number;\n\n\tpageSizes?: Array<number>;\n\n\tpagerTop?: boolean;\n\n\tpagerBottom?: boolean;\n\n}\n\nexport enum GuiTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n\nexport enum GuiRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n\nexport interface GuiSorting {\n\n\tenabled?: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\tmultiSorting?: boolean;\n\n}\n\nexport interface GuiFiltering {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiQuickFilters {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiSearching {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiAggregation {\n\n\tenabled?: boolean;\n\n\ttop?: boolean;\n\n\tbottom?: boolean;\n\n}\n\nexport interface GuiColumnAggregation {\n\n\tenabled?: boolean;\n\n\taggregationTypes?: Array<any>;\n}\n\nexport interface GuiColumnMenu {\n\n\tenabled?: boolean;\n\n\tsort?: boolean;\n\n\tfilter?: boolean;\n\n\tcolumns?: boolean;\n\n}\n","export enum DataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n","import { GuiDataType } from '../../../ui-api/grid.api';\nimport { DataType } from '../../../../../lib/structure/domain/structure/command/field/data-type/data-type';\n\nexport class GridColumnTypeConverter {\n\n\tconvertType(type: string | GuiDataType): DataType {\n\n\t\tif (typeof type === 'string') {\n\t\t\treturn this.convertTypeString(type);\n\t\t} else {\n\t\t\treturn this.convertTypeEnum(type);\n\t\t}\n\t}\n\n\tprivate convertTypeEnum(enumType: GuiDataType): DataType {\n\n\t\tswitch (enumType) {\n\n\t\t\tcase GuiDataType.STRING:\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase GuiDataType.NUMBER:\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase GuiDataType.BOOLEAN:\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase GuiDataType.DATE:\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase GuiDataType.UNKNOWN:\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase GuiDataType.CUSTOM:\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n\tprivate convertTypeString(type: string): DataType {\n\t\tconst loweredType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredType) {\n\n\t\t\tcase 'string':\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase 'number':\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase 'boolean':\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase 'date':\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase 'unknown':\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n}\n","export enum AggregationType {\n\tCOUNT = 1 << 10,\n\tDISTINCT = 1 << 0,\n\tSUM = 1 << 1,\n\tAVERAGE = 1 << 2,\n\tMIN = 1 << 3,\n\tMAX = 1 << 4,\n\tMEDIAN = 1 << 5,\n\tTRUTHY = 1 << 6,\n\tFALSY = 1 << 7,\n\tEARLIEST = 1 << 8,\n\tLATEST = 1 << 9,\n}\n\n// count\n// count distinct\n// percentile\n// std.dev\n// std.dev Pop\n// variance\n// variance pop\n","import { ColumnAggregationConfig } from '../../../../../lib/structure/domain/composition/column-aggregation.config';\nimport { AggregationType } from '../../../../../lib/structure/domain/structure/command/aggregation/aggregation.type';\n\nimport { GuiColumnAggregation } from '../../../../../grid.index';\n\n\nexport class GridColumnAggregationConverter {\n\n\tconvert(aggregationConfig: GuiColumnAggregation): ColumnAggregationConfig {\n\t\tlet columnAggregationConfig: ColumnAggregationConfig = {};\n\n\t\tif (aggregationConfig.enabled !== undefined && aggregationConfig.enabled !== null) {\n\t\t\tcolumnAggregationConfig.enabled = aggregationConfig.enabled;\n\t\t}\n\n\t\tif (aggregationConfig.aggregationTypes !== undefined && aggregationConfig.aggregationTypes !== null) {\n\t\t\tcolumnAggregationConfig.aggregationTypes = this.convertAggregationTypes(aggregationConfig.aggregationTypes);\n\t\t}\n\n\t\treturn columnAggregationConfig;\n\t}\n\n\tprivate convertAggregationTypes(configAggregationTypes: Array<string>): Array<AggregationType> {\n\n\t\tconst aggregationTypes: Array<AggregationType> = [];\n\n\t\tconfigAggregationTypes.forEach((type: string) => {\n\n\t\t\tconst aggregationType = this.convertAggregationType(type);\n\n\t\t\tif (aggregationType !== undefined && aggregationType !== null) {\n\t\t\t\taggregationTypes.push(aggregationType);\n\t\t\t}\n\t\t});\n\n\t\treturn aggregationTypes;\n\t}\n\n\tprivate convertAggregationType(type: string): AggregationType {\n\n\t\tconst loweredAggregationType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredAggregationType) {\n\n\t\t\tcase 'count':\n\t\t\t\treturn AggregationType.COUNT;\n\n\t\t\tcase 'distinct':\n\t\t\t\treturn AggregationType.DISTINCT;\n\n\t\t\tcase 'sum':\n\t\t\t\treturn AggregationType.SUM;\n\n\t\t\tcase 'average':\n\t\t\t\treturn AggregationType.AVERAGE;\n\n\t\t\tcase 'min':\n\t\t\t\treturn AggregationType.MIN;\n\n\t\t\tcase 'max':\n\t\t\t\treturn AggregationType.MAX;\n\n\t\t\tcase 'median':\n\t\t\t\treturn AggregationType.MEDIAN;\n\n\t\t\tcase 'truthy':\n\t\t\t\treturn AggregationType.TRUTHY;\n\n\t\t\tcase 'falsy':\n\t\t\t\treturn AggregationType.FALSY;\n\n\t\t\tcase 'earliest':\n\t\t\t\treturn AggregationType.EARLIEST;\n\n\t\t\tcase 'latest':\n\t\t\t\treturn AggregationType.LATEST;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\n\t\t}\n\t}\n\n}\n","export enum CellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM,\n\tFUNCTION\n}\n","import { GuiCellView, ViewTemplateMethod } from '../../../ui-api/grid.api';\nimport { CellView } from '../../../../../lib/structure/domain/composition/cell-view';\n\nexport class GridColumnViewConverter {\n\n\tconvert(view: string | GuiCellView | ViewTemplateMethod): CellView | ViewTemplateMethod {\n\n\t\tif (typeof view === 'string') {\n\t\t\treturn this.convertString(view);\n\t\t} else if (typeof view === 'function') {\n\t\t\treturn view;\n\t\t} else {\n\t\t\treturn this.convertEnum(view);\n\t\t}\n\t}\n\n\tprivate convertString(view: string): CellView {\n\n\t\tconst loweredView = view.toLocaleLowerCase();\n\n\t\tswitch (loweredView) {\n\n\t\t\tcase 'text':\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase 'chip':\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase 'link':\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase 'image':\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase 'bold':\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase 'italic':\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase 'checkbox':\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n\tprivate convertEnum(view: GuiCellView): CellView {\n\n\t\tswitch (view) {\n\n\t\t\tcase GuiCellView.TEXT:\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase GuiCellView.CHIP:\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase GuiCellView.LINK:\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase GuiCellView.IMAGE:\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase GuiCellView.BOLD:\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase GuiCellView.ITALIC:\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase GuiCellView.CHECKBOX:\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase GuiCellView.CUSTOM:\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n}\n","import { GuiColumn } from '../../../ui-api/grid.api';\nimport { ColumnConfig } from '../../../../../lib/structure/domain/composition/column.config';\n\nimport { GridColumnTypeConverter } from './grid.column-type.converter';\nimport { GridColumnAggregationConverter } from './grid.column-aggregation.converter';\nimport { GridColumnViewConverter } from './grid.column-view.converter';\n\n\nexport class GridColumnConverter {\n\n\tprivate readonly columnTypeConverter = new GridColumnTypeConverter();\n\n\tprivate readonly columnAggregationConverter = new GridColumnAggregationConverter();\n\n\tprivate readonly columnViewConverter = new GridColumnViewConverter();\n\n\tconvert(config: Array<GuiColumn>): Array<ColumnConfig> {\n\t\treturn config.map((c) => this.convertColumn(c));\n\t}\n\n\tprivate convertColumn(guiColumn: GuiColumn): ColumnConfig {\n\t\tlet columnConfig: ColumnConfig = {};\n\n\t\tif (guiColumn.type !== undefined && guiColumn.type !== null) {\n\t\t\tcolumnConfig.type = this.columnTypeConverter.convertType(guiColumn.type);\n\t\t}\n\n\t\tif (guiColumn.header !== undefined && guiColumn.header !== null) {\n\t\t\tcolumnConfig.header = guiColumn.header;\n\t\t}\n\n\t\tif (guiColumn.field !== undefined && guiColumn.field !== null) {\n\t\t\tcolumnConfig.field = guiColumn.field;\n\t\t}\n\n\t\tif (guiColumn.width !== undefined && guiColumn.width !== null) {\n\t\t\tcolumnConfig.width = guiColumn.width;\n\t\t}\n\n\t\tif (guiColumn.view !== undefined && guiColumn.view !== null) {\n\t\t\tcolumnConfig.view = this.columnViewConverter.convert(guiColumn.view);\n\t\t}\n\n\t\tif (guiColumn.aggregation !== undefined && guiColumn.aggregation !== null) {\n\t\t\tcolumnConfig.aggregation = this.columnAggregationConverter.convert(guiColumn.aggregation);\n\t\t}\n\n\t\treturn columnConfig;\n\t}\n\n}\n","export enum SchemaTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n","import { GuiTheme } from '../../../ui-api/grid.api';\nimport { SchemaTheme } from '../../../../../lib/structure/domain/schema/schema-theme';\n\n\nexport class GridThemeConverter {\n\n\tconvert(theme: string | GuiTheme): SchemaTheme {\n\n\t\tif (typeof theme === 'string') {\n\t\t\treturn this.convertString(theme);\n\t\t} else {\n\t\t\treturn this.convertEnum(theme);\n\t\t}\n\n\t}\n\n\tprivate convertString(theme: string): SchemaTheme {\n\n\t\tconst loweredTheme = theme.toLocaleLowerCase();\n\n\t\tswitch (loweredTheme) {\n\n\t\t\tcase 'material':\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase 'fabric':\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase 'light':\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase 'dark':\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(theme: GuiTheme): SchemaTheme {\n\n\t\tswitch (theme) {\n\n\t\t\tcase GuiTheme.MATERIAL:\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase GuiTheme.FABRIC:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase GuiTheme.LIGHT:\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase GuiTheme.DARK:\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n}\n","export enum RowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { GuiRowColoring } from '../../../ui-api/grid.api';\nimport { RowColoring } from '../../../../../lib/structure/ui-api/schema/row-coloring';\n\n\nexport class GridRowColoringConverter {\n\n\tconvert(rowColoring: string | GuiRowColoring): RowColoring {\n\n\t\tif (typeof rowColoring === 'string') {\n\t\t\treturn this.convertString(rowColoring);\n\t\t} else {\n\t\t\treturn this.convertEnum(rowColoring);\n\t\t}\n\n\t}\n\n\tprivate convertString(rowColoring: string): RowColoring {\n\n\t\tconst loweredRowColoring = rowColoring.toLocaleLowerCase();\n\n\t\tswitch (loweredRowColoring) {\n\n\t\t\tcase 'none':\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase 'even':\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase 'odd':\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(rowColoring: GuiRowColoring): RowColoring {\n\n\t\tswitch (rowColoring) {\n\n\t\t\tcase GuiRowColoring.NONE:\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase GuiRowColoring.EVEN:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase GuiRowColoring.ODD:\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { GuiColumnMenu } from '../../../../ui-api/grid.api';\n\nimport { ColumnMenuConfig } from '../../../../../../lib/structure/ui-api/structure/column-menu-config';\n\n@Injectable()\nexport class GridColumnMenuConverter {\n\n\tconvert(config: GuiColumnMenu): ColumnMenuConfig {\n\t\treturn config as ColumnMenuConfig;\n\t}\n}\n","import { EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\n\nimport {\n\tGuiAggregation,\n\tGuiColumn, GuiColumnMenu,\n\tGuiFiltering,\n\tGuiPagingConfig,\n\tGuiQuickFilters,\n\tGuiRowColoring,\n\tGuiSearching,\n\tGuiSorting,\n\tGuiTheme\n} from '../../ui-api/grid.api';\nimport { ColumnConfig } from '../../../../lib/structure/domain/composition/column.config';\n\nimport { GridColumnConverter } from './column/grid.column.converter';\nimport { GridThemeConverter } from './theme/grid.theme.converter';\nimport { GridRowColoringConverter } from './coloring/grid.row-coloring.converter';\nimport { ColumnMenuConfig } from '../../../../lib/structure/ui-api/structure/column-menu-config';\nimport { GridColumnMenuConverter } from './column/menu/grid.column-menu.converter';\n\nexport abstract class GridGateway implements OnChanges {\n\n\t/**\n\t * INPUTS\n\t */\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\tmaxHeight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<GuiColumn> = [];\n\n\t@Input()\n\tpaging: boolean | GuiPagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: string | GuiTheme;\n\n\t@Input()\n\trowColoring: string | GuiRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | GuiSorting;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tfiltering: boolean | GuiFiltering;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tquickFilters: boolean | GuiQuickFilters;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tsearching: boolean | GuiSearching;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\teditMode: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tinfoPanel: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\taggregation: GuiAggregation;\n\n\t@Input()\n\tcolumnMenu: GuiColumnMenu;\n\n\n\t/**\n\t * OUTPUTS\n\t */\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<{after: any, before: any}> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\t/** @internal */\n\tcolumnsConfig: Array<ColumnConfig>;\n\n\tthemeConfig: any; // SchemaTheme;\n\n\trowColoringConfig: any; // RowColoring;\n\n\tcolumnMenuConfig: ColumnMenuConfig;\n\n\tprivate readonly gridColumnConverter: GridColumnConverter = new GridColumnConverter();\n\n\tprivate readonly gridThemeConverter: GridThemeConverter = new GridThemeConverter();\n\n\tprivate readonly gridRowColoringConverter: GridRowColoringConverter = new GridRowColoringConverter();\n\n\tprivate readonly gridColumnMenuConverter: GridColumnMenuConverter = new GridColumnMenuConverter();\n\n\tprotected constructor() {\n\t}\n\n\tngOnChanges(changes: SimpleChanges): void {\n\n\t\tif (changes.columns !== undefined && changes.columns.currentValue !== undefined) {\n\t\t\tthis.columnsConfig = this.gridColumnConverter.convert(this.columns);\n\t\t}\n\n\t\tif (changes.theme !== undefined && changes.theme.currentValue !== undefined) {\n\t\t\tthis.themeConfig = this.gridThemeConverter.convert(this.theme);\n\t\t}\n\n\t\tif (changes.rowColoring !== undefined && changes.rowColoring.currentValue !== undefined) {\n\t\t\tthis.rowColoringConfig = this.gridRowColoringConverter.convert(this.rowColoring);\n\t\t}\n\n\t\tif (changes.columnMenu !== undefined && changes.columnMenu.currentValue !== undefined) {\n\t\t\tthis.columnMenuConfig = this.gridColumnMenuConverter.convert(this.columnMenu);\n\t\t}\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n\tonPageSizeChange(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n\n\tonItemSelect(item: any): void {\n\t\tthis.itemsSelected.emit(item);\n\t}\n\n\tonColumnsChange(): void {\n\t\tthis.columnsChanged.emit();\n\t}\n\n\tonContainerWidthChange(containerWidth: number): void {\n\t\tthis.containerWidthChanged.emit(containerWidth);\n\t}\n\n\tonSourceEdit(value: any): void {\n\t\tthis.sourceEdited.emit(value);\n\t}\n\n\tonCellEditEnter(): void {\n\t\tthis.cellEditEntered.emit();\n\t}\n\n\tonCellEditSubmit(): void {\n\t\tthis.cellEditSubmitted.emit();\n\t}\n\n\tonCellEditCancel(): void {\n\t\tthis.cellEditCanceled.emit();\n\t}\n\n}\n","export abstract class GenericBuilder<T> {\n\n\tprotected abstract buildObject(): T;\n\n\tbuild(): T {\n\t\treturn  this.buildObject();\n\t}\n\n}\n","import { GenericBuilder } from '../../../../common/cdk/generic-builder';\n\nexport class StructurePagingDefinitionBuilder extends GenericBuilder<StructurePagingDefinition> {\n\n\tprivate enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tsuper();\n\t\tthis.enabled = enabled;\n\t}\n\n\tprotected buildObject(): StructurePagingDefinition {\n\t\treturn new StructurePagingDefinition(this.enabled);\n\t}\n\n\twithEnabled(enabled: boolean): StructurePagingDefinitionBuilder {\n\t\tthis.enabled = enabled;\n\t\treturn this;\n\t}\n}\n\nexport class StructurePagingDefinitionDefaultBuilder extends StructurePagingDefinitionBuilder {\n\n\tprivate static readonly defaultEnabled = true;\n\n\tconstructor() {\n\t\tsuper(StructurePagingDefinitionDefaultBuilder.defaultEnabled);\n\t}\n}\n\nexport class StructurePagingDefinition {\n\n\tprivate readonly enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tstatic Builder = StructurePagingDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructurePagingDefinitionDefaultBuilder;\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { GenericBuilder } from '../../../common/cdk/generic-builder';\nimport { StructurePagingDefinition } from './paging/structure-paging-definition';\n\nexport class StructureDefinitionBuilder extends GenericBuilder<StructureDefinition> {\n\n\tprivate border: boolean = true;\n\n\tconstructor(private headerEnabled: boolean,\n\t\t\t\tprivate bottomPaging: StructurePagingDefinition,\n\t\t\t\tprivate topPaging: StructurePagingDefinition) {\n\t\tsuper();\n\t}\n\n\tprotected buildObject(): StructureDefinition {\n\t\treturn new StructureDefinition(\n\t\t\tthis.headerEnabled,\n\t\t\tthis.bottomPaging,\n\t\t\tthis.topPaging,\n\t\t\tthis.border\n\t\t);\n\t}\n\n\twithHeader(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.headerEnabled = enabled;\n\t\treturn this;\n\t}\n\n\twithBottomPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.bottomPaging = paging;\n\t\treturn this;\n\t}\n\n\twithTopPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.topPaging = paging;\n\t\treturn this;\n\t}\n\n\twithBorder(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.border = enabled;\n\t\treturn this;\n\t}\n\n}\n\nexport class StructureDefinitionDefaultBuilder extends StructureDefinitionBuilder {\n\n\tprivate static readonly defaultHeaderEnabled: boolean = true;\n\tprivate static readonly defaultBottomPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\tprivate static readonly defaultTopPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\n\tconstructor() {\n\t\tsuper(\n\t\t\tStructureDefinitionDefaultBuilder.defaultHeaderEnabled,\n\t\t\tStructureDefinitionDefaultBuilder.defaultBottomPaging,\n\t\t\tStructureDefinitionDefaultBuilder.defaultTopPaging\n\t\t);\n\t}\n}\n\nexport class StructureDefinition {\n\n\tprivate readonly headerEnabled: boolean;\n\n\tprivate readonly bottomPaging: StructurePagingDefinition;\n\n\tprivate readonly topPaging: StructurePagingDefinition;\n\n\tprivate readonly border: boolean;\n\n\tconstructor(headerEnabled: boolean,\n\t\t\t\tbottomPaging: StructurePagingDefinition,\n\t\t\t\ttopPaging: StructurePagingDefinition,\n\t\t\t\tborder: boolean) {\n\t\tthis.headerEnabled = headerEnabled;\n\t\tthis.bottomPaging = bottomPaging;\n\t\tthis.topPaging = topPaging;\n\t\tthis.border = border;\n\t}\n\n\tstatic Builder = StructureDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructureDefinitionDefaultBuilder;\n\n\tisHeaderEnabled(): boolean {\n\t\treturn this.headerEnabled;\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.border;\n\t}\n\n\tgetBottomPaging(): StructurePagingDefinition {\n\t\treturn this.bottomPaging;\n\t}\n\n\tgetTopPaging(): StructurePagingDefinition {\n\t\treturn this.topPaging;\n\t}\n\n}\n","import { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\n/** @internal */\nexport const gridStructureDefinition = new StructureDefinition.DefaultBuilder().build();\n","import { Provider } from '@angular/core';\n\nimport { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\nimport { gridStructureDefinition } from './grid-structure-definition';\n\nexport const gridProviders = [{\n\tprovide: StructureDefinition,\n\tuseValue: gridStructureDefinition\n}] as Array<Provider>;\n","import { InjectionToken } from '@angular/core';\n\nexport const structureParentComponent = new InjectionToken('StructureParentComponent');\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class GridIdGenerator {\n\n\tprivate static readonly PREFIX = 'gui-grid-';\n\n\tprivate static index = 0;\n\n\tgenerateId(): string {\n\t\tGridIdGenerator.index++;\n\n\t\treturn GridIdGenerator.PREFIX + GridIdGenerator.index;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { GridComponent } from '../grid.component';\n\n@Injectable()\nexport class GridRegister {\n\n\tprivate readonly gridMap = new Map();\n\n\t// structureId: StructureId\n\tregister(gridId: string, component: GridComponent, structureId: any): void {\n\t\tthis.gridMap.set(gridId, { component, structureId });\n\t}\n\n\tunregister(gridId: string): void {\n\t\tthis.gridMap.delete(gridId);\n\t}\n\n\tgetValues(gridId: string): any {\n\t\treturn this.gridMap.get(gridId);\n\t}\n\n}\n","import { GridComponent } from '../grid.component';\n\nexport interface GridConsoleApi {\n\n\tchangeColumnHeaderTop(enabled: boolean): void;\n\n\n}\n\nexport class GridConsoleApiProvider {\n\n\tconstructor(private readonly gridComponent: GridComponent,\n\t\t\t\tprivate readonly structureId: any) {} // StructureId\n\n\tprovide(): GridConsoleApi {\n\n\t\tconst component = this.gridComponent;\n\n\t\treturn {\n\t\t\tchangeColumnHeaderTop(enabled: boolean): void {\n\t\t\t\tcomponent.columnHeaderTop = enabled;\n\t\t\t\tcomponent.detectChanges();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation, PLATFORM_ID, Inject } from '@angular/core';\n\nimport { GridGateway } from './grid-gateway';\nimport { gridProviders } from './grid.providers';\n\nimport { structureParentComponent } from '../../../../lib/structure/ui/structure-parent-component';\n\nimport { GridIdGenerator } from './register/grid-id.generator';\nimport { GridRegister } from './register/grid.register';\nimport { GridConsoleApiProvider } from './console/grid.console.api';\nimport { isPlatformBrowser } from '@angular/common';\n\nexport const gridSelector = 'gui-grid';\n\n@Component({\n\tselector: gridSelector,\n\ttemplateUrl: './grid.component.html',\n\tstyleUrls: [\n\t\t'../grid.ngx.scss'\n\t],\n\tproviders: [\n\t\t...gridProviders,\n\t\t{\n\t\t\tprovide: structureParentComponent,\n\t\t\tuseExisting: GridComponent\n\t\t}\n\t],\n\thost: {\n\t\t'[class]': `\"${gridSelector}\"`,\n\t\t'[style.height]': 'maxHeight'\n\t},\n\tencapsulation: ViewEncapsulation.None\n})\nexport class GridComponent extends GridGateway implements OnInit {\n\n\t@ViewChild('structure', { static: true })\n\tstructureRef: any;\n\n\t@Input()\n\tgridId: string; // can be set once\n\n\tprivate localGridId: string;\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate gridRegister: GridRegister,\n\t\t\t\tprivate gridIdGenerator: GridIdGenerator) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tlet gridId = this.gridId;\n\n\t\tif (gridId === undefined) {\n\t\t\tgridId = this.gridIdGenerator.generateId();\n\t\t}\n\n\t\tthis.localGridId = gridId;\n\n\t\tthis.exposeGridId();\n\n\t\t// register\n\t\tthis.gridRegister.register(gridId, this, this.structureRef.getStructureId());\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['getGuiGrid'] = (gridId: string) => {\n\n\t\t\t\tconst gridConsoleConfig = this.gridRegister.getValues(gridId);\n\n\t\t\t\tif (gridConsoleConfig) {\n\t\t\t\t\treturn new GridConsoleApiProvider(gridConsoleConfig.component, gridConsoleConfig.structureId).provide();\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.gridRegister.unregister(this.localGridId);\n\t}\n\n\tgetElementRef(): ElementRef {\n\t\treturn this.elementRef;\n\t}\n\n\tgetGridId(): string {\n\t\treturn '';\n\t}\n\n\tdetectChanges(): void {\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tprivate exposeGridId(): void {\n\t\tthis.elementRef.nativeElement.setAttribute('gui-grid-id', this.localGridId);\n\t}\n\n}\n","import {\n\tFabricBadgeModule,\n\tFabricButtonGroupModule,\n\tFabricButtonModule,\n\tFabricCheckboxModule,\n\tFabricChipModule,\n\tFabricDialogModule,\n\tFabricDropdownModule,\n\tFabricInlineDialogModule,\n\tFabricInputModule,\n\tFabricProgressBarModule,\n\tFabricProgressSpinnerModule,\n\tFabricRadioButtonModule,\n\tFabricRadioGroupModule,\n\tFabricSelectModule,\n\tFabricSpinnerModule,\n\tFabricTabModule,\n\tFabricToggleButtonModule\n} from '@generic-ui/fabric';\n\n\nexport const fabricImports = [\n\tFabricBadgeModule,\n\tFabricButtonModule,\n\tFabricButtonGroupModule,\n\tFabricCheckboxModule,\n\tFabricChipModule,\n\tFabricDropdownModule,\n\tFabricRadioButtonModule,\n\tFabricRadioGroupModule,\n\tFabricProgressBarModule,\n\tFabricProgressSpinnerModule,\n\tFabricSelectModule,\n\tFabricSpinnerModule,\n\tFabricTabModule,\n\tFabricToggleButtonModule,\n\tFabricInputModule,\n\tFabricDialogModule,\n\tFabricInlineDialogModule,\n\tFabricTabModule\n];\n","import { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive implements OnDestroy {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { Reactive } from './reactive';\n\nexport abstract class SmartComponent extends Reactive {\n}\n","import { Observable } from 'rxjs/';\n\nimport { AggregateId } from '@generic-ui/hermes';\nimport { Structure } from './structure';\n\n\n\nexport abstract class StructureRepository {\n\n\tabstract onStructure(aggregateId: AggregateId): Observable<Structure>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Paging } from './paging';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class PagingRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\ton(structureId: StructureId): Observable<Paging> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getPaging())\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class StructureId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { StructureId } from './structure-id';\n\nexport const globalStructureId = new StructureId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { PagingRepository } from '../../domain/paging/read/paging.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Paging } from '../../domain/paging/read/paging';\n\n\n@Injectable()\nexport class PagingReadModelService {\n\n\tconstructor(private pagingRepository: PagingRepository) {\n\t}\n\n\tonPaging(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.pagingRepository.on(structureId);\n\t}\n\n\tonSinglePaging(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.onPaging(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { PagingConfig } from '../../paging-config';\n\nexport class SetPagingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload: PagingConfig) {\n\t\tsuper(structureId, 'SetPagingCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class ChangePagesizeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly pageSize: number) {\n\t\tsuper(structureId, 'ChangePagesizeCommand');\n\t}\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class NextPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'NextPageCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class PrevPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'PrevPageCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { PagingConfig } from '../paging-config';\nimport { SetPagingCommand } from './set/set-paging.command';\nimport { ChangePagesizeCommand } from './change-pagesize/change-pagesize.command';\nimport { NextPageCommand } from './next-page/next-page.command';\nimport { PrevPageCommand } from './prev-page/prev-page.command';\n\n\n@Injectable()\nexport class PagingDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetPaging(structureId: StructureId, paging: PagingConfig): void {\n\t\tthis.commandDispatcher.dispatch(new SetPagingCommand(structureId, paging));\n\t}\n\n\tchangePageSize(structureId: StructureId, pageSize: number): void {\n\t\tthis.commandDispatcher.dispatch(new ChangePagesizeCommand(structureId, pageSize));\n\t}\n\n\tnextPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new NextPageCommand(structureId));\n\t}\n\n\tprevPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new PrevPageCommand(structureId));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { PagingConfig } from '../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class PagingCommandService {\n\n\tconstructor(private pagingDispatcher: PagingDispatcher) {\n\t}\n\n\tenable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: true });\n\t}\n\n\tdisable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: false });\n\t}\n\n\tsetPaging(paging: PagingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, paging);\n\t}\n\n\tchangePageSize(pageSize: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.changePageSize(structureId, pageSize);\n\t}\n\n\tnextPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.nextPage(structureId);\n\t}\n\n\tprevPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.prevPage(structureId);\n\t}\n\n\tgoToPage(pageNumber: number, currentPage: number) {\n\n\t\tif (currentPage < pageNumber) {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.nextPage();\n\t\t\t\tcurrentPage += 1;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.prevPage();\n\t\t\t\tcurrentPage -= 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangePagerTop(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerTop: enabled });\n\t}\n\n\tchangePagerBottom(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerBottom: enabled });\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { OriginItemEntity } from '../../command/origin/origin-item-entity';\nimport { StructureId } from '../../../structure-id';\n\n\n\n@Injectable()\nexport class StructureSourceOriginRepository {\n\n\tprivate origin = new Map<string, Array<any>>();\n\n\tprivate origin$ = new ReplaySubject<Map<string, Array<any>>>();\n\n\tsetOrigin(origin: Array<OriginItemEntity>, structureId: StructureId): void {\n\t\tthis.origin.set(structureId.toString(), origin);\n\t\tthis.origin$.next(this.origin);\n\t}\n\n\tonOrigin(structureId: StructureId): Observable<Array<any>> {\n\n\t\treturn this.origin$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, Array<any>>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport { OriginItemEntity } from '../../command/origin/origin-item-entity';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructurePreparedItemsRepository {\n\n\tprivate origin = new Map<string, Array<any>>();\n\n\tprivate origin$ = new ReplaySubject<Map<string, Array<any>>>();\n\n\tsetItems(origin: Array<OriginItemEntity>, structureId: StructureId): void {\n\t\tthis.origin.set(structureId.toString(), origin);\n\t\tthis.origin$.next(this.origin);\n\t}\n\n\tonPreparedItems(structureId: StructureId): Observable<Array<OriginItemEntity>> {\n\n\t\treturn this.origin$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, Array<any>>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, take } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../domain/structure/read/structure.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/read/origin/structure.source-origin.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\nimport { StructurePreparedItemsRepository } from '../../domain/source/read/prepared/structure.prepared-items.repository';\n\n\n@Injectable()\nexport class SourceReadModelService {\n\n\tconstructor(private structureRepository: StructureRepository,\n\t\t\t\tprivate structurePreparedItemsRepository: StructurePreparedItemsRepository,\n\t\t\t\tprivate structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t}\n\n\tonEntities(structureId: StructureId = globalStructureId): Observable<Array<ItemEntity>> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getEntities()),\n\t\t\t\t\t   distinctUntilChanged((ents1: Array<ItemEntity>, ents2: Array<ItemEntity>) => {\n\t\t\t\t\t\t   if (ents1.length !== ents2.length) {\n\t\t\t\t\t\t\t   return false;\n\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t   let flag = true;\n\n\t\t\t\t\t\t   ents1.forEach((ent, index) => {\n\t\t\t\t\t\t\t   if (!ent.equals(ents2[index])) {\n\t\t\t\t\t\t\t\t   flag = false;\n\t\t\t\t\t\t\t\t   return;\n\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t   });\n\n\t\t\t\t\t\t   return flag;\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonEntitiesSize(structureId: StructureId = globalStructureId): Observable<number> {\n\n\t\treturn this.onEntities(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((entities: Array<ItemEntity>) => {\n\t\t\t\t\t\t   return entities.length;\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonSingleEntities(structureId: StructureId = globalStructureId): Observable<Array<ItemEntity>> {\n\n\t\treturn this.onEntities(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tonOriginSize(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.structureSourceOriginRepository\n\t\t\t\t   .onOrigin(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map(origin => origin.length)\n\t\t\t\t   );\n\t}\n\n\tonLoading(structureId: StructureId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getSource().isLoading())\n\t\t\t\t   );\n\t}\n\n\tonPreparedEntities(structureId: StructureId = globalStructureId): Observable<any> {\n\t\treturn this.structurePreparedItemsRepository.onPreparedItems(structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { Paging } from '../../domain/paging/read/paging';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-paging',\n\ttemplateUrl: 'structure-paging.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingComponent extends SmartComponent implements OnInit {\n\n\tsourceSize: number;\n\n\tpaging: Paging;\n\n\talternativeDisplay: boolean = false;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate pagingQueryService: PagingReadModelService,\n\t\t\t\tprivate pagingCommandService: PagingCommandService,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\t\tthis.pagingQueryService\n\t\t\t.onPaging()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.paging = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.sourceQueryService\n\t\t\t.onOriginSize()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.sourceSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tchangePageSize(pageSize: number) {\n\t\tthis.pagingCommandService.changePageSize(pageSize);\n\t}\n\n\tnextPage(): void {\n\n\t\tif (!this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.pagingCommandService.nextPage();\n\t}\n\n\tprevPage(): void {\n\t\tthis.pagingCommandService.prevPage();\n\t}\n\n}\n","export class Paging {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly page: number,\n\t\t\t\tprivate readonly pageSize: number,\n\t\t\t\tprivate readonly pageSizes: Array<number>,\n\t\t\t\tprivate readonly pagerTop: boolean,\n\t\t\t\tprivate readonly pagerBottom: boolean,\n\t\t\t\tprivate readonly isNextDisabled: boolean,\n\t\t\t\tprivate readonly isPrevDisabled: boolean,\n\t\t\t\tprivate readonly start: number,\n\t\t\t\tprivate readonly end: number,\n\t\t\t\tprivate readonly sourceSize: number) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\treturn this.pagerBottom;\n\t}\n\n\tisNextPageDisabled(): boolean {\n\t\treturn this.isNextDisabled;\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.isPrevDisabled\n\t}\n\n\tgetStart(): number {\n\t\treturn this.start;\n\t}\n\n\tgetEnd(): number {\n\t\treturn this.end;\n\t}\n\n\tgetSourceSize(): number {\n\t\treturn this.sourceSize;\n\t}\n\n\tcalculateVisiblePages(currentPage: number, numberOfVisiblePages: number, page: number): boolean {\n\t\treturn currentPage - numberOfVisiblePages < page && page < currentPage + numberOfVisiblePages;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tlet start = this.getStart();\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.getEnd());\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, OnChanges, Output, EventEmitter } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n@Component({\n\tselector: 'gui-structure-paging-navigator',\n\ttemplateUrl: `structure-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled();\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-select',\n\ttemplateUrl: `structure-paging-select.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingSelectComponent {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Output()\n\tpageSizeChanged = new EventEmitter();\n\n\tchangePageSize(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n}\n","import { Component, ChangeDetectionStrategy, Input, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-stats',\n\ttemplateUrl: `structure-paging-stats.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingStatsComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\tsourceSize: number;\n\n\tfirstItemIndex: number;\n\n\tlastItemIndex: number;\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging) {\n\t\t\tthis.firstItemIndex = this.paging.getStart();\n\t\t\tthis.lastItemIndex = this.paging.getEnd();\n\t\t\tthis.sourceSize = this.paging.getSourceSize();\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/read/paging';\nimport { PagingCommandService } from '../../../../ui-api/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-navigator',\n\ttemplateUrl: `structure-alternative-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tfirstPage(): void {\n\t\tthis.pagingCommandService.goToPage(1, this.paging.getPage());\n\t}\n\n\tlastPage(): void {\n\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\t\tthis.pagingCommandService.goToPage(numberOfPages, this.paging.getPage());\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/read/paging';\nimport { PagingCommandService } from '../../../../ui-api/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-pages',\n\ttemplateUrl: `structure-alternative-paging-pages.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingPagesComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number = 0;\n\n\tcurrentPage: number;\n\n\tpages: Array<number>;\n\n\tnumberOfVisiblePages: number = 3;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging && this.sourceSize) {\n\t\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\n\t\t\tthis.currentPage = this.paging.getPage();\n\n\t\t\tthis.pages = [];\n\t\t\tif (this.pages.length <= numberOfPages) {\n\t\t\t\tfor (let i = 1; i <= numberOfPages; i++) {\n\t\t\t\t\tthis.pages.push(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n\tgoToPage(pageNumber: number) {\n\t\tconst currentPage = this.paging.getPage();\n\t\tthis.pagingCommandService.goToPage(pageNumber, currentPage);\n\t}\n\n\tcalculateVisiblePages(page: number): boolean {\n\t\treturn this.paging.calculateVisiblePages(this.currentPage, this.numberOfVisiblePages, page);\n\t}\n\n\tactivePage(page: number): boolean {\n\t\treturn this.currentPage === page;\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { StructurePagingComponent } from './structure-paging.component';\nimport { StructurePagingNavigatorComponent } from './navigator/structure-paging-navigator.component';\nimport { StructurePagingSelectComponent } from './select/structure-paging-select.component';\nimport { StructurePagingStatsComponent } from './stats/structure-paging-stats.component';\nimport { StructureAlternativePagingNavigatorComponent } from './alternative-paging/navigator/structure-alternative-paging-navigator.component';\nimport { StructureAlternativePagingPagesComponent } from './alternative-paging/pages/structure-alternative-paging-pages.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tFabricModule\n\t],\n\tdeclarations: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t],\n\texports: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t]\n})\nexport class StructurePagingModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'numberFormatter' })\nexport class NumberFormatterPipe implements PipeTransform {\n\n\ttransform(number: number): string {\n\t\treturn number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n\t}\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { NumberFormatterPipe } from './number-formatter.pipe';\n\n@NgModule({\n\tdeclarations: [\n\t\tNumberFormatterPipe\n\t],\n\texports: [\n\t\tNumberFormatterPipe\n\t]\n})\nexport class NumberFormatterModule {\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n\ttemplate: `\n\t\t<div class=\"gui-structure-info-modal\">\n\t\t\t<p>Generic UI Grid</p>\n\t\t\t<p>version 0.5.4</p>\n\n\t\t\t<p>Links:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/\">Website</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/guide/\">Documentation</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/tree/master/ngx-grid\">Github</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<p>Feedback:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Report a bug</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Suggest an idea</a>\n\t\t\t\t</li>\n\n\t\t\t</ul>\n\t\t</div>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureInfoModalComponent {\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { FabricDialogService } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { StructureInfoModalComponent } from './structure-info-modal.component';\n\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-info-panel',\n\ttemplate: `\n\n\t\t<ng-container *ngIf=\"preparedItemsSize !== undefined && totalItemsSize !== undefined\">\n\t\t\t\n\t\t\t<p *ngIf=\"preparedItemsSize === totalItemsSize\">\n\t\t\t\tShowing <b>{{totalItemsSize | numberFormatter}}</b> items\n\t\t\t</p>\n\n\t\t\t<p *ngIf=\"preparedItemsSize !== totalItemsSize\">\n\t\t\t\tShowing <b>{{preparedItemsSize | numberFormatter}}</b> out of <b>{{totalItemsSize | numberFormatter}}</b> items\n\t\t\t</p>\n\t\t\t\n\t\t</ng-container>\n\t\t<div>\n\t\t\t<p (click)=\"openInfo()\">\n\t\t\t\t<button>i</button>\n\t\t\t\tInfo\n\t\t\t</p>\n\t\t</div>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureInfoPanelComponent extends SmartComponent implements OnInit {\n\n\ttotalItemsSize: number;\n\n\tpreparedItemsSize: number;\n\n\tinfoPanel = StructureInfoModalComponent;\n\n\tconstructor(private sourceQueryService: SourceReadModelService,\n\t\t\t\tprivate dialog: FabricDialogService,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.sourceQueryService\n\t\t\t.onOriginSize()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.totalItemsSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.sourceQueryService\n\t\t\t.onPreparedEntities()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((preparedItems: Array<any>) => {\n\t\t\t\tthis.preparedItemsSize = preparedItems.length;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\topenInfo() {\n\t\tthis.dialog.open(this.infoPanel);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberFormatterModule } from '../../../../../common/cdk/number-formatter/number-formatter.module';\nimport { StructureInfoPanelComponent } from './structure.info-panel.component';\nimport { StructureInfoModalComponent } from './structure-info-modal.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tNumberFormatterModule\n\t],\n\tdeclarations: [\n\t\tStructureInfoPanelComponent,\n\t\tStructureInfoModalComponent\n\t],\n\texports: [\n\t\tStructureInfoModalComponent,\n\t\tStructureInfoPanelComponent\n\t],\n\tentryComponents: [\n\t\tStructureInfoModalComponent\n\t]\n})\nexport class StructureInfoPanelModule {\n\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { CellView } from '../../cell-view';\nimport { TemplatesComponent } from '../template/templates.component';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #text let-element=\"element\">\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #number let-element=\"element\">\n\t\t\t<span class=\"gui-cell-number\">\n\t\t\t\t{{ element }}\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #chip let-element=\"element\">\n\t\t\t<gui-chip>\n\t\t\t\t{{ element }}\n\t\t\t</gui-chip>\n\t\t</ng-template>\n\n\t\t<ng-template #link let-element=\"element\">\n\t\t\t<a gui-button link=\"true\" href=\"{{ element }}\">\n\t\t\t\t{{ element }}\n\t\t\t</a>\n\t\t</ng-template>\n\n\t\t<ng-template #image let-element=\"element\">\n\t\t\t<img src=\"{{ element }}\"/>\n\t\t</ng-template>\n\n\t\t<ng-template #checkbox let-element=\"element\">\n\t\t\t<span class=\"gui-cell-boolean\">\n\t\t\t\t<gui-checkbox [checked]=\"!!element\" [disabled]=\"true\"></gui-checkbox>\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #bold let-element=\"element\">\n\t\t\t<span class=\"gui-bold\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #italic let-element=\"element\">\n\t\t\t<span class=\"gui-italic\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #custom let-element=\"element\" >\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #function let-element=\"element\" >\n\t\t\t<gui-function-view [element]=\"element\" ></gui-function-view>\n\t\t</ng-template>\n\n\t`\n})\nexport class ViewTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('text', { read: TemplateRef, static: true })\n\ttextTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('chip', { read: TemplateRef, static: true })\n\tchipTemplate: TemplateRef<any>;\n\n\t@ViewChild('link', { read: TemplateRef, static: true })\n\tlinkTemplate: TemplateRef<any>;\n\n\t@ViewChild('image', { read: TemplateRef, static: true })\n\timageTemplate: TemplateRef<any>;\n\n\t@ViewChild('checkbox', { read: TemplateRef, static: true })\n\tcheckboxTemplate: TemplateRef<any>;\n\n\t@ViewChild('bold', { read: TemplateRef, static: true })\n\tboldTemplate: TemplateRef<any>;\n\n\t@ViewChild('italic', { read: TemplateRef, static: true })\n\titalicTemplate: TemplateRef<any>;\n\n\t@ViewChild('custom', { read: TemplateRef, static: true })\n\tcustomTemplate: TemplateRef<any>;\n\n\t@ViewChild('function', { read: TemplateRef, static: true })\n\tfunctionTemplate: TemplateRef<any>;\n\n\tgetTemplate(view: CellView): TemplateRef<any> {\n\n\t\tswitch (view) {\n\n\t\t\tcase CellView.TEXT:\n\t\t\t\treturn this.textTemplate;\n\n\t\t\tcase CellView.CHIP:\n\t\t\t\treturn this.chipTemplate;\n\n\t\t\tcase CellView.LINK:\n\t\t\t\treturn this.linkTemplate;\n\n\t\t\tcase CellView.IMAGE:\n\t\t\t\treturn this.imageTemplate;\n\n\t\t\tcase CellView.CHECKBOX:\n\t\t\t\treturn this.checkboxTemplate;\n\n\t\t\tcase CellView.BOLD:\n\t\t\t\treturn this.boldTemplate;\n\n\t\t\tcase CellView.ITALIC:\n\t\t\t\treturn this.italicTemplate;\n\n\t\t\tcase CellView.CUSTOM:\n\t\t\t\treturn this.customTemplate;\n\n\t\t\tcase CellView.FUNCTION:\n\t\t\t\treturn this.functionTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.textTemplate;\n\t\t}\n\t}\n\n}\n","import { Observable, ReplaySubject } from 'rxjs';\n\nexport class ChangedValueEmitter<T> {\n\n\tprivate subject$ = new ReplaySubject<T>(1);\n\n\tconstructor() {}\n\n\temit(value: T): void {\n\t\tthis.subject$.next(value);\n\t}\n\n\tselect(): Observable<T> {\n\t\treturn this.subject$.asObservable();\n\t}\n}\n","export enum EditEventType {\n\tSUBMIT,\n\tBLUR,\n\tCANCEL\n}\n","import { Input } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../../common/cdk/smart-component';\n\nimport { ChangedValueEmitter } from './changed-value.emitter';\nimport { EditEventType } from './state/edit.event-type';\n\n\nexport abstract class EditCommunicationComponent<T> extends SmartComponent {\n\n\t@Input()\n\tvalue: T;\n\n\t@Input()\n\tvalueChanges: ChangedValueEmitter<T>;\n\n\t@Input()\n\tstatus: ChangedValueEmitter<EditEventType>;\n\n\t@Input()\n\tfocus: boolean;\n\n\tprotected readonly ENTER_KEY_CODE = 13;\n\n\tprotected readonly ESC_KEY_CODE = 27;\n\n\tsubmit(): void {\n\t\tthis.emitStatus(EditEventType.SUBMIT);\n\t}\n\n\tcancel(): void {\n\t\tthis.emitStatus(EditEventType.CANCEL);\n\t}\n\n\tprivate emitStatus(status: EditEventType): void {\n\t\tif (this.status) {\n\t\t\tthis.status.emit(status);\n\t\t}\n\t}\n\n}\n","import { ElementRef, SimpleChanges, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\nexport abstract class InputEditTemplateComponent<T> extends EditCommunicationComponent<T> {\n\n\t@ViewChild('input', { static: true })\n\tinputRef: ElementRef;\n\n\tfilterForm: FormGroup;\n\n\treadonly filterFieldName = 'phrase';\n\n\tprotected constructor(private formBuilder: FormBuilder) {\n\t\tsuper();\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (changes.value !== undefined) {\n\t\t\tthis.filterForm.get(this.filterFieldName).setValue(this.value);\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.inputRef.nativeElement;\n\n\t\tthis.focusField(inputElement);\n\n\t\tthis.emitValueChange(inputElement.value);\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tconst keyup$ = fromEvent(inputElement, 'keyup');\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ENTER_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ESC_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.cancel();\n\t\t\t});\n\t}\n\n\tfocusField(inputElement: HTMLElement): void {\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t}\n\t}\n\n\tprivate observeChanges() {\n\t\tthis.filterForm\n\t\t\t.controls[this.filterFieldName]\n\t\t\t.valueChanges\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: string) => {\n\t\t\t\tthis.emitValueChange(value);\n\t\t\t});\n\t}\n\n\tprivate emitValueChange(value: any): void {\n\t\tif (this.valueChanges) {\n\t\t\tthis.valueChanges.emit(value);\n\t\t}\n\t}\n}\n","import { Inject, ChangeDetectionStrategy, ViewEncapsulation, Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-number-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"number\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class NumberEditTemplateComponent extends InputEditTemplateComponent<number> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n}\n","/**\n * Override decorator\n *\n * class Car {\n *     drive() {}\n * }\n *\n * class FastCar {\n *     @Override\n *     drive() {}}\n * }\n */\nexport function Override(container: { [key: string]: any }, key: string) {\n\tconst basePrototype = Object.getPrototypeOf(container);\n\tif (typeof basePrototype[key] !== 'function') {\n\t\tthrow new Error('Method \"' + key + '\" of class \"' + container.constructor.name + '\" doesn\\'t override any method of base class.');\n\t}\n};\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { Override } from '../../../../../../../common/cdk/decorators';\n\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-string-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"type\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StringEditTemplateComponent extends InputEditTemplateComponent<string> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n\n\t@Override\n\tfocusField(inputElement: any): void {\n\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t\tinputElement.setSelectionRange(0, inputElement.value.length);\n\t\t}\n\t}\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { TemplatesComponent } from '../template/templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #string let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-string-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-string-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #number let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-number-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-number-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #boolean let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-boolean-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-boolean-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #empty>\n\n\t\t</ng-template>\n\n\t`\n})\nexport class EditTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('string', { read: TemplateRef, static: true })\n\tstringTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('boolean', { read: TemplateRef, static: true })\n\tbooleanTemplate: TemplateRef<any>;\n\n\t@ViewChild('empty', { read: TemplateRef, static: true })\n\temptyTemplate: TemplateRef<any>;\n\n\tgetTemplate(dataType: DataType): TemplateRef<any> {\n\n\t\tswitch (dataType) {\n\n\t\t\tcase DataType.STRING:\n\t\t\t\treturn this.stringTemplate;\n\n\t\t\tcase DataType.NUMBER:\n\t\t\t\treturn this.numberTemplate;\n\n\t\t\tcase DataType.BOOLEAN:\n\t\t\t\treturn this.booleanTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.emptyTemplate;\n\t\t}\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\n@Component({\n\tselector: 'gui-boolean-edit',\n\ttemplate: `\n\n\t\t<gui-checkbox #checkbox\n\t\t\t\t\t  [checked]=\"value\"\n\t\t\t\t\t  [name]=\"filterFieldName\"\n\t\t\t\t\t  (changed)=\"toggle($event)\"></gui-checkbox>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class BooleanEditTemplateComponent extends EditCommunicationComponent<boolean> {\n\n\t@ViewChild('checkbox', { read: ElementRef, static: true })\n\tcheckboxRef: ElementRef;\n\n\treadonly filterFieldName = 'booleanEdit';\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.checkboxRef.nativeElement.querySelector('input[type=\"checkbox\"]');\n\n\t\tinputElement.focus();\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tdebounceTime(400),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\t}\n\n\ttoggle(changed: boolean): void {\n\t\tthis.valueChanges.emit(changed);\n\t}\n\n\n}\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\n\n\n@Component({\n\tselector: 'gui-column',\n\ttemplate: ''\n})\nexport class ColumnQueryComponent {\n\n\t@ContentChild(TemplateRef, { static: false })\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\t@Input()\n\theader: string;\n\n}\n","import { Component, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n\n@Component({\n\tselector: 'gui-function-view',\n\ttemplate: `\n\n\t\t<div [innerHTML]=\"safeHTML\"></div>\n\n\t`\n})\nexport class FunctionViewComponent {\n\n\t@Input()\n\telement: any;\n\n\tsafeHTML: SafeHtml;\n\n\tconstructor(private sanitizer: DomSanitizer) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.safeHTML = this.sanitizer.bypassSecurityTrustHtml(this.element);\n\t}\n\n}\n","export enum ColumnWidthType {\n\tPERCENTAGE,\n\tNUMBER,\n\tAUTO\n}\n","import { ColumnWidthType } from './column-width-type';\n\nexport class ColumnWidth {\n\n\tprivate template: ColumnWidthType;\n\n\tprivate baseWidth: number | string;\n\n\tprivate width: number;\n\n\tconstructor(width?: number | string) {\n\t\tthis.baseWidth = width;\n\t\tthis.setWidthAndType(width);\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetColumnType(): ColumnWidthType {\n\t\treturn this.template;\n\t}\n\n\tisTypePercentage(): boolean {\n\t\treturn this.template === ColumnWidthType.PERCENTAGE;\n\t}\n\n\tisTypeAuto(): boolean {\n\t\treturn this.template === ColumnWidthType.AUTO;\n\t}\n\n\tisTypeNumber(): boolean {\n\t\treturn this.template === ColumnWidthType.NUMBER;\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.width = width;\n\t}\n\n\tsetWidthAndType(width: number | string): void {\n\n\t\tif (width === undefined || width === null || width === 'auto') {\n\n\t\t\tthis.template = ColumnWidthType.AUTO;\n\t\t\tthis.setWidth(null);\n\n\t\t} else if (this.isPercentage(width)) {\n\n\t\t\tthis.template = ColumnWidthType.PERCENTAGE;\n\t\t\tthis.setWidth(this.percentageToNumber('' + width));\n\n\t\t} else if (this.isStringNumber(width)) {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t} else {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t}\n\t}\n\n\tclone(): ColumnWidth {\n\t\treturn new ColumnWidth(this.baseWidth);\n\t}\n\n\tprivate isPercentage(width: number | string): boolean {\n\t\treturn typeof width === 'string' && width[width.length - 1] === '%';\n\t}\n\n\t/**\n\t * Width needs to be in format '89%'\n\t * @param width\n\t */\n\tprivate percentageToNumber(width: string): number {\n\t\treturn +(width.slice(0, -1));\n\t}\n\n\tprivate isStringNumber(width: number | string): boolean {\n\t\tconst widthAsNumber = +width;\n\n\t\treturn Number.isNaN(widthAsNumber);\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\n\nexport class CompositionContainerWidthCalculator {\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number) {\n\t}\n\n\tcalculateMinWidth(columnWidths: Array<ColumnWidth>): number {\n\n\t\tconst { staticColumns, fluidColumns } = this.segregateColumns(columnWidths);\n\n\t\t// TODO reduce\n\t\tlet sum = 0;\n\t\tstaticColumns.forEach((c) => {\n\t\t\tsum += c.getWidth();\n\t\t});\n\n\t\tsum += fluidColumns.length * this.MIN_COLUMN_WIDTH;\n\n\t\treturn sum;\n\t}\n\n\tprivate segregateColumns(columns: Array<ColumnWidth>): { staticColumns: Array<ColumnWidth>, fluidColumns: Array<ColumnWidth> } {\n\n\t\tlet staticColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber() && columnWidth.getWidth() > this.MIN_COLUMN_WIDTH),\n\t\t\tfluidColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeAuto() || columnWidth.isTypePercentage() || (columnWidth.isTypeNumber() && columnWidth.getWidth() <= this.MIN_COLUMN_WIDTH));\n\n\t\treturn {\n\t\t\tstaticColumns: staticColumns,\n\t\t\tfluidColumns: fluidColumns\n\t\t};\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\nimport { ColumnWidthType } from '../column/column-width/column-width-type';\n\nexport class CompositionWidthCalculator {\n\n\tprivate readonly columns: Array<ColumnWidth>;\n\n\tconstructor(private source: Array<ColumnWidth>,\n\t\t\t\tprivate width: number,\n\t\t\t\tprivate readonly MIN_COLUMN_WIDTH: number) {\n\t\tthis.columns = this.source.map((c) => c.clone());\n\t}\n\n\tcalculate(): Array<ColumnWidth> {\n\n\t\tlet width = this.width,\n\t\t\tcolumns = [...this.columns];\n\n\t\t// adjust min value\n\t\tthis.adjustMinimalWidth(columns);\n\n\t\t// remove number columns\n\t\tlet newColumns: Array<ColumnWidth> = [];\n\n\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\twidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tnewColumns.push(column);\n\t\t\t}\n\t\t});\n\n\t\tcolumns = newColumns;\n\n\t\t// split even auto columns\n\t\tif (columns.length !== 0) {\n\n\t\t\tconst evenWidth = width / columns.length;\n\n\t\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\t\tcolumn.setWidth(evenWidth);\n\t\t\t});\n\t\t}\n\n\t\t// adjust number columns\n\t\t// let numberColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber());\n\t\t//\n\t\t// // sort by min values\n\t\t// numberColumns.sort((columnOne: ColumnWidth, columnTwo: ColumnWidth) => {\n\t\t// \treturn columnOne.getWidth() - columnTwo.getWidth();\n\t\t// });\n\t\t//\n\t\t// numberColumns.forEach(() => {\n\t\t// });\n\n\t\t// this.adjustMinimalWidth(ColumnWidthType.NUMBER);\n\t\t//\n\t\t// this.adjustPercentageWidth();\n\t\t//\n\t\t// this.adjustAutoWidth();\n\n\t\treturn this.columns;\n\t}\n\n\tprivate adjustMinimalWidth(columns: Array<ColumnWidth>): void {\n\t\tcolumns.forEach((column: ColumnWidth) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\tif (column.getWidth() < this.MIN_COLUMN_WIDTH) {\n\t\t\t\t\tcolumn.setWidthAndType(this.MIN_COLUMN_WIDTH);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate adjustPercentageWidth(): void {\n\n\t\tconst percentageColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypePercentage());\n\n\t\tfor (let column of this.columns) {\n\t\t\tif (column.getColumnType() === ColumnWidthType.PERCENTAGE) {\n\t\t\t\tcolumn.setWidth(this.width * column.getWidth() * 0.01);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate adjustAutoWidth(): void {\n\n\t\tlet leftWidth = this.width,\n\t\t\tautoColumns = [];\n\n\t\tfor (let i = 0; i < this.columns.length; i += 1) {\n\n\t\t\tlet column = this.columns[i];\n\n\t\t\tif (column.getColumnType() !== ColumnWidthType.AUTO) {\n\t\t\t\tleftWidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tautoColumns.push(column);\n\t\t\t}\n\t\t}\n\n\t\tif (autoColumns.length > 0) {\n\t\t\tconst splitWidth = leftWidth / autoColumns.length;\n\n\t\t\tfor (let column of autoColumns) {\n\t\t\t\tcolumn.setWidth(splitWidth);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import { ColumnWidth } from './column-width';\nimport { ColumnConfig } from '../../../column.config';\nimport { CompositionContainerWidthCalculator } from '../../width/composition-container-width.calculator';\nimport { CompositionWidthCalculator } from '../../width/composition-width.calculator';\n\n\nexport class ColumnWidthCollection {\n\n\tprivate baseColumnWidths: Array<ColumnWidth>;\n\n\tprivate columnWidths: Array<ColumnWidth>;\n\n\tprivate width: number;\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number,\n\t\t\t\tcolumns: Array<ColumnConfig> = [],\n\t\t\t\twidth: number = 100) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.setContainerWidth(width);\n\n\t\tthis.calculate();\n\t}\n\n\tgetColumns(): Array<ColumnWidth> {\n\t\treturn this.baseColumnWidths;\n\t}\n\n\tgetColumnsWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetWidths(): Array<number> {\n\t\treturn this.columnWidths.map(c => c.getWidth());\n\t}\n\n\tgetMinWidth(): number {\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\treturn calculator.calculateMinWidth(this.columnWidths);\n\t}\n\n\tsetWidth(width: number): void {\n\n\t\tthis.setContainerWidth(width);\n\t\tthis.calculate();\n\t}\n\n\tsetColumns(columns: Array<ColumnConfig>) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.calculate();\n\t}\n\n\tprivate calculate(): void {\n\n\t\tif (this.baseColumnWidths && this.width) {\n\n\t\t\tconst calculator = new CompositionWidthCalculator(this.baseColumnWidths, this.width, this.MIN_COLUMN_WIDTH);\n\n\t\t\tthis.columnWidths = calculator.calculate();\n\t\t}\n\t}\n\n\tprivate setContainerWidth(width: number): void {\n\t\tif (this.getMinWidth() > width) {\n\t\t\tthis.width = this.getMinWidth();\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.calculate();\n\t}\n}\n","export enum SortStatus {\n\tASC,\n\tDESC,\n\tNONE\n}\n","import { CellView } from '../../cell-view';\n\nexport class ViewEntity {\n\n\tprivate readonly view: CellView;\n\n\tprivate readonly templateFunction?: (entity: any) => string = (value: any) => value;\n\n\tconstructor(columnView: CellView | any) {\n\n\t\tif (typeof columnView === 'function') {\n\t\t\tthis.view = CellView.FUNCTION;\n\t\t\tthis.templateFunction = columnView;\n\t\t} else {\n\t\t\tthis.view = columnView;\n\t\t}\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view;\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.templateFunction;\n\t}\n\n}\n","import { CellView } from '../../cell-view';\nimport { ColumnId } from './column.id';\nimport { ColumnField } from './field/column-field';\nimport { HeaderTemplate } from '../../column.config';\nimport { SortStatus } from '../sort/sort-status';\nimport { ViewEntity } from './view.entity';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\nexport class ColumnEntity {\n\n\tcolumnId: ColumnId;\n\n\tcolumnField: ColumnField;\n\n\theader?: string | HeaderTemplate;\n\n\tsortStatus = SortStatus.NONE;\n\n\twidth?: number;\n\n\tsortable?: boolean;\n\n\tprivate view: ViewEntity = new ViewEntity(CellView.TEXT);\n\n\tconstructor(columnField: ColumnField,\n\t\t\t\theader?: string | HeaderTemplate,\n\t\t\t\tview?: ViewEntity,\n\t\t\t\twidth?: number) {\n\t\tthis.columnField = columnField;\n\n\t\tif (header) {\n\t\t\tthis.header = header;\n\t\t}\n\n\t\tif (view) {\n\t\t\tthis.view = view;\n\t\t}\n\n\t\tif (width) {\n\t\t\tthis.width = width;\n\t\t}\n\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.columnField;\n\t}\n\n\tgetHeader(): string | HeaderTemplate{\n\t\treturn this.header;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.columnField.getDataType();\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view.getCellView();\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.view.getTemplateFunction();\n\t}\n\n\tsetSortStatus(status: SortStatus): void {\n\t\tthis.sortStatus = status;\n\t}\n\n\tsetView(view: ViewEntity): void {\n\t\tthis.view = view;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnParams } from './set-columns/column.params';\nimport { ColumnEntity } from './column.entity';\nimport { ColumnConfig } from '../../column.config';\nimport { ColumnField } from './field/column-field';\nimport { ViewEntity } from './view.entity';\n\n\n@Injectable()\nexport class ColumnEntityFactory {\n\n\tcreate(params: ColumnParams): ColumnEntity;\n\tcreate(params: Array<ColumnParams>): Array<ColumnEntity>;\n\tcreate(data: ColumnParams | Array<ColumnParams>): ColumnEntity | Array<ColumnEntity> {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createColumns(data);\n\t\t} else {\n\t\t\treturn this.createColumn(data);\n\t\t}\n\t}\n\n\tprivate createColumn(params: ColumnParams): ColumnEntity {\n\n\t\tconst column: ColumnConfig = params.getColumn(),\n\t\t\tfield: ColumnField = params.getField();\n\n\t\tlet columnEntity = new ColumnEntity(field);\n\n\t\tif (column.header !== undefined) {\n\t\t\tcolumnEntity.header = column.header;\n\t\t}\n\n\t\tif (column.view !== undefined) {\n\t\t\tcolumnEntity.setView(new ViewEntity(column.view));\n\t\t}\n\n\t\tif (column.width !== undefined) {\n\t\t\tcolumnEntity.width = this.convertWidth(column.width);\n\t\t}\n\n\t\treturn columnEntity;\n\t}\n\n\tprivate createColumns(columns: Array<ColumnParams>): Array<ColumnEntity> {\n\n\t\tlet columnEntities = [] as Array<ColumnEntity>;\n\n\t\tcolumns.forEach((column: ColumnParams) => {\n\t\t\tcolumnEntities.push(this.createColumn(column));\n\t\t});\n\n\t\treturn columnEntities;\n\t}\n\n\tprivate convertWidth(width: string | number): number {\n\t\treturn +width;\n\t}\n}\n","import { AggregateId, AggregateEvent } from '@generic-ui/hermes';\n\nimport { ColumnEntity } from '../column.entity';\n\n\nexport class ColumnsSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'ColumnsSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionContainerWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId,\n\t\t\t\tpublic readonly containerWidth: number) {\n\t\tsuper(compositionId, 'CompositionContainerWidthSetAggregateEvent');\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionResizeWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId) {\n\t\tsuper(compositionId, 'CompositionResizeWidthSetAggregateEvent');\n\t}\n}\n","import { Aggregate, AggregateId, RootAggregate } from '@generic-ui/hermes';\n\nimport { ColumnWidthCollection } from './column/column-width/column-width-collection';\nimport { ColumnEntity } from './column/column.entity';\nimport { ColumnConfig } from '../column.config';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { ColumnEntityFactory } from './column/column-entity.factory';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { SortStatus } from './sort/sort-status';\nimport { ColumnsSetAggregateEvent } from './column/set-columns/columns-set.aggregate-event';\nimport { CompositionContainerWidthCalculator } from './width/composition-container-width.calculator';\nimport { CompositionWidthSetAggregateEvent } from './width/set-width/composition-width-set.aggregate-event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionResizeWidthSetAggregateEvent } from './width/resize-width/composition-resize-width-set.aggregate-event';\n\n\n@RootAggregate\nexport class CompositionAggregate extends Aggregate {\n\n\tprivate readonly MIN_COLUMN_WIDTH = 50;\n\n\t/**\n\t * Columns taken from user config.\n\t * This should not be modified and it should be used as a reference point.\n\t */\n\tprivate columnWidthCollection: ColumnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH);\n\n\t/**\n\t * Collection of columns which are used in the composition.\n\t */\n\tprivate activeColumns: Array<ColumnEntity> = [];\n\n\tprivate readonly baseColumns: Array<ColumnConfig>;\n\n\tprivate readonly baseParams: Array<ColumnParams>;\n\n\t/**\n\t * Value taken from user config [width]\n\t */\n\tprivate width: number;\n\n\t/**\n\t * DOM element's width\n\t */\n\tprivate containerWidth: number;\n\n\tprivate resizeWidthEnabled: boolean = true;\n\n\t/**\n\t * Autowired\n\t */\n\tprivate readonly columnFactory: ColumnEntityFactory = new ColumnEntityFactory();\n\n\tconstructor(id: AggregateId,\n\t\t\t\tcolumnsParams: Array<ColumnParams> = [],\n\t\t\t\twidth?: number,\n\t\t\t\tresizeWidth?: boolean) {\n\t\tsuper(id);\n\n\t\tconst columns = columnsParams.map((param) => param.getColumn());\n\n\t\tthis.baseParams = columnsParams;\n\t\tthis.baseColumns = columns;\n\t\tthis.width = width;\n\n\t\tthis.activeColumns = this.columnFactory.create(columnsParams);\n\t\tthis.columnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH, columns, width);\n\n\t\tif (resizeWidth !== undefined && resizeWidth !== null) {\n\t\t\tthis.resizeWidthEnabled = resizeWidth;\n\t\t}\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.activeColumns;\n\t}\n\n\tgetWidth(): number {\n\n\t\tif (this.resizeWidthEnabled) {\n\t\t\treturn this.containerWidth;\n\t\t} else {\n\t\t\treturn this.width;\n\t\t}\n\t}\n\n\tisResizeEnabled(): boolean {\n\t\treturn this.resizeWidthEnabled;\n\t}\n\n\tisReady(): boolean {\n\t\treturn !!this.getWidth() && this.activeColumns.length > 0;\n\t}\n\n\tclone(): CompositionAggregate {\n\n\t\tconst activeColumns = [...this.activeColumns];\n\n\t\tlet composition = new CompositionAggregate(\n\t\t\tthis.getId(),\n\t\t\tthis.baseParams,\n\t\t\tthis.width,\n\t\t\tthis.resizeWidthEnabled\n\t\t);\n\n\t\tcomposition.containerWidth = this.containerWidth;\n\t\tcomposition.activeColumns = activeColumns;\n\t\tcomposition.columnWidthCollection = this.columnWidthCollection;\n\n\t\treturn composition;\n\t}\n\n\tsetColumns(params: Array<ColumnParams>): void {\n\n\t\tconst columns: Array<ColumnConfig> = params.map((param: ColumnParams) => param.getColumn());\n\n\t\tthis.columnWidthCollection.setColumns(columns);\n\n\t\tconst newColumns = this.columnFactory.create(params),\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tsetContainerWidth(containerWidth: number): void {\n\n\t\tthis.setContainerWidthWithEvent(containerWidth);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.setWidthWithEvent(width);\n\n\t\tthis.setResizeWidthWithEvent(false);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetResizeWidth(enabled: boolean): void {\n\t\tthis.setResizeWidthWithEvent(enabled);\n\t}\n\n\t// TODO Aggregate events\n\tchangeSort(sortParams: Array<ChangeSortParams>): void {\n\n\t\tthis.activeColumns.forEach((column: ColumnEntity) => {\n\t\t\tcolumn.setSortStatus(SortStatus.NONE);\n\t\t});\n\n\t\tfor (let param of sortParams) {\n\n\t\t\tconst fieldId = param.fieldId,\n\t\t\t\tdirection = param.direction,\n\t\t\t\tsortStatus = direction ? SortStatus.ASC : SortStatus.DESC;\n\n\t\t\tconst columns = this.activeColumns.filter((column: ColumnEntity) => {\n\t\t\t\treturn column.getField().getId().getId() === fieldId.getId();\n\t\t\t});\n\n\t\t\tif (columns.length > 0) {\n\t\t\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\t\t\tcolumn.setSortStatus(sortStatus);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate recalculateColumns(): void {\n\n\t\tthis.columnWidthCollection.setWidth(this.getWidth());\n\n\t\tconst newColumns = [...this.activeColumns],\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tprivate updateColumnsWidths(columns: Array<ColumnEntity>, widths: Array<number>): void {\n\t\tcolumns.forEach((columnEntity: ColumnEntity, index: number) => {\n\t\t\tcolumnEntity.width = widths[index];\n\t\t});\n\t}\n\n\tprivate setActiveColumnsWithEvent(columns: Array<ColumnEntity>): void {\n\t\tthis.activeColumns = columns;\n\t\tthis.addEvent(new ColumnsSetAggregateEvent(this.getId(), columns));\n\t}\n\n\t// TODO Refactor\n\tprivate setWidthWithEvent(width: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > width) {\n\t\t\tthis.width = minWidth;\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.addEvent(new CompositionWidthSetAggregateEvent(this.getId()));\n\t}\n\n\t// TODO Refactor\n\tprivate setContainerWidthWithEvent(containerWidth: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > containerWidth) {\n\t\t\tthis.containerWidth = minWidth;\n\t\t} else {\n\t\t\tthis.containerWidth = containerWidth;\n\t\t}\n\n\t\tthis.addEvent(new CompositionContainerWidthSetAggregateEvent(this.getId(), containerWidth));\n\t}\n\n\tprivate setResizeWidthWithEvent(enabled: boolean): void {\n\t\tthis.resizeWidthEnabled = enabled;\n\t\tthis.addEvent(new CompositionResizeWidthSetAggregateEvent(this.getId()));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { CompositionAggregate } from '../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionStore extends InMemoryStore<CompositionAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore, AggregateStoreRegister, AggregateId } from '@generic-ui/hermes';\n\nimport { Override } from '../../../../../../common/cdk/decorators';\n\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateStore extends InMemoryAggregateStore<CompositionAggregate> {\n\n\tconstructor(inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryCompositionStore, aggregateStoreRegister);\n\t}\n\n\t@Override\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\tlet composition = super.getById(aggregateId);\n\n\t\tif (composition) {\n\t\t\treturn composition.clone();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}\n","import { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\nexport abstract class CompositionAggregateRepository {\n\n\tabstract getById(compositionId: CompositionId): CompositionAggregate;\n\n\tabstract save(aggregate: CompositionAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateStore } from './in-memory.composition.aggregate-store';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateRepository extends CompositionAggregateRepository {\n\n\tconstructor(private inMemoryCompositionAggregateStore: InMemoryCompositionAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\treturn this.inMemoryCompositionAggregateStore.getById(aggregateId);\n\t}\n\n\tsave(aggregate: CompositionAggregate): void {\n\t\tthis.inMemoryCompositionAggregateStore.save(aggregate);\n\t}\n\n}\n","import { ComponentFactoryResolver, ComponentRef, Injector, TemplateRef, Type } from '@angular/core';\nimport { TemplatesComponent } from './templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\nimport { CellView } from '../../cell-view';\n\n\n\nexport abstract class TemplateFactory<T extends TemplatesComponent> {\n\n\tprivate templates: Map<DataType | CellView, TemplateRef<any>> = new Map<DataType | CellView, TemplateRef<any>>();\n\n\tprivate templatesComponent: ComponentRef<T> = null;\n\n\tprotected constructor(private readonly templatesComponentDefinition: Type<T>,\n\t\t\t\t\t\t  private componentFactoryResolver: ComponentFactoryResolver) {\n\t\tthis.createTemplatesComponent();\n\t}\n\n\tabstract generateMapKeys(): Array<DataType | CellView>;\n\n\tgetTemplates(): Map<DataType | CellView, TemplateRef<any>> {\n\t\treturn this.templates;\n\t}\n\n\tdestroy(): void {\n\t\tif (this.templatesComponent) {\n\t\t\tthis.templatesComponent.destroy();\n\t\t\tthis.templatesComponent = null;\n\t\t}\n\t}\n\n\tprivate createTemplatesComponent(): void {\n\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.templatesComponentDefinition);\n\n\t\tconst injector: Injector = Injector.create({ providers: [] });\n\n\t\tthis.templatesComponent = componentFactory.create(injector);\n\n\t\tthis.generateMap();\n\t}\n\n\tprivate generateMap(): void {\n\t\tthis.generateMapKeys()\n\t\t\t.forEach((type: DataType | CellView) => {\n\t\t\t\tthis.findAndSetTemplate(type);\n\t\t\t});\n\t};\n\n\tprivate findAndSetTemplate(dt: DataType | CellView): void {\n\n\t\tconst template = this.templatesComponent.instance.getTemplate(dt);\n\n\t\tthis.templates.set(dt, template);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\n\nimport { ViewTemplatesComponent } from './view-templates.component';\nimport { CellView } from '../../cell-view';\nimport { TemplateFactory } from '../template/template.factory';\n\n\n@Injectable()\nexport class ViewTemplateFactory extends TemplateFactory<ViewTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tViewTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<CellView> {\n\t\treturn Object.keys(CellView)\n\t\t\t\t\t .map(key => CellView[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { ViewTemplateFactory } from './view-template.factory';\nimport { CellView } from '../../cell-view';\n\n\n\n@Injectable()\nexport class ViewTemplateRepository {\n\n\tconstructor(private columnTemplateFactory: ViewTemplateFactory) {\n\t}\n\n\tfindTemplate(view: CellView): TemplateRef<any> {\n\t\tconst typeToTemplate = this.columnTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(view);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { TemplateFactory } from '../template/template.factory';\nimport { EditTemplatesComponent } from './edit-templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateFactory extends TemplateFactory<EditTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tEditTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<DataType> {\n\t\treturn Object.keys(DataType)\n\t\t\t\t\t .map(key => DataType[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { EditTemplateFactory } from './edit-template.factory';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateRepository {\n\n\tconstructor(private editTemplateFactory: EditTemplateFactory) {\n\t}\n\n\tfindTemplate(dataType: DataType): TemplateRef<any> {\n\t\tconst typeToTemplate = this.editTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(dataType);\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { SortStatus } from '../../command/sort/sort-status';\n\n\nexport class CellTemplateWithContext {\n\n\tconstructor(public viewTemplate: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\t// public editContext: any,\n\t\t\t\tpublic context: CellContext,\n\t\t\t\tpublic width: number,\n\t\t\t\tprivate readonly fieldId: FieldId,\n\t\t\t\tprivate readonly sortStatus: SortStatus) {\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetSortStatus(): SortStatus {\n\t\treturn this.sortStatus;\n\t}\n\n\tisAscSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.ASC;\n\t}\n\n\tisDescSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.DESC;\n\t}\n\n\tisNoSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.NONE;\n\t}\n}\n","export class CellContext {\n\n\tconstructor(public element: string) {\n\t}\n}\n","export class FieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n\n\tequals(fieldId: FieldId): boolean {\n\t\treturn fieldId.getId() === this.id;\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnFieldId } from '../../command/column/field/column-field.id';\n\n\nexport class CellTemplateWithAccessor {\n\n\tconstructor(public template: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\tpublic editable: boolean,\n\t\t\t\tpublic accessor: (element: any) => any,\n\t\t\t\tpublic width: number,\n\t\t\t\tpublic columnFieldId: ColumnFieldId) {\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnField } from '../../command/column/field/column-field';\nimport { SortStatus } from '../../command/sort/sort-status';\nimport { HeaderTemplate } from '../../column.config';\nimport { CellTemplateWithContext } from './cell-template-with-context';\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { CellTemplateWithAccessor } from './cell-template-with-accessor';\n\n\nexport class ColumnDefinition {\n\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\teditTemplate: TemplateRef<any>;\n\n\twidth: number;\n\n\ttemplateFunction: (i: any) => string;\n\n\tprivate field: ColumnField;\n\n\tprivate sortStatus: SortStatus;\n\n\tprivate header: string | HeaderTemplate;\n\n\tconstructor(field: ColumnField,\n\t\t\t\theader: string | HeaderTemplate,\n\t\t\t\tsort: SortStatus = SortStatus.NONE) {\n\t\tthis.field = field;\n\t\tthis.header = header;\n\t\tthis.sortStatus = sort;\n\t}\n\n\tsetHeader(header: string): void {\n\t\tthis.header = header;\n\t}\n\n\tsetField(field: ColumnField): void {\n\t\tthis.field = field;\n\t}\n\n\tgetHeaderCellTemplateWithContext(index: number): CellTemplateWithContext {\n\n\t\tconst header: any = this.header;\n\t\tlet headerCellContext: CellContext;\n\n\t\tif (typeof header === 'string') {\n\t\t\theaderCellContext = new CellContext(header);\n\t\t} else if (typeof header === 'function') {\n\t\t\theaderCellContext = new CellContext(header(index));\n\t\t}\n\n\t\tconst fieldId = new FieldId(this.field.getId().getId());\n\n\t\treturn new CellTemplateWithContext(this.headerTemplate, this.editTemplate, headerCellContext, this.width, fieldId, this.sortStatus);\n\t}\n\n\tgetContentCellTemplateWithAccessor(): CellTemplateWithAccessor {\n\n\t\tlet accessor = (entity: any) => {\n\t\t\treturn this.templateFunction(this.field.getAccessor()(entity));\n\t\t};\n\n\t\treturn new CellTemplateWithAccessor(this.cellTemplate, this.editTemplate, true, accessor, this.width, this.field.getId());\n\t}\n\n}\n","import { Injectable, TemplateRef } from '@angular/core';\n\nimport { ViewTemplateRepository } from '../view/view-template.repository';\nimport { EditTemplateRepository } from '../edit/edit-template.repository';\nimport { ColumnEntity } from '../../command/column/column.entity';\nimport { ColumnDefinition } from './column-definition';\nimport { CellView } from '../../cell-view';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class ColumnDefinitionFactory {\n\n\tconstructor(private viewTemplateRepository: ViewTemplateRepository,\n\t\t\t\tprivate editTemplateRepository: EditTemplateRepository) {\n\t}\n\n\tcreate(column: ColumnEntity): ColumnDefinition {\n\n\t\tlet columnDef = new ColumnDefinition(column.getField(), column.getHeader(), column.sortStatus);\n\n\t\tcolumnDef.cellTemplate = this.findViewTemplate(column.getCellView());\n\t\tcolumnDef.headerTemplate = this.findViewTemplate(CellView.TEXT);\n\n\t\tcolumnDef.templateFunction = column.getTemplateFunction();\n\n\t\tcolumnDef.editTemplate = this.findEditTemplate(column.getDataType());\n\n\t\tcolumnDef.width = +column.width;\n\n\t\treturn columnDef;\n\t}\n\n\tcreateColumns(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\t\treturn columns.map((column: ColumnEntity) => this.create(column));\n\t}\n\n\tprivate findViewTemplate(view: CellView): TemplateRef<any> {\n\n\t\tif (view === CellView.FUNCTION) {\n\t\t\treturn this.viewTemplateRepository.findTemplate(CellView.FUNCTION);\n\t\t} else {\n\t\t\treturn this.viewTemplateRepository.findTemplate(view);\n\t\t}\n\t}\n\n\tprivate findEditTemplate(dataType: DataType): TemplateRef<any> {\n\t\treturn this.editTemplateRepository.findTemplate(dataType);\n\t}\n\n}\n","import { ReadModel, AggregateId } from '@generic-ui/hermes';\n\nimport { ColumnDefinition } from './definition/column-definition';\nimport { CellTemplateWithContext } from './definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from './definition/cell-template-with-accessor';\n\n\nexport class Composition extends ReadModel {\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tprivate readonly ready: boolean,\n\t\t\t\tprivate readonly columns: Array<ColumnDefinition>,\n\t\t\t\tprivate readonly width: number,\n\t\t\t\tprivate readonly resizeWidth: boolean) {\n\t\tsuper(uid);\n\t}\n\n\tgetColumns(): Array<ColumnDefinition> {\n\t\treturn this.columns;\n\t}\n\n\tgetHeaderColumns(): Array<CellTemplateWithContext> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition, index: number) => column.getHeaderCellTemplateWithContext(index));\n\t}\n\n\tgetTemplateColumns(): Array<CellTemplateWithAccessor> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition) => column.getContentCellTemplateWithAccessor());\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetContainerWidth(): number {\n\t\treturn +this.width - 2;\n\t}\n\n\tisReady(): boolean {\n\t\treturn this.ready;\n\t}\n\n\tisResizeWidthEnabled(): boolean {\n\t\treturn this.resizeWidth;\n\t}\n\n\tequals(composition: Composition): boolean {\n\t\treturn this.width === composition.width &&\n\t\t\tthis.resizeWidth === composition.resizeWidth &&\n\t\t\tthis.equalsByColumns(composition.columns);\n\t}\n\n\tequalsByColumns(columns: Array<ColumnDefinition>): boolean {\n\t\treturn this.columns.length === columns.length;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnDefinitionFactory } from './read/definition/column-definition.factory';\nimport { CompositionAggregate } from './command/composition.aggregate';\nimport { Composition } from './read/composition';\nimport { ColumnEntity } from './command/column/column.entity';\nimport { ColumnDefinition } from './read/definition/column-definition';\n\n\n@Injectable()\nexport class CompositionConverter {\n\n\tconstructor(private columnDefinitionFactory: ColumnDefinitionFactory) {}\n\n\tconvert(aggregate: CompositionAggregate): Composition {\n\n\t\tconst ready = aggregate.isReady(),\n\t\t\tcolumns: Array<ColumnEntity> = aggregate.getColumns(),\n\t\t\tcolumnDefs: Array<ColumnDefinition> = this.convertColumnsToColumnDef(columns),\n\t\t\twidth = aggregate.getWidth(),\n\t\t\tresizeWidth = aggregate.isResizeEnabled(),\n\t\t\tid = aggregate.getId();\n\n\t\treturn new Composition(id, ready, columnDefs, width, resizeWidth);\n\t}\n\n\tprivate convertColumnsToColumnDef(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\n\t\tconst columnDefs: Array<ColumnDefinition> = [];\n\n\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\tconst columnDef = this.columnDefinitionFactory.create(column);\n\n\t\t\tcolumnDefs.push(columnDef);\n\t\t});\n\n\t\treturn columnDefs;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Composition } from '../../../../domain/composition/read/composition';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\nimport { CompositionConverter } from '../../../../domain/composition/composition.converter';\n\n\n@Injectable()\nexport class InMemoryCompositionReadStore extends InMemoryReadModelStore<Composition, CompositionAggregate> {\n\n\tconstructor(private inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\tprivate compositionConverter: CompositionConverter) {\n\t\tsuper(inMemoryCompositionStore);\n\t}\n\n\ttoReadModel(aggregate: CompositionAggregate): Composition {\n\t\treturn this.compositionConverter.convert(aggregate);\n\t}\n\n}\n","import { Observable } from 'rxjs';\n\nimport { CompositionId } from '../composition-id';\nimport { Composition } from './composition';\n\n\nexport abstract class CompositionRepository {\n\n\tabstract on(compositionId: CompositionId): Observable<Composition>;\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class CompositionInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionInitedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionResizeWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionResizeWidthSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class ColumnsSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ColumnsSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionContainerWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tpayload: any) {\n\t\tsuper(aggregateId, 'CompositionContainerWidthSetEvent', payload);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ColumnEntity } from '../column/column.entity';\n\n\nexport class CompositionChangeSortStatusEvent extends DomainEvent {\n\n\tconstructor(aggregateId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'CompositionChangeSortStatusEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionRepository } from '../../../../domain/composition/read/composition.repository';\nimport { Composition } from '../../../../domain/composition/read/composition';\nimport { InMemoryCompositionReadStore } from './in-memory.composition.read-store';\nimport { CompositionInitedEvent } from '../../../../domain/composition/command/init/composition-inited.event';\nimport { CompositionResizeWidthSetEvent } from '../../../../domain/composition/command/width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from '../../../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from '../../../../domain/composition/command/width/set-width/composition-width-set.event';\nimport { CompositionChangeSortStatusEvent } from '../../../../domain/composition/command/sort/composition-change-sort-status.event';\n\n\n@Injectable()\nexport class InMemoryCompositionRepository extends CompositionRepository implements OnDestroy {\n\n\tprivate readonly composition$ = new ReplaySubject<Composition>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryCompositionQueryStore: InMemoryCompositionReadStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tCompositionInitedEvent,\n\t\t\t\tCompositionResizeWidthSetEvent,\n\t\t\t\tColumnsSetEvent,\n\t\t\t\tCompositionContainerWidthSetEvent,\n\t\t\t\tCompositionWidthSetEvent,\n\t\t\t\tCompositionChangeSortStatusEvent as any\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst composition = this.inMemoryCompositionQueryStore.getById(aggregateId);\n\n\t\t\t\tthis.composition$.next(composition);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\ton(aggregateId: AggregateId): Observable<Composition> {\n\n\t\treturn this.composition$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((composition: Composition) => composition.getId().toString() === aggregateId.toString()),\n\t\t\t\t\t   filter((composition: Composition) => composition.isReady())\n\t\t\t\t   );\n\t}\n\n}\n","import { InMemoryCompositionAggregateStore } from './command/in-memory.composition.aggregate-store';\nimport { CompositionAggregateRepository } from '../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateRepository } from './command/in-memory.composition.aggregate-repository';\nimport { InMemoryCompositionReadStore } from './read/in-memory.composition.read-store';\nimport { CompositionRepository } from '../../../domain/composition/read/composition.repository';\nimport { InMemoryCompositionRepository } from './read/in-memory.composition.repository';\nimport { InMemoryCompositionStore } from './in-memory.composition.store';\n\nexport const inMemoryCompositionCommandProviders = [\n\tInMemoryCompositionAggregateStore,\n\t{\n\t\tprovide: CompositionAggregateRepository,\n\t\tuseClass: InMemoryCompositionAggregateRepository\n\t},\n];\n\nexport const inMemoryCompositionQueryProviders = [\n\tInMemoryCompositionReadStore,\n\t{\n\t\tprovide: CompositionRepository,\n\t\tuseClass: InMemoryCompositionRepository\n\t}\n];\n\nexport const inMemoryCompositionProviders = [\n\tInMemoryCompositionStore\n];\n","import { Injectable } from '@angular/core';\n\nimport { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\n@Injectable()\nexport class CompositionAggregateFactory {\n\n\tcreate(id: CompositionId): CompositionAggregate {\n\t\treturn new CompositionAggregate(id);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\n\n\nexport class InitCompositionCommand extends Command {\n\n\tconstructor(public readonly compositionId: CompositionId) {\n\t\tsuper(compositionId, 'InitCompositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\nimport { ColumnParams } from './column.params';\n\n\nexport class SetColumnsCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnParams>) {\n\t\tsuper(compositionId, 'SetColumnsCommand');\n\t}\n\n\tgetParams(): Array<ColumnParams> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionContainerWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionContainerWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionResizeWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetCompositionResizeWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ChangeSortParams } from './change-sort.params';\n\n\nexport class CompositionChangeSortStatusCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly sortParams: Array<ChangeSortParams>) {\n\t\tsuper(compositionId, 'CompositionChangeSortStatusCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetSortParams(): Array<ChangeSortParams> {\n\t\treturn this.sortParams;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../composition-id';\nimport { InitCompositionCommand } from './init/init-composition.command';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { SetColumnsCommand } from './column/set-columns/set-columns.command';\nimport { SetCompositionWidthCommand } from './width/set-width/set-composition-width.command';\nimport { SetCompositionContainerWidthCommand } from './width/set-container-width/set-composition-container-width.command';\nimport { SetCompositionResizeWidthCommand } from './width/resize-width/set-composition-resize-width.command';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { CompositionChangeSortStatusCommand } from './sort/composition-change-sort-status.command';\n\n\n@Injectable()\nexport class CompositionDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId): void {\n\t\tthis.commandDispatcher.dispatch(new InitCompositionCommand(compositionId));\n\t}\n\n\tsetColumns(compositionId: CompositionId, params: Array<ColumnParams>): void {\n\t\tthis.commandDispatcher.dispatch(new SetColumnsCommand(compositionId, params));\n\t}\n\n\tsetWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionWidthCommand(compositionId, width));\n\t}\n\n\tsetContainerWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionContainerWidthCommand(compositionId, width));\n\t}\n\n\tsetResizeWidth(compositionId: CompositionId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionResizeWidthCommand(compositionId, enabled));\n\t}\n\n\tchangeSort(compositionId: CompositionId, params: Array<ChangeSortParams>): void {\n\t\tthis.commandDispatcher.dispatch(new CompositionChangeSortStatusCommand(compositionId, params));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionAggregateFactory } from '../composition.aggregate-factory';\nimport { InitCompositionCommand } from './init-composition.command';\nimport { CompositionInitedEvent } from './composition-inited.event';\n\n\n@Injectable()\nexport class InitCompositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly compositionAggregateFactory: CompositionAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitCompositionCommand,\n\t\t\tCompositionInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitCompositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.compositionId;\n\n\t\tconst compositionAggregate = this.compositionAggregateFactory.create(aggregateId);\n\n\t\tthis.compositionAggregateRepository.save(compositionAggregate);\n\t}\n\n}\n","export const CompositionAggregateEvents = {\n\tCompositionResizeWidthSetAggregateEvent: 'CompositionResizeWidthSetAggregateEvent',\n\tColumnsSetAggregateEvent: 'ColumnsSetAggregateEvent',\n\tCompositionContainerWidthSetAggregateEvent: 'CompositionContainerWidthSetAggregateEvent',\n\tCompositionWidthSetAggregateEvent: 'CompositionWidthSetAggregateEvent',\n};\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateEvents } from './composition.events';\nimport { CompositionResizeWidthSetEvent } from './width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from './column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionContainerWidthSetEvent } from './width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from './width/set-width/composition-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventConverter {\n\n\tconvert(event: AggregateEvent): DomainEvent;\n\tconvert(events: Array<AggregateEvent>): Array<DomainEvent>;\n\tconvert(arg: AggregateEvent | Array<AggregateEvent>): DomainEvent | Array<DomainEvent> {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn this.convertEvents(arg);\n\t\t} else {\n\t\t\treturn this.convertEvent(arg);\n\t\t}\n\t}\n\n\tprivate convertEvents(aggregateEvents: Array<AggregateEvent>): Array<DomainEvent> {\n\t\treturn aggregateEvents.map((event: AggregateEvent) => {\n\t\t\treturn this.convertEvent(event);\n\t\t});\n\t}\n\n\tprivate convertEvent(aggregateEvent: AggregateEvent): DomainEvent {\n\n\t\tswitch (aggregateEvent.getType()) {\n\t\t\tcase CompositionAggregateEvents.CompositionResizeWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionResizeWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.ColumnsSetAggregateEvent:\n\n\t\t\t\treturn new ColumnsSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.CompositionContainerWidthSetAggregateEvent:\n\n\t\t\t\tconst payload = (aggregateEvent as CompositionContainerWidthSetAggregateEvent).containerWidth;\n\n\t\t\t\treturn new CompositionContainerWidthSetEvent(aggregateEvent.getAggregateId(), payload);\n\n\t\t\tcase CompositionAggregateEvents.CompositionWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Command, DomainEventPublisher, CommandHandler, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { CompositionAggregate } from '../../composition.aggregate';\n\nimport { SetColumnsCommand } from './set-columns.command';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class SetColumnsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetColumnsCommand);\n\t}\n\n\thandle(command: SetColumnsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.getAggregateId(),\n\t\t\tsetColumnsParams: Array<ColumnParams> = command.getParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setColumns(setColumnsParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishEvents(composition, command);\n\t}\n\n\tprivate publishEvents(composition: CompositionAggregate, command: Command): void {\n\n\t\tconst events = composition.getEvents() as Array<AggregateEvent>;\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(events);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionWidthCommand } from './set-composition-width.command';\nimport { CompositionWidthSetEvent } from './composition-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionWidthCommand,\n\t\t\tCompositionWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionResizeWidthCommand } from './set-composition-resize-width.command';\nimport { CompositionResizeWidthSetEvent } from './composition-resize-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionResizeWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionResizeWidthCommand,\n\t\t\tCompositionResizeWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionResizeWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setResizeWidth(enabled);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { SetCompositionContainerWidthCommand } from './set-composition-container-width.command';\n\n\n@Injectable()\nexport class SetCompositionContainerWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetCompositionContainerWidthCommand);\n\t}\n\n\thandle(command: SetCompositionContainerWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setContainerWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishAggregateEvents(composition.getEvents() as Array<AggregateEvent>);\n\t}\n\n\tprivate publishAggregateEvents(aggregateEvents: Array<AggregateEvent>): void {\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(aggregateEvents);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../composition-event.converter';\nimport { CompositionChangeSortStatusCommand } from './composition-change-sort-status.command';\nimport { CompositionChangeSortStatusEvent } from './composition-change-sort-status.event';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(CompositionChangeSortStatusCommand);\n\t}\n\n\thandle(command: CompositionChangeSortStatusCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst compositionId = command.getCompositionId(),\n\t\t\tsortParams = command.getSortParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(compositionId);\n\n\t\tcomposition.changeSort(sortParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tconst columns = composition.getColumns();\n\n\t\tthis.domainEventPublisher.publish(new CompositionChangeSortStatusEvent(compositionId, columns));\n\t}\n\n}\n","import { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\n\n\nexport class ColumnField {\n\n\tprivate readonly fieldId: ColumnFieldId;\n\n\tprivate readonly accessor: ColumnFieldAccessor;\n\n\tprivate readonly dataType: DataType;\n\n\tconstructor(fieldId: ColumnFieldId,\n\t\t\t\taccessor: ColumnFieldAccessor,\n\t\t\t\tdataType: DataType) {\n\t\tthis.fieldId = fieldId;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\t}\n\n\tgetId(): ColumnFieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessor(entity);\n\t}\n\n\tgetAccessor(): ColumnFieldAccessor {\n\t\treturn this.accessor;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\nimport { ColumnField } from './column-field';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\n\n\n@Injectable()\nexport class ColumnFieldFactory {\n\n\tcreate(columnFieldId: ColumnFieldId, accessor: ColumnFieldAccessor, dataType: DataType): ColumnField {\n\t\treturn new ColumnField(columnFieldId, accessor, dataType);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { ColumnsSetEvent } from '../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tonColumnsChanged(compositionId: CompositionId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tonWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tonContainerWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   CompositionContainerWidthSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.getAggregateId().equals(compositionId)),\n\t\t\t\t\t   map((event: CompositionContainerWidthSetEvent) => {\n\t\t\t\t\t\t   return event.getPayload();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((width: number) => !!width)\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { CompositionId } from './composition-id';\n\nexport const globalCompositionId = new CompositionId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { CompositionRepository } from '../../domain/composition/read/composition.repository';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../domain/composition/global-composition-id';\nimport { Composition } from '../../domain/composition/read/composition';\nimport { CellTemplateWithContext } from '../../domain/composition/read/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\nimport { SortStatus } from '../../domain/composition/command/sort/sort-status';\nimport { FieldId } from '../../domain/structure/command/field/data-type/field.id';\n\n\n@Injectable()\nexport class CompositionReadModelService {\n\n\tconstructor(private compositionRepository: CompositionRepository) {\n\t}\n\n\tonWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getWidth())\n\t\t\t\t   );\n\t}\n\n\tonContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getContainerWidth())\n\t\t\t\t   );\n\t}\n\n\tonWidthForEachColumn(compositionId: CompositionId = globalCompositionId): Observable<Array<number>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getColumns().map(c => c.width))\n\t\t\t\t   );\n\t}\n\n\tonHeaderColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithContext>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getHeaderColumns())\n\t\t\t\t   );\n\t}\n\n\tonSortOrder(fieldId: FieldId, compositionId: CompositionId = globalCompositionId): Observable<SortStatus> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getHeaderColumns()),\n\t\t\t\t\t   map((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\t\t\t   return columns.filter((c) => c.getFieldId().equals(fieldId));\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\t\t\t   return columns.length > 0;\n\t\t\t\t\t   }),\n\t\t\t\t\t   map(columns => columns[0].getSortStatus())\n\t\t\t\t   );\n\t}\n\n\tonTemplateColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getTemplateColumns())\n\t\t\t\t   );\n\t}\n\n\tonResizeWidth(compositionId: CompositionId = globalCompositionId): Observable<boolean> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .on(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.isResizeWidthEnabled())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CompositionDispatcher } from '../../domain/composition/command/composition.dispatcher';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../domain/composition/command/column/set-columns/column.params';\n\n\n\n@Injectable()\nexport class CompositionCommandService {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.init(compositionId);\n\t}\n\n\tsetColumns(params: Array<ColumnParams>, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setColumns(compositionId, params);\n\t}\n\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setWidth(compositionId, width);\n\t}\n\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setContainerWidth(compositionId, width);\n\t}\n\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setResizeWidth(compositionId, enabled);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class SortToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly directions: Array<{fieldId: FieldId, direction: boolean}>) {\n\t\tsuper(aggregateId, 'ToggleSortEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetDirections(): any {\n\t\treturn this.directions;\n\t}\n}\n","export class ColumnFieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n}\n","import { ColumnFieldId } from '../column/field/column-field.id';\n\nexport class ChangeSortParams {\n\n\tconstructor(public readonly fieldId: ColumnFieldId,\n\t\t\t\tpublic readonly direction: boolean) {}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\nexport class SortOrderSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly directions: Array<{fieldId: FieldId, direction: boolean}>) {\n\t\tsuper(aggregateId, 'SortOrderSetEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetDirections(): any {\n\t\treturn this.directions;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent, DomainEventHandler } from '@generic-ui/hermes';\n\nimport { SortToggledEvent } from '../../../structure/command/sort/toggle/sort-toggled.event';\n\nimport { CompositionDispatcher } from '../composition.dispatcher';\nimport { ColumnFieldId } from '../column/field/column-field.id';\nimport { ChangeSortParams } from './change-sort.params';\nimport { SortOrderSetEvent } from '../../../structure/command/sort/order/sort-order-set.event';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof SortToggledEvent) {\n\n\t\t\tconst compositionId = event.getCompositionId(),\n\t\t\t\tdirs = event.getDirections();\n\n\t\t\tlet params = dirs.map((dir: any) => {\n\n\t\t\t\tconst columnFieldId = new ColumnFieldId(dir.fieldId.getId());\n\n\t\t\t\treturn new ChangeSortParams(columnFieldId, dir.direction);\n\t\t\t});\n\n\t\t\tthis.compositionDispatcher.changeSort(compositionId, params);\n\t\t}\n\n\t\tif (event instanceof SortOrderSetEvent) {\n\n\t\t\tconst compositionId = event.getCompositionId(),\n\t\t\t\tdirs = event.getDirections();\n\n\t\t\tlet params = dirs.map((dir: any) => {\n\n\t\t\t\tconst columnFieldId = new ColumnFieldId(dir.fieldId.getId());\n\n\t\t\t\treturn new ChangeSortParams(columnFieldId, dir.direction);\n\t\t\t});\n\n\t\t\tthis.compositionDispatcher.changeSort(compositionId, params);\n\t\t}\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from '../data-type/field';\n\n\nexport class FieldsInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>, // TODO merge\n\t\t\t\tprivate readonly fields: Array<Field>) {\n\t\tsuper(aggregateId, 'FieldsInitedEvent');\n\t}\n\n\tgetFields(): Array<Field> {\n\t\treturn this.fields;\n\t}\n}\n","import { ColumnConfig } from '../../../column.config';\nimport { ColumnField } from '../field/column-field';\n\nexport class ColumnParams {\n\n\tconstructor(private readonly column: ColumnConfig,\n\t\t\t\tprivate readonly field: ColumnField) {\n\t}\n\n\tgetColumn(): ColumnConfig {\n\t\treturn this.column;\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.field;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent, DomainEventHandler } from '@generic-ui/hermes';\n\nimport { FieldsInitedEvent } from '../../../../structure/command/field/init/fields-inited.event';\nimport { Field } from '../../../../structure/command/field/data-type/field';\n\nimport { CompositionDispatcher } from '../../composition.dispatcher';\nimport { ColumnFieldFactory } from '../field/colum-field.factory';\nimport { ColumnFieldId } from '../field/column-field.id';\nimport { ColumnConfig } from '../../../column.config';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class CompositionFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher,\n\t\t\t\tprivate readonly columnFieldFactory: ColumnFieldFactory) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\t// TODO Move to different layer\n\t\t\tconst fields = event.getFields(),\n\t\t\t\tcolumnFieldIds = this.convertColumnFieldIds(fields),\n\t\t\t\tcolumns = event.columns,\n\t\t\t\tparams = this.convertColumns(columns, fields, columnFieldIds);\n\n\t\t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t\t}\n\t}\n\n\tprivate convertColumnFieldIds(fields: Array<Field>): Array<ColumnFieldId> {\n\n\t\tif (!fields) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn fields.map((field: Field) => new ColumnFieldId(field.getId().getId()));\n\t}\n\n\tprivate convertColumns(columns: Array<ColumnConfig>, fields: Array<Field>, columnFieldIds: Array<ColumnFieldId>): Array<ColumnParams> {\n\n\t\tif (!columns) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn columns.map((column: ColumnConfig, index: number) => {\n\n\t\t\tconst columnFieldId = columnFieldIds[index],\n\t\t\t\tfield = fields[index];\n\n\t\t\tconst columnField = this.columnFieldFactory.create(columnFieldId, field.getAccessorMethod(), field.getDataType());\n\n\t\t\treturn new ColumnParams(column, columnField);\n\t\t});\n\n\t}\n\n\t// handle(event: DomainEvent): void {\n\t//\n\t// \tif (event instanceof FieldsInitedEvent) {\n\t//\n\t// \t\t// TODO Move to different layer\n\t// \t\tlet fields = event.getFields();\n\t//\n\t// \t\tif (!!fields) {\n\t// \t\t\tfields = [];\n\t// \t\t}\n\t// \t\tconst columnFieldIds = fields.map((field: Field) => new ColumnFieldId(field.getId().getId()));\n\t//\n\t// \t\tlet columns = event.columns || [];\n\t//\n\t// \t\tconst params = columns.map((column: ColumnConfig, index: number) => {\n\t// \t\t\tconst columnField = new ColumnField(columnFieldIds[index], fields[index].getAccessorMethod());\n\t//\n\t// \t\t\treturn new ColumnParams(column, columnField);\n\t// \t\t});\n\t//\n\t// \t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t// \t}\n\t// }\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryCompositionCommandProviders, inMemoryCompositionProviders,\n\tinMemoryCompositionQueryProviders\n} from '../../infrastructure/in-memory/composition/in-memory.composition.providers';\nimport { CompositionAggregateFactory } from '../../domain/composition/command/composition.aggregate-factory';\nimport { CompositionDispatcher } from '../../domain/composition/command/composition.dispatcher';\nimport { InitCompositionCommandHandler } from '../../domain/composition/command/init/init-composition.command-handler';\nimport { SetColumnsCommandHandler } from '../../domain/composition/command/column/set-columns/set-columns.command-handler';\nimport { SetCompositionWidthCommandHandler } from '../../domain/composition/command/width/set-width/set-composition-width.command-handler';\nimport { SetCompositionResizeWidthCommandHandler } from '../../domain/composition/command/width/resize-width/set-composition-resize-width.command-handler';\nimport { SetCompositionContainerWidthCommandHandler } from '../../domain/composition/command/width/set-container-width/set-composition-container-width.command-handler';\nimport { CompositionChangeSortStatusCommandHandler } from '../../domain/composition/command/sort/composition-change-sort-status.command-handler';\nimport { ColumnEntityFactory } from '../../domain/composition/command/column/column-entity.factory';\nimport { CompositionEventConverter } from '../../domain/composition/command/composition-event.converter';\nimport { ColumnFieldFactory } from '../../domain/composition/command/column/field/colum-field.factory';\nimport { CompositionEventService } from './composition.event-service';\nimport { CompositionReadModelService } from './composition-read-model.service';\nimport { CompositionCommandService } from './composition.command-service';\nimport { CompositionConverter } from '../../domain/composition/composition.converter';\nimport { EditTemplateRepository } from '../../domain/composition/read/edit/edit-template.repository';\nimport { EditTemplateFactory } from '../../domain/composition/read/edit/edit-template.factory';\nimport { ViewTemplateFactory } from '../../domain/composition/read/view/view-template.factory';\nimport { ViewTemplateRepository } from '../../domain/composition/read/view/view-template.repository';\nimport { ColumnDefinitionFactory } from '../../domain/composition/read/definition/column-definition.factory';\nimport { CompositionChangeSortStatusEventHandler } from '../../domain/composition/command/sort/composition-change-sort-status.event-handler';\nimport { CompositionFieldsInitedEventHandler } from '../../domain/composition/command/column/set-columns/composition-fields-inited.event-handler';\n\n\nconst commandProviders = [\n\t...inMemoryCompositionCommandProviders,\n\tCompositionDispatcher,\n\tCompositionAggregateFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitCompositionCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetColumnsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionResizeWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionContainerWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusCommandHandler,\n\t\tmulti: true\n\t},\n\tColumnEntityFactory,\n\tCompositionEventConverter,\n\tColumnFieldFactory\n];\n\nconst readProviders = [\n\t...inMemoryCompositionQueryProviders,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionFieldsInitedEventHandler,\n\t\tmulti: true\n\t}, \t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusEventHandler,\n\t\tmulti: true\n\t},\n\tColumnDefinitionFactory,\n\tViewTemplateRepository,\n\tViewTemplateFactory,\n\tEditTemplateFactory,\n\tEditTemplateRepository\n];\n\nexport const compositionProviders = [\n\t...inMemoryCompositionProviders,\n\t...commandProviders,\n\t...readProviders,\n\n\tCompositionConverter,\n\n\tCompositionCommandService,\n\tCompositionReadModelService,\n\tCompositionEventService\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport {\n\tFabricButtonComponent,\n\tFabricButtonModule,\n\tFabricCheckboxComponent,\n\tFabricCheckboxModule,\n\tFabricChipComponent,\n\tFabricChipModule,\n\tFabricInputComponent,\n\tFabricInputModule\n} from '@generic-ui/fabric';\nimport { ViewTemplatesComponent } from '../../domain/composition/read/view/view-templates.component';\nimport { NumberEditTemplateComponent } from '../../domain/composition/read/edit/template/number-edit-template.component';\nimport { StringEditTemplateComponent } from '../../domain/composition/read/edit/template/string-edit-template.component';\nimport { EditTemplatesComponent } from '../../domain/composition/read/edit/edit-templates.component';\nimport { BooleanEditTemplateComponent } from '../../domain/composition/read/edit/template/boolean-edit-template.component';\nimport { ColumnQueryComponent } from '../../ui/composition/column-query.component';\nimport { FunctionViewComponent } from '../../domain/composition/read/view/function-view.component';\nimport { compositionProviders } from './composition.providers';\n\n\nconst components = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tStringEditTemplateComponent,\n\tNumberEditTemplateComponent,\n\tBooleanEditTemplateComponent,\n\tColumnQueryComponent,\n\tFunctionViewComponent\n];\n\nconst exportDeclarations = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tColumnQueryComponent,\n\n\tFabricChipModule,\n\tFabricCheckboxModule,\n\tFabricButtonModule,\n\tFabricInputModule,\n\tFunctionViewComponent\n];\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tReactiveFormsModule,\n\n\t\tFabricChipModule,\n\t\tFabricCheckboxModule,\n\t\tFabricButtonModule,\n\t\tFabricInputModule\n\t],\n\tproviders: [\n\t\t...compositionProviders\n\t],\n\tdeclarations: [\n\t\tcomponents\n\t],\n\texports: exportDeclarations,\n\tentryComponents: [\n\t\tViewTemplatesComponent,\n\t\tEditTemplatesComponent,\n\t\tFabricChipComponent,\n\t\tFabricCheckboxComponent,\n\t\tFabricButtonComponent,\n\t\tFabricInputComponent\n\t]\n})\nexport class CompositionModule {\n\n}\n","export class StructureIdGenerator {\n\n\tprivate increment = 0;\n\n\tgenerateId(): number {\n\t\tthis.increment++;\n\t\treturn this.increment;\n\t}\n\n}\n","export abstract class Logger {\n\n\tabstract warn(text: string): void;\n\n\tabstract error(text: string): void;\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class PageChangedAggregateEvent extends AggregateEvent{\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PageChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class PagesizeChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PagesizeChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\nimport { PagingConfigWithId } from '../paging-config-with-id';\nimport { PagingConfig } from '../paging-config';\nimport { PageChangedAggregateEvent } from './page/page-changed.aggregate-event';\nimport { StructureId } from '../../structure-id';\nimport { PagesizeChangedAggregateEvent } from './pagesize/pagesize-changed.aggregate-event';\n\n\n\n// Aggregate\nexport class PagingAggregate {\n\n\tprivate readonly events: Array<AggregateEvent> = [];\n\n\t// TODO Remove\n\tstatic default(logger: Logger) {\n\t\treturn new PagingAggregate(\n\t\t\tfalse,\n\t\t\t1,\n\t\t\t25,\n\t\t\t[10, 25, 50, 100],\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\t0,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tprivate readonly logger: Logger;\n\n\tprivate constructor(private enabled: boolean,\n\t\t\t\t\t\tprivate page: number,\n\t\t\t\t\t\tprivate pageSize: number,\n\t\t\t\t\t\tprivate pageSizes: Array<number>,\n\t\t\t\t\t\tprivate pagerTop: boolean,\n\t\t\t\t\t\tprivate pagerBottom: boolean,\n\t\t\t\t\t\tprivate sourceSize: number,\n\t\t\t\t\t\tlogger: Logger) {\n\t\tthis.logger = logger;\n\t}\n\n\t// TODO Remove\n\tstatic fromConfig(paging: PagingConfigWithId, logger: Logger): PagingAggregate {\n\n\t\tconst defaultPagingDefinition = PagingAggregate.default(logger),\n\t\t\tenabled = paging.enabled || defaultPagingDefinition.isEnabled(),\n\t\t\tpage = paging.page || defaultPagingDefinition.getPage(),\n\t\t\tpageSize = paging.pageSize || defaultPagingDefinition.getPageSize(),\n\t\t\tpageSizes = paging.pageSizes || defaultPagingDefinition.getPageSizes(),\n\t\t\tpagerTop = paging.pagerTop || defaultPagingDefinition.isPagerTop(),\n\t\t\tpagerBottom = paging.pagerBottom || defaultPagingDefinition.isPagerBottom();\n\n\t\treturn new PagingAggregate(\n\t\t\tenabled,\n\t\t\tpage,\n\t\t\tpageSize,\n\t\t\tpageSizes,\n\t\t\tpagerTop,\n\t\t\tpagerBottom,\n\t\t\t0,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn !this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerBottom;\n\t}\n\n\tgetSourceSize(): number {\n\t\treturn this.sourceSize;\n\t}\n\n\tchange(pagingConfig: PagingConfig): void {\n\n\t\tif (pagingConfig.enabled !== undefined) {\n\t\t\tthis.enabled = pagingConfig.enabled;\n\t\t}\n\n\t\tif (pagingConfig.page !== undefined) {\n\t\t\tthis.page = pagingConfig.page;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSize !== undefined) {\n\t\t\tthis.pageSize = pagingConfig.pageSize;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSizes !== undefined) {\n\t\t\tthis.pageSizes = pagingConfig.pageSizes;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerTop !== undefined) {\n\t\t\tthis.pagerTop = pagingConfig.pagerTop;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerBottom !== undefined) {\n\t\t\tthis.pagerBottom = pagingConfig.pagerBottom;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.enabled === true &&\n\t\t\tpagingConfig.pagerTop === false &&\n\t\t\tpagingConfig.pagerBottom === false) {\n\t\t\tthis.pagerBottom = true;\n\n\t\t\tthis.logger.warn('Pagers cannot be turn off when paging is enabled.');\n\t\t}\n\n\t}\n\n\tsetSourceSize(size: number): void {\n\t\tthis.sourceSize = size;\n\t}\n\n\tnextPage(): void {\n\t\tlet nextPage = this.page;\n\n\t\tif (!this.isNextPageDisabled()) {\n\t\t\tnextPage += 1;\n\t\t}\n\n\t\tthis.page = nextPage;\n\t}\n\n\tprevPage(): void {\n\t\tlet prevPage = this.page;\n\n\t\tif (!this.isPrevPageDisabled()) {\n\t\t\tprevPage -= 1;\n\t\t}\n\n\t\tthis.page = prevPage;\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tif (this.pageSizes.find((ps: number) => ps === pageSize)) {\n\n\t\t\tthis.setPage(1);\n\t\t\tthis.setPageSize(pageSize);\n\t\t}\n\n\t\treturn this.events;\n\t}\n\n\tisNextPageDisabled(): boolean {\n\n\t\tif (this.sourceSize === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.page === Math.ceil(this.sourceSize / this.pageSize);\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.page === 1;\n\t}\n\n\tcalculateStart(): number {\n\n\t\tconst firstItem = 1 + ((this.page - 1) * this.pageSize);\n\n\t\tif (this.sourceSize < firstItem) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn firstItem;\n\t}\n\n\tcalculateEnd(): number {\n\n\t\tconst lastItem = this.page * this.pageSize;\n\n\t\tif (this.sourceSize < lastItem) {\n\t\t\treturn this.sourceSize;\n\t\t}\n\n\t\treturn lastItem;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tif (this.isDisabled()) {\n\t\t\treturn source;\n\t\t}\n\n\t\tlet start = this.calculateStart();\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.calculateEnd());\n\t}\n\n\tprivate setPage(page: number): void {\n\t\tthis.page = page;\n\t\tthis.events.push(new PageChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n\tprivate setPageSize(pageSize: number): void {\n\t\tthis.pageSize = pageSize;\n\t\tthis.events.push(new PagesizeChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\n\nimport { PagingAggregate } from './paging.aggregate';\nimport { PagingConfigWithId } from '../paging-config-with-id';\n\n\n@Injectable()\nexport class PagingAggregateFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreateDefault(): PagingAggregate {\n\t\treturn PagingAggregate.default(this.logger);\n\t}\n\n\tcreateFromConfig(config: PagingConfigWithId): PagingAggregate {\n\t\treturn PagingAggregate.fromConfig(config, this.logger);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { PagingCommandService } from '../../../ui-api/paging/paging-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingAggregateFactory } from '../../../domain/paging/command/paging.aggregate-factory';\nimport { PagingDispatcher } from '../../../domain/paging/command/paging.dispatcher';\nimport { PagingConfig } from '../../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class LocalPagingCommandService extends PagingCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tprivate aggregateFactory: PagingAggregateFactory,\n\t\t\t\tpagingDispatcher: PagingDispatcher) {\n\t\tsuper(pagingDispatcher);\n\t}\n\n\tsetDefaultPaging(): void {\n\n\t\tconst defaultPaggingAggregate = this.aggregateFactory.createDefault();\n\n\t\tsuper.setPaging({\n\t\t\tpage: defaultPaggingAggregate.getPage(),\n\t\t\tpageSize: defaultPaggingAggregate.getPageSize(),\n\t\t\tpageSizes: defaultPaggingAggregate.getPageSizes()\n\t\t}, this.structureId);\n\t}\n\n\t@Override\n\tsetPaging(paging: PagingConfig): void {\n\t\tsuper.setPaging(paging, this.structureId);\n\t}\n\n\t@Override\n\tchangePageSize(pageSize: number): void {\n\t\tsuper.changePageSize(pageSize, this.structureId);\n\t}\n\n\t@Override\n\tnextPage(): void {\n\t\tsuper.nextPage(this.structureId);\n\t}\n\n\t@Override\n\tprevPage(): void {\n\t\tsuper.prevPage(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PagingReadModelService } from '../../../ui-api/paging/paging-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingRepository } from '../../../domain/paging/read/paging.repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n\n@Injectable()\nexport class LocalPagingReadModelService extends PagingReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tpagingRepository: PagingRepository) {\n\t\tsuper(pagingRepository);\n\t}\n\n\t@Override\n\tonPaging(): Observable<Paging> {\n\t\treturn super.onPaging(this.structureId);\n\t}\n\n\t@Override\n\tonSinglePaging(): Observable<Paging> {\n\t\treturn super.onPaging(this.structureId)\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttake(1)\n\t\t\t\t\t);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetSchemaCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly height: number) {\n\t\tsuper(structureId, 'SetSchemaCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaVerticalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaVerticalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaHorizontalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaHorizontalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\nimport { SchemaTheme } from '../../schema-theme';\n\nexport class SetSchemaThemeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly theme: SchemaTheme) {\n\t\tsuper(structureId, 'SetSchemaThemeCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SchemaRowColoring } from '../../../schema-row-coloring';\n\nexport class SetRowColoringCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly coloring: SchemaRowColoring) {\n\t\tsuper(structureId, 'SetRowColoringCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaTopHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaTopHeaderCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaBottomHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaBottomHeaderCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SetSchemaCommand } from './set/set-schema.command';\nimport { SetSchemaVerticalGridCommand } from './grid/vertical/set-schema-vertical-grid.command';\nimport { SetSchemaHorizontalGridCommand } from './grid/horizontal/set-schema-horizontal-grid.command';\nimport { SchemaTheme } from '../schema-theme';\nimport { SetSchemaThemeCommand } from './theme/set-schema-theme.command';\nimport { globalStructureId } from '../../global-structure-id';\nimport { SchemaRowColoring } from '../schema-row-coloring';\nimport { SetRowColoringCommand } from './coloring/set/set-row-coloring.command';\nimport { ChangeSchemaTopHeaderCommand } from './column-header/top/change-schema-top-header.command';\nimport { ChangeSchemaBottomHeaderCommand } from './column-header/bottom/change-schema-bottom-header.command';\n\n\n@Injectable()\nexport class SchemaDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetSchema(structureId: StructureId, height: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaCommand(structureId, height));\n\t}\n\n\tchangeVerticalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaVerticalGridCommand(structureId, enabled));\n\t}\n\n\tchangeHorizontalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaHorizontalGridCommand(structureId, enabled));\n\t}\n\n\tsetTheme(structureId: StructureId, theme: SchemaTheme): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaThemeCommand(structureId, theme));\n\t}\n\n\tsetRowColoring(structureId: StructureId = globalStructureId, coloring: SchemaRowColoring): void {\n\t\tthis.commandDispatcher.dispatch(new SetRowColoringCommand(structureId, coloring));\n\t}\n\n\tchangeTopHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaTopHeaderCommand(structureId, enabled));\n\t}\n\n\tchangeBottomHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaBottomHeaderCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from './schema';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class SchemaRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\ton(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { SchemaRepository } from '../../domain/schema/read/schema-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Schema } from '../../domain/schema/read/schema';\nimport { SchemaColumnHeader } from '../../domain/schema/read/schema-column-header';\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\n\n\n@Injectable()\nexport class SchemaReadModelService {\n\n\tconstructor(private schemaRepository: SchemaRepository) {\n\t}\n\n\tonSchema(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.schemaRepository.on(structureId);\n\t}\n\n\tonSingleSchema(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.onSchema(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tonHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .on(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tonContainerHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .on(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getContainerHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tonCssClasses(structureId: StructureId = globalStructureId): Observable<SchemaCssClass> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .on(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getCssClasses();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .on(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getColumnHeader();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, map, take, takeUntil } from 'rxjs/operators';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SchemaReadModelService } from './schema-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\nimport { SchemaColumnHeader } from '../../domain/schema/read/schema-column-header';\n\n\n@Injectable()\nexport class SchemaCommandService implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject<void>();\n\n\tconstructor(private schemaDispatcher: SchemaDispatcher,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService) {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete()\n\t}\n\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tsetHeight(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tchangeVerticalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeVerticalGrid(structureId, enabled);\n\t}\n\n\tchangeHorizontalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeHorizontalGrid(structureId, enabled);\n\t}\n\n\tsetTheme(theme: SchemaTheme, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setTheme(structureId, theme);\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setRowColoring(structureId, coloring);\n\t}\n\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeTopHeader(structureId, enabled);\n\t}\n\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeBottomHeader(structureId, enabled);\n\t}\n\n\ttoggleVerticalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.verticalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeVerticalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleHorizontalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.horizontalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeHorizontalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleTopHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isTopHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeTopHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n\ttoggleBottomHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isBottomHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeBottomHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n}\n","export enum SchemaRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaCommandService } from '../../../ui-api/schema/schema-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaReadModelService } from '../../../ui-api/schema/schema-read-model.service';\nimport { SchemaDispatcher } from '../../../domain/schema/command/schema.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaTheme } from '../../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class LocalSchemaCommandService extends SchemaCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaQueryService: SchemaReadModelService,\n\t\t\t\tschemaDispatcher: SchemaDispatcher) {\n\t\tsuper(schemaDispatcher, schemaQueryService);\n\t}\n\n\tsetDefaultSchema(): void {\n\t\tsuper.setSchema(Number.MAX_SAFE_INTEGER, this.structureId);\n\t}\n\n\t@Override\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSchema(height, this.structureId);\n\t}\n\n\t@Override\n\tsetHeight(height: number): void {\n\t\tsuper.setHeight(height, this.structureId);\n\t}\n\n\t@Override\n\tchangeVerticalGrid(enabled: boolean): void {\n\t\tsuper.changeVerticalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeHorizontalGrid(enabled: boolean): void {\n\t\tsuper.changeHorizontalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleVerticalGrid(): void {\n\t\tsuper.toggleVerticalGrid(this.structureId);\n\t}\n\n\t@Override\n\ttoggleHorizontalGrid(): void {\n\t\tsuper.toggleHorizontalGrid(this.structureId);\n\t}\n\n\t@Override\n\tsetTheme(theme: SchemaTheme): void {\n\t\tsuper.setTheme(theme, this.structureId);\n\t}\n\n\t@Override\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setRowColoring(coloring, this.structureId);\n\t}\n\n\t@Override\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeTopHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeBottomHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleTopHeader(): void {\n\t\tsuper.toggleTopHeader(this.structureId);\n\t}\n\n\t@Override\n\ttoggleBottomHeader(): void {\n\t\tsuper.toggleBottomHeader(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SchemaReadModelService } from '../../../ui-api/schema/schema-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaRepository } from '../../../domain/schema/read/schema-repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Schema } from '../../../domain/schema/read/schema';\nimport { SchemaCssClass } from '../../../domain/schema/read/schema-css-class';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaColumnHeader } from '../../../domain/schema/read/schema-column-header';\n\n\n\n@Injectable()\nexport class LocalSchemaReadModelService extends SchemaReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaRepository: SchemaRepository) {\n\t\tsuper(schemaRepository);\n\t}\n\n\t@Override\n\tonSchema(): Observable<Schema> {\n\t\treturn super.onSchema(this.structureId);\n\t}\n\n\t@Override\n\tonHeight(): Observable<number> {\n\t\treturn super.onHeight(this.structureId);\n\t}\n\n\t@Override\n\tonContainerHeight(): Observable<number> {\n\t\treturn super.onContainerHeight(this.structureId);\n\t}\n\n\t@Override\n\tonSingleSchema(): Observable<Schema> {\n\t\treturn super.onSingleSchema(this.structureId);\n\t}\n\n\t@Override\n\tonCssClasses(): Observable<SchemaCssClass> {\n\t\treturn super.onCssClasses(this.structureId);\n\t}\n\n\t@Override\n\tonColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn super.onColumnHeader(this.structureId);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetFormationCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload?: any) {\n\t\tsuper(structureId, 'SetFormationCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class ToggleSelectedRowCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly selectedRow: string) {\n\t\tsuper(structureId, 'ToggleSelectedRowCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../structure-id';\nimport { SetFormationCommand } from './set/set-formation.command';\nimport { ToggleSelectedRowCommand } from './toggle/toggle-selected-row.command';\n\n@Injectable()\nexport class FormationDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetDefault(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetFormationCommand(structureId));\n\t}\n\n\ttoggleSelectedRow(structureId: StructureId, selectedRow: string): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSelectedRowCommand(structureId, selectedRow));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\n\n\n@Injectable()\nexport class FormationCommandService {\n\n\tconstructor(private formationDispatcher: FormationDispatcher) {\n\t}\n\n\tsetDefaultFormation(structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.setDefault(structureId);\n\t}\n\n\ttoggleSelectedRow(selectedRow: string, structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.toggleSelectedRow(structureId, selectedRow);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { FormationCommandService } from '../../../ui-api/formation/formation-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationDispatcher } from '../../../domain/formation/command/formation.dispatcher';\n\n\n@Injectable()\nexport class LocalFormationCommandService extends FormationCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationDispatcher: FormationDispatcher) {\n\t\tsuper(formationDispatcher);\n\t}\n\n\tsetDefault(): void {\n\t\tsuper.setDefaultFormation(this.structureId);\n\t}\n\n\t@Override\n\ttoggleSelectedRow(selectedRow: string): void {\n\t\tsuper.toggleSelectedRow(selectedRow, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Formation } from './formation';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class FormationRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tonFormation(structureId: StructureId): Observable<Formation> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getFormation())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { FormationRepository } from '../../domain/formation/read/formation-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SelectedRowsList } from '../../domain/formation/read/selected-rows/selected-rows-list';\nimport { Formation } from '../../domain/formation/read/formation';\n\n\n@Injectable()\nexport class FormationReadModelService {\n\n\tconstructor(private formationRepository: FormationRepository) {\n\t}\n\n\tonSelectedRows(structureId: StructureId = globalStructureId): Observable<SelectedRowsList> {\n\t\treturn this.formationRepository\n\t\t\t\t   .onFormation(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((formation: Formation) => formation.getSelectedRows())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationReadModelService } from '../../../ui-api/formation/formation-read-model.service';\nimport { FormationRepository } from '../../../domain/formation/read/formation-repository';\nimport { SelectedRowsList } from '../../../domain/formation/read/selected-rows/selected-rows-list';\n\n\n@Injectable()\nexport class LocalFormationReadModelService extends FormationReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationRepository: FormationRepository) {\n\t\tsuper(formationRepository);\n\t}\n\n\t@Override\n\tonSelectedRows(): Observable<SelectedRowsList> {\n\t\treturn super.onSelectedRows(this.structureId);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FilterConfig } from '../../../../../ui-api/structure/filter/filter-config';\n\nexport class StructureSetConfigFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly filterConfig: FilterConfig) {\n\t\tsuper(structureId, 'StructureSetConfigFilterCommand');\n\t}\n\n\tgetConfig(): FilterConfig {\n\t\treturn this.filterConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class StructureToggleFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly fieldId: FieldId,\n\t\t\t\tpublic readonly externalFilterId: string,\n\t\t\t\tpublic readonly filterValue: string) {\n\t\tsuper(structureId, 'StructureToggleFilterCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { FilterConfig } from './filter-config';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetConfigFilterCommand } from '../../../domain/structure/command/filter/config/structure.set-config-filter.command';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { StructureToggleFilterCommand } from '../../../domain/structure/command/filter/toggle/structure.toggle-filter.command';\n\n\n@Injectable()\nexport class StructureFilterCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {}\n\n\tsetFilteringEnabled(config: FilterConfig, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigFilterCommand(structureId, config));\n\t}\n\n\taddFilter(fieldId: FieldId, externalFieldId: string, filterValue: string, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureToggleFilterCommand(structureId, fieldId, externalFieldId, filterValue));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class SourceSetLoadingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SourceSetLoadingCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetOriginCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly items: Array<any> = []) {\n\t\tsuper(structureId, 'SetOriginCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemParams } from './structure.edit-source-item.params';\nimport { StructureId } from '../../../../structure-id';\n\nexport class StructureEditSourceItemCommand extends Command {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly params: StructureEditSourceItemParams) {\n\t\tsuper(structureId, 'StructureEditSourceItemCommand');\n\t}\n\n\tgetParams(): StructureEditSourceItemParams {\n\t\treturn this.params;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SourceSetLoadingCommand } from './loading/source-set-loading.command';\nimport { SetOriginCommand } from './origin/set-origin/set-origin.command';\nimport { StructureEditSourceItemParams } from './origin/edit/structure.edit-source-item.params';\nimport { StructureEditSourceItemCommand } from './origin/edit/structure.edit-source-item.command';\n\n\n@Injectable()\nexport class SourceDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetLoading(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SourceSetLoadingCommand(structureId, enabled));\n\t}\n\n\tsetOrigin(structureId: StructureId, items: Array<any>): void {\n\t\tthis.commandDispatcher.dispatch(new SetOriginCommand(structureId, items));\n\t}\n\n\teditItem(structureId: StructureId, params: StructureEditSourceItemParams): void {\n\t\tthis.commandDispatcher.dispatch(new StructureEditSourceItemCommand(structureId, params));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class InitStructureCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'InitStructureCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetVerticalScrollEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetVerticalScrollEnabledCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class SetScrollPositionCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly position: number) {\n\t\tsuper(structureId, 'SetScrollPositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SortingConfig } from '../../../../../ui-api/structure/sorting-config';\nimport { SortStatus } from '../../../../composition/command/sort/sort-status';\n\n\nexport class SetSortingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly sortingConfig: SortingConfig) {\n\t\tsuper(structureId, 'SetSortingCommand');\n\t}\n\n\tgetSortingConfig(): SortingConfig {\n\t\treturn this.sortingConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class ToggleSortCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly fieldId: FieldId) {\n\t\tsuper(structureId, 'ToggleSortCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { QuickFiltersConfig } from '../../../../../ui-api/structure/filter/quick-filters.config';\n\n\n\nexport class StructureSetConfigQuickFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly quickFiltersConfig: QuickFiltersConfig) {\n\t\tsuper(structureId, 'StructureSetConfigQuickFilterCommand');\n\t}\n\n\tgetConfig(): QuickFiltersConfig {\n\t\treturn this.quickFiltersConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SearchConfig } from '../../../../../ui-api/structure/search/search-config';\n\n\nexport class StructureSetConfigSearchingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly searchConfig: SearchConfig) {\n\t\tsuper(structureId, 'StructureSetConfigSearchingCommand');\n\t}\n\n\tgetConfig(): SearchConfig {\n\t\treturn this.searchConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\n\n\nexport class InitFieldsCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>) {\n\t\tsuper(structureId, 'InitFieldsCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class StructureSetSearchPhraseCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly phrase: string) {\n\t\tsuper(structureId, 'StructureSetSearchPhraseCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SortStatus } from '../../../../composition/command/sort/sort-status';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { CompositionId } from '../../../../composition/composition-id';\n\n\nexport class SetSortOrderCommand extends Command {\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly fieldId: FieldId,\n\t\t\t\tprivate readonly sortOrder: SortStatus) {\n\t\tsuper(structureId, 'SetSortOrderCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetSortOrder(): SortStatus {\n\t\treturn this.sortOrder;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureFilterCommandService } from './filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { InitStructureCommand } from '../../domain/structure/command/init/init-structure.command';\nimport { SetVerticalScrollEnabledCommand } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command';\nimport { SetScrollPositionCommand } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command';\nimport { SortingConfig } from './sorting-config';\nimport { SetSortingCommand } from '../../domain/structure/command/sort/set-config/set-sorting.command';\nimport { FieldId } from '../../domain/structure/command/field/data-type/field.id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { ToggleSortCommand } from '../../domain/structure/command/sort/toggle/toggle-sort.command';\nimport { FilterConfig } from './filter/filter-config';\nimport { QuickFiltersConfig } from './filter/quick-filters.config';\nimport { StructureSetConfigQuickFilterCommand } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command';\nimport { SearchConfig } from './search/search-config';\nimport { StructureSetConfigSearchingCommand } from '../../domain/structure/command/search/config/structure.set-config-searching.command';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { InitFieldsCommand } from '../../domain/structure/command/field/init/init-fields.command';\nimport { StructureSetSearchPhraseCommand } from '../../domain/structure/command/search/set/structure.set-search-phrase.command';\nimport { SortStatus } from '../../domain/composition/command/sort/sort-status';\nimport { SetSortOrderCommand } from '../../domain/structure/command/sort/order/set-sort-order.command';\n\n\n@Injectable()\nexport class StructureCommandService {\n\n\tconstructor(private readonly commandDispatcher: CommandDispatcher,\n\t\t\t\tprivate readonly structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate readonly sourceDispatcher: SourceDispatcher) {\n\t}\n\n\tinit(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitStructureCommand(structureId));\n\t}\n\n\tenableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, true));\n\t}\n\n\tdisableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, false));\n\t}\n\n\tsetScrollPosition(position: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetScrollPositionCommand(structureId, position));\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetSortingCommand(structureId, config));\n\t}\n\n\ttoggleSort(fieldId: FieldId, compositionId?: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSortCommand(structureId, compositionId, fieldId));\n\t}\n\n\tsetSortOrder(fieldId: FieldId, sortOrder: SortStatus, compositionId?: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetSortOrderCommand(structureId, compositionId, fieldId, sortOrder));\n\t}\n\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.structureFilterCommandService.setFilteringEnabled(config, structureId);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigQuickFilterCommand(structureId, config));\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>, compositionId: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitFieldsCommand(structureId, compositionId, columns));\n\t}\n\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigSearchingCommand(structureId, config));\n\t}\n\n\tsearch(phrase: string, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetSearchPhraseCommand(structureId, phrase));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\nimport { ColumnConfig } from '../../../domain/composition/column.config';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\n\n\n@Injectable()\nexport class LocalStructureCommandService extends StructureCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tcommandDispatcher: CommandDispatcher,\n\t\t\t\tstructureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tsourceDispatcher: SourceDispatcher) {\n\t\tsuper(commandDispatcher, structureFilterCommandService, sourceDispatcher);\n\t}\n\n\t@Override\n\tinit(): void {\n\t\tsuper.init(this.structureId);\n\t}\n\n\t@Override\n\tenableVerticalScroll(): void {\n\t\tsuper.enableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tdisableVerticalScroll(): void {\n\t\tsuper.disableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetScrollPosition(position: number): void {\n\t\tsuper.setScrollPosition(position, this.structureId);\n\t}\n\n\t@Override\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSortingConfig(config, this.structureId);\n\t}\n\n\t@Override\n\ttoggleSort(fieldId: FieldId): void {\n\t\tsuper.toggleSort(fieldId, this.compositionId, this.structureId);\n\t}\n\n\t@Override\n\tsetSortOrder(fieldId: FieldId, sortOrder: SortStatus): void {\n\t\tsuper.setSortOrder(fieldId, sortOrder, this.compositionId, this.structureId);\n\t}\n\n\t@Override\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setFilterConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setQuickFiltersConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSearchingConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tinitFields(columns: Array<ColumnConfig>): void {\n\t\tsuper.initFields(columns, this.compositionId, this.structureId);\n\t}\n\n\t@Override\n\tsearch(phrase: string): void {\n\t\tsuper.search(phrase, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../domain/structure/read/structure.repository';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Structure } from '../../domain/structure/read/structure';\n\n\n@Injectable()\nexport class StructureReadModelService {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tonStructure(aggregateId: AggregateId = globalStructureId): Observable<Structure> {\n\t\treturn this.structureRepository.onStructure(aggregateId);\n\t}\n\n\tonVerticalScrollEnabled(aggregateId: AggregateId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(aggregateId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.isVerticalScrollEnabled()),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureReadModelService } from '../../../ui-api/structure/structure-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { Structure } from '../../../domain/structure/read/structure';\n\n\n@Injectable()\nexport class LocalStructureReadModelService extends StructureReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository) {\n\t\tsuper(structureRepository);\n\t}\n\n\t@Override\n\tonStructure(): Observable<Structure> {\n\t\treturn super.onStructure(this.structureId);\n\t}\n\n\t@Override\n\tonVerticalScrollEnabled(): Observable<boolean> {\n\t\treturn super.onVerticalScrollEnabled(this.structureId)\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateArchive } from '@generic-ui/hermes';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n\n@Injectable()\nexport class StructureFieldUiArchive extends AggregateArchive<Array<StructureFieldUiModel>> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiRepository {\n\n\tconstructor(private structureFieldUiArchive: StructureFieldUiArchive) {\n\t}\n\n\tonFields(structureId: StructureId): Observable<Array<StructureFieldUiModel>> {\n\t\treturn this.structureFieldUiArchive.when(structureId);\n\t}\n\n}\n","import { ColumnFieldId } from '../../../../composition/command/column/field/column-field.id';\n\nexport class StructureEditSourceItemParams {\n\n\tconstructor(private readonly itemId: string,\n\t\t\t\tprivate readonly columnFieldId: ColumnFieldId, // TODO Rethink\n\t\t\t\tprivate readonly value: any) {}\n\n\tgetItemId(): string {\n\t\treturn this.itemId;\n\t}\n\n\tgetColumnFieldId(): ColumnFieldId {\n\t\treturn this.columnFieldId;\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { zip } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { Reactive } from '../../../../common/cdk/reactive';\n\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../structure/field/structure.field.ui-repository';\nimport { SourceReadModelService } from './source-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { StructureEditSourceItemParams } from '../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n\n@Injectable()\nexport class SourceCommandService extends Reactive {\n\n\tconstructor(private sourceDispatcher: SourceDispatcher,\n\t\t\t\tprivate structureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService) {\n\t\tsuper();\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetLoading(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setLoading(structureId, enabled);\n\t}\n\n\teditItem(params: StructureEditSourceItemParams, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.editItem(structureId, params);\n\t}\n\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any, structureId: StructureId = globalStructureId): void {\n\n\t\tconst itemId$ = this.sourceQueryService\n\t\t\t\t\t\t\t.onSingleEntities()\n\t\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\t\tmap((entities: Array<ItemEntity>) => {\n\t\t\t\t\t\t\t\t\treturn entities[itemIndex].getId();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\n\t\tconst fieldId$ = this.structureFieldUiRepository\n\t\t\t\t\t\t\t .onFields(structureId);\n\n\t\tzip(itemId$, fieldId$)\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((array: Array<any>) => {\n\n\t\t\t\tconst itemId = array[0],\n\t\t\t\t\tfields = array[1];\n\n\t\t\t\tthis.editItem(\n\t\t\t\t\tnew StructureEditSourceItemParams(itemId, fields[fieldIndex], value),\n\t\t\t\t\tstructureId\n\t\t\t\t);\n\t\t\t});\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceCommandService } from '../../../ui-api/source/source-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../../../ui-api/structure/field/structure.field.ui-repository';\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\n\n\n@Injectable()\nexport class LocalSourceCommandService extends SourceCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tsourceDispatcher: SourceDispatcher,\n\t\t\t\tstructureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tsourceQueryService: SourceReadModelService) {\n\t\tsuper(sourceDispatcher, structureFieldUiRepository, sourceQueryService);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetLoading(enabled: boolean): void {\n\t\tsuper.setLoading(enabled, this.structureId);\n\t}\n\n\t@Override\n\teditItem(params: StructureEditSourceItemParams): void {\n\t\tsuper.editItem(params, this.structureId);\n\t}\n\n\t@Override\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any): void {\n\t\tsuper.editItemByIndex(itemIndex, fieldIndex, value, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { StructureSourceOriginRepository } from '../../../domain/source/read/origin/structure.source-origin.repository';\nimport { ItemEntity } from '../../../domain/source/item.entity';\nimport { StructurePreparedItemsRepository } from '../../../domain/source/read/prepared/structure.prepared-items.repository';\n\n\n@Injectable()\nexport class LocalSourceReadModelService extends SourceReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository,\n\t\t\t\tstructurePreparedItemsRepository: StructurePreparedItemsRepository,\n\t\t\t\tstructureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper(structureRepository, structurePreparedItemsRepository, structureSourceOriginRepository);\n\t}\n\n\t@Override\n\tonEntities(): Observable<Array<ItemEntity>> {\n\t\treturn super.onEntities(this.structureId);\n\t}\n\n\t@Override\n\tonEntitiesSize(): Observable<number> {\n\t\treturn super.onEntitiesSize(this.structureId);\n\t}\n\n\t@Override\n\tonOriginSize(): Observable<number> {\n\t\treturn super.onOriginSize(this.structureId);\n\t}\n\n\t@Override\n\tonSingleEntities(): Observable<Array<ItemEntity>> {\n\t\treturn super.onSingleEntities(this.structureId);\n\t}\n\n\t@Override\n\tonLoading(): Observable<boolean> {\n\t\treturn super.onLoading(this.structureId);\n\t}\n\n\t@Override\n\tonPreparedEntities(): Observable<boolean> {\n\t\treturn super.onPreparedEntities(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionCommandService } from '../../../ui-api/composition/composition.command-service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionDispatcher } from '../../../domain/composition/command/composition.dispatcher';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../../domain/composition/command/column/set-columns/column.params';\n\n\n@Injectable()\nexport class LocalCompositionCommandService extends CompositionCommandService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionDispatcher: CompositionDispatcher) {\n\t\tsuper(compositionDispatcher);\n\t}\n\n\t@Override\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.init(this.compositionId);\n\t}\n\n\t@Override\n\tsetColumns(params: Array<ColumnParams>): void {\n\t\tsuper.setColumns(params, this.compositionId);\n\t}\n\n\t@Override\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setContainerWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setResizeWidth(enabled, this.compositionId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionReadModelService } from '../../../ui-api/composition/composition-read-model.service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionRepository } from '../../../domain/composition/read/composition.repository';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\n\n\n@Injectable()\nexport class LocalCompositionReadModelService extends CompositionReadModelService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionRepository: CompositionRepository) {\n\t\tsuper(compositionRepository);\n\t}\n\n\t@Override\n\tonHeaderColumns(): Observable<Array<CellTemplateWithContext>> {\n\t\treturn super.onHeaderColumns(this.compositionId);\n\t}\n\n\t@Override\n\tonSortOrder(fieldId: FieldId): Observable<SortStatus> {\n\t\treturn super.onSortOrder(fieldId, this.compositionId);\n\t}\n\n\t@Override\n\tonTemplateColumns(): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn super.onTemplateColumns(this.compositionId);\n\t}\n\n\t@Override\n\tonWidthForEachColumn(): Observable<Array<number>> {\n\t\treturn super.onWidthForEachColumn(this.compositionId);\n\t}\n\n\t@Override\n\tonWidth(): Observable<number> {\n\t\treturn super.onWidth(this.compositionId);\n\t}\n\n\t@Override\n\tonContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn super.onContainerWidth(this.compositionId);\n\t}\n\n\t@Override\n\tonResizeWidth(): Observable<boolean> {\n\t\treturn super.onResizeWidth(this.compositionId);\n\t}\n\n}\n","import { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { LocalPagingCommandService } from './paging/local-paging-command.service';\nimport { LocalPagingReadModelService } from './paging/local-paging-read-model.service';\nimport { SchemaCommandService } from '../../ui-api/schema/schema-command.service';\nimport { LocalSchemaCommandService } from './schema/local-schema-command.service';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { LocalSchemaReadModelService } from './schema/local-schema-read-model.service';\nimport { FormationCommandService } from '../../ui-api/formation/formation-command.service';\nimport { LocalFormationCommandService } from './formation/local-formation-command.service';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { LocalFormationReadModelService } from './formation/local-formation-read-model.service';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { LocalStructureCommandService } from './structure/local-structure-command.service';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { LocalStructureReadModelService } from './structure/local-structure-read-model.service';\nimport { SourceCommandService } from '../../ui-api/source/source-command.service';\nimport { LocalSourceCommandService } from './source/local-source-command.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\nimport { LocalSourceReadModelService } from './source/local-source-read-model.service';\nimport { LocalCompositionCommandService } from './composition/local-composition-command.service';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\nimport { LocalCompositionReadModelService } from './composition/local-composition-read-model.service';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\n\nexport const localProviders = [\n\t{ provide: PagingCommandService, useClass: LocalPagingCommandService},\n\t{ provide: PagingReadModelService, useClass: LocalPagingReadModelService},\n\t{ provide: SchemaCommandService, useClass: LocalSchemaCommandService},\n\t{ provide: SchemaReadModelService, useClass: LocalSchemaReadModelService},\n\t{ provide: FormationCommandService, useClass: LocalFormationCommandService},\n\t{ provide: FormationReadModelService, useClass: LocalFormationReadModelService},\n\t{ provide: StructureCommandService, useClass: LocalStructureCommandService},\n\t{ provide: StructureReadModelService, useClass: LocalStructureReadModelService},\n\t{ provide: SourceCommandService, useClass: LocalSourceCommandService},\n\t{ provide: SourceReadModelService, useClass: LocalSourceReadModelService},\n\n\t{ provide: CompositionCommandService, useClass: LocalCompositionCommandService },\n\t{ provide: CompositionReadModelService, useClass: LocalCompositionReadModelService},\n];\n","import { ElementRef, Injectable, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class SchemaCssClassManager implements OnDestroy {\n\n\tprivate readonly VERTICAL_GRID_CLASS_NAME = 'gui-vertical-grid';\n\n\tprivate readonly HORIZONTAL_GRID_CLASS_NAME = 'gui-horizontal-grid';\n\n\tprivate readonly THEME_FABRIC_CLASS_NAME = 'gui-fabric';\n\n\tprivate readonly THEME_MATERIAL_CLASS_NAME = 'gui-material';\n\n\tprivate readonly THEME_LIGHT_CLASS_NAME = 'gui-light';\n\n\tprivate readonly THEME_DARK_CLASS_NAME = 'gui-dark';\n\n\tprivate readonly ROW_COLORING_ODD = 'gui-rows-odd';\n\n\tprivate readonly ROW_COLORING_EVEN = 'gui-rows-even';\n\n\tprivate readonly renderer: Renderer2;\n\n\tprivate cssClass: SchemaCssClass = null;\n\n\tprivate cssHostRef: ElementRef;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(private rendererFactory2: RendererFactory2,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService) {\n\t\tthis.renderer = this.rendererFactory2.createRenderer(null, null);\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tinit(elementRef: ElementRef, structureId: StructureId): void {\n\n\t\tthis.cssHostRef = elementRef;\n\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((classes: SchemaCssClass) => {\n\n\t\t\t\tconst diff = this.updateState(classes);\n\n\t\t\t\tthis.renderCssClasses(diff);\n\t\t\t});\n\t}\n\n\tprivate updateState(css: SchemaCssClass): Partial<SchemaCssClass> {\n\n\t\tif (!this.cssClass) {\n\t\t\tthis.cssClass = css;\n\t\t\treturn this.cssClass;\n\t\t} else {\n\n\t\t\tlet diff = {};\n\n\t\t\tObject.keys(this.cssClass)\n\t\t\t\t  .forEach((key: string) => {\n\t\t\t\t\t  if (css[key] !== this.cssClass[key]) {\n\t\t\t\t\t\t  diff[key] = css[key];\n\t\t\t\t\t  }\n\t\t\t\t  });\n\n\t\t\tthis.cssClass = css;\n\n\t\t\treturn diff;\n\t\t}\n\t}\n\n\tprivate renderCssClasses(diff: Partial<SchemaCssClass>): void {\n\n\t\tif (diff.hasOwnProperty('verticalGrid')) {\n\t\t\tthis.toggleCssClass(diff.verticalGrid, this.VERTICAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('horizontalGrid')) {\n\t\t\tthis.toggleCssClass(diff.horizontalGrid, this.HORIZONTAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('theme')) {\n\t\t\tthis.removeThemeCssClasses();\n\t\t\tthis.addClass(this.resolveThemeClassName(diff.theme));\n\t\t}\n\n\t\tif (diff.hasOwnProperty('rowColoring')) {\n\t\t\tthis.removeRowColoringClasses();\n\t\t\tthis.addClass(this.resolveRowColoringClassName(diff.rowColoring));\n\t\t}\n\t}\n\n\tprivate toggleCssClass(toggle: boolean, cssClassName: string): void {\n\t\tif (toggle) {\n\t\t\tthis.addClass(cssClassName);\n\t\t} else {\n\t\t\tthis.removeClass(cssClassName);\n\t\t}\n\t}\n\n\tprivate removeThemeCssClasses(): void {\n\t\tObject.keys(SchemaTheme)\n\t\t\t  .map((key: string) => SchemaTheme[key])\n\t\t\t  .map((theme: SchemaTheme) => this.resolveThemeClassName(theme))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate resolveThemeClassName(theme: SchemaTheme | string): string {\n\t\tswitch (theme) {\n\t\t\tcase SchemaTheme.FABRIC:\n\t\t\tcase SchemaTheme[SchemaTheme.FABRIC]:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.MATERIAL:\n\t\t\tcase SchemaTheme[SchemaTheme.MATERIAL]:\n\t\t\t\treturn this.THEME_MATERIAL_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.LIGHT:\n\t\t\tcase SchemaTheme[SchemaTheme.LIGHT]:\n\t\t\t\treturn this.THEME_LIGHT_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.DARK:\n\t\t\tcase SchemaTheme[SchemaTheme.DARK]:\n\t\t\t\treturn this.THEME_DARK_CLASS_NAME;\n\n\t\t\tdefault:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\t\t}\n\t}\n\n\tprivate resolveRowColoringClassName(coloring: SchemaRowColoring | string): string {\n\t\tswitch (coloring) {\n\t\t\tcase SchemaRowColoring.ODD:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.ODD]:\n\t\t\t\treturn this.ROW_COLORING_ODD;\n\n\t\t\tcase SchemaRowColoring.EVEN:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.EVEN]:\n\t\t\t\treturn this.ROW_COLORING_EVEN;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate removeRowColoringClasses(): void {\n\t\tObject.keys(SchemaRowColoring)\n\t\t\t  .map((key: string) => SchemaRowColoring[key])\n\t\t\t  .map((coloring: SchemaRowColoring) => this.resolveRowColoringClassName(coloring))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate addClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.addClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n\tprivate removeClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.removeClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n}\n","import { Observable, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\n\n@Injectable()\nexport class StructureCellEditArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\nimport { StructureCellEditState } from './structure.cell-edit.state';\n\n\n@Injectable()\nexport class StructureCellEditStore extends Archive<StructureCellEditState> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\n@Injectable()\nexport class StructureEditModeArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../../common/cdk/archive';\n\n\n@Injectable()\nexport class StructureInfoPanelEnabledArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper(false);\n\t}\n}\n","export class StructureAggregationPanelConfig {\n\n\tprivate readonly top: boolean = false;\n\n\tprivate readonly bottom: boolean = true;\n\n\tconstructor(top?: boolean,\n\t\t\t\tbottom?: boolean) {\n\n\t\tif (top !== undefined && top !== null) {\n\t\t\tthis.top = top;\n\t\t}\n\n\t\tif (bottom !== undefined && bottom !== null) {\n\t\t\tthis.bottom = bottom;\n\t\t}\n\n\t}\n\n\titTopEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\titBottomEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../../common/cdk/archive';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\n\n\n@Injectable()\nexport class StructureAggregationArchive extends Archive<StructureAggregationPanelConfig> {\n\n\tconstructor() {\n\t\tsuper(new StructureAggregationPanelConfig());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n@Injectable()\nexport class StructureAggregationPanelConfigConverter {\n\n\tconvert(config: AggregationConfig): StructureAggregationPanelConfig {\n\n\t\tif (config.enabled) {\n\t\t\treturn new StructureAggregationPanelConfig(config.top, config.bottom);\n\t\t} else {\n\t\t\treturn new StructureAggregationPanelConfig(false, false);\n\t\t}\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\n\nexport class StructureSetAggregationEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'StructureSetAggregationEnabledCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetAggregationEnabledCommand } from '../../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command';\n\n\n\n@Injectable()\nexport class StructureAggregationCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetAggregationEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetAggregationEnabledCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfigConverter } from './structure.aggregation-panel.config-converter';\nimport { StructureAggregationArchive } from './structure.aggregation.archive';\n\nimport { StructureAggregationCommandService } from '../../../ui-api/structure/aggregation/structure.aggregation.command-service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n\n@Injectable()\nexport class StructureAggregationConfigService {\n\n\tconstructor(private structureAggregationPanelConfigConverter: StructureAggregationPanelConfigConverter,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureAggregationCommandService: StructureAggregationCommandService,\n\t\t\t\tprivate structureId: StructureId) {}\n\n\tset(config: AggregationConfig): void {\n\n\t\tconst aggregationPanelConfig = this.structureAggregationPanelConfigConverter.convert(config);\n\n\t\tthis.structureAggregationArchive.next(aggregationPanelConfig);\n\n\t\tthis.structureAggregationCommandService.setAggregationEnabled(config.enabled, this.structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { StructureComponent } from './structure.component';\n\nexport const structureComponentToken = new InjectionToken<StructureComponent>('StructureComponentToken');\n","export enum StructureCellEditState {\n\tENTER,\n\tSUBMIT,\n\tCANCEL\n}\n","import {\n\tEventEmitter,\n\tInput,\n\tOnChanges,\n\tOnInit,\n\tOutput,\n\tSimpleChanges\n} from '@angular/core';\nimport { skip } from 'rxjs/operators';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { PagingConfig } from '../../domain/paging/paging-config';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SortingConfig } from '../../ui-api/structure/sorting-config';\nimport { FilterConfig } from '../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../ui-api/structure/search/search-config';\nimport { AggregationConfig } from '../../ui-api/structure/aggregation/aggregation-config';\nimport { EditemItemValues } from '../../ui-api/source/event/editem-item.values';\nimport { StructureId } from '../../domain/structure-id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { PagingEventService } from '../../ui-api/paging/paging-event.service';\nimport { SourceCommandService } from '../../ui-api/source/source-command.service';\nimport { SourceEventService } from '../../ui-api/source/event/source-event.service';\nimport { SchemaCommandService } from '../../ui-api/schema/schema-command.service';\nimport { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { CompositionEventService } from '../../ui-api/composition/composition.event-service';\nimport { FormationEventService } from '../../ui-api/formation/formation-event.service';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureInfoPanelEnabledArchive } from '../panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationConfigService } from '../panel/aggregation/structure.aggregation-config.service';\nimport { StructureCellEditStore } from '../edit/structure.cell-edit.store';\nimport { StructureCellEditState } from '../edit/structure.cell-edit.state';\nimport { ColumnMenuConfig } from '../../ui-api/structure/column-menu-config';\nimport { StructureColumnMenuConfigArchive } from '../header/menu/config/structure.column-menu-config.archive';\n\n\n\n\n/** @internal */\nexport abstract class StructureGateway extends SmartComponent implements OnChanges, OnInit {\n\n\t/***********************\n\t * INPUTS\n\t ***********************/\n\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\tmaxHeight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<ColumnConfig> = [];\n\n\t@Input()\n\tpaging: boolean | PagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: SchemaTheme;\n\n\t@Input()\n\trowColoring: SchemaRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | SortingConfig;\n\n\t@Input()\n\tfiltering: boolean | FilterConfig;\n\n\t@Input()\n\tquickFilters: boolean | QuickFiltersConfig;\n\n\t@Input()\n\tsearching: boolean | SearchConfig;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tinfoPanel: boolean;\n\n\t@Input()\n\taggregation: AggregationConfig;\n\n\t@Input()\n\tcolumnMenu: ColumnMenuConfig;\n\n\n\t/***********************\n\t * OUTPUTS\n\t ***********************/\n\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<EditemItemValues> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\tprotected constructor(\n\t\tpublic structureId: StructureId,\n\t\tprotected compositionId: CompositionId,\n\t\tprotected structureCommandService: StructureCommandService,\n\t\tprotected pagingCommandService: PagingCommandService,\n\t\tprotected pagingEventService: PagingEventService,\n\t\tprotected sourceCommandService: SourceCommandService,\n\t\tprotected sourceEventService: SourceEventService,\n\t\tprotected schemaCommandService: SchemaCommandService,\n\t\tprotected compositionCommandService: CompositionCommandService,\n\t\tprotected compositionEventService: CompositionEventService,\n\t\tprotected formationEventService: FormationEventService,\n\t\tprotected structureEditModeArchive: StructureEditModeArchive,\n\t\tprotected structureCellEditArchive: StructureCellEditArchive,\n\t\tprotected structureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\tprotected structureAggregationConfigService: StructureAggregationConfigService,\n\t\tprotected structureCellEditStore: StructureCellEditStore,\n\t\tprotected structureColumnMenuConfigArchive: StructureColumnMenuConfigArchive\n\t) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(simpleChanges: SimpleChanges) {\n\n\t\tif (simpleChanges.columnMenu !== undefined && simpleChanges.columnMenu.currentValue !== undefined) {\n\t\t\tthis.structureColumnMenuConfigArchive.nextConfig(this.columnMenu);\n\t\t}\n\n\t\tif (simpleChanges.infoPanel !== undefined && simpleChanges.infoPanel.currentValue !== undefined) {\n\t\t\tthis.structureInfoPanelEnabledArchive.next(this.infoPanel);\n\t\t}\n\n\t\tif (simpleChanges.aggregation !== undefined && simpleChanges.aggregation.currentValue !== undefined) {\n\t\t\tthis.structureAggregationConfigService.set(this.aggregation);\n\t\t}\n\n\t\tif (simpleChanges.editMode !== undefined && simpleChanges.editMode.currentValue !== undefined) {\n\t\t\tthis.structureEditModeArchive.next(this.editMode);\n\t\t}\n\n\t\tif (simpleChanges.cellEditing !== undefined && simpleChanges.cellEditing.currentValue !== undefined) {\n\t\t\tthis.structureCellEditArchive.next(this.cellEditing);\n\t\t}\n\n\t\tif (simpleChanges.width !== undefined && simpleChanges.width.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setWidth(this.width);\n\t\t}\n\n\t\tif (simpleChanges.autoResizeWidth !== undefined && simpleChanges.autoResizeWidth.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setResizeWidth(this.autoResizeWidth);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderTop !== undefined && simpleChanges.columnHeaderTop.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeTopHeader(this.columnHeaderTop);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderBottom !== undefined && simpleChanges.columnHeaderBottom.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeBottomHeader(this.columnHeaderBottom);\n\t\t}\n\n\t\tif (simpleChanges.loading !== undefined && simpleChanges.loading.currentValue !== undefined) {\n\t\t\tthis.sourceCommandService.setLoading(this.loading);\n\t\t}\n\n\t\tif (simpleChanges.paging !== undefined && simpleChanges.paging.currentValue !== undefined) {\n\n\t\t\tlet pagingConfig: PagingConfig;\n\n\t\t\tif (typeof this.paging === 'boolean') {\n\t\t\t\tpagingConfig = {\n\t\t\t\t\tenabled: this.paging\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tpagingConfig = this.paging;\n\t\t\t}\n\n\t\t\tthis.pagingCommandService.setPaging(pagingConfig);\n\t\t}\n\n\t\tif (simpleChanges.columns) {\n\t\t\tthis.structureCommandService.initFields(this.columns, this.compositionId, this.structureId)\n\t\t\t// this.compositionCommandService.setColumns(this.columns);\n\t\t}\n\n\t\tif (simpleChanges.verticalGrid !== undefined && simpleChanges.verticalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeVerticalGrid(this.verticalGrid);\n\t\t}\n\n\t\tif (simpleChanges.horizontalGrid !== undefined && simpleChanges.horizontalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeHorizontalGrid(this.horizontalGrid);\n\t\t}\n\n\t\tif (simpleChanges.theme !== undefined && simpleChanges.theme.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setTheme(this.theme);\n\t\t}\n\n\t\tif (simpleChanges.rowColoring !== undefined && simpleChanges.rowColoring.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setRowColoring(this.rowColoring);\n\t\t}\n\n\t\tif (simpleChanges.maxHeight && this.maxHeight) {\n\t\t\tthis.schemaCommandService.setHeight(this.maxHeight);\n\t\t}\n\n\t\tif (simpleChanges.virtualScroll !== undefined  && simpleChanges.virtualScroll.currentValue !== undefined) {\n\t\t\tif (this.virtualScroll) {\n\t\t\t\tthis.structureCommandService.enableVerticalScroll();\n\t\t\t} else {\n\t\t\t\tthis.structureCommandService.disableVerticalScroll();\n\t\t\t}\n\t\t}\n\n\t\tif (simpleChanges.sorting !== undefined && simpleChanges.sorting.currentValue !== undefined) {\n\n\t\t\tlet sorting: SortingConfig;\n\n\t\t\tif (typeof this.sorting === 'boolean') {\n\t\t\t\tsorting = {\n\t\t\t\t\tenabled: this.sorting\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsorting = this.sorting;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSortingConfig(sorting);\n\t\t}\n\n\t\tif (simpleChanges.filtering !== undefined && simpleChanges.filtering.currentValue !== undefined) {\n\n\t\t\tlet filtering: FilterConfig;\n\n\t\t\tif (typeof this.filtering === 'boolean') {\n\t\t\t\tfiltering = {\n\t\t\t\t\tenabled: this.filtering\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tfiltering = this.filtering;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setFilterConfig(filtering);\n\t\t}\n\n\t\tif (simpleChanges.quickFilters !== undefined && simpleChanges.quickFilters.currentValue !== undefined) {\n\n\t\t\tlet quickFilters: QuickFiltersConfig;\n\n\t\t\tif (typeof this.quickFilters === 'boolean') {\n\t\t\t\tquickFilters = {\n\t\t\t\t\tenabled: this.quickFilters\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tquickFilters = this.quickFilters;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setQuickFiltersConfig(quickFilters);\n\t\t}\n\n\t\tif (simpleChanges.searching !== undefined && simpleChanges.searching.currentValue !== undefined) {\n\n\t\t\tlet searching: SearchConfig;\n\n\t\t\tif (typeof this.searching === 'boolean') {\n\t\t\t\tsearching = {\n\t\t\t\t\tenabled: this.searching\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsearching = this.searching;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSearchingConfig(searching);\n\t\t}\n\n\t\t/**\n\t\t * Setting source should be last step\n\t\t */\n\t\tif (simpleChanges.source) {\n\t\t\tthis.sourceCommandService.setOrigin(this.source);\n\t\t}\n\t}\n\n\tngOnInit() {\n\n\t\tthis.pagingEventService\n\t\t\t.onPageChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageNumber: number) => {\n\t\t\t\tthis.pageChanged.emit(pageNumber);\n\t\t\t});\n\n\t\tthis.pagingEventService\n\t\t\t.onPageSizeChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageSize: number) => {\n\t\t\t\tthis.pageSizeChanged.emit(pageSize);\n\t\t\t});\n\n\t\tthis.formationEventService\n\t\t\t.onItemSelected(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((items: Array<any>) => {\n\t\t\t\tthis.itemsSelected.emit(items);\n\t\t\t});\n\n\t\tthis.compositionEventService\n\t\t\t.onColumnsChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\tskip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil())\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.columnsChanged.emit();\n\t\t\t});\n\n\n\t\tthis.compositionEventService\n\t\t\t.onContainerWidthChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\t// skip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((containerWidth: number) => {\n\t\t\t\tthis.containerWidthChanged.emit(containerWidth);\n\t\t\t});\n\n\t\tthis.sourceEventService\n\t\t\t.onSourceEdited(this.structureId)\n\t\t\t.pipe(\n\t\t\t\t// this.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((values: EditemItemValues) => {\n\t\t\t\tthis.sourceEdited.emit(values);\n\t\t\t});\n\n\t\tthis.structureCellEditStore\n\t\t\t.onValue()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((state: StructureCellEditState) => {\n\n\t\t\t\tswitch(state) {\n\n\t\t\t\t\tcase StructureCellEditState.ENTER:\n\t\t\t\t\t\tthis.cellEditEntered.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.SUBMIT:\n\t\t\t\t\t\tthis.cellEditSubmitted.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.CANCEL:\n\t\t\t\t\t\tthis.cellEditCanceled.emit();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t});\n\n\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class NextPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'NextPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PrevPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PrevPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PageChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PageChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagesizeChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagesizeChangedEvent');\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { PagingReadModelService } from './paging-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { NextPageEvent } from '../../domain/paging/command/next-page/next-page.event';\nimport { PrevPageEvent } from '../../domain/paging/command/prev-page/prev-page.event';\nimport { PageChangedEvent } from '../../domain/paging/command/page/page-changed.event';\nimport { Paging } from '../../domain/paging/read/paging';\nimport { PagesizeChangedEvent } from '../../domain/paging/command/change-pagesize/pagesize-changed.event';\n\n\n@Injectable()\nexport class PagingEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate readonly pagingQueryService: PagingReadModelService) {\n\t}\n\n\tonPageChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   NextPageEvent,\n\t\t\t\t\t   PrevPageEvent,\n\t\t\t\t\t   PageChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .onPaging(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPage()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonPageSizeChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   PagesizeChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .onPaging(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPageSize()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","export class EditemItemValues {\n\n\tconstructor(public readonly after: any,\n\t\t\t\tpublic readonly before: any) {}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class StructureSourceItemEditedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { EditemItemValues } from './editem-item.values';\nimport { StructureSourceItemEditedEvent } from '../../../domain/source/command/origin/edit/structure.source-item-edited.event';\n\n\n@Injectable()\nexport class SourceEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tonSourceEdited(structureId: StructureId): Observable<EditemItemValues> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   StructureSourceItemEditedEvent as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   map((event: StructureSourceItemEditedEvent) => {\n\n\t\t\t\t\t\t   const afterItem = event.getAfterItem().getData(),\n\t\t\t\t\t\t\t   beforeItem = event.getBeforeItem().getData();\n\n\t\t\t\t\t\t   return new EditemItemValues(afterItem, beforeItem);\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SelectedRowToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SelectedRowToggledEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, take, switchMap } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureReadModelService } from '../structure/structure-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SelectedRowToggledEvent } from '../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Injectable()\nexport class FormationEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate readonly structureQueryService: StructureReadModelService) {\n\t}\n\n\tonItemSelected(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   SelectedRowToggledEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.structureQueryService\n\t\t\t\t\t\t\t\t\t  .onStructure(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  take(1),\n\t\t\t\t\t\t\t\t\t\t  map((str: Structure) => str.getSelectedEntities()),\n\t\t\t\t\t\t\t\t\t\t  map((entities: Array<ItemEntity>) => entities.map(ent => ent.getData()))\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import { ColumnMenuConfig } from '../../../../ui-api/structure/column-menu-config';\n\nexport class StructureColumnMenuConfig {\n\n\tstatic default(): StructureColumnMenuConfig {\n\t\treturn new StructureColumnMenuConfig();\n\t}\n\n\tstatic fromConfig(config: ColumnMenuConfig): StructureColumnMenuConfig {\n\t\treturn new StructureColumnMenuConfig(\n\t\t\tconfig.enabled,\n\t\t\tconfig.sort,\n\t\t\tconfig.filter,\n\t\t\tconfig.columns\n\t\t);\n\t}\n\n\tprivate static readonly MAIN = 'Menu';\n\n\tprivate static readonly FILTER = 'Filter';\n\n\tprivate static readonly COLUMNS = 'Columns';\n\n\tconstructor(private enabled: boolean = false,\n\t\t\t\tprivate sort: boolean = true,\n\t\t\t\tprivate filter: boolean = false,\n\t\t\t\tprivate columns: boolean = false) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled &&\n\t\t\t(this.sort || this.filter || this.columns);\n\t}\n\n\tisMainEnabled(): boolean {\n\t\treturn this.sort;\n\t}\n\n\tisSort(): boolean {\n\t\treturn this.sort;\n\t}\n\n\tisFilter(): boolean {\n\t\treturn this.filter;\n\t}\n\n\tisColumns(): boolean {\n\t\treturn this.columns;\n\t}\n\n\tgetMenus(): Array<string> {\n\n\t\tconst menus = [];\n\n\t\tif (this.isMainEnabled()) {\n\t\t\tmenus.push(this.getMainMenu());\n\t\t}\n\n\t\tif (this.isFilter()) {\n\t\t\tmenus.push(this.getFilterMenu());\n\t\t}\n\n\t\tif (this.isColumns()) {\n\t\t\tmenus.push(this.getColumnMenu());\n\t\t}\n\n\t\treturn menus;\n\t}\n\n\tgetActiveMenu(): string {\n\t\treturn this.getMenus()[0];\n\t}\n\n\tgetMainMenu(): string {\n\t\treturn StructureColumnMenuConfig.MAIN;\n\t}\n\n\tgetFilterMenu(): string {\n\t\treturn StructureColumnMenuConfig.FILTER;\n\t}\n\n\tgetColumnMenu(): string {\n\t\treturn StructureColumnMenuConfig.COLUMNS;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../../../common/cdk/archive';\n\nimport { StructureColumnMenuConfig } from './structure.column-menu-config';\nimport { ColumnMenuConfig } from '../../../../ui-api/structure/column-menu-config';\n\n@Injectable()\nexport class StructureColumnMenuConfigArchive extends Archive<StructureColumnMenuConfig> {\n\n\tconstructor() {\n\t\tsuper(StructureColumnMenuConfig.default());\n\t}\n\n\tnextConfig(config: ColumnMenuConfig): void {\n\n\t\tconst menuConfig = StructureColumnMenuConfig.fromConfig(config);\n\n\t\tthis.next(menuConfig);\n\t}\n\n}\n","import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tOnChanges,\n\tOnInit,\n\tRenderer2,\n\tSimpleChanges,\n\tViewEncapsulation\n} from '@angular/core';\nimport { timer } from 'rxjs';\n\n\nimport { StructureDefinition } from './structure-definition';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureId } from '../domain/structure-id';\nimport { CompositionId } from '../domain/composition/composition-id';\nimport { localProviders } from './local/local-providers';\nimport { SchemaCssClassManager } from './schema/schema-css-class.manager';\nimport { StructureCellEditArchive } from './edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from './edit/structure.cell-edit.store';\nimport { StructureEditModeArchive } from './edit/structure.edit-mode.archive';\nimport { StructureInfoPanelEnabledArchive } from './panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationArchive } from './panel/aggregation/structure.aggregation.archive';\nimport { StructureAggregationConfigService } from './panel/aggregation/structure.aggregation-config.service';\nimport { structureComponentToken } from './structure-component-token';\nimport { StructureGateway } from './gateway/structure.gateway';\nimport { SchemaColumnHeader } from '../domain/schema/read/schema-column-header';\nimport { Structure } from '../domain/structure/read/structure';\nimport { PagingCommandService } from '../ui-api/paging/paging-command.service';\nimport { PagingEventService } from '../ui-api/paging/paging-event.service';\nimport { SourceCommandService } from '../ui-api/source/source-command.service';\nimport { SourceEventService } from '../ui-api/source/event/source-event.service';\nimport { SchemaCommandService } from '../ui-api/schema/schema-command.service';\nimport { CompositionCommandService } from '../ui-api/composition/composition.command-service';\nimport { CompositionEventService } from '../ui-api/composition/composition.event-service';\nimport { FormationEventService } from '../ui-api/formation/formation-event.service';\nimport { StructureCommandService } from '../ui-api/structure/structure-command.service';\nimport { StructureReadModelService } from '../ui-api/structure/structure-read-model.service';\nimport { CompositionReadModelService } from '../ui-api/composition/composition-read-model.service';\nimport { SchemaReadModelService } from '../ui-api/schema/schema-read-model.service';\nimport { StructureColumnMenuConfigArchive } from './header/menu/config/structure.column-menu-config.archive';\n\n/** @internal */\nexport function structureIdFactory(generator: StructureIdGenerator): StructureId {\n\treturn new StructureId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport function compositionIdFactory(generator: StructureIdGenerator): CompositionId {\n\treturn new CompositionId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport const structureComponentSelfProviders = [\n\t{\n\t\tprovide: StructureId,\n\t\tuseFactory: structureIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t{\n\t\tprovide: CompositionId,\n\t\tuseFactory: compositionIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t...localProviders,\n\n\tSchemaCssClassManager,\n\tStructureCellEditArchive,\n\tStructureCellEditStore,\n\tStructureEditModeArchive,\n\tStructureInfoPanelEnabledArchive,\n\tStructureAggregationArchive,\n\tStructureAggregationConfigService,\n\tStructureColumnMenuConfigArchive\n];\n\n/** @internal */\n@Component({\n\tselector: 'gui-structure',\n\ttemplateUrl: './structure.component.html',\n\tstyleUrls: [\n\t\t'./style/styles.ngx.scss',\n\t\t'./style/structure.ngx.scss',\n\t\t'./style/structure-paging.ngx.scss',\n\t\t'./style/structure-responsive.ngx.scss',\n\t\t'./style/structure-flex.ngx.scss',\n\t\t'./composition/composition.ngx.scss',\n\t\t'./style/themes/material.structure.ngx.scss',\n\t\t'./style/themes/dark.structure.ngx.scss',\n\t\t'./style/themes/light.structure.ngx.scss'\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None,\n\thost: {\n\t\t'[class]': `\"gui-structure\"`,\n\t\t// '[style.min-height.px]': 'structureHeight',\n\t\t'[class.gui-structure-border]': 'isBorderEnabled()',\n\t\t'[id]': 'structureId.toString()'\n\t},\n\tproviders: [\n\t\t...structureComponentSelfProviders,\n\t\t{\n\t\t\tprovide: structureComponentToken,\n\t\t\tuseExisting: StructureComponent\n\t\t}\n\t]\n})\nexport class StructureComponent extends StructureGateway implements OnChanges, OnInit, AfterViewInit {\n\n\tloaderEnabled: boolean = false;\n\n\tcircleLoaderEnabled: boolean = true;\n\n\tinitialLoaderAnimation: boolean = false;\n\n\tstructureHeight: number;\n\n\tprivate columnHeader: SchemaColumnHeader;\n\n\tprivate structure: Structure;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tcompositionId: CompositionId,\n\t\t\t\tpagingCommandService: PagingCommandService,\n\t\t\t\tpagingEventService: PagingEventService,\n\t\t\t\tsourceCommandService: SourceCommandService,\n\t\t\t\tsourceEventService: SourceEventService,\n\t\t\t\tschemaCommandService: SchemaCommandService,\n\t\t\t\tcompositionCommandService: CompositionCommandService,\n\t\t\t\tcompositionEventService: CompositionEventService,\n\t\t\t\tformationEventService: FormationEventService,\n\t\t\t\tstructureCommandService: StructureCommandService,\n\t\t\t\tstructureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tstructureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tstructureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\t\t\tstructureAggregationConfigService: StructureAggregationConfigService,\n\t\t\t\tstructureCellEditStore: StructureCellEditStore,\n\t\t\t\tstructureColumnMenuConfigArchive: StructureColumnMenuConfigArchive,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate compositionQueryService: CompositionReadModelService,\n\t\t\t\tprivate schemaReadModelService: SchemaReadModelService,\n\t\t\t\tprivate schemaStylesManager: SchemaCssClassManager) {\n\n\t\tsuper(\n\t\t\tstructureId,\n\t\t\tcompositionId,\n\t\t\tstructureCommandService,\n\t\t\tpagingCommandService,\n\t\t\tpagingEventService,\n\t\t\tsourceCommandService,\n\t\t\tsourceEventService,\n\t\t\tschemaCommandService,\n\t\t\tcompositionCommandService,\n\t\t\tcompositionEventService,\n\t\t\tformationEventService,\n\t\t\tstructureEditModeArchive,\n\t\t\tstructureCellEditArchive,\n\t\t\tstructureInfoPanelEnabledArchive,\n\t\t\tstructureAggregationConfigService,\n\t\t\tstructureCellEditStore,\n\t\t\tstructureColumnMenuConfigArchive\n\t\t);\n\n\t\tthis.structureCommandService.init();\n\t\tcompositionCommandService.init();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tsuper.ngOnChanges(changes);\n\t}\n\n\tngOnInit() {\n\t\tsuper.ngOnInit();\n\n\t\tthis.schemaReadModelService\n\t\t\t.onHeight()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((height: number) => {\n\t\t\t\tthis.structureHeight = height;\n\t\t\t});\n\n\t\tthis.schemaReadModelService\n\t\t\t.onColumnHeader()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columnHeader: SchemaColumnHeader) => {\n\t\t\t\tthis.columnHeader = columnHeader;\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\n\t\t\t\tthis.loaderEnabled = structure.getSource().isLoading();\n\n\t\t\t\tthis.circleLoaderEnabled = structure.isLoaderVisible();\n\n\t\t\t\tif (this.loaderEnabled && !this.initialLoaderAnimation) {\n\t\t\t\t\tthis.initialLoaderAnimation = true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\t\tlet width = this.elementRef.nativeElement.offsetWidth;\n\n\t\tif (width > 0) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * When gui-grid is in dynamic container which is created later then grid.\n\t\t\t */\n\t\t\ttimer(0)\n\t\t\t\t.pipe(\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe(() => {\n\n\t\t\t\t\twidth = this.elementRef.nativeElement.offsetWidth;\n\n\t\t\t\t\tif (width > 0) {\n\t\t\t\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tthis.schemaStylesManager\n\t\t\t.init(this.elementRef, this.structureId);\n\n\t\tthis.compositionQueryService\n\t\t\t.onWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.structureDefinition.isBorderEnabled();\n\t}\n\n\tgetStructureId(): StructureId {\n\t\treturn this.structureId;\n\t}\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Inject, OnInit, ViewChild, Input } from '@angular/core';\n\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\nimport { CompositionReadModelService } from '../../../ui-api/composition/composition-read-model.service';\nimport { Placement } from '@generic-ui/fabric';\nimport { StructureColumnMenuConfigArchive } from './config/structure.column-menu-config.archive';\nimport { StructureColumnMenuConfig } from './config/structure.column-menu-config';\n\n\n@Component({\n\ttemplate: `\n\t\t<div *ngIf=\"isEnabled()\"\n\t\t\t class=\"gui-header-menu-tab\">\n\n\t\t\t<gui-tab [menu]=\"config.getMenus()\" [active]=\"config.getActiveMenu()\">\n\n\t\t\t\t<ng-container *ngIf=\"config.isMainEnabled()\">\n\n\t\t\t\t\t<gui-tab-item class=\"gui-tab-item-dropdown\" [tab]=\"config.getMainMenu()\">\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t<gui-dropdown [placement]=\"placement\"\n\t\t\t\t\t\t\t\t\t\t  [dropdownText]=\"'Column Sort'\"\n\t\t\t\t\t\t\t\t\t\t  [width]=\"225\"\n\t\t\t\t\t\t\t\t\t\t  [showOnHover]=\"true\"\n\t\t\t\t\t\t\t\t\t\t  class=\"gui-header-menu-dropdown\">\n\n\t\t\t\t\t\t\t\t<gui-dropdown-item (click)=\"setSortOrder(status.ASC)\"\n\t\t\t\t\t\t\t\t\t\t\t\t   [class.gui-header-text-bold]=\"isAscSort()\">\n\t\t\t\t\t\t\t\t\tAscending\n\t\t\t\t\t\t\t\t</gui-dropdown-item>\n\n\t\t\t\t\t\t\t\t<gui-dropdown-item (click)=\"setSortOrder(status.DESC)\"\n\t\t\t\t\t\t\t\t\t\t\t\t   [class.gui-header-text-bold]=\"isDescSort()\">\n\t\t\t\t\t\t\t\t\tDescending\n\t\t\t\t\t\t\t\t</gui-dropdown-item>\n\n\t\t\t\t\t\t\t\t<gui-dropdown-item (click)=\"setSortOrder(status.NONE)\"\n\t\t\t\t\t\t\t\t\t\t\t\t   [class.gui-header-text-bold]=\"isNoneSort()\">\n\t\t\t\t\t\t\t\t\tTurned off\n\t\t\t\t\t\t\t\t</gui-dropdown-item>\n\n\t\t\t\t\t\t\t</gui-dropdown>\n\t\t\t\t\t\t</div>\n<!--\t\t\t\t\t\t<div class=\"gui-header-menu-item\">Autosize This Column</div>-->\n<!--\t\t\t\t\t\t<div class=\"gui-header-menu-item\">Autosize All Column</div>-->\n<!--\t\t\t\t\t\t<div class=\"gui-header-menu-item\">Reset Columns</div>-->\n<!--\t\t\t\t\t\t<hr>-->\n<!--\t\t\t\t\t\t<div class=\"gui-header-menu-item\">GenericUI is Great</div>-->\n\t\t\t\t\t</gui-tab-item>\n\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"config.isFilter()\">\n\t\t\t\t\t\n\t\t\t\t\t<gui-tab-item [tab]=\"config.getFilterMenu()\">\n\t\t\t\t\t\t<div class=\"gui-header-menu-item\">{{config.getFilterMenu()}}</div>\n\t\t\t\t\t</gui-tab-item>\n\t\t\t\t\t\n\t\t\t\t</ng-container>\n\n\t\t\t\t<ng-container *ngIf=\"config.isColumns()\">\n\t\t\t\t\t\n\t\t\t\t\t<gui-tab-item [tab]=\"config.getColumnMenu()\">\n\t\t\t\t\t\t<div class=\"gui-header-menu-item\">{{config.getColumnMenu()}}</div>\n\t\t\t\t\t</gui-tab-item>\n\t\t\t\t\t\n\t\t\t\t</ng-container>\n\n\t\t\t</gui-tab>\n\t\t</div>\n\t`\n})\nexport class StructureColumnConfigComponent extends SmartComponent implements OnInit {\n\n\t@ViewChild('headerSortMenu', { static: false })\n\theaderSortMenu: ElementRef;\n\n\tconfig: StructureColumnMenuConfig;\n\n\tsortStatus: SortStatus;\n\n\tstatus = SortStatus;\n\n\tplacement: Placement = Placement.Right;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureCommandService: StructureCommandService,\n\t\t\t\tprivate compositionReadModelService: CompositionReadModelService,\n\t\t\t\tprivate structureColumnMenuConfigArchive: StructureColumnMenuConfigArchive,\n\t\t\t\t@Inject('column') private column: CellTemplateWithContext) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.sortStatus = this.column.getSortStatus();\n\n\t\tthis.compositionReadModelService\n\t\t\t.onSortOrder(this.column.getFieldId())\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((sortStatus: SortStatus) => {\n\t\t\t\tthis.sortStatus = sortStatus;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureColumnMenuConfigArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((config: StructureColumnMenuConfig) => {\n\t\t\t\tthis.config = config;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.config && this.config.isEnabled();\n\t}\n\n\ttoggleSort() {\n\t\tthis.structureCommandService.toggleSort(this.column.getFieldId());\n\t}\n\n\tisAscSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.ASC;\n\t}\n\n\tisDescSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.DESC;\n\t}\n\n\tisNoneSort(): boolean {\n\t\treturn this.sortStatus === SortStatus.NONE;\n\t}\n\n\tsetSortOrder(sort: SortStatus): void {\n\t\tthis.structureCommandService.setSortOrder(this.column.getFieldId(), sort);\n\t}\n\n}\n","import { ElementRef, Injectable, Injector } from '@angular/core';\n\nimport { FabricInlineDialogService } from '@generic-ui/fabric';\n\nimport { StructureColumnConfigComponent } from './structure.column-config.component';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { InlineDialogPlacement } from '@generic-ui/fabric';\n\n@Injectable()\nexport class StructureColumnConfigService {\n\n\tconstructor(private injector: Injector,\n\t\t\t\tprivate inlineDialogService: FabricInlineDialogService) {\n\t}\n\n\topen(elementRef: ElementRef, column: CellTemplateWithContext): void {\n\n\t\tconst injector = Injector.create({\n\t\t\tproviders: [{\n\t\t\t\tprovide: 'column',\n\t\t\t\tuseValue: column\n\t\t\t}],\n\t\t\tparent: this.injector\n\t\t});\n\n\t\tthis.inlineDialogService.open(elementRef, StructureColumnConfigComponent, injector, InlineDialogPlacement.Top, -8);\n\t}\n\n\tclose(): void {\n\t\tthis.inlineDialogService.close();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, ViewEncapsulation, Injector } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { StructureColumnConfigService } from '../menu/structure.column-config.service';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\n\n\n@Component({\n\tselector: 'gui-structure-header-columns',\n\ttemplateUrl: './structure-header-columns.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None,\n\tproviders: [\n\t\tStructureColumnConfigService\n\t]\n})\nexport class StructureHeaderColumnsComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\tconstructor(private elementRef: ElementRef,\n\t\t\t\tprivate injector: Injector,\n\t\t\t\tprivate structureCommandService: StructureCommandService) {\n\t}\n\n\ttoggleSort(column: CellTemplateWithContext) {\n\t\tthis.structureCommandService.toggleSort(column.getFieldId());\n\t}\n\n\tisSortAsc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.ASC;\n\t}\n\n\tisSortDesc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.DESC;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureQuickFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectQuickFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFilterRepository } from '../../../domain/structure/read/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../../domain/structure/read/filter/structure.quick-filter.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureFilterReadModelRepository {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository,\n\t\t\t\tprivate structureQuickFilterRepository: StructureQuickFilterRepository) {}\n\n\tonFilteringEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureFilterRepository.selectFilterEnabled(structureId);\n\t}\n\n\tonQuickFiltersEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureQuickFilterRepository.selectQuickFilterEnabled(structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnInit, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { DomainEventBus } from '@generic-ui/hermes';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { StructureHeaderColumnsComponent } from './columns/structure-header-columns.component';\nimport { CellTemplateWithContext } from '../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-header',\n\ttemplateUrl: './structure-header.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderComponent extends SmartComponent implements OnInit {\n\n\t@ViewChild(StructureHeaderColumnsComponent, { read: ElementRef, static: true })\n\tcontainerRef: ElementRef;\n\n\theaderColumns: Array<CellTemplateWithContext> = [];\n\n\tfilterRowEnabled: boolean = false;\n\n\tconstructor(private readonly changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate readonly renderer: Renderer2,\n\t\t\t\tprivate readonly eventBus: DomainEventBus,\n\t\t\t\tprivate readonly structureId: StructureId,\n\t\t\t\tprivate readonly structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate readonly compositionQueryService: CompositionReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.compositionQueryService\n\t\t\t.onHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.onFilteringEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\n\t\t\t\tthis.filterRowEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\n\n\n@Component({\n\tselector: 'gui-structure-header-filters',\n\ttemplate: `\n\t\t\n\t\t<ng-container *ngIf=\"!filterMode\">\n\n\t\t\t<div *ngFor=\"let cell of columns\"\n\t\t\t\t [style.width.px]=\"cell.width\"\n\t\t\t\t class=\"gui-header-cell\">\n\n\t\t\t\t<!--\t\t\t\t<gui-structure-header-filter [column]=\"cell\">-->\n\t\t\t\t<!--\t\t\t\t</gui-structure-header-filter>-->\n\n\t\t\t\t<button (click)=\"turnOnFilterMode()\">Add Filter</button>\n\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t\t<ng-container *ngIf=\"filterMode\">\n\n\t\t\t<gui-select [options]=\"['has value', 'is the same as', 'starts with', 'ends with']\" [selected]=\"'has value'\" >\n\n\t\t\t</gui-select>\n\n\t\t\t<form [formGroup]=\"filterForm\">\n\t\t\t\t<input type=\"text\" [formControlName]=\"filterFieldName\" gui-input/>\n\t\t\t</form>\n\n\t\t\t<button gui-button (click)=\"clearFilters()\">Clear All</button>\n\t\t\t<button gui-button (click)=\"turnOffFilterMode()\">Close</button>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFiltersComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\t@Output()\n\tclosed = new EventEmitter<void>();\n\n\treadonly filterFieldName = 'phrase';\n\n\tfilterForm: FormGroup;\n\n\tfilterMode: boolean = false;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate formBuilder: FormBuilder,\n\t\t\t\tprivate cd: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\n\t}\n\n\tngOnInit() {\n\t\tthis.filterForm\n\t\t\t.valueChanges\n\t\t\t// .pipe(\n\t\t\t// debounceTime(500)\n\t\t\t// )\n\t\t\t.subscribe((f) => {\n\t\t\t\tthis.filter(f[this.filterFieldName]);\n\t\t\t});\n\t}\n\n\tfilter(phrase: string): void {\n\n\t\tif (phrase === undefined || phrase === null) {\n\t\t\tphrase = '';\n\t\t}\n\n\t\tthis.structureFilterCommandService.addFilter(this.columns[0].getFieldId(), '1', phrase, this.structureId);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.filterForm.reset();\n\t}\n\n\tturnOnFilterMode(): void {\n\t\tthis.filterMode = true;\n\t\tthis.cd.detectChanges();\n\t}\n\n\tturnOffFilterMode(): void {\n\t\tthis.filterMode = false;\n\t\tthis.cd.detectChanges();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { ChangedValueEmitter } from '../../../domain/composition/read/edit/changed-value.emitter';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n\n@Component({\n\tselector: 'gui-structure-header-filter',\n\ttemplate: `\n\t\t\n<!--\t\t<ng-container-->\n<!--\t\t\t\t*ngTemplateOutlet=\"column.editTemplate; context: editContext\">-->\n<!--\t\t</ng-container>-->\n\t\t\n\t\t<button gui-button [primary]=\"true\" >Add Filter</button>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFilterComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tcolumn: CellTemplateWithContext;\n\n\tsub = new ChangedValueEmitter();\n\n\teditContext: any;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tsuper();\n\n\t\tthis.editContext = {\n\t\t\tchanges: this.sub\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.sub\n\t\t\t.select()\n\t\t\t.subscribe((phrase: string) => this.filter(phrase));\n\t}\n\n\tfilter(phrase: string): void {\n\t\tthis.structureFilterCommandService.addFilter(this.column.getFieldId(), '1', phrase, this.structureId);\n\t}\n\n}\n","import {\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tInject,\n\tInput,\n\tOnInit,\n\tPLATFORM_ID,\n\tRenderer2,\n\tViewEncapsulation\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\nimport { FormationCommandService } from '../../ui-api/formation/formation-command.service';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { SelectedRowsList } from '../../domain/formation/read/selected-rows/selected-rows-list';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-content',\n\ttemplateUrl: `structure-content.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContentComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tsource: Array<ItemEntity>;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\teditMode = false;\n\n\tcellEditing = false;\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate formationCommandService: FormationCommandService,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tprivate formationQueryService: FormationReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.formationQueryService\n\t\t\t.onSelectedRows()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((rowsList: SelectedRowsList) => {\n\n\t\t\t\tthis.clearSelectedRows();\n\n\t\t\t\trowsList.getIds().forEach((id: string) => {\n\n\t\t\t\t\tconst strippedId = 'gui' + id.replace(/-/g, ''),\n\t\t\t\t\t\tselectedRowEl = this.elementRef.nativeElement.querySelector(`#${strippedId}`);\n\n\t\t\t\t\tif (selectedRowEl) {\n\t\t\t\t\t\tthis.renderer.addClass(selectedRowEl, 'selected');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\tthis.structureEditModeArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.editMode = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureCellEditArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.cellEditing = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\ttrackByFn() {\n\t\treturn 0;\n\t}\n\n\ttranslateY(index: number): string {\n\t\treturn `translateY(${index * 30}px)`;\n\t}\n\n\ttoggleSelectedRow(entity: ItemEntity): void {\n\t\tthis.formationCommandService.toggleSelectedRow((entity as any).id);\n\t}\n\n\tprivate clearSelectedRows(): void {\n\t\tconst selectedElements = this.elementRef.nativeElement.querySelectorAll('.selected');\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tselectedElements.forEach((el: any) => {\n\t\t\t\tthis.renderer.removeClass(el, 'selected');\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n","import { Entity, RandomStringGenerator } from '@generic-ui/hermes';\n\n\n@Entity\nexport class ItemEntity {\n\n\tprivate readonly id: string;\n\n\tprivate readonly data: any;\n\n\tprivate readonly position: number;\n\n\tprivate readonly version: number = 0;\n\n\tconstructor(data: any,\n\t\t\t\tposition: number,\n\t\t\t\tid?: string,\n\t\t\t\tversion: number = 0) {\n\t\tthis.data = data;\n\t\tthis.position = position;\n\t\tthis.version = version;\n\t\tif (!id) {\n\t\t\tthis.id = RandomStringGenerator.generate();\n\t\t} else {\n\t\t\tthis.id = id;\n\t\t}\n\t}\n\n\tgetData(): any {\n\t\treturn this.data;\n\t}\n\n\tgetUiId(): string {\n\t\treturn 'gui' + this.id.replace(/-/g, '');\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tgetPosition(): number {\n\t\treturn this.position;\n\t}\n\n\tisEven(): boolean {\n\t\treturn this.position % 2 === 0;\n\t}\n\n\tisOdd(): boolean {\n\t\treturn this.position % 2 === 1;\n\t}\n\n\tequals(entity: ItemEntity): boolean {\n\t\treturn this.id === entity.id && this.getVersion() === entity.getVersion();\n\t}\n\n\tequalsById(id: string): boolean {\n\t\treturn this.id === id;\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { ItemEntity } from '../../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-row',\n\ttemplateUrl: `structure-row.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureRowComponent {\n\n\t@Input()\n\tentity: ItemEntity;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\ttrackByFn(): number {\n\t\treturn 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, SimpleChanges, OnDestroy, OnChanges } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { StructureCellEditArchive } from '../../edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from '../../edit/structure.cell-edit.store';\nimport { SourceCommandService } from '../../../ui-api/source/source-command.service';\nimport { ChangedValueEmitter } from '../../../domain/composition/read/edit/changed-value.emitter';\nimport { EditEventType } from '../../../domain/composition/read/edit/state/edit.event-type';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { StructureCellEditState } from '../../edit/structure.cell-edit.state';\nimport { ItemEntity } from '../../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-cell',\n\ttemplate: `\n\n\t\t<span *ngIf=\"!inEditMode\"\n\t\t\t  (click)=\"enterEditMode()\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.template;\n\t\t\t\t\tcontext: { element: cell.accessor(entity) }\">\n\t\t\t</ng-container>\n\t\t</span>\n\t\t\n\t\t<span *ngIf=\"inEditMode\" class=\"gui-cell-edit-mode\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.editTemplate;\n\t\t\t\t\tcontext: editContext\">\n\t\t\t</ng-container>\n\t\t</span>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureCellComponent extends SmartComponent implements OnChanges, OnDestroy {\n\n\t@Input()\n\tentity: ItemEntity;\n\n\t@Input()\n\tcell: CellTemplateWithAccessor;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditingEnabled: boolean;\n\n\tinEditMode: boolean = false;\n\n\teditContext: any;\n\n\tvalueChanges$: any;\n\n\tstatus$: any;\n\n\tactualValue: any;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureCellEditStore: StructureCellEditStore,\n\t\t\t\tprivate sourceCommandService: SourceCommandService) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\n\t\tif (changes.editMode !== undefined) {\n\t\t\tif (this.editMode) {\n\t\t\t\tthis.cellEditingEnabled = true;\n\t\t\t\tthis.enterEditMode(false);\n\t\t\t} else if (!this.editMode) {\n\t\t\t\tthis.exitEditMode();\n\t\t\t}\n\t\t}\n\n\t\tif (!this.editMode) {\n\t\t\tthis.exitEditMode();\n\t\t}\n\t}\n\n\tenterEditMode(forceCheck: boolean = true): void {\n\n\t\tif (!this.cellEditingEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.inEditMode = true;\n\n\t\tthis.valueChanges$ = new ChangedValueEmitter();\n\t\tthis.status$ = new ChangedValueEmitter<EditEventType>();\n\n\t\tthis.editContext = {\n\t\t\tstatus: this.status$,\n\t\t\tvalueChanges: this.valueChanges$,\n\t\t\tvalue: this.cell.accessor(this.entity),\n\t\t\tfocus: forceCheck\n\t\t};\n\n\t\tthis.observeFieldStatus();\n\t\tthis.observeValueChanges();\n\n\t\tthis.publishEditEnter();\n\n\t\tif (!forceCheck) {\n\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t} else {\n\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t}\n\n\t}\n\n\texitEditMode(): void {\n\t\tthis.inEditMode = false;\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tsubmitChangesAndExit(): void {\n\n\t\tconst itemId = this.entity.getId(),\n\t\t\tupdatedValue = this.actualValue,\n\t\t\tfieldId = this.cell.columnFieldId;\n\n\t\tthis.sourceCommandService.editItem(new StructureEditSourceItemParams(itemId, fieldId, updatedValue));\n\n\t\tthis.exitEditMode();\n\t}\n\n\tprivate observeFieldStatus(): void {\n\n\t\tthis.status$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((status: EditEventType) => {\n\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase EditEventType.SUBMIT:\n\t\t\t\t\t\tthis.submitChangesAndExit();\n\t\t\t\t\t\tthis.publishEditSubmit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EditEventType.CANCEL:\n\t\t\t\t\t\tthis.exitEditMode();\n\t\t\t\t\t\tthis.publishEditCancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate observeValueChanges(): void {\n\n\t\tthis.valueChanges$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: any) => {\n\t\t\t\tthis.actualValue = value;\n\t\t\t});\n\t}\n\n\tprivate publishEditState(state: StructureCellEditState): void {\n\t\tthis.structureCellEditStore.next(state);\n\t}\n\n\tprivate publishEditEnter(): void {\n\t\tthis.publishEditState(StructureCellEditState.ENTER);\n\t}\n\n\tprivate publishEditCancel(): void {\n\t\tthis.publishEditState(StructureCellEditState.CANCEL);\n\t}\n\n\tprivate publishEditSubmit(): void {\n\t\tthis.publishEditState(StructureCellEditState.SUBMIT);\n\t}\n\n}\n","import {\n\tComponent,\n\tChangeDetectionStrategy,\n\tViewChild,\n\tElementRef,\n\tRenderer2,\n\tOnDestroy,\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tOnInit,\n\tInject,\n\tOptional,\n\tViewEncapsulation,\n\tNgZone\n} from '@angular/core';\nimport { Subject, combineLatest, fromEvent } from 'rxjs';\nimport { distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\n\nimport { ResizeDetector } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { structureParentComponent } from '../structure-parent-component';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-container',\n\ttemplateUrl: `structure-container.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContainerComponent extends SmartComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\t@ViewChild('container', { static: false })\n\tcontainerRef: ElementRef;\n\n\tcolumns: Array<CellTemplateWithAccessor> = [];\n\n\tsource: Array<ItemEntity> = [];\n\n\theight: number;\n\n\trowColoring: SchemaRowColoring;\n\n\tprivate autoResizeWidthEnabled: boolean = false;\n\n\tprivate scrollObservation$ = new Subject();\n\n\tconstructor(private elementRef: ElementRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate ngZone: NgZone,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService,\n\t\t\t\tprivate compositionCommandService: CompositionCommandService,\n\t\t\t\tprivate compositionQueryService: CompositionReadModelService,\n\t\t\t\tprivate formationQueryService: FormationReadModelService,\n\t\t\t\tprivate resizeDetector: ResizeDetector,\n\t\t\t\t@Optional() @Inject(structureParentComponent) private structureParent: any) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\t/**\n\t\t * TODO One source of truth\n\t\t *\n\t\t * There should only one sub here.\n\t\t */\n\t\tthis.sourceQueryService\n\t\t\t.onEntities()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((source: Array<ItemEntity>) => {\n\t\t\t\tthis.source = source;\n\t\t\t\tthis.setHeight(source.length * 30);\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onTemplateColumns()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columns: Array<CellTemplateWithAccessor>) => {\n\t\t\t\tthis.columns = columns;\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onResizeWidth()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.autoResizeWidthEnabled = enabled;\n\t\t\t});\n\n\t\tcombineLatest(\n\t\t\tthis.sourceQueryService.onEntities(),\n\t\t\tthis.schemaQueryService.onContainerHeight()\n\t\t)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((combine: Array<any>) => {\n\n\t\t\t\tconst source: Array<ItemEntity> = combine[0],\n\t\t\t\t\theight: number = combine[1];\n\n\t\t\t\tconst sourceSizeHeight = source.length * 30;\n\n\t\t\t\tif (sourceSizeHeight > height) {\n\t\t\t\t\tthis.setHeight(height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setHeight(sourceSizeHeight);\n\t\t\t\t}\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\n\t\t// turn on when structure is ready\n\t\tif (this.structureParent) {\n\t\t\tthis.resizeDetector\n\t\t\t\t.observe(this.structureParent.getElementRef().nativeElement)\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter(() => this.autoResizeWidthEnabled),\n\t\t\t\t\tmap((element: HTMLElement) => element.offsetWidth),\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe((width: number) => {\n\t\t\t\t\tthis.recalculateContainer(width);\n\t\t\t\t});\n\t\t}\n\n\t\tthis.compositionQueryService\n\t\t\t.onContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.onVerticalScrollEnabled()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tif (enabled) {\n\t\t\t\t\tthis.enableScrollObservation();\n\t\t\t\t} else {\n\t\t\t\t\tthis.disableScrollObservation();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t// never runs ??\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(\n\t\t\t\tfilter((str: Structure) => {\n\t\t\t\t\treturn str.isVerticalScrollEnabled();\n\t\t\t\t}),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((structure: Structure) => {\n\n\t\t\t\tconst containerHeight = structure.getContainerHeight(),\n\t\t\t\t\ttopMargin = structure.getTopMargin();\n\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'padding-top', topMargin + 'px');\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'height', containerHeight + 'px');\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.resizeDetector.destroy(this.elementRef.nativeElement);\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'height', this.height + 'px');\n\t}\n\n\tprivate recalculateContainer(width: number): void {\n\t\tif (this.autoResizeWidthEnabled) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t}\n\t}\n\n\tprivate enableScrollObservation(): void {\n\t\tthis.ngZone\n\t\t\t.runOutsideAngular(() => {\n\n\t\t\t\tfromEvent(this.elementRef.nativeElement, 'scroll')\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\t// auditTime(10),\n\t\t\t\t\t\ttakeUntil(this.scrollObservation$),\n\t\t\t\t\t\tthis.takeUntil()\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe((event: any) => {\n\n\t\t\t\t\t\tconst scrollTop = event.target.scrollTop;\n\n\t\t\t\t\t\tthis.structureCommandService.setScrollPosition(scrollTop);\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate disableScrollObservation(): void {\n\t\tthis.scrollObservation$.next();\n\t\tthis.scrollObservation$.complete();\n\t}\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'gui-structure-quick-fitlers',\n\ttemplate: `\n\t\n\t\tQuickFilters\n\t\t\n\t`\n})\nexport class StructureQuickFiltersComponent {}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureSearchingRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectSearchingEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureSearchingRepository } from '../../../domain/structure/read/searching/structure.searching.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureSearchReadModelRepository {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {}\n\n\tonSearchEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureSearchingRepository.selectSearchingEnabled(structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nconst prefix = 'Structure -';\n\nexport const STRUCTURE_CSS_CLASS_NAME = new InjectionToken<string>(`${prefix} - css className`);\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { Paging } from '../../domain/paging/read/paging';\nimport { StructureDefinition } from '../structure-definition';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\nimport { StructureInfoPanelEnabledArchive } from '../panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationArchive } from '../panel/aggregation/structure.aggregation.archive';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { StructureSearchReadModelRepository } from '../../ui-api/structure/search/structure-search.read-model.repository';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../../ui-api/structure/structure-tokens';\nimport { StructureAggregationPanelConfig } from '../panel/aggregation/structure.aggregation-panel.config';\n\n\n\n@Component({\n\tselector: 'gui-structure-blueprint',\n\ttemplateUrl: `structure.blueprint.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureBlueprintComponent extends SmartComponent {\n\n\tstructure: Structure;\n\n\tsearchEnabled: boolean = false;\n\n\ttopAggregationPanelEnabled: boolean = false;\n\n\tbottomAggregationPanelEnabled: boolean = false;\n\n\tquickFiltersEnabled: boolean = false;\n\n\tinfoPanelEnabled: boolean = false;\n\n\treadonly contentCssClass: string;\n\n\treadonly headerCssClass: string;\n\n\tprivate pagingReadModel: Paging;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate pagingQueryService: PagingReadModelService,\n\t\t\t\tprivate structureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate structureSearchReadModelRepository: StructureSearchReadModelRepository,\n\t\t\t\t@Inject(STRUCTURE_CSS_CLASS_NAME) private className: string) {\n\t\tsuper();\n\n\t\tthis.headerCssClass = `gui-${this.className}-header`;\n\t\tthis.contentCssClass = `gui-${this.className}-content`;\n\t}\n\n\tngOnInit() {\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.pagingQueryService\n\t\t\t.onPaging()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.pagingReadModel = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureSearchReadModelRepository\n\t\t\t.onSearchEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.searchEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.onQuickFiltersEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.quickFiltersEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureAggregationArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((config: StructureAggregationPanelConfig) => {\n\t\t\t\tthis.topAggregationPanelEnabled = config.itTopEnabled();\n\t\t\t\tthis.bottomAggregationPanelEnabled = config.itBottomEnabled();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureInfoPanelEnabledArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.infoPanelEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tgetHeaderTopClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-top';\n\t}\n\n\tgetHeaderBottomClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-bottom';\n\t}\n\n\tisColumnHeaderTopEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isTopHeaderEnabled();\n\t}\n\n\tisColumnHeaderBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isBottomHeaderEnabled();\n\t}\n\n\tisPagingTopEnabled(): boolean {\n\t\treturn this.structureDefinition.getTopPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerTop();\n\t}\n\n\tisPagingBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.getBottomPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerBottom();\n\t}\n\n\tisSourceEmpty(): boolean {\n\t\treturn this.structure && this.structure.getEntities().length === 0;\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedEvent extends DomainEvent {\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly values: Map<string, AggregatedValues>) {\n\t\tsuper(structureId, 'StructureAggregationsChangedEvent');\n\t}\n\n\tgetAggregations() {\n\t\treturn this.values;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\n\n\n@Injectable()\nexport class StructureAggregationUiEventsRepository {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tonAggregationsChanged(structureId: StructureId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event instanceof StructureAggregationsChangedEvent),\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationUiEventsRepository } from '../../../ui-api/structure/aggregation/structure.aggregation.ui-events-repository';\nimport { CompositionReadModelService } from '../../../ui-api/composition/composition-read-model.service';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-aggregation-panel',\n\ttemplate: `\n\n\t\t<ng-container *ngIf=\"enabled && aggregations && !sourceEmpty\">\n\n\t\t\t<div *ngFor=\"let column of headerColumns\"\n\t\t\t\t [style.width.px]=\"column.width\"\n\t\t\t\t class=\"gui-header-cell gui-structure-aggregation-cell\">\n\n\t\t\t\t<ng-container *ngIf=\"aggregations && !!aggregations.get(column.getFieldId().getId())\">\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).count)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tCount: <span>{{ aggregations.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).distinct)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tDistinct: <span>{{ aggregations.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).sum)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&sum;</span> Sum</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).sum }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).average)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-mean\"><span>_</span><span>X Average</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).average }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).min)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&and;</span> Min</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).min }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).max)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&or;</span> Max</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).max }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).median)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-median\"><span>~</span><span>X Median</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).truthy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tTruthy: <span>{{ aggregations.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).falsy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tFalsy: <span>{{ aggregations.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureAggregationPanelComponent extends SmartComponent {\n\n\t@Input()\n\tenabled: boolean;\n\n\tsourceEmpty: boolean = false;\n\n\theaderColumns: Array<CellTemplateWithContext>;\n\n\taggregations: Map<string, any>;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureAggregationUiEventsRepository: StructureAggregationUiEventsRepository,\n\t\t\t\tprivate sourceReadModelService: SourceReadModelService,\n\t\t\t\tprivate readonly compositionQueryService: CompositionReadModelService) {\n\t\tsuper();\n\n\t\tthis.structureAggregationUiEventsRepository\n\t\t\t.onAggregationsChanged(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: StructureAggregationsChangedEvent) => {\n\n\t\t\t\tthis.aggregations = event.getAggregations();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngOnInit() {\n\n\t\tthis.sourceReadModelService\n\t\t\t.onEntitiesSize()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.sourceEmpty = size === 0;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\tisAggregateTypePresent(aggregation: number): boolean {\n\t\treturn aggregation !== undefined && aggregation !== null;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../domain/structure/command/structure.aggregate';\n\n\n@Injectable()\nexport class InMemoryStructureStore extends InMemoryStore<StructureAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore } from '@generic-ui/hermes';\nimport { AggregateStoreRegister } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateStore extends InMemoryAggregateStore<StructureAggregate> {\n\n\tconstructor(inMemoryStructureStore: InMemoryStructureStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryStructureStore, aggregateStoreRegister);\n\t}\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from './structure.aggregate';\n\nexport abstract class StructureAggregateRepository {\n\n\tabstract getById(aggregateId: AggregateId): StructureAggregate;\n\n\tabstract save(aggregate: StructureAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../domain/structure/command/structure-aggregate.repository';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\n\nimport { InMemoryStructureAggregateStore } from './in-memory.structure.aggregate-store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateRepository extends StructureAggregateRepository {\n\n\tconstructor(private inMemoryStructureAggregateStore: InMemoryStructureAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): StructureAggregate {\n\t\tconst structure = this.inMemoryStructureAggregateStore.getById(aggregateId);\n\n\t\tstructure.clearEvents();\n\n\t\treturn structure;\n\t}\n\n\tsave(aggregate: StructureAggregate): void {\n\t\tthis.inMemoryStructureAggregateStore.save(aggregate);\n\t}\n\n}\n","import { ItemEntity } from '../../../source/item.entity';\n\nexport class SelectedRowsList {\n\n\tconstructor(private readonly rowIds: Array<string>) {\n\t}\n\n\tisRowSelected(entity: ItemEntity): boolean {\n\t\treturn !!(this.rowIds.find((id) => entity.equalsById(id)));\n\t}\n\n\tgetIds(): Array<string> {\n\t\treturn this.rowIds;\n\t}\n}\n","import { SelectedRowsList } from './selected-rows/selected-rows-list';\n\nexport class Formation {\n\n\tprivate readonly selectedRowsList: SelectedRowsList;\n\n\tconstructor(selectedRows: Array<string>) {\n\t\tthis.selectedRowsList = new SelectedRowsList(selectedRows);\n\t}\n\n\tgetSelectedRows(): SelectedRowsList {\n\t\treturn this.selectedRowsList;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationAggregate } from './command/formation-aggregate';\nimport { Formation } from './read/formation';\n\n\n@Injectable()\nexport class FormationConverter {\n\n\tconvert(aggregate: FormationAggregate): Formation {\n\n\t\tconst rows = aggregate.getSelectedRows();\n\n\t\treturn new Formation(rows);\n\t}\n}\n","import { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaCssClass {\n\n\tconstructor(public readonly verticalGrid: boolean,\n\t\t\t\tpublic readonly horizontalGrid: boolean,\n\t\t\t\tpublic readonly theme: SchemaTheme,\n\t\t\t\tpublic readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n}\n","import { SchemaRowColoring } from '../schema-row-coloring';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaColumnHeader } from './schema-column-header';\nimport { SchemaCssClass } from './schema-css-class';\n\nexport class Schema {\n\n\tconstructor(private readonly width: number,\n\t\t\t\tprivate readonly height: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly verticalGridEnabled: boolean,\n\t\t\t\tprivate readonly horizontalGridEnabled: boolean,\n\t\t\t\tprivate readonly theme: SchemaTheme,\n\t\t\t\tprivate readonly columnHeader: SchemaColumnHeader,\n\t\t\t\tprivate readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGridEnabled;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGridEnabled;\n\t}\n\n\tgetColumnHeader(): SchemaColumnHeader {\n\t\treturn this.columnHeader;\n\t}\n\n\tgetCssClasses(): SchemaCssClass {\n\t\treturn new SchemaCssClass(\n\t\t\tthis.isVerticalGridEnabled(),\n\t\t\tthis.isHorizontalGridEnabled(),\n\t\t\tthis.getTheme(),\n\t\t\tthis.getRowColoring()\n\t\t);\n\t}\n\n}\n","export class SchemaColumnHeader {\n\n\tconstructor(private readonly top: boolean,\n\t\t\t\tprivate readonly bottom: boolean) {\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaAggregate } from './command/schema-aggregate';\nimport { Schema } from './read/schema';\nimport { ColumnHeaderEntity } from './command/column-header/column-header.entity';\nimport { SchemaColumnHeader } from './read/schema-column-header';\n\n\n@Injectable()\nexport class SchemaConverter {\n\n\tconvert(aggregate: SchemaAggregate): Schema {\n\n\t\tconst columnHeader = aggregate.getColumnHeader();\n\n\t\treturn new Schema(\n\t\t\taggregate.getWidth(),\n\t\t\taggregate.getHeight(),\n\t\t\taggregate.getContainerHeight(),\n\t\t\taggregate.isVerticalGridEnabled(),\n\t\t\taggregate.isHorizontalGridEnabled(),\n\t\t\taggregate.getTheme(),\n\t\t\tthis.convertColumnHeader(columnHeader),\n\t\t\taggregate.getRowColoring()\n\t\t);\n\t}\n\n\tprivate convertColumnHeader(columnHeader: ColumnHeaderEntity): SchemaColumnHeader {\n\t\treturn new SchemaColumnHeader(columnHeader.isHeaderOnTop(), columnHeader.isHeaderOnBottom());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregate } from './command/paging.aggregate';\nimport { Paging } from './read/paging';\n\n\n@Injectable()\nexport class PagingConverter {\n\n\tconvert(aggregate: PagingAggregate): Paging {\n\t\treturn new Paging(\n\t\t\taggregate.isEnabled(),\n\t\t\taggregate.getPage(),\n\t\t\taggregate.getPageSize(),\n\t\t\taggregate.getPageSizes(),\n\t\t\taggregate.isPagerTop(),\n\t\t\taggregate.isPagerBottom(),\n\t\t\taggregate.isNextPageDisabled(),\n\t\t\taggregate.isPrevPageDisabled(),\n\t\t\taggregate.calculateStart(),\n\t\t\taggregate.calculateEnd(),\n\t\t\taggregate.getSourceSize()\n\t\t);\n\t}\n\n}\n","export class Source {\n\n\tconstructor(private readonly loading: boolean) {}\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Source } from './read/source';\nimport { SourceManager } from './command/source.manager';\n\n@Injectable()\nexport class SourceConverter {\n\n\tconvert(aggregate: SourceManager): Source {\n\t\treturn new Source(aggregate.isLoading());\n\t}\n\n}\n","export class VerticalFormationReadModel {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly topMargin: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly viewportHeight: number) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.topMargin;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { VerticalFormation } from '../../command/vertical-formation/vertical-formation';\nimport { VerticalFormationReadModel } from './vertical-formation.read-model';\n\n\n@Injectable()\nexport class VerticalFormationConverter {\n\n\tconvert(verticalFormation: VerticalFormation): VerticalFormationReadModel {\n\n\t\tconst enabled = verticalFormation.isEnabled(),\n\t\t\ttopMargin = verticalFormation.getTopMargin(),\n\t\t\tcontainerHeight = verticalFormation.calcFullHeight(),\n\t\t\tviewportHeight = verticalFormation.getViewPortHeight();\n\n\t\treturn new VerticalFormationReadModel(enabled, topMargin, containerHeight, viewportHeight);\n\t}\n\n}\n","import { AggregateId, ReadModel } from '@generic-ui/hermes';\n\nimport { Formation } from '../../formation/read/formation';\nimport { Schema } from '../../schema/read/schema';\nimport { Paging } from '../../paging/read/paging';\nimport { Source } from '../../source/read/source';\nimport { ItemEntity } from '../../source/item.entity';\nimport { VerticalFormationReadModel } from './vertical-formation/vertical-formation.read-model';\n\n\n\nexport class Structure extends ReadModel {\n\n\tprivate readonly formation: Formation;\n\n\tprivate readonly schema: Schema;\n\n\tprivate readonly paging: Paging;\n\n\tprivate readonly entities: Array<ItemEntity>;\n\n\tprivate readonly source: Source;\n\n\tprivate readonly verticalFormation: VerticalFormationReadModel;\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tformation: Formation,\n\t\t\t\tschema: Schema,\n\t\t\t\tpaging: Paging,\n\t\t\t\tentities: Array<ItemEntity>,\n\t\t\t\tsource: Source,\n\t\t\t\tverticalFormation: VerticalFormationReadModel) {\n\t\tsuper(uid);\n\t\tthis.formation = formation;\n\t\tthis.schema = schema;\n\t\tthis.paging = paging;\n\t\tthis.entities = entities;\n\t\tthis.source = source;\n\t\tthis.verticalFormation = verticalFormation;\n\t}\n\n\tgetFormation(): Formation {\n\t\treturn this.formation;\n\t}\n\n\tgetSchema(): Schema {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): Paging {\n\t\treturn this.paging;\n\t}\n\n\tgetEntities(): Array<ItemEntity> {\n\t\treturn this.entities;\n\t}\n\n\tgetSource(): Source {\n\t\treturn this.source;\n\t}\n\n\tgetSelectedEntities(): Array<ItemEntity> {\n\n\t\tconst selectedIds = this.formation.getSelectedRows().getIds();\n\n\t\treturn this.entities.filter((entity: ItemEntity) => {\n\t\t\treturn selectedIds.some((id: string) => entity.equalsById(id));\n\t\t});\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.verticalFormation.getTopMargin();\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.verticalFormation.getContainerHeight();\n\t}\n\n\tisLoaderVisible(): boolean {\n\t\tif (this.getSchema().getHeight() > 150) {\n\t\t\treturn this.getSource().isLoading();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isTopHeaderEnabled();\n\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.topHeader to presentation\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isBottomHeaderEnabled();\n\t\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.bottomHeader to presentation\n\t}\n\n\tisReadyToDisplay(): boolean {\n\t\treturn this.entities.length > 0;\n\t\t// this.presentation.getColumns().length > 0; // TODO presentation getColumns\n\t}\n\n\tisVerticalScrollEnabled(): boolean {\n\t\treturn this.verticalFormation.isEnabled();\n\t}\n\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { FormationConverter } from '../formation/formation.converter';\nimport { SchemaConverter } from '../schema/schema.converter';\nimport { PagingConverter } from '../paging/paging.converter';\nimport { SourceConverter } from '../source/source.converter';\nimport { VerticalFormationConverter } from './read/vertical-formation/vertical-formation.converter';\nimport { StructureAggregate } from './command/structure.aggregate';\nimport { Structure } from './read/structure';\nimport { OriginItemEntity } from '../source/command/origin/origin-item-entity';\nimport { ItemEntity } from '../source/item.entity';\n\n\n@Injectable()\nexport class StructureConverter {\n\n\tconstructor(private formationConverter: FormationConverter,\n\t\t\t\tprivate schemaConverter: SchemaConverter,\n\t\t\t\tprivate pagingConverter: PagingConverter,\n\t\t\t\tprivate sourceConverter: SourceConverter,\n\t\t\t\tprivate verticalFormationConverter: VerticalFormationConverter) {}\n\n\tconvert(aggregate: StructureAggregate): Structure {\n\n\t\tconst formationAggregate = aggregate.getFormation(),\n\t\t\tschemaAggregate = aggregate.getSchema(),\n\t\t\tpagingAggregate = aggregate.getPaging(),\n\t\t\tsourceQuery = aggregate.getEntities(),\n\t\t\tsourceCoordinator = aggregate.getSource(),\n\t\t\tverticalFormation = aggregate.getVerticalFormation();\n\n\t\treturn new Structure(\n\t\t\taggregate.getId(),\n\t\t\tthis.formationConverter.convert(formationAggregate),\n\t\t\tthis.schemaConverter.convert(schemaAggregate),\n\t\t\tthis.pagingConverter.convert(pagingAggregate),\n\t\t\tthis.convertSource(sourceQuery),\n\t\t\tthis.sourceConverter.convert(sourceCoordinator),\n\t\t\tthis.verticalFormationConverter.convert(verticalFormation)\n\t\t);\n\t}\n\n\tprivate convertSource(source: Array<OriginItemEntity>): Array<ItemEntity> {\n\t\treturn source.map((originItem: OriginItemEntity) => {\n\t\t\treturn new ItemEntity(originItem.rawData, originItem.getPosition(), originItem.id, originItem.getVersion())\n\t\t});\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Structure } from '../../../../domain/structure/read/structure';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\nimport { StructureConverter } from '../../../../domain/structure/structure.converter';\n\n\n@Injectable()\nexport class InMemoryStructureReadStore extends InMemoryReadModelStore<Structure, StructureAggregate> {\n\n\tconstructor(private inMemoryProjectStore: InMemoryStructureStore,\n\t\t\t\tprivate structureConverter: StructureConverter) {\n\t\tsuper(inMemoryProjectStore);\n\t}\n\n\ttoReadModel(aggregate: StructureAggregate): Structure {\n\t\treturn this.structureConverter.convert(aggregate);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureInitedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SetSourceLoadingEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SetSourceLoadingEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaThemeSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaThemeSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaHorizontalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaHorizontalGridSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaVerticalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaVerticalGridSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaTopHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaTopHeaderChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaBottomHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaBottomHeaderChangedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class RowColoringSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'RowColoringSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagingSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class FormationSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'FormationSetEvent');\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class VerticalScrollEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'VerticalScrollEnabledSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class ScrollPositionSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ScrollPositionSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class OriginSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'OriginSetEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureFilterToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureFilterToggledEvent');\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureSearchPhraseSetDomainEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureSearchPhraseSetDomainEvent');\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../../../domain/structure/read/structure.repository';\nimport { Structure } from '../../../../domain/structure/read/structure';\nimport { InMemoryStructureReadStore } from './in-memory-structure.read-store';\nimport { StructureInitedEvent } from '../../../../domain/structure/command/init/structure-inited.event';\nimport { SetSourceLoadingEvent } from '../../../../domain/source/command/loading/set-source-loading.event';\nimport { SchemaSetEvent } from '../../../../domain/schema/command/set/schema-set.event';\nimport { SchemaThemeSetEvent } from '../../../../domain/schema/command/theme/schema-theme-set.event';\nimport { SchemaHorizontalGridSetEvent } from '../../../../domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event';\nimport { SchemaVerticalGridSetEvent } from '../../../../domain/schema/command/grid/vertical/schema-vertical-grid-set.event';\nimport { SchemaTopHeaderChangedEvent } from '../../../../domain/schema/command/column-header/top/schema-top-header-changed.event';\nimport { SchemaBottomHeaderChangedEvent } from '../../../../domain/schema/command/column-header/bottom/schema-bottom-header-changed.event';\nimport { RowColoringSetEvent } from '../../../../domain/schema/command/coloring/set/row-coloring-set.event';\nimport { PagingSetEvent } from '../../../../domain/paging/command/set/paging-set.event';\nimport { PrevPageEvent } from '../../../../domain/paging/command/prev-page/prev-page.event';\nimport { NextPageEvent } from '../../../../domain/paging/command/next-page/next-page.event';\nimport { PagesizeChangedEvent } from '../../../../domain/paging/command/change-pagesize/pagesize-changed.event';\nimport { FormationSetEvent } from '../../../../domain/formation/command/set/formation-set.event';\nimport { SelectedRowToggledEvent } from '../../../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { VerticalScrollEnabledSetEvent } from '../../../../domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event';\nimport { ScrollPositionSetEvent } from '../../../../domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event';\nimport { SortToggledEvent } from '../../../../domain/structure/command/sort/toggle/sort-toggled.event';\nimport { OriginSetEvent } from '../../../../domain/source/command/origin/set-origin/origin-set.event';\nimport { StructureFilterToggledEvent } from '../../../../domain/structure/command/filter/toggle/structure.filter-toggled.event';\nimport { StructureSearchPhraseSetDomainEvent } from '../../../../domain/structure/command/search/set/structure.search-phrase-set.domain-event';\nimport { SortOrderSetEvent } from '../../../../domain/structure/command/sort/order/sort-order-set.event';\n\n\n@Injectable()\nexport class InMemoryStructureRepository extends StructureRepository implements OnDestroy {\n\n\tprivate readonly structureIdToStructure = new Map<string, Structure>();\n\n\tprivate readonly structure$ = new ReplaySubject<Map<string, Structure>>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryStructureQueryStore: InMemoryStructureReadStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tStructureInitedEvent,\n\t\t\t\tSetSourceLoadingEvent,\n\t\t\t\tSchemaSetEvent,\n\t\t\t\tSchemaThemeSetEvent,\n\t\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\t\tSchemaVerticalGridSetEvent,\n\t\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\t\tRowColoringSetEvent,\n\t\t\t\tPagingSetEvent,\n\t\t\t\tPrevPageEvent,\n\t\t\t\tNextPageEvent,\n\t\t\t\tPagesizeChangedEvent,\n\t\t\t\tFormationSetEvent,\n\t\t\t\tSelectedRowToggledEvent,\n\t\t\t\tVerticalScrollEnabledSetEvent,\n\t\t\t\tScrollPositionSetEvent,\n\t\t\t\tSortToggledEvent as any,\n\t\t\t\tStructureFilterToggledEvent,\n\t\t\t\tStructureSearchPhraseSetDomainEvent,\n\t\t\t\tSortOrderSetEvent as any,\n\t\t\t\tOriginSetEvent as any\n\t\t\t)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst structure = this.inMemoryStructureQueryStore.getById(aggregateId),\n\t\t\t\t\tkey = structure.getId().toString();\n\n\t\t\t\tthis.structureIdToStructure.set(key, structure);\n\n\t\t\t\tthis.structure$.next(this.structureIdToStructure);\n\t\t\t});\n\t}\n\n\tonStructure(aggregateId: AggregateId): Observable<Structure> {\n\n\t\treturn this.structure$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structureIdToStructure: Map<string, Structure>) => {\n\n\t\t\t\t\t\t   const key = aggregateId.getId();\n\n\t\t\t\t\t\t   return structureIdToStructure.has(key);\n\t\t\t\t\t   }),\n\t\t\t\t\t   map((structureIdToStructure: Map<string, Structure>) => structureIdToStructure.get(aggregateId.getId()))\n\t\t\t\t   );\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n}\n","import { InMemoryStructureAggregateStore } from './commad/in-memory.structure.aggregate-store';\n\nimport { InMemoryStructureAggregateRepository } from './commad/in-memory.structure-aggregate.repository';\nimport { StructureAggregateRepository } from '../../../domain/structure/command/structure-aggregate.repository';\nimport { InMemoryStructureReadStore } from './read/in-memory-structure.read-store';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { InMemoryStructureRepository } from './read/in-memory.structure.repository';\nimport { InMemoryStructureStore } from './in-memory.structure.store';\n\nexport const inMemoryStructureCommandProviders = [\n\tInMemoryStructureAggregateStore,\n\t{\n\t\tprovide: StructureAggregateRepository,\n\t\tuseClass: InMemoryStructureAggregateRepository\n\t},\n];\n\nexport const inMemoryStructureReadProviders = [\n\tInMemoryStructureReadStore,\n\t{\n\t\tprovide: StructureRepository,\n\t\tuseClass: InMemoryStructureRepository\n\t}\n];\n\nexport const inMemoryStructureProviders = [\n\tInMemoryStructureStore\n];\n","export class OriginItemEntity {\n\n\tid: string;\n\n\trawData: any;\n\n\tprivate version: number;\n\n\tprivate position: number;\n\n\tconstructor(id: string,\n\t\t\t\trawData: any,\n\t\t\t\tposition: number,\n\t\t\t\tversion: number = 0) {\n\t\tthis.id = id;\n\t\tthis.rawData = rawData;\n\t\tthis.position = position;\n\t\tthis.version = version;\n\t}\n\n\tgetData(): any {\n\t\treturn this.rawData;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tgetPosition(): number {\n\t\treturn this.position;\n\t}\n\n\tbumpVersion(): void {\n\t\tthis.version += 1;\n\t}\n\n\tsetPosition(position: number): void {\n\t\tthis.position = position;\n\t}\n\n\tclone(): OriginItemEntity {\n\n\t\tconst rawData = {...this.rawData};\n\n\t\treturn new OriginItemEntity(this.id, rawData, this.version);\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\nexport class StructureSourceItemEditedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedAggregateEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin-item-entity';\n\nexport class StructureOriginChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructureOriginChangedAggregateEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateEvent, RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin/origin-item-entity';\nimport { StructureId } from '../../structure-id';\nimport { Field } from '../../structure/command/field/data-type/field';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\n\n\nexport class SourceManager {\n\n\tprivate loading: boolean = false;\n\n\tprivate fetched: boolean = false;\n\n\tprivate origin: Array<OriginItemEntity>;\n\n\tprivate entities: Array<OriginItemEntity> = [];\n\n\t// Entities after filtering, searching\n\tprivate preparedEntities: Array<OriginItemEntity> = [];\n\n\tprivate slicedEntities: Array<OriginItemEntity> = [];\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n\tisFetched(): boolean {\n\t\treturn this.fetched;\n\t}\n\n\tsetLoading(enabled: boolean): void {\n\t\tthis.loading = enabled;\n\t}\n\n\tsetEntities(ent: Array<OriginItemEntity>): void {\n\t\tthis.entities = ent;\n\t\tthis.recalculatePositions();\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.entities;\n\t}\n\n\tsetPreparedEntities(): void {\n\t\tthis.preparedEntities = [...this.entities];\n\t}\n\n\tgetPreparedEntities(): Array<OriginItemEntity> {\n\t\treturn this.preparedEntities;\n\t}\n\n\tsetSlicedEntities(ent: Array<OriginItemEntity>) {\n\t\tthis.slicedEntities = ent;\n\t}\n\n\tgetSlicedEntities(): Array<OriginItemEntity> {\n\t\treturn this.slicedEntities;\n\t}\n\n\tsetOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = this.convertItems(items);\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tsetConvertedOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = items;\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n\n\tgetOriginSize(): number {\n\t\treturn this.origin.length;\n\t}\n\n\t// editOriginItemByProperty(byField, value: any, field: Field, structureId: StructureId): AggregateEvent {\n\t//\n\t// }\n\n\teditOriginItem(itemId: string, value: any, field: Field, structureId: StructureId): ReadonlyArray<AggregateEvent> {\n\n\t\tconst item: OriginItemEntity = this.findOriginItem(itemId),\n\t\t\titemBeforeChange = item.clone();\n\n\t\tif (item) {\n\t\t\titem.rawData[field.getAccessor()] = value;\n\t\t\titem.bumpVersion();\n\t\t}\n\n\t\treturn [\n\t\t\tnew StructureSourceItemEditedAggregateEvent(structureId, itemBeforeChange, item.clone()),\n\t\t\tthis.createOriginChangedEvent(structureId)\n\t\t];\n\t}\n\n\tremoveOriginItem(itemId: string, structureId: StructureId): Array<AggregateEvent> {\n\n\t\tconst index = this.findOriginItemIndex(itemId);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.origin.splice(index, 1);\n\n\t\t\treturn [this.createOriginChangedEvent(structureId)];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate convertItems(items: Array<any>): Array<OriginItemEntity> {\n\t\treturn items.map((item: any, index: number) => {\n\t\t\treturn new OriginItemEntity(RandomStringGenerator.generate(), item, index);\n\t\t});\n\t}\n\n\tprivate createOriginChangedEvent(structureId: StructureId): AggregateEvent {\n\t\treturn new StructureOriginChangedAggregateEvent(structureId, this.origin);\n\t}\n\n\tprivate findOriginItem(itemId: string): OriginItemEntity {\n\t\treturn this.origin.find((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n\tprivate findOriginItemIndex(itemId: string): number {\n\t\treturn this.origin.findIndex((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n\tprivate recalculatePositions(): void {\n\t\tthis.entities.forEach((ent: OriginItemEntity, index: number) => {\n\t\t\tent.setPosition(index);\n\t\t})\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SourceManager } from './source.manager';\n\n\n@Injectable()\nexport class SourceManagerFactory {\n\n\tcreateDefault(): SourceManager {\n\t\treturn new SourceManager();\n\t}\n\n\tcreate(): SourceManager {\n\t\treturn new SourceManager();\n\t}\n\n}\n","export class VerticalRange {\n\n\tconstructor(private readonly start: number,\n\t\t\t\tprivate readonly end: number) {\n\t}\n\n\tgetStart(): number {\n\t\treturn this.start;\n\t}\n\n\tgetEnd(): number {\n\t\treturn this.end;\n\t}\n\n}\n","import { VerticalRange } from './vertical-range';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\n\nexport class VerticalFormation {\n\n\tprivate rowHeight: number = 30;\n\n\tprivate hiddenItemsTop = 0;\n\n\tprivate hiddenItemsBottom = 1;\n\n\tprivate viewportHeight: number;\n\n\tprivate scrollPosition: number;\n\n\tprivate range: VerticalRange;\n\n\tprivate sourceSize: number;\n\n\tprivate logger: Logger;\n\n\tconstructor(private enabled: boolean = false,\n\t\t\t\tviewportHeight: number = 0,\n\t\t\t\tsourceSize: number = 0,\n\t\t\t\tscrollPosition: number = 0,\n\t\t\t\trowHeight?: number,\n\t\t\t\thiddenItemsTop?: number,\n\t\t\t\thiddenItemsBottom?: number) {\n\t\tthis.viewportHeight = viewportHeight;\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.scrollPosition = scrollPosition;\n\n\t\tif (Number.isInteger(rowHeight)) {\n\t\t\tthis.rowHeight = rowHeight;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsTop)) {\n\t\t\tthis.hiddenItemsTop = hiddenItemsTop;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsBottom)) {\n\t\t\tthis.hiddenItemsBottom = hiddenItemsBottom;\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled &&\n\t\t\tthis.viewportHeight > 0 &&\n\t\t\tthis.sourceSize > 0;\n\t}\n\n\tgetRange(): VerticalRange {\n\t\treturn this.range;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.range.getStart() * this.rowHeight;\n\t}\n\n\tcalculateRange(): any {\n\n\t\tif (this.calcFullHeight() <= this.viewportHeight) {\n\t\t\tthis.range = new VerticalRange(0, this.sourceSize);\n\t\t\treturn;\n\t\t}\n\n\t\tconst itemsInViewport = Math.floor(this.viewportHeight / this.rowHeight);\n\n\t\tconst hiddenElements = Math.floor(this.scrollPosition / this.rowHeight);\n\n\t\tconst topMargin = Math.abs(hiddenElements - this.hiddenItemsTop) * this.rowHeight;\n\n\t\tlet start = (hiddenElements - this.hiddenItemsTop);\n\n\t\tconst viewportElements = Math.ceil(this.viewportHeight / this.rowHeight);\n\n\t\tlet end = start + viewportElements + this.hiddenItemsBottom;\n\n\t\tif (end > this.sourceSize) {\n\t\t\tend = this.sourceSize;\n\t\t\tstart = end - itemsInViewport;\n\t\t}\n\n\t\tthis.range = new VerticalRange(start, end);\n\n\t\treturn {\n\t\t\tstart,\n\t\t\tend,\n\t\t\ttopMargin\n\t\t};\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\n\t\t// TODO dispatch aggregate event\n\t\tif (this.enabled && this.viewportHeight === 0) {\n\t\t\tthis.logger.warn('Height needs to be specified in order for virtual scroll to work.');\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\tsetSourceSize(sourceSize: number = 0): void {\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.calculateRange();\n\t}\n\n\tsetTopHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsTop = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetBottomHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsBottom = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetScrollPosition(scrollPosition: number): void {\n\t\tthis.scrollPosition = scrollPosition;\n\t\tthis.calculateRange();\n\t}\n\n\tsetViewportHeight(height: number): void {\n\t\tthis.viewportHeight = height;\n\t\tthis.calculateRange();\n\t}\n\n\tsetRowHeight(height: number): void {\n\t\tthis.rowHeight = height;\n\t}\n\n\tsetLogger(logger: Logger): void {\n\t\tthis.logger = logger;\n\t}\n\n\tcalcFullHeight(): number {\n\t\treturn this.sourceSize * this.rowHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\nimport { VerticalFormation } from './vertical-formation';\n\n\n@Injectable()\nexport class VerticalFormationFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreate(enabled: boolean = false,\n\t\t   viewportHeight: number = 0,\n\t\t   sourceSize: number = 0,\n\t\t   scrollPosition: number = 0,\n\t\t   rowHeight?: number,\n\t\t   hiddenItemsTop?: number,\n\t\t   hiddenItemsBottom?: number): VerticalFormation {\n\n\t\tconst vf = new VerticalFormation(\n\t\t\tenabled,\n\t\t\tviewportHeight,\n\t\t\tsourceSize,\n\t\t\tscrollPosition,\n\t\t\trowHeight,\n\t\t\thiddenItemsTop,\n\t\t\thiddenItemsBottom\n\t\t);\n\n\t\tvf.setLogger(this.logger);\n\n\t\treturn vf;\n\t}\n\n}\n","export const AGGREGATION_CALCULATORS = 'GUI - Aggregation Calculators';\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly aggregatedValues: Map<string, AggregatedValues>) {\n\t\tsuper(aggregateId, 'StructureAggregationsChangedAggregateEvent');\n\t}\n\n\tgetAggregations(): Map<string, AggregatedValues> {\n\t\treturn this.aggregatedValues;\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { StructureAggregationsChangedAggregateEvent } from './structure.aggregations-changed.aggregate-event';\n\n\nexport class AggregationManager {\n\n\tprivate readonly structureId: StructureId;\n\n\tprivate enabled: boolean = false;\n\n\tprivate readonly values = new Map<FieldId, any>();\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly calculators: Array<AggregationCalculator<any, any>>) {\n\t\tthis.structureId = structureId;\n\t}\n\n\tcalculate(fields: Array<Field>, entities: Array<OriginItemEntity>): Array<AggregateEvent> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst calculations = new Map();\n\n\t\tthis.calculators.forEach((calc: AggregationCalculator<any, any>) => {\n\n\t\t\tconst aggregatedValues = calc.calculate(fields, entities);\n\n\t\t\tif (aggregatedValues) {\n\t\t\t\tArray.from(aggregatedValues.keys())\n\t\t\t\t\t .forEach((key: any) => {\n\t\t\t\t\t\t calculations.set(key, aggregatedValues.get(key));\n\t\t\t\t\t });\n\t\t\t}\n\t\t});\n\n\t\tif (calculations.size > 0) {\n\t\t\treturn [\n\t\t\t\tnew StructureAggregationsChangedAggregateEvent(this.structureId, calculations)\n\t\t\t];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\t}\n\n\tadd() {\n\t}\n\n\tremove() {\n\t}\n\n\tupdate() {\n\t}\n\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { StructureId } from '../../../structure-id';\nimport { AggregationManager } from './aggregation.manager';\n\n\n\n@Injectable()\nexport class AggregationManagerFactory {\n\n\tconstructor(@Inject(AGGREGATION_CALCULATORS) private calculators: Array<AggregationCalculator<any, any>>) {}\n\n\tcreate(structureId: StructureId): AggregationManager {\n\t\treturn new AggregationManager(structureId, this.calculators);\n\t}\n\n}\n","import { FilterId } from './filter.id';\nimport { Field } from '../field/data-type/field';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureFilter {\n\n\tprivate readonly filterId: FilterId;\n\n\tprivate field: Field;\n\n\tprivate filterValue: any;\n\n\tconstructor(id: FilterId,\n\t\t\t\tfield: Field,\n\t\t\t\tfilterValue: any) {\n\t\tthis.filterId = id;\n\t\tthis.field = field;\n\t\tthis.filterValue = filterValue;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.field.getId();\n\t}\n\n\tgetFilterValue(): any {\n\t\treturn this.filterValue;\n\t}\n\n\tsetFilterValue(filterValue: any): void {\n\t\tthis.filterValue = filterValue;\n\t}\n\n\t// Move to container\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.filter((item: OriginItemEntity) => {\n\n\t\t\tif (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.filterString(item);\n\t\t\t} else if (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.filterNumber(item);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.filterBoolean(item);\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate filterString(item: OriginItemEntity): boolean {\n\t\tconst value = this.field.getValue(item);\n\n\t\tif (typeof value === 'string') {\n\t\t\treturn value.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate filterNumber(item: OriginItemEntity): boolean {\n\t\tconst numberValue = this.field.getValue(item);\n\n\t\treturn numberValue > this.filterValue;\n\t}\n\n\tprivate filterBoolean(item: OriginItemEntity): boolean {\n\t\tconst booleanValue = this.field.getValue(item);\n\n\t\treturn booleanValue === this.filterValue;\n\t}\n\n}\n","import { Field } from '../field/data-type/field';\n\nexport class FilterId {\n\n\tprivate readonly id: string;\n\n\tconstructor(field: Field,\n\t\t\t\tfilterId: string) {\n\n\t\tconst fieldId = field.getId().toString();\n\n\t\tthis.id = fieldId + '@' + filterId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n}\n","import { FilterConfig } from '../../../../ui-api/structure/filter/filter-config';\nimport { SearchConfig } from '../../../../ui-api/structure/search/search-config';\nimport { QuickFiltersConfig } from '../../../../ui-api/structure/filter/quick-filters.config';\n\nexport class FilterSettings {\n\n\tprivate filteringEnabled: boolean = false;\n\n\tprivate searchEnabled: boolean = false;\n\n\tprivate quickFiltersEnabled: boolean = false;\n\n\tconstructor(filteringEnabled: boolean = false,\n\t\t\t\tsearchEnabled: boolean = false,\n\t\t\t\tquickFiltersEnabled: boolean = false) {\n\t\tthis.filteringEnabled = filteringEnabled;\n\t\tthis.searchEnabled = searchEnabled;\n\t\tthis.quickFiltersEnabled = quickFiltersEnabled;\n\t}\n\n\tisFilteringEnabled(): boolean {\n\t\treturn this.filteringEnabled;\n\t}\n\n\tisQuickFilteringEnabled(): boolean {\n\t\treturn this.quickFiltersEnabled;\n\t}\n\n\tisSearchingEnabled(): boolean {\n\t\treturn this.searchEnabled;\n\t}\n\n\tsetFilterConfig(config: FilterConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.filteringEnabled = config.enabled;\n\t\t}\n\t}\n\n\tsetSearchingConfig(config: SearchConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.searchEnabled = config.enabled;\n\t\t}\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.quickFiltersEnabled = config.enabled;\n\t\t}\n\t}\n\n}\n","import { StructureFilter } from './structure.filter';\nimport { Field } from '../field/data-type/field';\nimport { FilterId } from './filter.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { FilterSettings } from './filter.settings';\n\n\nexport class FilterManager {\n\n\tprivate readonly filterSettings = new FilterSettings();\n\n\tprivate readonly filters = new Map<string, StructureFilter>();\n\n\tgetAll(): Array<StructureFilter> {\n\t\treturn Array.from(this.filters)\n\t\t\t\t\t.map((arr) => arr[1]);\n\t}\n\n\tgetSettings(): FilterSettings {\n\t\treturn this.filterSettings;\n\t}\n\n\taddFilter(field: Field, externalFilterId: string, filterValue: string): void {\n\n\t\tconst filterId = new FilterId(field, externalFilterId),\n\t\t\tfilter = new StructureFilter(filterId, field, filterValue);\n\n\t\tif (filterValue === '') {\n\t\t\tthis.filters.delete(filterId.getId());\n\t\t} else {\n\t\t\tthis.filters.set(filterId.getId(), filter);\n\t\t}\n\t}\n\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst filters = this.getAll();\n\n\t\tlet filteredEntities = [...entities];\n\n\t\tfor (let filter of filters) {\n\t\t\tfilteredEntities = filter.filter(filteredEntities);\n\t\t}\n\n\t\treturn filteredEntities;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FilterManager } from './filter.manager';\n\n\n@Injectable()\nexport class FilterManagerFactory {\n\n\tcreate(enabled: boolean = false): FilterManager {\n\t\treturn new FilterManager();\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { FieldId } from './data-type/field.id';\n\nexport class FieldIdGenerator {\n\n\tgenerateId(): FieldId {\n\n\t\tconst id = RandomStringGenerator.generate();\n\t\treturn new FieldId(id);\n\t}\n\n}\n","import { FieldId } from './field.id';\nimport { DataType } from './data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../../aggregation/aggregation.type';\nimport { ColumnAggregationConfig } from '../../../../composition/column-aggregation.config';\n\nexport abstract class Field {\n\n\tprivate readonly id: FieldId;\n\n\t// TODO\n\tprivate readonly accessor: string | any; //(rawData: any) => any;\n\n\tprivate readonly dataType: DataType;\n\n\tprivate readonly accessorMethod: (entity: OriginItemEntity) => any;\n\n\tprivate aggregationEnabled: boolean = true;\n\n\tprivate aggregations: AggregationType;\n\n\tprivate readonly possibleAggregations: AggregationType;\n\n\tprotected constructor(id: FieldId,\n\t\t\t\t\t\t  accessor: any,\n\t\t\t\t\t\t  dataType: DataType,\n\t\t\t\t\t\t  aggregationConfig?: ColumnAggregationConfig) {\n\t\tthis.id = id;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\n\t\tif (typeof accessor === 'string') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => entity.getData()[accessor];\n\t\t} else if (typeof accessor === 'function') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => accessor(entity.getData());\n\t\t}\n\n\t\tthis.possibleAggregations = this.assignPossibleAggregations();\n\n\t\tthis.assignAggregations(aggregationConfig);\n\t}\n\n\tabstract assignDefaultAggregations(): AggregationType;\n\n\tabstract assignPossibleAggregations(): AggregationType;\n\n\tgetId(): FieldId {\n\t\treturn this.id;\n\t}\n\n\tgetKey(): string {\n\t\treturn this.getId().getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n\tgetAccessor(): string {\n\t\treturn this.accessor;\n\t}\n\n\tgetAccessorMethod(): (entity: OriginItemEntity) => any {\n\t\treturn this.accessorMethod;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessorMethod(entity);\n\t}\n\n\tisAggregation(type: AggregationType): boolean {\n\n\t\tif (!this.isAggregationEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(this.aggregations & type);\n\t}\n\n\tisAggregationEnabled(): boolean {\n\t\treturn this.aggregationEnabled;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): void {\n\t\tthis.aggregationEnabled = enabled;\n\t}\n\n\tprivate assignAggregations(aggregationConfig: ColumnAggregationConfig): void {\n\n\t\tif (!!aggregationConfig && Object.keys(aggregationConfig).length !== 0) {\n\n\t\t\tif (aggregationConfig.enabled) {\n\t\t\t\tthis.aggregationEnabled = !!aggregationConfig.enabled;\n\t\t\t}\n\n\t\t\tif (aggregationConfig.aggregationTypes) {\n\n\t\t\t\tthis.aggregations = 0;\n\n\t\t\t\taggregationConfig.aggregationTypes.forEach((t) => {\n\t\t\t\t\tthis.aggregations |= t;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t}\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class UnknownField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.UNKNOWN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class NumberField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.NUMBER,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.SUM |\n\t\t// \tAggregationType.MIN |\n\t\t// \tAggregationType.MAX |\n\t\t// \tAggregationType.AVERAGE |\n\t\t// \tAggregationType.MEDIAN;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.SUM |\n\t\t\tAggregationType.MIN |\n\t\t\tAggregationType.MAX |\n\t\t\tAggregationType.AVERAGE |\n\t\t\tAggregationType.MEDIAN;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class StringField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.STRING,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class BooleanField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.BOOLEAN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.TRUTHY |\n\t\t// \tAggregationType.FALSY;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.TRUTHY |\n\t\t\tAggregationType.FALSY;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class DateField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.DATE,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FieldIdGenerator } from '../field-id.generator';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from './field';\nimport { DataType } from './data-type';\nimport { UnknownField } from './fields/unknown-field';\nimport { NumberField } from './fields/number-field';\nimport { StringField } from './fields/string-field';\nimport { BooleanField } from './fields/boolean-field';\nimport { DateField } from './fields/date-field';\n\n\n\n@Injectable()\nexport class FieldFactory {\n\n\tconstructor(private readonly fieldIdGenerator: FieldIdGenerator) {\n\t}\n\n\tcreate(column: ColumnConfig): Field {\n\n\t\tlet columnType = column.type;\n\n\t\tif (columnType === undefined) {\n\t\t\tcolumnType = DataType.STRING;\n\t\t}\n\n\t\tif (columnType === DataType.UNKNOWN) {\n\t\t\treturn new UnknownField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.NUMBER) {\n\t\t\treturn new NumberField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.STRING) {\n\t\t\treturn new StringField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.BOOLEAN) {\n\t\t\treturn new BooleanField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.DATE) {\n\t\t\treturn new DateField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t}\n\n\n}\n","import { Field } from './data-type/field';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldId } from './data-type/field.id';\nimport { ColumnConfig } from '../../../composition/column.config';\n\n\nexport class FieldCollection {\n\n\tprivate readonly fields = new Map<string, Field>();\n\n\tconstructor(private readonly fieldFactory: FieldFactory) {}\n\n\tgetField(fieldId: FieldId): Field {\n\n\t\tif (fieldId === null) {\n\t\t\treturn this.getAllFields()[0];\n\t\t}\n\n\t\treturn this.fields.get(fieldId.getId());\n\t}\n\n\tgetAllFieldIds(): Array<string> {\n\t\treturn Array.from(this.fields.keys());\n\t}\n\n\tgetAllFields(): Array<Field> {\n\t\treturn Array.from(this.fields.values());\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>): void {\n\n\t\tif (!columns) {\n\t\t\treturn;\n\t\t}\n\n\t\tcolumns.forEach((column: ColumnConfig) => {\n\n\t\t\tconst field = this.fieldFactory.create(column);\n\n\t\t\tthis.addField(field);\n\t\t});\n\t}\n\n\taddFields(fields: Array<Field>): void {\n\t\tfor (let field of fields) {\n\t\t\tthis.addField(field);\n\t\t}\n\t}\n\n\tprivate addField(field: Field): void {\n\t\tthis.fields.set(field.getId().toString(), field);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldCollection } from './field.collection';\n\n\n\n@Injectable()\nexport class FieldCollectionFactory {\n\n\tconstructor(private fieldFactory: FieldFactory) {\n\t}\n\n\tcreate(): FieldCollection {\n\t\treturn new FieldCollection(this.fieldFactory);\n\t}\n\n}\n","import { SorterId } from './sorter.id';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureSorter {\n\n\tprivate readonly sorterId: SorterId;\n\n\tprivate columnId: string;\n\n\tprivate field: Field;\n\n\tprivate rank: number = 1;\n\n\tprivate direction: boolean;\n\n\tconstructor(id: SorterId,\n\t\t\t\tfield: Field,\n\t\t\t\tdirection: boolean = true) {\n\t\tthis.sorterId = id;\n\t\tthis.field = field;\n\t\tthis.direction = direction;\n\t}\n\n\tgetId(): SorterId {\n\t\treturn this.sorterId;\n\t}\n\n\tgetRank(): number {\n\t\treturn this.rank;\n\t}\n\n\tgetField(): Field {\n\t\treturn this.field;\n\t}\n\n\thasDirection(): boolean {\n\t\treturn this.direction;\n\t}\n\n\tchangeDirection(): void {\n\t\tthis.direction = !this.direction;\n\t}\n\n\tsetDirection(direction: boolean): void {\n\t\tthis.direction = direction;\n\t}\n\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.sort((entityOne: OriginItemEntity, entityTwo: OriginItemEntity) => {\n\n\t\t\tlet valueOne = this.direction ? this.field.getValue(entityOne) : this.field.getValue(entityTwo),\n\t\t\t\tvalueTwo = this.direction ? this.field.getValue(entityTwo) : this.field.getValue(entityOne);\n\n\t\t\tif (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.sortNumber(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.sortBoolean(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.sortString(valueOne, valueTwo);\n\t\t\t} else {\n\t\t\t\treturn this.sortUnknown(valueOne, valueTwo);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate sortString(strOne: string, strTwo: string): number {\n\n\t\tconst sureStrOne = '' + strOne,\n\t\t\tsureStrTwo = '' + strTwo;\n\n\t\treturn sureStrOne.localeCompare(sureStrTwo);\n\t}\n\n\tprivate sortNumber(numOne: number, numTwo: number): number {\n\n\t\tconst sureNumOne = +numOne,\n\t\t\tsureNumTwo = +numTwo;\n\n\t\treturn sureNumOne - sureNumTwo;\n\t}\n\n\tprivate sortBoolean(booleanOne: boolean, booleanTwo: boolean): number {\n\n\t\tconst sureBoolOne = !!booleanOne,\n\t\t\tsureBoolTwo = !!booleanTwo;\n\n\t\treturn (sureBoolOne === sureBoolTwo) ? 0 : sureBoolTwo ? -1 : 1;\n\t}\n\n\tprivate sortUnknown(a: any, b: any): number {\n\t\treturn 0;\n\t}\n\n}\n","export class SorterId {\n\n\tprivate readonly sorterId: string;\n\n\tconstructor(id: string) {\n\t\tthis.sorterId = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.sorterId;\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { StructureSorter } from './structure.sorter';\nimport { SortingConfig } from '../../../../ui-api/structure/sorting-config';\nimport { Field } from '../field/data-type/field';\nimport { SorterId } from './sorter.id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { SortStatus } from '../../../composition/command/sort/sort-status';\n\n\nexport class SorterCollection {\n\n\tprivate enabled: boolean;\n\n\tprivate multi: boolean;\n\n\tprivate readonly sorters = new Map<string, StructureSorter>();\n\n\tconstructor(enabled: boolean = false,\n\t\t\t\tmulti: boolean = false) {\n\t\tthis.enabled = enabled;\n\t\tthis.multi = multi;\n\t}\n\n\tsetConfig(config: SortingConfig): void {\n\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.enabled = config.enabled;\n\t\t}\n\n\t\tif (config && config.multiSorting !== undefined && config.multiSorting !== null) {\n\t\t\tthis.multi = config.multiSorting;\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t}\n\n\ttoggle(field: Field): void {\n\n\t\tconst fieldId = field.getId(),\n\t\t\tsorter = this.sorters.get(fieldId.getId());\n\n\t\tif (sorter) {\n\t\t\tif (sorter.hasDirection()) {\n\t\t\t\tsorter.changeDirection();\n\t\t\t} else {\n\t\t\t\tthis.delete(fieldId);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.add(field);\n\t\t}\n\n\t}\n\n\tsetSortOrder(field: Field, sortOrder: SortStatus): void {\n\n\t\tconst fieldId = field.getId(),\n\t\t\tsorter = this.sorters.get(fieldId.getId());\n\n\t\tif (sortOrder === SortStatus.NONE) {\n\t\t\tthis.delete(fieldId);\n\t\t} else if (sortOrder === SortStatus.ASC || sortOrder === SortStatus.DESC) {\n\n\t\t\tthis.delete(fieldId);\n\n\t\t\tconst direction = sortOrder === SortStatus.ASC;\n\n\t\t\tthis.add(field, direction);\n\t\t}\n\t}\n\n\tadd(field: Field, direction = true): void {\n\t\tthis.addSorter(field.getId(), new StructureSorter(new SorterId(RandomStringGenerator.generate()), field, direction));\n\t}\n\n\taddSorter(fieldId: FieldId, sorter: StructureSorter): void {\n\n\t\tif (!this.multi) {\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t\tthis.sorters.set(fieldId.getId(), sorter);\n\t}\n\n\tdelete(fieldId: FieldId): void {\n\t\tthis.sorters.delete(fieldId.getId());\n\t}\n\n\tupdate(): void {\n\t}\n\n\t// TODO Remove the loop from sorter.sort\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst sorters = this.getAll();\n\n\t\tlet sortedEntities = [...entities];\n\n\t\tfor (let sorter of sorters) {\n\t\t\tsortedEntities = sorter.sort(sortedEntities);\n\t\t}\n\n\t\treturn sortedEntities;\n\t}\n\n\tgetAll(): Array<StructureSorter> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn Array.from(this.sorters)\n\t\t\t\t\t.map((arr) => arr[1])\n\t\t\t\t\t.sort((sorterOne: StructureSorter, sorterTwo: StructureSorter) => {\n\t\t\t\t\t\treturn sorterOne.getRank() - sorterTwo.getRank();\n\t\t\t\t\t})\n\t\t\t\t\t.reverse();\n\t}\n}\n","export class FormationAggregate {\n\n\t/**\n\t * In the future this class can be responsible for managing:\n\t * - expanded / collapsed nodes\n\t * - sorting?\n\t * - filtering?\n\t */\n\n\tconstructor(private selectedRows: Array<string>) {\n\t}\n\n\tgetSelectedRows(): Array<string> {\n\t\treturn this.selectedRows;\n\t}\n\n\ttoggleRow(selectedRow: string): void {\n\n\t\tif (this.selectedRows.length > 0) {\n\n\t\t\tif (this.selectedRows[0] === selectedRow) {\n\t\t\t\tthis.selectedRows = [];\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.selectedRows = [selectedRow];\n\t}\n}\n","export class ColumnHeaderEntity {\n\n\tconstructor(private top: boolean,\n\t\t\t\tprivate bottom: boolean) {\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.top = enabled;\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.bottom = enabled;\n\t}\n\n\tisHeaderOnTop(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisHeaderOnBottom(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { ColumnHeaderEntity } from './column-header/column-header.entity';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaAggregate {\n\n\tprivate headerHeight = 28;\n\n\tprivate pagerHeight = 35;\n\n\tprivate containerHeight: number;\n\n\tprivate active: boolean = false;\n\n\tprivate horizontalGrid: boolean = true;\n\n\tprivate verticalGrid: boolean = true;\n\n\tprivate columnHeader: ColumnHeaderEntity = new ColumnHeaderEntity(true, false);\n\n\tprivate theme: SchemaTheme = SchemaTheme.FABRIC;\n\n\tprivate rowColoring: SchemaRowColoring = SchemaRowColoring.EVEN;\n\n\tconstructor(private width?: number,\n\t\t\t\tprivate height?: number) {\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tsetTheme(theme: SchemaTheme): void {\n\t\tthis.theme = theme;\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring): void {\n\t\tthis.rowColoring = coloring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.height;\n\t\t// return this.containerHeight;\n\t}\n\n\tgetColumnHeader(): ColumnHeaderEntity {\n\t\treturn this.columnHeader;\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderTop(enabled);\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderBottom(enabled);\n\t}\n\n\tsetVerticalGrid(enabled: boolean): void {\n\t\tthis.verticalGrid = enabled;\n\t}\n\n\tsetHorizontalGrid(enabled: boolean): void {\n\t\tthis.horizontalGrid = enabled;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGrid;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGrid;\n\t}\n\n\tprivate getHeaderHeight(): number {\n\t\treturn this.headerHeight;\n\t}\n\n\tprivate getPagerHeight(): number {\n\t\treturn this.pagerHeight;\n\t}\n\n\tprivate calculateContainerHeight(): void {\n\n\t\tif (!this.height) {\n\t\t\tthis.active = false;\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.active = true;\n\t\t}\n\n\t\tthis.containerHeight = this.height - this.getHeaderHeight() - this.getPagerHeight();\n\t}\n\n}\n","import { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { Field } from '../field/data-type/field';\nimport { DataType } from '../field/data-type/data-type';\n\n\nexport class SearchManager {\n\n\tprivate searchFields: Array<Field> = [];\n\n\tprivate searchPhrase: string;\n\n\taddSearchPhrase(fields: Array<Field>, searchPhrase: string): void {\n\n\t\tif (!searchPhrase) {\n\t\t\tthis.searchFields = [];\n\t\t\treturn;\n\t\t}\n\n\t\tlet searchableFields =\n\t\t\tfields.filter((field: Field) => {\n\t\t\t\treturn field.getDataType() === DataType.STRING;\n\t\t\t});\n\n\t\tif (searchableFields.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchFields = searchableFields;\n\n\t\tthis.searchPhrase = searchPhrase;\n\t}\n\n\tremoveSearchFilters(): void {\n\t\tthis.searchFields = [];\n\t}\n\n\tsearch(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0 || this.searchFields.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\tlet searchedItems = new Set<OriginItemEntity>();\n\n\t\tfor (let i = 0; i < entities.length; i += 1) {\n\n\t\t\tfor (let field of this.searchFields) {\n\n\t\t\t\tif (this.filterString(entities[i], field)) {\n\t\t\t\t\tsearchedItems.add(entities[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(searchedItems);\n\t}\n\n\tprivate filterString(item: OriginItemEntity, field: Field): boolean {\n\t\tconst value = field.getValue(item);\n\n\t\tif (typeof value === 'string') {\n\t\t\treturn value.toLowerCase().indexOf(this.searchPhrase.toLowerCase()) > -1;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate filterNumber(item: OriginItemEntity, field: Field): boolean {\n\t\tconst numberValue = field.getValue(item);\n\n\t\treturn numberValue > this.searchPhrase;\n\t}\n\n\tprivate filterBoolean(item: OriginItemEntity, field: Field): boolean {\n\t\tconst booleanValue = field.getValue(item);\n\n\t\treturn booleanValue === this.searchPhrase;\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin/origin-item-entity';\n\n\nexport class StructurePreparedEntitiesSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly preparedItems: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructurePreparedEntitiesSetAggregateEvent');\n\t}\n\n\tgetPreparedItems(): Array<OriginItemEntity> {\n\t\treturn this.preparedItems;\n\t}\n\n}\n","import { Aggregate, AggregateEvent, RootAggregate } from '@generic-ui/hermes';\n\nimport { PagingAggregate } from '../../paging/command/paging.aggregate';\nimport { SourceManager } from '../../source/command/source.manager';\nimport { VerticalFormation } from './vertical-formation/vertical-formation';\nimport { AggregationManager } from './aggregation/aggregation.manager';\nimport { SorterCollection } from './sort/sorter.collection';\nimport { FilterManager } from './filter/filter.manager';\nimport { FieldCollection } from './field/field.collection';\nimport { FormationAggregate } from '../../formation/command/formation-aggregate';\nimport { SchemaAggregate } from '../../schema/command/schema-aggregate';\nimport { StructureId } from '../../structure-id';\nimport { StructureEditSourceItemParams } from '../../source/command/origin/edit/structure.edit-source-item.params';\nimport { PagingConfig } from '../../paging/paging-config';\nimport { OriginItemEntity } from '../../source/command/origin/origin-item-entity';\nimport { ColumnConfig } from '../../composition/column.config';\nimport { Field } from './field/data-type/field';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { FieldId } from './field/data-type/field.id';\nimport { StructureSorter } from './sort/structure.sorter';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\nimport { SearchManager } from './search/search.manager';\nimport { StructurePreparedEntitiesSetAggregateEvent } from '../../source/command/prepared/structure.prepared-entities-set.aggregate-event';\nimport { SortStatus } from '../../composition/command/sort/sort-status';\n\n@RootAggregate\nexport class StructureAggregate extends Aggregate {\n\n\tprivate formationAggregate: FormationAggregate;\n\n\tprivate schema: SchemaAggregate;\n\n\tprivate pagingAggregate: PagingAggregate;\n\n\tprivate sourceManager: SourceManager;\n\n\tprivate sorterCollection: SorterCollection;\n\n\tprivate filterManager: FilterManager;\n\n\tprivate searchManager: SearchManager;\n\n\tprivate verticalFormation: VerticalFormation;\n\n\tprivate fieldCollection: FieldCollection;\n\n\tprivate aggregationManager: AggregationManager;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tpagingAggregate: PagingAggregate,\n\t\t\t\tformationAggregate: FormationAggregate,\n\t\t\t\tsourceManager: SourceManager,\n\t\t\t\tverticalFormation: VerticalFormation,\n\t\t\t\taggregationManager: AggregationManager,\n\t\t\t\tsorterCollection: SorterCollection,\n\t\t\t\tfilterCollection: FilterManager,\n\t\t\t\tsearchManager: SearchManager,\n\t\t\t\tfieldCollection: FieldCollection,\n\t\t\t\tschema: SchemaAggregate) {\n\t\tsuper(structureId);\n\t\tthis.pagingAggregate = pagingAggregate;\n\t\tthis.formationAggregate = formationAggregate;\n\t\tthis.sourceManager = sourceManager;\n\t\tthis.verticalFormation = verticalFormation;\n\t\tthis.aggregationManager = aggregationManager;\n\t\tthis.sorterCollection = sorterCollection;\n\t\tthis.filterManager = filterCollection;\n\t\tthis.searchManager = searchManager;\n\t\tthis.fieldCollection = fieldCollection;\n\t\tthis.schema = schema;\n\t}\n\n\tgetVerticalFormation(): VerticalFormation {\n\t\treturn this.verticalFormation;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.aggregationManager.setEnabled(enabled);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetOrigin(items: Array<any>): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.addEvent(\n\t\t\tthis.sourceManager.setOrigin(items, this.getId())\n\t\t);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\teditItem(editParams: StructureEditSourceItemParams): ReadonlyArray<AggregateEvent> {\n\n\t\tconst itemId = editParams.getItemId(),\n\t\t\tfieldId = editParams.getColumnFieldId(),\n\t\t\tfield = this.fieldCollection.getField(fieldId as any), // as FieldId\n\t\t\tvalue = editParams.getValue();\n\n\t\tconst editItemEvents = this.sourceManager.editOriginItem(itemId, value, field, this.getId());\n\n\t\teditItemEvents.forEach((e) => this.addEvent(e));\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.getSchema().setHeight(height);\n\n\t\tconst viewportHeight = this.getSchema().getContainerHeight();\n\n\t\tthis.verticalFormation.setViewportHeight(viewportHeight);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tsetFormation(formation: FormationAggregate): void {\n\t\tthis.formationAggregate = formation;\n\t}\n\n\tsetScrollPosition(position: number): void {\n\t\tthis.verticalFormation.setScrollPosition(position);\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tgetFormation(): FormationAggregate {\n\t\treturn this.formationAggregate;\n\t}\n\n\tsetSchema(schema: SchemaAggregate): void {\n\t\tthis.schema = schema;\n\t}\n\n\tgetSchema(): SchemaAggregate {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): PagingAggregate {\n\t\treturn this.pagingAggregate;\n\t}\n\n\tchangePaging(config: PagingConfig) {\n\t\tthis.pagingAggregate.change(config);\n\t\tthis.calculateSource();\n\t}\n\n\tsetPaging(paging: PagingAggregate): void {\n\t\tthis.pagingAggregate = paging;\n\t\tthis.calculateSource();\n\t}\n\n\tnextPage(): void {\n\n\t\tthis.pagingAggregate.nextPage();\n\n\t\tthis.calculateSource();\n\t}\n\n\tprevPage(): void {\n\t\tthis.pagingAggregate.prevPage();\n\t\tthis.calculateSource();\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tconst pagingEvents = this.pagingAggregate.changePageSize(pageSize);\n\n\t\t// TODO\n\t\tpagingEvents.forEach((event) => {\n\t\t\tthis.addEvent(event);\n\t\t});\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.sourceManager.getSlicedEntities();\n\t}\n\n\tgetSource(): SourceManager {\n\t\treturn this.sourceManager;\n\t}\n\n\tcreateFields(columns: Array<ColumnConfig>): Array<Field> {\n\t\tthis.fieldCollection.initFields(columns);\n\n\t\t// TODO Should throw event fields created\n\t\treturn this.fieldCollection.getAllFields();\n\t}\n\n\tsetSortingConfig(config: SortingConfig): void {\n\t\tthis.sorterCollection.setConfig(config);\n\t}\n\n\ttoggleSort(fieldId: FieldId): Array<StructureSorter> {\n\n\t\tconst field = this.fieldCollection.getField(fieldId);\n\n\t\tthis.sorterCollection.toggle(field);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.sorterCollection.getAll();\n\t}\n\n\tsetSortOrder(fieldId: FieldId, sortOrder: SortStatus): Array<StructureSorter> {\n\n\t\tconst field = this.fieldCollection.getField(fieldId);\n\n\t\tthis.sorterCollection.setSortOrder(field, sortOrder);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.sorterCollection.getAll();\n\t}\n\n\tsetFilterConfig(config: FilterConfig): void {\n\t\tthis.filterManager.getSettings().setFilterConfig(config);\n\t}\n\n\tsetSearchingConfig(config: SearchConfig): void {\n\t\tthis.filterManager.getSettings().setSearchingConfig(config);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig): void {\n\t\tthis.filterManager.getSettings().setQuickFiltersConfig(config);\n\t}\n\n\ttoggleFilter(fieldId: FieldId, externalFilterId: string, filterValue: string): Array<AggregateEvent> {\n\n\t\tconst field = this.fieldCollection.getField(fieldId);\n\n\t\t// Field not found\n\t\t// TODO throw aggregate event\n\t\tif (field === undefined) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.filterManager.addFilter(field, externalFilterId, filterValue);\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\taddSearchPhrase(phrase: string): Array<AggregateEvent> {\n\n\t\tconst fields = this.fieldCollection.getAllFields();\n\n\t\tthis.searchManager.addSearchPhrase(fields, phrase);\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\tremoveSearchPhrase(): Array<AggregateEvent> {\n\n\t\tthis.searchManager.removeSearchFilters();\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\tprivate calculateSource(): void {\n\n\t\tif (!this.sourceManager.getOrigin() || !this.pagingAggregate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO Refactor\n\t\tthis.sourceManager.setEntities(this.sourceManager.getOrigin());\n\n\t\t// filtering\n\t\tthis.sourceManager.setEntities(this.filterManager.filter(this.sourceManager.getEntities()));\n\n\t\t// search\n\t\tconst searchedEntities = this.searchManager.search(this.sourceManager.getEntities());\n\t\tthis.sourceManager.setEntities(searchedEntities);\n\n\t\t// sorting\n\t\tconst ents = this.sorterCollection.sort(this.sourceManager.getEntities());\n\t\tthis.sourceManager.setEntities(ents);\n\n\t\t// calculate filteredEntities\n\t\tthis.sourceManager.setPreparedEntities();\n\n\t\tthis.pagingAggregate.setSourceSize(this.sourceManager.getPreparedEntities().length);\n\n\t\tthis.addEvent(new StructurePreparedEntitiesSetAggregateEvent(this.getId(), ents));\n\n\t\t// aggregations\n\t\tconst aggregationEvents = this.aggregationManager.calculate(\n\t\t\tthis.fieldCollection.getAllFields(),\n\t\t\tthis.sourceManager.getEntities()\n\t\t);\n\n\t\taggregationEvents.forEach((ae: AggregateEvent) => {\n\t\t\tthis.addEvent(ae);\n\t\t});\n\n\t\t// paging\n\t\tthis.sourceManager.setEntities(this.pagingAggregate.sample(this.sourceManager.getEntities()));\n\n\t\tthis.verticalFormation.setSourceSize(this.sourceManager.getEntities().length);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tprivate calculateSourceBasedOnVirtualScroll(): void {\n\n\t\tif (this.verticalFormation.isEnabled()) {\n\n\t\t\tconst range = this.verticalFormation.getRange();\n\n\t\t\tthis.sourceManager.setSlicedEntities(\n\t\t\t\tthis.sourceManager.getEntities().slice(range.getStart(), range.getEnd())\n\t\t\t);\n\t\t} else {\n\t\t\tthis.sourceManager.setSlicedEntities(\n\t\t\t\tthis.sourceManager.getEntities()\n\t\t\t);\n\t\t}\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { SchemaAggregate } from './schema-aggregate';\n\n\n@Injectable()\nexport class SchemaAggregateFactory {\n\n\tcreate(): SchemaAggregate {\n\t\treturn new SchemaAggregate();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationAggregate } from './formation-aggregate';\n\n\n@Injectable()\nexport class FormationAggregateFactory {\n\n\tcreate(): FormationAggregate {\n\t\treturn new FormationAggregate([]);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { SearchManager } from './search.manager';\n\n@Injectable()\nexport class SearchManagerFactory {\n\n\tcreate(): SearchManager {\n\t\treturn new SearchManager();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregateFactory } from '../../paging/command/paging.aggregate-factory';\nimport { SourceManagerFactory } from '../../source/command/source.manager-factory';\nimport { VerticalFormationFactory } from './vertical-formation/vertical-formation.factory';\nimport { AggregationManagerFactory } from './aggregation/aggregation.manager.factory';\nimport { FilterManagerFactory } from './filter/filter.manager-factory';\nimport { FieldCollectionFactory } from './field/field-collection.factory';\nimport { StructureId } from '../../structure-id';\nimport { StructureAggregate } from './structure.aggregate';\nimport { SorterCollection } from './sort/sorter.collection';\nimport { SchemaAggregateFactory } from '../../schema/command/schema.aggregate-factory';\nimport { FormationAggregateFactory } from '../../formation/command/formation.aggregate-factory';\nimport { SearchManagerFactory } from './search/search.manager-factory';\n\n\n@Injectable()\nexport class StructureAggregateFactory {\n\n\tconstructor(private readonly pagingAggregateFactory: PagingAggregateFactory,\n\t\t\t\tprivate readonly sourceManagerFactory: SourceManagerFactory,\n\t\t\t\tprivate readonly formationAggregateFactory: FormationAggregateFactory,\n\t\t\t\tprivate readonly verticalFormationFactory: VerticalFormationFactory,\n\t\t\t\tprivate readonly aggregationManagerFactory: AggregationManagerFactory,\n\t\t\t\tprivate readonly filterManagerFactory: FilterManagerFactory,\n\t\t\t\tprivate readonly searchManagerFactory: SearchManagerFactory,\n\t\t\t\tprivate readonly fieldCollectionFactory: FieldCollectionFactory,\n\t\t\t\tprivate readonly schemaAggregateFactory: SchemaAggregateFactory) {\n\t}\n\n\tcreate(structureId: StructureId): StructureAggregate {\n\n\t\tconst paging = this.pagingAggregateFactory.createDefault(),\n\t\t\tsource = this.sourceManagerFactory.createDefault(),\n\t\t\tverticalFormation = this.verticalFormationFactory.create(),\n\t\t\tformationAggregate = this.formationAggregateFactory.create();\n\n\t\tconst sorterContainer: SorterCollection = new SorterCollection(),\n\t\t\tfilterContainer = this.filterManagerFactory.create(false),\n\t\t\tfieldContainer = this.fieldCollectionFactory.create(),\n\t\t\taggregationManager = this.aggregationManagerFactory.create(structureId),\n\t\t\tschema = this.schemaAggregateFactory.create(),\n\t\t\tsearchManager = this.searchManagerFactory.create();\n\n\t\treturn new StructureAggregate(structureId,\n\t\t\tpaging,\n\t\t\tformationAggregate,\n\t\t\tsource,\n\t\t\tverticalFormation,\n\t\t\taggregationManager,\n\t\t\tsorterContainer,\n\t\t\tfilterContainer,\n\t\t\tsearchManager,\n\t\t\tfieldContainer,\n\t\t\tschema\n\t\t);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../structure.aggregate-factory';\nimport { InitStructureCommand } from './init-structure.command';\nimport { StructureInitedEvent } from './structure-inited.event';\n\n\n\n@Injectable()\nexport class InitStructureCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitStructureCommand,\n\t\t\tStructureInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitStructureCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId;\n\n\t\tconst structure = this.structureAggregateFactory.create(aggregateId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetVerticalScrollEnabledCommand } from './set-vertical-scroll-enabled.command';\nimport { VerticalScrollEnabledSetEvent } from './vertical-scroll-enabled-set.event';\n\n\n\n@Injectable()\nexport class SetVerticalScrollEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetVerticalScrollEnabledCommand);\n\t}\n\n\thandle(command: SetVerticalScrollEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst formation = structure.getVerticalFormation();\n\n\t\tformation.setEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new VerticalScrollEnabledSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetScrollPositionCommand } from './set-scroll-position.command';\nimport { ScrollPositionSetEvent } from './scroll-position-set.event';\n\n\n\n@Injectable()\nexport class SetScrollPositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetScrollPositionCommand);\n\t}\n\n\thandle(command: SetScrollPositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tposition = command.position;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setScrollPosition(position);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new ScrollPositionSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { InitFieldsCommand } from './init-fields.command';\nimport { FieldsInitedEvent } from './fields-inited.event';\n\n\n\n@Injectable()\nexport class InitFieldsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitFieldsCommand);\n\t}\n\n\thandle(command: InitFieldsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tcompositionId = command.compositionId,\n\t\t\tcolumns = command.columns;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst fields = structure.createFields(columns); // tODO convert don't let dandruff into the domain\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new FieldsInitedEvent(structureId, compositionId, columns, fields));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AggregateId, CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { ToggleSortCommand } from './toggle-sort.command';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureSorter } from '../structure.sorter';\nimport { SortToggledEvent } from './sort-toggled.event';\n\n\n@Injectable()\nexport class ToggleSortCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSortCommand);\n\t}\n\n\thandle(command: ToggleSortCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tcompositionId = command.getCompositionId(),\n\t\t\tfieldId = command.getFieldId();\n\n\t\tconst structure = this.structureAggregateRepository.getById(aggregateId);\n\n\t\tconst sorters = structure.toggleSort(fieldId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.publishSortEvent(aggregateId, compositionId, fieldId, sorters);\n\t}\n\n\tpublishSortEvent(aggregateId: AggregateId, compositionId: CompositionId, fieldId: FieldId, sorters: Array<StructureSorter>): void {\n\n\t\tconst directions = sorters.map((sorter: StructureSorter) => {\n\t\t\treturn {\n\t\t\t\tdirection: sorter.hasDirection(),\n\t\t\t\tfieldId: sorter.getField().getId()\n\t\t\t};\n\t\t});\n\n\t\tthis.domainEventPublisher.publish(new SortToggledEvent(aggregateId, compositionId, directions));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SortingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SortingSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetSortingCommand } from './set-sorting.command';\nimport { SortingSetEvent } from './sorting-set.event';\n\n\n@Injectable()\nexport class SetSortingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSortingCommand);\n\t}\n\n\thandle(command: SetSortingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsortingConfig = command.getSortingConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSortingConfig(sortingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new SortingSetEvent(structureId));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigFilterCommand } from './structure.set-config-filter.command';\nimport { StructureConfigFilterSetEvent } from './structure.config-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfilterConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setFilterConfig(filterConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigFilterSetEvent(structureId, filterConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigSearchingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigSearchingSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigSearchingCommand } from './structure.set-config-searching.command';\nimport { StructureConfigSearchingSetEvent } from './structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigSearchingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigSearchingCommand);\n\t}\n\n\thandle(command: StructureSetConfigSearchingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsearchingConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSearchingConfig(searchingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigSearchingSetEvent(structureId, searchingConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\n\nexport class StructureConfigQuickFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigQuickFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigQuickFilterCommand } from './structure.set-config-quick-filter.command';\nimport { StructureConfigQuickFilterSetEvent } from './structure.config-quick-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigQuickFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigQuickFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigQuickFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tquickFiltersConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setQuickFiltersConfig(quickFiltersConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigQuickFilterSetEvent(structureId, quickFiltersConfig.enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureToggleFilterCommand } from './structure.toggle-filter.command';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureFilterToggledEvent } from './structure.filter-toggled.event';\n\n\n@Injectable()\nexport class StructureToggleFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureToggleFilterCommand);\n\t}\n\n\thandle(command: StructureToggleFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfieldId: FieldId = command.fieldId,\n\t\t\texternalFieldId: string = command.externalFilterId,\n\t\t\tfilterValue = command.filterValue;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.toggleFilter(fieldId, externalFieldId, filterValue);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureFilterToggledEvent(structureId));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin/origin-item-entity';\n\nexport class StructurePreparedEntitiesSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly preparedItems: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructurePreparedEntitiesSetEvent');\n\t}\n\n\tgetPreparedItems(): Array<OriginItemEntity> {\n\t\treturn this.preparedItems;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\nimport { OriginSetEvent } from './origin/set-origin/origin-set.event';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureSourceItemEditedEvent } from './origin/edit/structure.source-item-edited.event';\nimport { StructureAggregationsChangedAggregateEvent } from '../../structure/command/aggregation/structure.aggregations-changed.aggregate-event';\nimport { StructureAggregationsChangedEvent } from '../../structure/command/aggregation/structure.aggregations-changed.event';\nimport { StructurePreparedEntitiesSetAggregateEvent } from './prepared/structure.prepared-entities-set.aggregate-event';\nimport { StructurePreparedEntitiesSetEvent } from './prepared/structure.prepared-entities-set.event';\n\n\n@Injectable()\nexport class StructureSourceDomainEventPublisher {\n\n\tconstructor(private domainEventPublisher: DomainEventPublisher) {\n\t}\n\n\tpublish(events: ReadonlyArray<AggregateEvent>): void {\n\n\t\tevents.forEach((event) => {\n\t\t\tthis.publishEvent(event);\n\t\t});\n\t}\n\n\tprivate publishEvent(event: AggregateEvent): void {\n\n\t\tif (event.getType() === 'StructureOriginChangedAggregateEvent') {\n\n\t\t\tconst structureOriginChangedAggregateEvent = (event as StructureOriginChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new OriginSetEvent(structureOriginChangedAggregateEvent.getAggregateId(), structureOriginChangedAggregateEvent.getOrigin());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureSourceItemEditedAggregateEvent') {\n\n\t\t\tconst structureSourceItemEditedAggregateEvent = (event as StructureSourceItemEditedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureSourceItemEditedEvent(\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAggregateId(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getBeforeItem(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAfterItem()\n\t\t\t);\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureAggregationsChangedAggregateEvent') {\n\n\t\t\tconst structureAggregationsChangedAggregateEvent = (event as StructureAggregationsChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureAggregationsChangedEvent(structureAggregationsChangedAggregateEvent.getAggregateId(), structureAggregationsChangedAggregateEvent.getAggregations());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\n\t\t}\n\n\t\tif (event.getType() === 'StructurePreparedEntitiesSetAggregateEvent') {\n\n\t\t\tconst structurePreparedEntitiesSetAggregateEvent = (event as StructurePreparedEntitiesSetAggregateEvent);\n\n\t\t\tconst domainEvent = new StructurePreparedEntitiesSetEvent(structurePreparedEntitiesSetAggregateEvent.getAggregateId(), structurePreparedEntitiesSetAggregateEvent.getPreparedItems());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class StructureAggregationEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureAggregationEnabledSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { StructureSourceDomainEventPublisher } from '../../../../source/command/structure.source.domain-event.publisher';\nimport { StructureSetAggregationEnabledCommand } from './structure.set-aggregation-enabled.command';\nimport { StructureAggregationEnabledSetEvent } from './structure.aggregation-enabled-set.event';\n\n\n@Injectable()\nexport class StructureSetAggregationEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate readonly structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetAggregationEnabledCommand);\n\t}\n\n\thandle(command: StructureSetAggregationEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.setAggregationEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureAggregationEnabledSetEvent(structureId, enabled));\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { AggregatedValues } from './aggregated.values';\nimport { DataType } from '../../field/data-type/data-type';\nimport { Field } from '../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../aggregation.type';\n\n\nexport abstract class AggregationCalculator<T, A extends AggregatedValues> {\n\n\tabstract forDataType(dataType: DataType): boolean;\n\n\tabstract prepare(field: Field): void;\n\n\tabstract postCalculate(field: Field, items: Array<OriginItemEntity>): void;\n\n\tabstract aggregate(field: Field, value: T): void;\n\n\tabstract generateAggregatedValues(field: Field): A;\n\n\tcalculate(fields: Array<Field>, items: Array<OriginItemEntity>): Map<string, A> {\n\n\t\tconst filteredFields = fields.filter((field: Field) => this.forDataType(field.getDataType()));\n\n\t\tif (!filteredFields || filteredFields.length === 0 || items.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet count = new Map<string, number>(),\n\t\t\tdistinct = new Map<string, Set<string>>();\n\n\t\t// init\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getKey();\n\n\t\t\tcount.set(key, 0);\n\t\t\tdistinct.set(key, new Set());\n\n\t\t\tthis.prepare(field);\n\t\t});\n\n\t\t// calculate\n\t\titems.forEach((item: OriginItemEntity) => {\n\n\t\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\t\tconst key = field.getKey(),\n\t\t\t\t\tvalue = field.getValue(item);\n\n\t\t\t\tif (value !== null || value !== undefined || value !== '') {\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\t\t\tconst countForField = count.get(key);\n\t\t\t\t\t\tcount.set(key, countForField + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\t\t\tconst distinctSet = distinct.get(key);\n\t\t\t\t\t\tdistinctSet.add(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.aggregate(field, value);\n\t\t\t});\n\t\t});\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tthis.postCalculate(field, items);\n\n\t\t});\n\n\t\tlet aggregations = new Map();\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getId().getId();\n\n\t\t\tlet aggregatedValues = this.generateAggregatedValues(field);\n\n\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\taggregatedValues.setCount(count.get(key));\n\t\t\t}\n\n\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\taggregatedValues.setDistinct((distinct.get(key)).size);\n\t\t\t}\n\n\t\t\taggregations.set(key, aggregatedValues);\n\t\t});\n\n\t\treturn aggregations;\n\t}\n\n}\n","export abstract class AggregatedValues {\n\n\tpublic count: number;\n\tpublic distinct: number;\n\n\tsetCount(value: number): void {\n\t\tthis.count = value;\n\t}\n\n\tsetDistinct(value: number): void {\n\t\tthis.distinct = value;\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class BooleanAggregatedValues extends AggregatedValues {\n\n\tpublic readonly truthy: number;\n\n\tpublic readonly falsy: number;\n\n\tconstructor(truthy: number,\n\t\t\t\tfalsy: number) {\n\t\tsuper();\n\t\tthis.truthy = truthy;\n\t\tthis.falsy = falsy;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { BooleanAggregatedValues } from './boolean-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class BooleanAggregationCalculator extends AggregationCalculator<boolean, BooleanAggregatedValues> {\n\n\tprivate readonly truthy = new Map<string, number>();\n\tprivate readonly falsy = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.BOOLEAN;\n\t}\n\n\taggregate(field: Field, value: boolean): void {\n\n\t\tconst booleanValue = value, // (value as any === 'true'),\n\t\t\tkey = field.getKey(),\n\t\t\ttruthyForField = this.truthy.get(key),\n\t\t\tfalsyForField = this.falsy.get(key);\n\n\t\tif (booleanValue) {\n\t\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\t\tthis.truthy.set(key, truthyForField + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\t\tthis.falsy.set(key, falsyForField + 1);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): BooleanAggregatedValues {\n\n\t\tconst key = field.getKey();\n\n\t\treturn new BooleanAggregatedValues(\n\t\t\tthis.truthy.get(key),\n\t\t\tthis.falsy.get(key)\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\tthis.truthy.set(key, 0);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\tthis.falsy.set(key, 0);\n\t\t}\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class DateAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { DateAggregatedValues } from './date-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class DateAggregationCalculator extends AggregationCalculator<Date, DateAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.DATE;\n\t}\n\n\taggregate(field: Field, value: Date): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): DateAggregatedValues {\n\t\treturn new DateAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class NumberAggregatedValues extends AggregatedValues{\n\n\tpublic readonly sum: number;\n\tpublic readonly min: number;\n\tpublic readonly max: number;\n\tpublic readonly average: number;\n\tpublic readonly median: number;\n\n\tconstructor(sum: number,\n\t\t\t\tmin: number,\n\t\t\t\tmax: number,\n\t\t\t\taverage: number,\n\t\t\t\tmedian: number) {\n\t\tsuper();\n\t\tthis.sum = this.setValueWithPrecision(sum);\n\t\tthis.min = this.setValueWithPrecision(min);\n\t\tthis.max = this.setValueWithPrecision(max);\n\t\tthis.average = this.setValueWithPrecision(average);\n\t\tthis.median = this.setValueWithPrecision(median);\n\t}\n\n\tprivate setValueWithPrecision(value: number): number {\n\t\tif (!value && value !== 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (value === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn +((value).toFixed(2));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { NumberAggregatedValues } from './number-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class NumberAggregationCalculator extends AggregationCalculator<number, NumberAggregatedValues> {\n\n\tprivate readonly sum = new Map<string, number>();\n\tprivate readonly min = new Map<string, number>();\n\tprivate readonly max = new Map<string, number>();\n\tprivate readonly average = new Map<string, number>();\n\tprivate readonly median = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.NUMBER;\n\t}\n\n\taggregate(field: Field, value: number): void {\n\n\t\tconst numberValue = +value,\n\t\t\tkey = field.getKey(),\n\t\t\tsumForField = this.sum.get(key),\n\t\t\tminForField = this.min.get(key),\n\t\t\tmaxForField = this.max.get(key);\n\n\t\tif (field.isAggregation(AggregationType.SUM) || field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.sum.set(key, sumForField + numberValue);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MIN)) {\n\t\t\tif (minForField > numberValue) {\n\t\t\t\tthis.min.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MAX)) {\n\t\t\tif (maxForField < numberValue) {\n\t\t\t\tthis.max.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): NumberAggregatedValues {\n\n\t\tconst key = field.getKey(),\n\t\t\tsum = field.isAggregation(AggregationType.SUM) ? this.sum.get(key) : undefined,\n\t\t\tmin = field.isAggregation(AggregationType.MIN) ? this.min.get(key) : undefined,\n\t\t\tmax = field.isAggregation(AggregationType.MAX) ? this.max.get(key) : undefined,\n\t\t\taverage = field.isAggregation(AggregationType.AVERAGE) ? this.average.get(key) : undefined,\n\t\t\tmedian = field.isAggregation(AggregationType.MEDIAN) ? this.median.get(key) : undefined;\n\n\t\treturn new NumberAggregatedValues(\n\t\t\tsum,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\taverage,\n\t\t\tmedian\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tthis.sum.set(key, 0);\n\t\tthis.min.set(key, Number.MAX_SAFE_INTEGER);\n\t\tthis.max.set(key, 0);\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.average.set(key, this.sum.get(key) / items.length);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MEDIAN)) {\n\t\t\tthis.median.set(key, field.getValue(items[Math.floor(items.length / 2)]));\n\t\t}\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class StringAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { StringAggregatedValues } from './string-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class StringAggregationCalculator extends AggregationCalculator<string, StringAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.STRING;\n\t}\n\n\taggregate(field: Field, value: string): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): StringAggregatedValues {\n\t\treturn new StringAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class UnknownAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { UnknownAggregatedValues } from './unknown-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class UnknownAggregationCalculator extends AggregationCalculator<any, UnknownAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.UNKNOWN;\n\t}\n\n\taggregate(field: Field, value: any): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): UnknownAggregatedValues {\n\t\treturn new UnknownAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { Type, Provider } from '@angular/core';\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { BooleanAggregationCalculator } from './calculation/boolean/boolean-aggregation.calculator';\nimport { DateAggregationCalculator } from './calculation/date/date-aggregation.calculator';\nimport { NumberAggregationCalculator } from './calculation/number/number-aggregation.calculator';\nimport { StringAggregationCalculator } from './calculation/string/string-aggregation.calculator';\nimport { UnknownAggregationCalculator } from './calculation/unknown/unknown-aggregation.calculator';\nimport { AggregationManagerFactory } from './aggregation.manager.factory';\n\n\n\nexport function provideAggregationCalculator(clazz: Type<any>): Provider {\n\treturn {\n\t\tprovide: AGGREGATION_CALCULATORS,\n\t\tuseClass: clazz,\n\t\tmulti: true\n\t};\n}\n\nexport const aggregationProviders = [\n\tprovideAggregationCalculator(BooleanAggregationCalculator),\n\tprovideAggregationCalculator(DateAggregationCalculator),\n\tprovideAggregationCalculator(NumberAggregationCalculator),\n\tprovideAggregationCalculator(StringAggregationCalculator),\n\tprovideAggregationCalculator(UnknownAggregationCalculator),\n\n\tAggregationManagerFactory\n];\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureFilterRepository } from './structure.filter.repository';\nimport { StructureConfigFilterSetEvent } from '../../command/filter/config/structure.config-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigFilterSetEvent) {\n\t\t\tthis.structureFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureSearchingRepository } from './structure.searching.repository';\n\nimport { StructureConfigSearchingSetEvent } from '../../command/search/config/structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureConfigSearchingSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigSearchingSetEvent): void {\n\n\t\tif (event instanceof StructureConfigSearchingSetEvent) {\n\t\t\tthis.structureSearchingRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureQuickFilterRepository } from './structure.quick-filter.repository';\nimport { StructureConfigQuickFilterSetEvent } from '../../command/filter/quick/structure.config-quick-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigQuickFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureQuickFilterRepository: StructureQuickFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigQuickFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigQuickFilterSetEvent) {\n\t\t\tthis.structureQuickFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { DataType } from '../../../domain/structure/command/field/data-type/data-type';\n\n\nexport class StructureFieldUiModel {\n\n\tconstructor(private readonly id: FieldId,\n\t\t\t\tprivate readonly dataType: DataType) {\n\t}\n\n\tgetId(): string {\n\t\treturn this.id.getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Field } from '../../../domain/structure/command/field/data-type/field';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiConverter {\n\n\tconvert(fields: Array<Field>): Array<StructureFieldUiModel> {\n\t\treturn fields.map((field: Field) => {\n\t\t\treturn this.convertOne(field);\n\t\t});\n\t}\n\n\tprivate convertOne(field: Field): StructureFieldUiModel {\n\n\t\treturn new StructureFieldUiModel(field.getId(), field.getDataType());\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureFieldUiConverter } from './structure.field.ui-converter';\nimport { FieldsInitedEvent } from '../../../domain/structure/command/field/init/fields-inited.event';\n\n\n@Injectable()\nexport class StructureFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFieldsRepository: StructureFieldUiArchive,\n\t\t\t\tprivate structureFieldUiConverter: StructureFieldUiConverter) {\n\t\tsuper();\n\t}\n\n\thandle(event: FieldsInitedEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\tconst fields = this.structureFieldUiConverter.convert(event.getFields());\n\n\t\t\tthis.structureFieldsRepository.next(event.getAggregateId(), fields);\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetPagingCommand } from './set-paging.command';\nimport { PagingSetEvent } from './paging-set.event';\nimport { PagingConfig } from '../../paging-config';\n\n\n@Injectable()\nexport class SetPagingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetPagingCommand,\n\t\t\tPagingSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetPagingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst pagingConfig = command.payload as PagingConfig,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.changePaging(pagingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { NextPageCommand } from './next-page.command';\nimport { NextPageEvent } from './next-page.event';\n\n\n@Injectable()\nexport class NextPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(NextPageCommand,\n\t\t\tNextPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: NextPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.nextPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { PrevPageCommand } from './prev-page.command';\nimport { PrevPageEvent } from './prev-page.event';\n\n\n@Injectable()\nexport class PrevPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(PrevPageCommand,\n\t\t\tPrevPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: PrevPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.prevPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher, AggregateEvent } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ChangePagesizeCommand } from './change-pagesize.command';\nimport { PageChangedEvent } from '../page/page-changed.event';\nimport { PagesizeChangedEvent } from './pagesize-changed.event';\n\n\n@Injectable()\nexport class ChangePagesizeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangePagesizeCommand);\n\t}\n\n\thandle(command: ChangePagesizeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst newPageSize = command.pageSize as number,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.changePageSize(newPageSize);\n\n\t\t// aggregateEvents => DomainEvents\n\n\t\t// DomainEvent\n\t\t// causationId -> aka commandId\n\t\t// correlationId -> actual or previous commandId\n\n\t\t// event publisher should take aggregate events\n\t\t// and convert them to domain events\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\t// TODO\n\t\t(aggregateEvents as any).forEach((event: AggregateEvent) => {\n\t\t\t(event as any).aggregateId = structureId;\n\t\t});\n\n\t\tthis.publishAggregateEvents(aggregateEvents, command);\n\t}\n\n\tprivate publishAggregateEvents(events: ReadonlyArray<AggregateEvent>, command: ChangePagesizeCommand): void {\n\n\t\tfor (let event of events) {\n\t\t\tthis.publishAggregateEvent(event, command);\n\t\t}\n\t}\n\n\tprivate publishAggregateEvent(event: AggregateEvent, command: ChangePagesizeCommand): void {\n\n\t\tswitch (event.getType()) {\n\t\t\tcase 'PageChangedAggregateEvent':\n\n\t\t\t\tconst pageChangedEvent = new PageChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pageChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PagesizeChangedAggregateEvent':\n\n\t\t\t\tconst pagesizeChangedEvent = new PagesizeChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pagesizeChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { SetPagingCommandHandler } from '../../domain/paging/command/set/set-paging.command-handler';\nimport { NextPageCommandHandler } from '../../domain/paging/command/next-page/next-page.command-handler';\nimport { PrevPageCommandHandler } from '../../domain/paging/command/prev-page/prev-page.command-handler';\nimport { ChangePagesizeCommandHandler } from '../../domain/paging/command/change-pagesize/change-pagesize.command-handler';\nimport { PagingRepository } from '../../domain/paging/read/paging.repository';\nimport { PagingAggregateFactory } from '../../domain/paging/command/paging.aggregate-factory';\nimport { PagingConverter } from '../../domain/paging/paging.converter';\nimport { PagingCommandService } from './paging-command.service';\nimport { PagingReadModelService } from './paging-read-model.service';\nimport { PagingEventService } from './paging-event.service';\n\n\nconst commandProviders = [\n\tPagingDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetPagingCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: NextPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: PrevPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangePagesizeCommandHandler,\n\t\tmulti: true\n\t}\n];\n\nconst readProviders = [\n\tPagingRepository\n];\n\nexport const pagingProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tPagingAggregateFactory,\n\tPagingConverter,\n\n\tPagingCommandService,\n\tPagingReadModelService,\n\tPagingEventService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaVerticalGridCommand } from './set-schema-vertical-grid.command';\nimport { SchemaVerticalGridSetEvent } from './schema-vertical-grid-set.event';\n\n\n@Injectable()\nexport class SetSchemaVerticalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaVerticalGridCommand,\n\t\t\tSchemaVerticalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaVerticalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setVerticalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaHorizontalGridCommand } from './set-schema-horizontal-grid.command';\nimport { SchemaHorizontalGridSetEvent } from './schema-horizontal-grid-set.event';\n\n@Injectable()\nexport class SetSchemaHorizontalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaHorizontalGridCommand,\n\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaHorizontalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHorizontalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaThemeCommand } from './set-schema-theme.command';\nimport { SchemaThemeSetEvent } from './schema-theme-set.event';\n\n@Injectable()\nexport class SetSchemaThemeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaThemeCommand,\n\t\t\tSchemaThemeSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaThemeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst theme = command.theme,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setTheme(theme);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaBottomHeaderCommand } from './change-schema-bottom-header.command';\nimport { SchemaBottomHeaderChangedEvent } from './schema-bottom-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaBottomHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaBottomHeaderCommand,\n\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaBottomHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderBottom(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaTopHeaderCommand } from './change-schema-top-header.command';\nimport { SchemaTopHeaderChangedEvent } from './schema-top-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaTopHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaTopHeaderCommand,\n\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaTopHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderTop(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetRowColoringCommand } from './set-row-coloring.command';\nimport { RowColoringSetEvent } from './row-coloring-set.event';\n\n\n@Injectable()\nexport class SetRowColoringCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetRowColoringCommand,\n\t\t\tRowColoringSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetRowColoringCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst coloring = command.coloring,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setRowColoring(coloring);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaCommand } from './set-schema.command';\nimport { SchemaSetEvent } from './schema-set.event';\n\n\n@Injectable()\nexport class SetSchemaCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaCommand,\n\t\t\tSchemaSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst height = command.height,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setHeight(height);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SetSchemaVerticalGridCommandHandler } from '../../domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler';\nimport { SetSchemaHorizontalGridCommandHandler } from '../../domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler';\nimport { SetSchemaThemeCommandHandler } from '../../domain/schema/command/theme/set-schema-theme.command-handler';\nimport { ChangeSchemaBottomHeaderCommandHandler } from '../../domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler';\nimport { ChangeSchemaTopHeaderCommandHandler } from '../../domain/schema/command/column-header/top/change-schema-top-header.command-handler';\nimport { SetRowColoringCommandHandler } from '../../domain/schema/command/coloring/set/set-row-coloring.command-handler';\nimport { SetSchemaCommandHandler } from '../../domain/schema/command/set/set-schema.command-handler';\nimport { SchemaRepository } from '../../domain/schema/read/schema-repository';\nimport { SchemaConverter } from '../../domain/schema/schema.converter';\nimport { SchemaCommandService } from './schema-command.service';\nimport { SchemaReadModelService } from './schema-read-model.service';\nimport { SchemaAggregateFactory } from '../../domain/schema/command/schema.aggregate-factory';\n\n\nconst commandProviders = [\n\tSchemaDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaVerticalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaHorizontalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaThemeCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaBottomHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaTopHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetRowColoringCommandHandler,\n\t\tmulti: true\n\t},\n\tSchemaAggregateFactory\n];\n\nconst readProviders = [\n\tSchemaRepository\n];\n\nexport const schemaProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tSchemaConverter,\n\n\tSchemaCommandService,\n\tSchemaReadModelService\n\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetFormationCommand } from './set-formation.command';\nimport { FormationSetEvent } from './formation-set.event';\n\n\n@Injectable()\nexport class SetFormationCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetFormationCommand,\n\t\t\tFormationSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetFormationCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst rawFormation = command.payload as any,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\t// missing implementation\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ToggleSelectedRowCommand } from './toggle-selected-row.command';\nimport { SelectedRowToggledEvent } from './selected-row-toggled.event';\n\n\n@Injectable()\nexport class ToggleSelectedRowCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSelectedRowCommand,\n\t\t\tSelectedRowToggledEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ToggleSelectedRowCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst selectedRow = command.selectedRow,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst formation = structure.getFormation();\n\n\t\tformation.toggleRow(selectedRow);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { SetFormationCommandHandler } from '../../domain/formation/command/set/set-formation.command-handler';\nimport { ToggleSelectedRowCommandHandler } from '../../domain/formation/command/toggle/toggle-selected-row.command-handler';\nimport { FormationRepository } from '../../domain/formation/read/formation-repository';\nimport { FormationAggregateFactory } from '../../domain/formation/command/formation.aggregate-factory';\nimport { FormationConverter } from '../../domain/formation/formation.converter';\nimport { FormationEventService } from './formation-event.service';\nimport { FormationCommandService } from './formation-command.service';\nimport { FormationReadModelService } from './formation-read-model.service';\n\nconst commandProviders = [\n\tFormationDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetFormationCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSelectedRowCommandHandler,\n\t\tmulti: true\n\t},\n\tFormationAggregateFactory\n];\n\nconst readProviders = [\n\tFormationRepository\n];\n\nexport const formationProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tFormationEventService,\n\n\tFormationConverter,\n\n\tFormationCommandService,\n\tFormationReadModelService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\nimport { SetOriginCommand } from './set-origin.command';\n\n\n@Injectable()\nexport class SetOriginCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(SetOriginCommand);\n\t}\n\n\thandle(command: SetOriginCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\titems = command.items as Array<any>;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst aggregateEvents = structure.setOrigin(items);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemCommand } from './structure.edit-source-item.command';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\n\n\n@Injectable()\nexport class StructureEditSourceItemCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(StructureEditSourceItemCommand);\n\t}\n\n\thandle(command: StructureEditSourceItemCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.getAggregateId(),\n\t\t\tparams = command.getParams();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.editItem(params);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureSourceOriginRepository } from './structure.source-origin.repository';\nimport { OriginSetEvent } from '../../command/origin/set-origin/origin-set.event';\n\n\n\n@Injectable()\nexport class StructureOriginChangedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: OriginSetEvent): void {\n\n\t\tif (event instanceof OriginSetEvent) {\n\t\t\tconst origin = event.getOrigin();\n\n\t\t\tthis.structureSourceOriginRepository.setOrigin(origin, event.getAggregateId());\n\t\t}\n\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from '../../schema/read/schema';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class SourceRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSourceLoadingEvent } from './set-source-loading.event';\nimport { SourceSetLoadingCommand } from './source-set-loading.command';\n\n\n@Injectable()\nexport class SourceSetLoadingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SourceSetLoadingCommand,\n\t\t\tSetSourceLoadingEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SourceSetLoadingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tsource = structure.getSource();\n\n\t\tsource.setLoading(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructurePreparedEntitiesSetEvent } from '../../command/prepared/structure.prepared-entities-set.event';\nimport { StructurePreparedItemsRepository } from './structure.prepared-items.repository';\n\n\n@Injectable()\nexport class StructurePreparedItemsEventHandler extends DomainEventHandler {\n\n\tconstructor(private structurePreparedItemsRepository: StructurePreparedItemsRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructurePreparedEntitiesSetEvent): void {\n\n\t\tif (event instanceof StructurePreparedEntitiesSetEvent) {\n\t\t\tconst preparedItems = event.getPreparedItems();\n\n\t\t\tthis.structurePreparedItemsRepository.setItems(preparedItems, event.getAggregateId());\n\t\t}\n\n\t}\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { SourceManagerFactory } from '../../domain/source/command/source.manager-factory';\nimport { SetOriginCommandHandler } from '../../domain/source/command/origin/set-origin/set-origin.command-handler';\nimport { StructureEditSourceItemCommandHandler } from '../../domain/source/command/origin/edit/structure.edit-source-item.command-handler';\nimport { StructureSourceDomainEventPublisher } from '../../domain/source/command/structure.source.domain-event.publisher';\nimport { StructureOriginChangedEventHandler } from '../../domain/source/read/origin/structure.origin-changed.event-handler';\nimport { SourceConverter } from '../../domain/source/source.converter';\nimport { SourceCommandService } from './source-command.service';\nimport { SourceReadModelService } from './source-read-model.service';\nimport { SourceEventService } from './event/source-event.service';\nimport { SourceRepository } from '../../domain/source/read/source.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/read/origin/structure.source-origin.repository';\nimport { SourceSetLoadingCommandHandler } from '../../domain/source/command/loading/source-set-loading.command-handler';\nimport { StructurePreparedItemsRepository } from '../../domain/source/read/prepared/structure.prepared-items.repository';\nimport { StructurePreparedItemsEventHandler } from '../../domain/source/read/prepared/structure.prepared-items.event-handler';\n\n\nconst commandProviders = [\n\tSourceDispatcher,\n\tSourceManagerFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SourceSetLoadingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetOriginCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureEditSourceItemCommandHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceDomainEventPublisher\n];\n\nconst readProviders = [\n\tSourceRepository,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureOriginChangedEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructurePreparedItemsEventHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceOriginRepository,\n\tStructurePreparedItemsRepository\n];\n\nexport const sourceProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tSourceConverter,\n\n\tSourceCommandService,\n\tSourceReadModelService,\n\tSourceEventService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetSearchPhraseCommand } from './structure.set-search-phrase.command';\nimport { StructureSearchPhraseSetDomainEvent } from './structure.search-phrase-set.domain-event';\nimport { StructureSourceDomainEventPublisher } from '../../../../source/command/structure.source.domain-event.publisher';\n\n\n@Injectable()\nexport class StructureSetSearchPhraseCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetSearchPhraseCommand);\n\t}\n\n\thandle(command: StructureSetSearchPhraseCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tphrase = command.phrase,\n\t\t\tstructure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.addSearchPhrase(phrase);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t\tthis.domainEventPublisher.publish(new StructureSearchPhraseSetDomainEvent(structureId));\n\t\tthis.structureSourceDomainEventPublisher.publish(structure.getEvents());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AggregateId, CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetSortOrderCommand } from './set-sort-order.command';\nimport { SortOrderSetEvent } from './sort-order-set.event';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureSorter } from '../structure.sorter';\nimport { SortToggledEvent } from '../toggle/sort-toggled.event';\n\n\n@Injectable()\nexport class SetSortOrderCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSortOrderCommand);\n\t}\n\n\thandle(command: SetSortOrderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.getAggregateId(),\n\t\t\tcompositionId = command.getCompositionId(),\n\t\t\tfieldId = command.getFieldId(),\n\t\t\tsortOrder = command.getSortOrder();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst sorters = structure.setSortOrder(fieldId, sortOrder);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.publishSortEvent(structureId, compositionId, fieldId, sorters);\n\t}\n\n\tpublishSortEvent(aggregateId: AggregateId, compositionId: CompositionId, fieldId: FieldId, sorters: Array<StructureSorter>): void {\n\n\t\tconst directions = sorters.map((sorter: StructureSorter) => {\n\t\t\treturn {\n\t\t\t\tdirection: sorter.hasDirection(),\n\t\t\t\tfieldId: sorter.getField().getId()\n\t\t\t};\n\t\t});\n\n\t\tthis.domainEventPublisher.publish(new SortOrderSetEvent(aggregateId, compositionId, directions));\n\t}\n\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryStructureCommandProviders,\n\tinMemoryStructureProviders,\n\tinMemoryStructureReadProviders\n} from '../../infrastructure/in-memory/structure/in-memory.structure.providers';\nimport { InitStructureCommandHandler } from '../../domain/structure/command/init/init-structure.command-handler';\nimport { SetVerticalScrollEnabledCommandHandler } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler';\nimport { SetScrollPositionCommandHandler } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler';\nimport { InitFieldsCommandHandler } from '../../domain/structure/command/field/init/init-fields.command-handler';\nimport { ToggleSortCommandHandler } from '../../domain/structure/command/sort/toggle/toggle-sort.command-handler';\nimport { SetSortingCommandHandler } from '../../domain/structure/command/sort/set-config/set-sorting.command-handler';\nimport { StructureSetConfigFilterCommandHandler } from '../../domain/structure/command/filter/config/structure.set-config-filter.command-handler';\nimport { StructureSetConfigSearchingCommandHandler } from '../../domain/structure/command/search/config/structure.set-config-searching.command-handler';\nimport { StructureSetConfigQuickFilterCommandHandler } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler';\nimport { StructureToggleFilterCommandHandler } from '../../domain/structure/command/filter/toggle/structure.toggle-filter.command-handler';\nimport { StructureSetAggregationEnabledCommandHandler } from '../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler';\nimport { VerticalFormationFactory } from '../../domain/structure/command/vertical-formation/vertical-formation.factory';\nimport { FieldCollectionFactory } from '../../domain/structure/command/field/field-collection.factory';\nimport { FilterManagerFactory } from '../../domain/structure/command/filter/filter.manager-factory';\nimport { FieldIdGenerator } from '../../domain/structure/command/field/field-id.generator';\nimport { StructureFilterCommandService } from './filter/structure.filter.command.service';\nimport { FieldFactory } from '../../domain/structure/command/field/data-type/field.factory';\nimport { aggregationProviders } from '../../domain/structure/command/aggregation/aggregation.providers';\nimport { StructureConfigFilterSetEventHandler } from '../../domain/structure/read/filter/structure.config-filter-set.event-handler';\nimport { StructureConfigSearchingSetEventHandler } from '../../domain/structure/read/searching/structure.config-searching-set.event-handler';\nimport { StructureConfigQuickFilterSetEventHandler } from '../../domain/structure/read/filter/structure.config-quick-filter-set.event-handler';\nimport { StructureFieldsInitedEventHandler } from './field/structure.fields-inited.event-handler';\nimport { VerticalFormationConverter } from '../../domain/structure/read/vertical-formation/vertical-formation.converter';\nimport { StructureFilterReadModelRepository } from './filter/structure.filter.read-model.repository';\nimport { StructureFilterRepository } from '../../domain/structure/read/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../domain/structure/read/filter/structure.quick-filter.repository';\nimport { StructureSearchingRepository } from '../../domain/structure/read/searching/structure.searching.repository';\nimport { StructureSearchReadModelRepository } from './search/structure-search.read-model.repository';\nimport { StructureFieldUiArchive } from './field/structure.field.ui-archive';\nimport { StructureFieldUiConverter } from './field/structure.field.ui-converter';\nimport { StructureFieldUiRepository } from './field/structure.field.ui-repository';\nimport { StructureAggregationCommandService } from './aggregation/structure.aggregation.command-service';\nimport { StructureAggregationUiEventsRepository } from './aggregation/structure.aggregation.ui-events-repository';\nimport { StructureCommandService } from './structure-command.service';\nimport { StructureConverter } from '../../domain/structure/structure.converter';\nimport { StructureAggregateFactory } from '../../domain/structure/command/structure.aggregate-factory';\nimport { StructureReadModelService } from './structure-read-model.service';\nimport { pagingProviders } from '../paging/paging.providers';\nimport { schemaProviders } from '../schema/schema.providers';\nimport { formationProviders } from '../formation/formation.providers';\nimport { sourceProviders } from '../source/source.providers';\nimport { StructureSetSearchPhraseCommandHandler } from '../../domain/structure/command/search/set/structure.set-search-phrase.command-handler';\nimport { SearchManagerFactory } from '../../domain/structure/command/search/search.manager-factory';\nimport { SetSortOrderCommandHandler } from '../../domain/structure/command/sort/order/set-sort-order.command-handler';\n\n\nconst commandProviders = [\n\t...inMemoryStructureCommandProviders,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitStructureCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetVerticalScrollEnabledCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetScrollPositionCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitFieldsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSortCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSortingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigSearchingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigQuickFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureToggleFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetAggregationEnabledCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetSearchPhraseCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSortOrderCommandHandler,\n\t\tmulti: true\n\t},\n\tVerticalFormationFactory,\n\tFieldCollectionFactory,\n\tFilterManagerFactory,\n\tSearchManagerFactory,\n\tFieldIdGenerator,\n\tStructureFilterCommandService,\n\tFieldFactory,\n\n\t...aggregationProviders\n];\n\nconst readProviders = [\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigSearchingSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigQuickFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureFieldsInitedEventHandler,\n\t\tmulti: true\n\t},\n\t...inMemoryStructureReadProviders,\n\tVerticalFormationConverter,\n\tStructureFilterReadModelRepository,\n\tStructureFilterRepository,\n\tStructureQuickFilterRepository,\n\tStructureSearchingRepository,\n\tStructureSearchReadModelRepository,\n\tStructureFieldUiArchive,\n\tStructureFieldUiConverter,\n\tStructureFieldUiRepository\n];\n\nexport const structureProviders = [\n\t...inMemoryStructureProviders,\n\n\t...commandProviders,\n\t...readProviders,\n\n\tStructureAggregationCommandService,\n\tStructureAggregationUiEventsRepository,\n\n\tStructureAggregateFactory,\n\tStructureConverter,\n\n\tStructureReadModelService,\n\tStructureCommandService,\n\n\t...pagingProviders,\n\t...schemaProviders,\n\t...formationProviders,\n\t...sourceProviders\n];\n","import { Logger } from './logger';\n\nexport class ConsoleLogger extends Logger {\n\n\twarn(text: string): void {\n\t\tconsole.warn(text);\n\t}\n\n\terror(text: string): void {\n\t\tconsole.error(text);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { Logger } from './logger';\nimport { ConsoleLogger } from './console.logger';\n\n\n@NgModule({\n\tproviders: [{\n\t\tprovide: Logger,\n\t\tuseClass: ConsoleLogger\n\t}]\n})\nexport class LoggerModule {}\n","import { Injectable } from '@angular/core';\n\nimport { ItemEntity } from './item.entity';\nimport { OriginItemEntity } from './command/origin/origin-item-entity';\n\n@Injectable()\nexport class ItemEntityFactory {\n\n\tcreate(data: any): ItemEntity;\n\tcreate(data: Array<any>): Array<ItemEntity>;\n\tcreate(data: any): any {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createEntities(data);\n\t\t} else {\n\t\t\treturn this.createEntity(data);\n\t\t}\n\t}\n\n\tcreateEntities(data: Array<any>): Array<ItemEntity> {\n\t\treturn data.map((data: any) => this.createEntity(data));\n\t}\n\n\tprivate createEntity(item: OriginItemEntity | any): ItemEntity {\n\n\t\tif (item instanceof OriginItemEntity) {\n\t\t\treturn new ItemEntity(item.rawData, item.getPosition(), item.id, item.getVersion());\n\t\t} else {\n\t\t\treturn new ItemEntity(item, 0);\n\t\t}\n\t}\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, OnInit } from \"@angular/core\";\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\n@Component({\n\tselector: 'gui-structure-top-panel',\n\ttemplate: `\n\t\t\n\t\t<gui-structure-search-bar></gui-structure-search-bar>\n\t\t\n\t\t\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureTopPanelComponent extends SmartComponent {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\n}\n","import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { SmartComponent } from '../../../../../../common/cdk/smart-component';\n\nimport { StructureCommandService } from '../../../../ui-api/structure/structure-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-search-bar',\n\ttemplate: `\n\t\t<form [formGroup]=\"searchForm\">\n\t\t\t<div class=\"gui-search-icon\"></div>\n\t\t\t<input formControlName=\"searchPhrase\" [placeholder]=\"'Search ...'\">\n\t\t</form>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureSearchComponent extends SmartComponent implements OnInit {\n\n\tsearchForm: FormGroup;\n\n\tconstructor(private formBuilder: FormBuilder,\n\t\t\t\tprivate structureCommandService: StructureCommandService) {\n\t\tsuper();\n\t\tthis.searchForm = this.formBuilder.group({\n\t\t\t'searchPhrase': ''\n\t\t});\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tprivate observeChanges(): void {\n\t\tthis.searchForm\n\t\t\t.controls['searchPhrase']\n\t\t\t.valueChanges\n\t\t\t.pipe(\n\t\t\t\tdebounceTime(200),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((phrase: string) => {\n\t\t\t\tthis.structureCommandService.search(phrase);\n\t\t\t});\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { StructureTopPanelComponent } from './structure.top-panel.component';\nimport { StructureSearchComponent } from './search/structure.search.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tReactiveFormsModule\n\t],\n\tdeclarations: [\n\t\tStructureTopPanelComponent,\n\t\tStructureSearchComponent\n\t],\n\texports: [\n\t\tStructureTopPanelComponent,\n\t\tStructureSearchComponent\n\t]\n})\nexport class StructureTopPanelModule {\n}\n","import { Component, Input, ElementRef, Injector, ViewChild, OnInit, ChangeDetectorRef } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { StructureColumnConfigService } from './structure.column-config.service';\nimport { StructureColumnMenuConfig } from './config/structure.column-menu-config';\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\nimport { StructureColumnMenuConfigArchive } from './config/structure.column-menu-config.archive';\n\n\n@Component({\n\tselector: 'gui-structure-column-config-trigger',\n\ttemplate: `\n\t\t<div #headerDialogContainer\n\t\t\t *ngIf=\"isEnabled()\"\n\t\t\t class=\"gui-header-menu-icon\"\n\t\t\t (click)=\"openConfigDialog()\">\n\t\t</div>\n\t`\n})\nexport class StructureColumnConfigTriggerComponent extends SmartComponent implements OnInit {\n\n\t@ViewChild('headerDialogContainer', { static: false })\n\theaderDialogContainer: ElementRef;\n\n\t@Input()\n\tcolumn: CellTemplateWithContext;\n\n\tconfig: StructureColumnMenuConfig;\n\n\tconstructor(private elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureColumnMenuConfigArchive: StructureColumnMenuConfigArchive,\n\t\t\t\tprivate structureColumnConfigService: StructureColumnConfigService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\t\tthis.structureColumnMenuConfigArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((config: StructureColumnMenuConfig) => {\n\t\t\t\tthis.config = config;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\topenConfigDialog(): void {\n\t\tthis.structureColumnConfigService.open(this.headerDialogContainer, this.column);\n\t}\n\n\tcloseConfigDialog(): void {\n\t\tthis.structureColumnConfigService.close();\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.config && this.config.isEnabled();\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from \"@angular/core\";\n\n\n@Component({\n\tselector: 'gui-structure-empty-source',\n\ttemplateUrl: `structure-empty-source.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None,\n\thost: {\n\t\t'[class.gui-structure-empty-source]': 'true'\n\t}\n})\nexport class StructureEmptySourceComponent {}\n","import { ModuleWithProviders, NgModule, PLATFORM_ID, Inject } from '@angular/core';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, HermesModule } from '@generic-ui/hermes';\n\nimport { fabricImports } from './structure-fabric.imports';\nimport { StructurePagingModule } from './paging/structure-paging.module';\nimport { StructureInfoPanelModule } from './panel/info/structure.info-panel.module';\nimport { CompositionModule } from '../ui-api/composition/composition.module';\nimport { StructureComponent } from './structure.component';\nimport { StructureHeaderComponent } from './header/structure-header.component';\nimport { StructureHeaderColumnsComponent } from './header/columns/structure-header-columns.component';\nimport { StructureHeaderFiltersComponent } from './header/filters/structure-header-filters.component';\nimport { StructureHeaderFilterComponent } from './header/filters/structure.header-filter.component';\nimport { StructureContentComponent } from './content/structure-content.component';\nimport { StructureRowComponent } from './content/row/structure-row.component';\nimport { StructureCellComponent } from './content/cell/structure.cell.component';\nimport { StructureContainerComponent } from './content/structure-container.component';\nimport { StructureQuickFiltersComponent } from './header/quick-filters/structure.quick-filters.component';\nimport { StructureBlueprintComponent } from './blueprint/structure.blueprint.component';\nimport { StructureAggregationPanelComponent } from './panel/aggregation/structure.aggregation-panel.component';\nimport { StructureColumnConfigComponent } from './header/menu/structure.column-config.component';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../ui-api/structure/structure-tokens';\nimport { StructureDefinition } from './structure-definition';\nimport { SourceReadModelService } from '../ui-api/source/source-read-model.service';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureAggregationPanelConfigConverter } from './panel/aggregation/structure.aggregation-panel.config-converter';\nimport { structureProviders } from '../ui-api/structure/structure.providers';\nimport { StructureModuleConfig } from './structure-module-config';\nimport { LoggerModule } from '../../../common/cdk/logger/logger.module';\nimport { ItemEntityFactory } from '../domain/source/item.entity-factory';\nimport { StructureTopPanelModule } from './panel/top/structure.top-panel.module';\nimport { StructureColumnConfigTriggerComponent } from './header/menu/structure.column-config-trigger.component';\nimport { StructureEmptySourceComponent } from './content/empty-source/structure-empty-source.component';\n\nexport function createStructureDefinition() {\n\treturn new StructureDefinition.DefaultBuilder().build();\n}\n\n\nconst imports = [\n\tCommonModule,\n\tReactiveFormsModule,\n\tHermesModule,\n\t// .withConfig({\n\t// \tloggers: false\n\t// }),\n\t...fabricImports,\n\n\tStructurePagingModule,\n\tStructureInfoPanelModule,\n\tStructureTopPanelModule,\n\n\tCompositionModule,\n\n\tLoggerModule\n];\n\nconst declarations = [\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureHeaderColumnsComponent,\n\tStructureHeaderFiltersComponent,\n\tStructureHeaderFilterComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureCellComponent,\n\tStructureContainerComponent,\n\tStructureEmptySourceComponent,\n\tStructureQuickFiltersComponent,\n\tStructureBlueprintComponent,\n\tStructureAggregationPanelComponent,\n\tStructureColumnConfigComponent,\n\tStructureColumnConfigTriggerComponent\n];\n\nconst entryComponents = [\n\tStructureColumnConfigComponent\n];\n\nconst providers = [\n\t{\n\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\tuseValue: 'structure'\n\t},\n\t{\n\t\tprovide: StructureDefinition,\n\t\tuseFactory: createStructureDefinition\n\t},\n\tItemEntityFactory,\n\n\tSourceReadModelService,\n\n\tStructureIdGenerator,\n\n\tStructureAggregationPanelConfigConverter,\n\n\t...structureProviders\n\n];\n\nconst exportDeclarations = [\n\tFabricModule,\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureContainerComponent,\n\n\t...fabricImports,\n\tStructurePagingModule\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class StructureModule {\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic withConfig(structureConfig: StructureModuleConfig = { cssClassName: '', hermesModuleConfig: { loggers: false } }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: StructureModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\t\t\t\tuseValue: structureConfig.cssClassName\n\t\t\t\t},\n\t\t\t\t{ provide: COMMAND_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t{ provide: EVENT_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t...providers\n\t\t\t]\n\t\t};\n\t}\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any) {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['hermesApi'].loggers = false;\n\t\t}\n\t}\n\n}\n","import { NgModule, Provider } from '@angular/core';\n\nimport { GridComponent } from '../ui/grid/grid.component';\n\nimport { StructureModule } from '../../../lib/structure/ui/structure.module';\n\nimport { GridIdGenerator } from '../ui/grid/register/grid-id.generator';\nimport { GridRegister } from '../ui/grid/register/grid.register';\n\n\nconst imports = [\n\tStructureModule.withConfig({\n\t\t\tcssClassName: 'grid',\n\t\t\thermesModuleConfig: {\n\t\t\t\tloggers: true\n\t\t\t}\n\t\t})\n];\n\nconst declarations = [\n\tGridComponent\n];\n\nconst providers = [\n\tGridIdGenerator,\n\tGridRegister\n] as Array<Provider>;\n\nconst exportDeclarations = [\n\tGridComponent\n];\n\nconst entryComponents = [] as Array<any>;\n\nconst elementComponents = [\n\tGridComponent\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\tproviders,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class GridModule {\n\n\tstatic entryComponents = [...entryComponents];\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic elementComponents = [...elementComponents];\n}\n"]}