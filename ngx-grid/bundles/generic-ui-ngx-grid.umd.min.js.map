{"version":3,"sources":["../../../../../node_modules/tslib/tslib.es6.js","ng://@generic-ui/ngx-grid/gui/grid/ui-api/grid.api.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/data-type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-type.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.type.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-aggregation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/cell-view.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column-view.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/column/grid.column.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-theme.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/theme/grid.theme.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/row-coloring.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/coloring/grid.row-coloring.converter.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-gateway.ts","ng://@generic-ui/ngx-grid/common/cdk/generic-builder.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid-structure-definition.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-parent-component.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid-id.generator.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/register/grid.register.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/console/grid.console.api.ts","ng://@generic-ui/ngx-grid/gui/grid/ui/grid/grid.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/config/structure.column-config.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/config/structure.column-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-fabric.imports.ts","ng://@generic-ui/ngx-grid/common/cdk/reactive.ts","ng://@generic-ui/ngx-grid/common/cdk/smart-component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/read/paging.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/global-structure-id.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/origin/structure.source-origin.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/prepared/structure.prepared-items.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/read/paging.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/navigator/structure-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/select/structure-paging-select.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/stats/structure-paging-stats.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/navigator/structure-alternative-paging-navigator.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/alternative-paging/pages/structure-alternative-paging-pages.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/paging/structure-paging.module.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.pipe.ts","ng://@generic-ui/ngx-grid/common/cdk/number-formatter/number-formatter.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure-info-modal.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel.module.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/changed-value.emitter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/state/edit.event-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-communication.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/input-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/number-edit-template.component.ts","ng://@generic-ui/ngx-grid/common/cdk/decorators.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/string-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-templates.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/template/boolean-edit-template.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/composition/column-query.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/function-view.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-type.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-container-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/composition-width.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-width/column-width-collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/sort-status.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/view.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/column-entity.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/command/in-memory.composition.aggregate-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/template/template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/view/view-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-template.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/edit/edit-template.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-template-with-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-context.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/cell-template-with-accessor.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/column-definition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/definition/column-definition.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/composition.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/read/in-memory.composition.read-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/read/composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/composition-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/composition-resize-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/columns-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/composition-container-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/composition-width-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/read/in-memory.composition.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/composition/in-memory.composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/init/init-composition.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition.events.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/composition-event.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/set-columns.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-width/set-composition-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/resize-width/set-composition-resize-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/width/set-container-width/set-composition-container-width.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/colum-field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.event-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/global-composition-id.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/sort-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/field/column-field.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/change-sort.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/sort/composition-change-sort-status.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/fields-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/column.params.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/composition/command/column/set-columns/composition-fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/composition/composition.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-id.generator.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/pagesize/pagesize-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/paging.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/paging/local-paging-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema-row-coloring.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/schema/local-schema-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/formation-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/formation/local-formation-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.dispatcher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/set-sorting.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.set-search-phrase.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/structure/local-structure-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.params.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/source/local-source-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-command.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/composition/local-composition-read-model.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/local/local-providers.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/schema/schema-css-class.manager.ts","ng://@generic-ui/ngx-grid/common/cdk/archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.store.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.edit-mode.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/info/structure.info-panel-enabled.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation.archive.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.config-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.command-service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-config.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure-component-token.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/edit/structure.cell-edit.state.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/gateway/structure.gateway.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/page/page-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/pagesize-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/event/editem-item.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/event/source-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/selected-row-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation-event.service.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/columns/structure-header-columns.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.quick-filter.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/filter/structure.filter.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/structure-header.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure-header-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/filters/structure.header-filter.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-content.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/item.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/row/structure-row.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/cell/structure.cell.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/content/structure-container.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/header/quick-filters/structure.quick-filters.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/searching/structure.searching.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/search/structure-search.read-model.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure-tokens.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/blueprint/structure.blueprint.component.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/aggregation/structure.aggregation.ui-events-repository.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/aggregation/structure.aggregation-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.store.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure.aggregate-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/commad/in-memory.structure-aggregate.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/selected-rows/selected-rows-list.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/read/formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-css-class.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/read/schema-column-header.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/schema.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/paging.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/source.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/source.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/vertical-formation/vertical-formation.read-model.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/vertical-formation/vertical-formation.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/structure.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/structure.converter.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/read/in-memory-structure.read-store.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/structure-inited.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/set-source-loading.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/schema-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/schema-theme-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/schema-vertical-grid-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/schema-top-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/schema-bottom-header-changed.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/row-coloring-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/paging-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/formation-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/origin-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.filter-toggled.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.search-phrase-set.domain-event.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/read/in-memory.structure.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/infrastructure/in-memory/structure/in-memory.structure.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/origin-item-entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.source-item-edited.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/structure.origin-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/source.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-range.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/vertical-formation.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculators.token.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/structure.aggregations-changed.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.manager.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/structure.filter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.settings.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/filter.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-id.generator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/unknown-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/number-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/string-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/boolean-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/fields/date-field.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/data-type/field.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field.collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/field-collection.factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/structure.sorter.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.id.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/sorter.collection.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/column-header.entity.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema-aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/search.manager.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/prepared/structure.prepared-entities-set.aggregate-event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/schema.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/formation.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/search.manager-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/structure.aggregate-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/init/init-structure.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/field/init/init-fields.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/toggle/toggle-sort.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/sorting-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/sort/set/set-sorting.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.config-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/config/structure.set-config-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.config-searching-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/config/structure.set-config-searching.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.config-quick-filter-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/filter/toggle/structure.toggle-filter.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/prepared/structure.prepared-entities-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/structure.source.domain-event.publisher.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.aggregation-enabled-set.event.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/boolean/boolean-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/date/date-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/number/number-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/string/string-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregated.values.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/calculation/unknown/unknown-aggregation.calculator.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/aggregation/aggregation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.config-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/searching/structure.config-searching-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/read/filter/structure.config-quick-filter-set.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-model.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.field.ui-converter.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/field/structure.fields-inited.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/set/set-paging.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/next-page/next-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/prev-page/prev-page.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/paging/command/change-pagesize/change-pagesize.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/paging/paging.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/theme/set-schema-theme.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/column-header/top/change-schema-top-header.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/coloring/set/set-row-coloring.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/schema/command/set/set-schema.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/schema/schema.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/set/set-formation.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/formation/command/toggle/toggle-selected-row.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/formation/formation.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/set-origin/set-origin.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/origin/edit/structure.edit-source-item.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/origin/structure.origin-changed.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/source.repository.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/command/loading/source-set-loading.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/read/prepared/structure.prepared-items.event-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/source/source.providers.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/structure/command/search/set/structure.set-search-phrase.command-handler.ts","ng://@generic-ui/ngx-grid/lib/structure/ui-api/structure/structure.providers.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/console.logger.ts","ng://@generic-ui/ngx-grid/common/cdk/logger/logger.module.ts","ng://@generic-ui/ngx-grid/lib/structure/domain/source/item.entity-factory.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/structure.top-panel.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/search/structure.search.component.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/panel/top/structure.top-panel.module.ts","ng://@generic-ui/ngx-grid/lib/structure/ui/structure.module.ts","ng://@generic-ui/ngx-grid/gui/grid/ui-api/grid.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","UNKNOWN","NUMBER","STRING","BOOLEAN","DATE","CUSTOM","TEXT","CHIP","LINK","IMAGE","BOLD","ITALIC","CHECKBOX","FABRIC","MATERIAL","LIGHT","DARK","NONE","EVEN","ODD","GridColumnTypeConverter","convertType","type","convertTypeString","convertTypeEnum","enumType","GuiDataType","DataType","toLocaleLowerCase","COUNT","DISTINCT","SUM","AVERAGE","MIN","MAX","MEDIAN","TRUTHY","FALSY","EARLIEST","LATEST","GridColumnAggregationConverter","convert","aggregationConfig","columnAggregationConfig","undefined","enabled","aggregationTypes","convertAggregationTypes","configAggregationTypes","_this","forEach","aggregationType","convertAggregationType","AggregationType","FUNCTION","GridColumnViewConverter","view","convertString","convertEnum","CellView","GuiCellView","GridColumnConverter","columnTypeConverter","columnAggregationConverter","columnViewConverter","config","map","convertColumn","guiColumn","columnConfig","header","field","width","aggregation","GridThemeConverter","theme","SchemaTheme","GuiTheme","GridRowColoringConverter","rowColoring","RowColoring","GuiRowColoring","GridGateway","source","columns","pageChanged","EventEmitter","pageSizeChanged","itemsSelected","columnsChanged","containerWidthChanged","sourceEdited","cellEditEntered","cellEditCanceled","cellEditSubmitted","gridColumnConverter","gridThemeConverter","gridRowColoringConverter","ngOnChanges","changes","currentValue","columnsConfig","themeConfig","rowColoringConfig","onPageChange","page","emit","onPageSizeChange","pageSize","onItemSelect","item","onColumnsChange","onContainerWidthChange","containerWidth","onSourceEdit","onCellEditEnter","onCellEditSubmit","onCellEditCancel","Input","Output","GenericBuilder","build","buildObject","StructurePagingDefinitionBuilder","_super","tslib_1.__extends","StructurePagingDefinition","withEnabled","StructurePagingDefinitionDefaultBuilder","defaultEnabled","isEnabled","Builder","DefaultBuilder","StructureDefinitionBuilder","headerEnabled","bottomPaging","topPaging","border","StructureDefinition","withHeader","withBottomPaging","paging","withTopPaging","withBorder","StructureDefinitionDefaultBuilder","defaultHeaderEnabled","defaultBottomPaging","defaultTopPaging","isHeaderEnabled","isBorderEnabled","getBottomPaging","getTopPaging","gridStructureDefinition","gridProviders","provide","useValue","structureParentComponent","InjectionToken","GridIdGenerator","generateId","index","PREFIX","Injectable","GridRegister","gridMap","Map","register","gridId","component","structureId","set","unregister","delete","getValues","get","GridConsoleApiProvider","gridComponent","changeColumnHeaderTop","columnHeaderTop","detectChanges","GridComponent","platformId","elementRef","changeDetectorRef","gridRegister","gridIdGenerator","ngOnInit","localGridId","exposeGridId","structureRef","getStructureId","isPlatformBrowser","window","gridConsoleConfig","ngOnDestroy","getElementRef","getGridId","nativeElement","setAttribute","Component","args","selector","template","providers","useExisting","host","[class]","[style.height]","encapsulation","ViewEncapsulation","None","Inject","PLATFORM_ID","ElementRef","ChangeDetectorRef","ViewChild","static","StructureColumnConfigComponent","StructureColumnConfigService","dialogService","open","close","FabricDialogService","fabricImports","FabricBadgeModule","FabricButtonModule","FabricButtonGroupModule","FabricCheckboxModule","FabricChipModule","FabricRadioButtonModule","FabricRadioGroupModule","FabricProgressBarModule","FabricProgressSpinnerModule","FabricSelectModule","FabricSpinnerModule","FabricToggleButtonModule","FabricInputModule","FabricDialogModule","Reactive","unsubscribe$","Subject","unsubscribe","complete","takeUntil","SmartComponent","PagingRepository","structureRepository","select","onStructure","pipe","filter","structure","getId","toString","getPaging","StructureRepository","StructureId","id","AggregateId","globalStructureId","PagingReadModelService","pagingRepository","onPaging","onSinglePaging","take","SetPagingCommand","payload","Command","ChangePagesizeCommand","NextPageCommand","PrevPageCommand","PagingDispatcher","commandDispatcher","setPaging","dispatch","changePageSize","nextPage","prevPage","CommandDispatcher","PagingCommandService","pagingDispatcher","enable","disable","goToPage","pageNumber","currentPage","changePagerTop","pagerTop","changePagerBottom","pagerBottom","StructureSourceOriginRepository","origin","origin$","ReplaySubject","setOrigin","onOrigin","asObservable","distinctUntilChanged","StructurePreparedItemsRepository","setItems","onPreparedItems","SourceReadModelService","structurePreparedItemsRepository","structureSourceOriginRepository","onEntities","getEntities","ents1","ents2","flag","ent","equals","onEntitiesSize","entities","onSingleEntities","onOriginSize","onLoading","getSource","isLoading","onPreparedEntities","StructurePagingComponent","pagingQueryService","pagingCommandService","sourceQueryService","alternativeDisplay","subscribe","size","sourceSize","changeDetection","ChangeDetectionStrategy","OnPush","Paging","pageSizes","isNextDisabled","isPrevDisabled","start","end","getPage","getPageSize","getPageSizes","isPagerTop","isPagerBottom","isNextPageDisabled","isPrevPageDisabled","getStart","getEnd","getSourceSize","calculateVisiblePages","numberOfVisiblePages","sample","slice","StructurePagingNavigatorComponent","nextPageChanged","prevPageChanged","prevDisabled","nextDisabled","calculatePrev","calculateNext","StructurePagingSelectComponent","StructurePagingStatsComponent","calculate","firstItemIndex","lastItemIndex","isSourceNotEmpty","StructureAlternativePagingNavigatorComponent","firstPage","lastPage","numberOfPages","Math","ceil","StructureAlternativePagingPagesComponent","pages","activePage","StructurePagingModule","NgModule","imports","CommonModule","FabricModule","declarations","exports","NumberFormatterPipe","transform","number","replace","Pipe","name","NumberFormatterModule","StructureInfoModalComponent","StructureInfoPanelComponent","dialog","infoPanel","totalItemsSize","preparedItems","preparedItemsSize","openInfo","StructureInfoPanelModule","entryComponents","ViewTemplatesComponent","getTemplate","textTemplate","chipTemplate","linkTemplate","imageTemplate","checkboxTemplate","boldTemplate","italicTemplate","customTemplate","functionTemplate","read","TemplateRef","ChangedValueEmitter","subject$","SUBMIT","BLUR","CANCEL","EditCommunicationComponent","ENTER_KEY_CODE","ESC_KEY_CODE","submit","emitStatus","EditEventType","cancel","status","InputEditTemplateComponent","formBuilder","filterFieldName","filterForm","group","_a","setValue","observeChanges","ngAfterViewInit","inputElement","inputRef","focusField","emitValueChange","fromEvent","keyup$","keyCode","focus","controls","valueChanges","NumberEditTemplateComponent","fb","FormBuilder","Override","container","getPrototypeOf","Error","StringEditTemplateComponent","setSelectionRange","tslib_1.__decorate","EditTemplatesComponent","dataType","stringTemplate","numberTemplate","booleanTemplate","emptyTemplate","BooleanEditTemplateComponent","checkboxRef","querySelector","debounceTime","toggle","changed","ColumnQueryComponent","ContentChild","FunctionViewComponent","sanitizer","safeHTML","bypassSecurityTrustHtml","element","DomSanitizer","PERCENTAGE","AUTO","ColumnWidth","baseWidth","setWidthAndType","getWidth","getColumnType","isTypePercentage","ColumnWidthType","isTypeAuto","isTypeNumber","setWidth","isPercentage","percentageToNumber","isStringNumber","clone","widthAsNumber","Number","isNaN","CompositionContainerWidthCalculator","MIN_COLUMN_WIDTH","calculateMinWidth","columnWidths","segregateColumns","staticColumns","fluidColumns","sum","columnWidth","CompositionWidthCalculator","adjustMinimalWidth","newColumns","column","evenWidth_1","adjustPercentageWidth","_b","tslib_1.__values","_c","adjustAutoWidth","leftWidth","autoColumns","splitWidth","autoColumns_1","autoColumns_1_1","ColumnWidthCollection","baseColumnWidths","setContainerWidth","getColumns","getColumnsWidth","getWidths","getMinWidth","setColumns","calculator","ASC","DESC","ViewEntity","columnView","templateFunction","getCellView","getTemplateFunction","ColumnEntity","columnField","sortStatus","SortStatus","getField","getHeader","getDataType","setSortStatus","setView","ColumnEntityFactory","data","isArray","createColumns","createColumn","params","getColumn","columnEntity","convertWidth","columnEntities","ColumnsSetAggregateEvent","aggregateId","AggregateEvent","CompositionWidthSetAggregateEvent","CompositionContainerWidthSetAggregateEvent","compositionId","CompositionResizeWidthSetAggregateEvent","CompositionAggregate","columnsParams","resizeWidth","columnWidthCollection","activeColumns","resizeWidthEnabled","columnFactory","param","baseParams","baseColumns","isResizeEnabled","isReady","composition","CompositionAggregate_1","widths","updateColumnsWidths","setActiveColumnsWithEvent","setContainerWidthWithEvent","recalculateColumns","setWidthWithEvent","setResizeWidthWithEvent","setResizeWidth","changeSort","sortParams","fieldId","direction","this_1","sortParams_1","sortParams_1_1","addEvent","minWidth","RootAggregate","Boolean","Aggregate","InMemoryCompositionStore","InMemoryStore","InMemoryCompositionAggregateStore","inMemoryCompositionStore","aggregateStoreRegister","getById","AggregateStoreRegister","InMemoryAggregateStore","InMemoryCompositionAggregateRepository","inMemoryCompositionAggregateStore","save","aggregate","CompositionAggregateRepository","TemplateFactory","templatesComponentDefinition","componentFactoryResolver","templates","templatesComponent","createTemplatesComponent","getTemplates","destroy","componentFactory","resolveComponentFactory","injector","Injector","generateMap","generateMapKeys","findAndSetTemplate","dt","instance","ViewTemplateFactory","keys","ComponentFactoryResolver","ViewTemplateRepository","columnTemplateFactory","findTemplate","EditTemplateFactory","EditTemplateRepository","editTemplateFactory","CellTemplateWithContext","viewTemplate","editTemplate","context","getFieldId","getSortStatus","CellContext","FieldId","CellTemplateWithAccessor","editable","accessor","columnFieldId","ColumnDefinition","sort","setHeader","setField","getHeaderCellTemplateWithContext","headerCellContext","headerTemplate","getContentCellTemplateWithAccessor","cellTemplate","entity","getAccessor","ColumnDefinitionFactory","viewTemplateRepository","editTemplateRepository","columnDef","findViewTemplate","findEditTemplate","Composition","uid","ready","getHeaderColumns","getTemplateColumns","getContainerWidth","isResizeWidthEnabled","equalsByColumns","ReadModel","CompositionConverter","columnDefinitionFactory","columnDefs","convertColumnsToColumnDef","InMemoryCompositionReadStore","compositionConverter","toReadModel","InMemoryReadModelStore","CompositionInitedEvent","DomainEvent","CompositionResizeWidthSetEvent","ColumnsSetEvent","CompositionContainerWidthSetEvent","CompositionWidthSetEvent","CompositionChangeSortStatusEvent","getCompositionId","InMemoryCompositionRepository","domainEventBus","inMemoryCompositionQueryStore","composition$","ofEvent","event","DomainEventBus","CompositionRepository","inMemoryCompositionCommandProviders","useClass","inMemoryCompositionQueryProviders","inMemoryCompositionProviders","CompositionAggregateFactory","InitCompositionCommand","SetColumnsCommand","getParams","SetCompositionWidthCommand","SetCompositionContainerWidthCommand","SetCompositionResizeWidthCommand","CompositionChangeSortStatusCommand","getSortParams","CompositionDispatcher","init","InitCompositionCommandHandler","compositionAggregateRepository","compositionAggregateFactory","domainEventPublisher","handle","command","compositionAggregate","DomainEventPublisher","CommandHandler","CompositionAggregateEvents","CompositionEventConverter","arg","convertEvents","convertEvent","aggregateEvents","aggregateEvent","getType","getAggregateId","SetColumnsCommandHandler","compositionEventConverter","setColumnsParams","publishEvents","events","getEvents","domainEvents","publish","SetCompositionWidthCommandHandler","columnConverter","SetCompositionResizeWidthCommandHandler","SetCompositionContainerWidthCommandHandler","publishAggregateEvents","CompositionChangeSortStatusCommandHandler","ColumnField","getValue","ColumnFieldFactory","CompositionEventService","selectColumnsChanged","selectWidthChanged","selectContainerWidthChanged","getPayload","CompositionId","globalCompositionId","CompositionReadModelService","compositionRepository","onWidth","onContainerWidth","onWidthForEachColumn","onHeaderColumns","onTemplateColumns","onResizeWidth","CompositionCommandService","compositionDispatcher","SortToggledEvent","directions","getDirections","ColumnFieldId","ChangeSortParams","CompositionChangeSortStatusEventHandler","dir","DomainEventHandler","FieldsInitedEvent","fields","getFields","ColumnParams","CompositionFieldsInitedEventHandler","columnFieldFactory","columnFieldIds","convertColumnFieldIds","convertColumns","getAccessorMethod","commandProviders","COMMAND_HANDLERS","multi","readProviders","DOMAIN_EVENT_HANDLERS","compositionProviders","components","exportDeclarations","CompositionModule","ReactiveFormsModule","FabricChipComponent","FabricCheckboxComponent","FabricButtonComponent","FabricInputComponent","StructureIdGenerator","increment","PageChangedAggregateEvent","PagesizeChangedAggregateEvent","PagingAggregate","logger","default","fromConfig","defaultPagingDefinition","isDisabled","change","pagingConfig","warn","setSourceSize","find","ps","setPage","setPageSize","calculateStart","firstItem","calculateEnd","lastItem","PagingAggregateFactory","createDefault","createFromConfig","Logger","LocalPagingCommandService","aggregateFactory","setDefaultPaging","defaultPaggingAggregate","LocalPagingReadModelService","Observable","SetSchemaCommand","height","SetSchemaVerticalGridCommand","SetSchemaHorizontalGridCommand","SetSchemaThemeCommand","SetRowColoringCommand","coloring","ChangeSchemaTopHeaderCommand","ChangeSchemaBottomHeaderCommand","SchemaDispatcher","setSchema","changeVerticalGrid","changeHorizontalGrid","setTheme","setRowColoring","changeTopHeader","changeBottomHeader","SchemaRepository","getSchema","SchemaReadModelService","schemaRepository","onSchema","onSingleSchema","onHeight","schema","getHeight","onContainerHeight","getContainerHeight","onCssClasses","getCssClasses","onColumnHeader","getColumnHeader","SchemaCommandService","schemaDispatcher","schemaQueryService","setHeight","toggleVerticalGrid","css","verticalGrid","grid","toggleHorizontalGrid","horizontalGrid","toggleTopHeader","columnHeader","isTopHeaderEnabled","toggleBottomHeader","isBottomHeaderEnabled","LocalSchemaCommandService","setDefaultSchema","MAX_SAFE_INTEGER","LocalSchemaReadModelService","SetFormationCommand","ToggleSelectedRowCommand","selectedRow","FormationDispatcher","setDefault","toggleSelectedRow","FormationCommandService","formationDispatcher","setDefaultFormation","LocalFormationCommandService","FormationRepository","onFormation","getFormation","FormationReadModelService","formationRepository","onSelectedRows","formation","getSelectedRows","LocalFormationReadModelService","StructureSetConfigFilterCommand","filterConfig","getConfig","StructureToggleFilterCommand","externalFilterId","filterValue","StructureFilterCommandService","setFilteringEnabled","addFilter","externalFieldId","SourceSetLoadingCommand","SetOriginCommand","items","StructureEditSourceItemCommand","SourceDispatcher","setLoading","editItem","InitStructureCommand","SetVerticalScrollEnabledCommand","SetScrollPositionCommand","position","SetSortingCommand","sortingConfig","getSortingConfig","ToggleSortCommand","StructureSetConfigQuickFilterCommand","quickFiltersConfig","StructureSetConfigSearchingCommand","searchConfig","InitFieldsCommand","StructureSetSearchPhraseCommand","phrase","StructureCommandService","structureFilterCommandService","sourceDispatcher","enableVerticalScroll","disableVerticalScroll","setScrollPosition","setSortingConfig","toggleSort","setFilterConfig","setQuickFiltersConfig","initFields","setSearchingConfig","search","LocalStructureCommandService","StructureReadModelService","onVerticalScrollEnabled","isVerticalScrollEnabled","LocalStructureReadModelService","StructureFieldUiArchive","AggregateArchive","StructureFieldUiRepository","structureFieldUiArchive","onFields","when","StructureEditSourceItemParams","itemId","getItemId","getColumnFieldId","SourceCommandService","structureFieldUiRepository","editItemByIndex","itemIndex","fieldIndex","itemId$","fieldId$","zip","array","LocalSourceCommandService","LocalSourceReadModelService","LocalCompositionCommandService","LocalCompositionReadModelService","localProviders","SchemaCssClassManager","rendererFactory2","VERTICAL_GRID_CLASS_NAME","HORIZONTAL_GRID_CLASS_NAME","THEME_FABRIC_CLASS_NAME","THEME_MATERIAL_CLASS_NAME","THEME_LIGHT_CLASS_NAME","THEME_DARK_CLASS_NAME","ROW_COLORING_ODD","ROW_COLORING_EVEN","cssClass","renderer","createRenderer","cssHostRef","classes","diff","updateState","renderCssClasses","diff_1","toggleCssClass","removeThemeCssClasses","addClass","resolveThemeClassName","removeRowColoringClasses","resolveRowColoringClassName","cssClassName","removeClass","className","SchemaRowColoring","RendererFactory2","Archive","archive$","BehaviorSubject","onValue","StructureCellEditArchive","StructureCellEditStore","StructureEditModeArchive","StructureInfoPanelEnabledArchive","StructureAggregationPanelConfig","top","bottom","itTopEnabled","itBottomEnabled","StructureAggregationArchive","StructureAggregationPanelConfigConverter","StructureSetAggregationEnabledCommand","StructureAggregationCommandService","setAggregationEnabled","StructureAggregationConfigService","structureAggregationPanelConfigConverter","structureAggregationArchive","structureAggregationCommandService","aggregationPanelConfig","structureComponentToken","ENTER","StructureGateway","structureCommandService","pagingEventService","sourceCommandService","sourceEventService","schemaCommandService","compositionCommandService","compositionEventService","formationEventService","structureEditModeArchive","structureCellEditArchive","structureInfoPanelEnabledArchive","structureAggregationConfigService","structureCellEditStore","simpleChanges","editMode","cellEditing","autoResizeWidth","columnHeaderBottom","loading","virtualScroll","sorting","filtering","quickFilters","searching","onItemSelected","skip","onSourceEdited","values","state","StructureCellEditState","NextPageEvent","PrevPageEvent","PageChangedEvent","PagesizeChangedEvent","PagingEventService","switchMap","EditemItemValues","after","before","StructureSourceItemEditedEvent","beforeItem","afterItem","getBeforeItem","getAfterItem","SourceEventService","getData","SelectedRowToggledEvent","FormationEventService","structureQueryService","str","getSelectedEntities","structureIdFactory","generator","compositionIdFactory","structureComponentSelfProviders","useFactory","deps","StructureComponent","structureDefinition","compositionQueryService","schemaReadModelService","schemaStylesManager","loaderEnabled","circleLoaderEnabled","initialLoaderAnimation","structureHeight","isLoaderVisible","offsetWidth","timer","setStyle","isReadyToDisplay","[style.min-height.px]","[class.gui-structure-border]","[id]","Renderer2","StructureHeaderColumnsComponent","structureColumnConfigService","isSortAsc","isSortDesc","openConfigDialog","closeConfigDialog","StructureFilterRepository","enabled$","setEnabled","selectFilterEnabled","StructureQuickFilterRepository","selectQuickFilterEnabled","StructureFilterReadModelRepository","structureFilterRepository","structureQuickFilterRepository","onFilteringEnabled","onQuickFiltersEnabled","StructureHeaderComponent","eventBus","structureFilterReadModelRepository","headerColumns","filterRowEnabled","containerRef","StructureHeaderFiltersComponent","cd","closed","filterMode","f","clearFilters","reset","turnOnFilterMode","turnOffFilterMode","StructureHeaderFilterComponent","sub","editContext","StructureContentComponent","formationCommandService","formationQueryService","rowsList","clearSelectedRows","getIds","strippedId","selectedRowEl","trackByFn","translateY","selectedElements","querySelectorAll","el","ItemEntity","version","RandomStringGenerator","generate","getUiId","getVersion","equalsById","Entity","StructureRowComponent","StructureCellComponent","inEditMode","cellEditingEnabled","enterEditMode","exitEditMode","forceCheck","valueChanges$","status$","cell","observeFieldStatus","observeValueChanges","publishEditEnter","markForCheck","submitChangesAndExit","updatedValue","actualValue","publishEditSubmit","publishEditCancel","publishEditState","StructureContainerComponent","ngZone","resizeDetector","structureParent","autoResizeWidthEnabled","scrollObservation$","combineLatest","combine","sourceSizeHeight","observe","recalculateContainer","enableScrollObservation","disableScrollObservation","containerHeight","topMargin","getTopMargin","runOutsideAngular","scrollTop","NgZone","ResizeDetector","Optional","StructureQuickFiltersComponent","StructureSearchingRepository","selectSearchingEnabled","StructureSearchReadModelRepository","structureSearchingRepository","onSearchEnabled","STRUCTURE_CSS_CLASS_NAME","prefix","StructureBlueprintComponent","structureSearchReadModelRepository","searchEnabled","topAggregationPanelEnabled","bottomAggregationPanelEnabled","quickFiltersEnabled","infoPanelEnabled","headerCssClass","contentCssClass","pagingReadModel","getHeaderTopClasses","getHeaderBottomClasses","isColumnHeaderTopEnabled","isColumnHeaderBottomEnabled","isPagingTopEnabled","isPagingBottomEnabled","StructureAggregationsChangedEvent","getAggregations","StructureAggregationUiEventsRepository","onAggregationsChanged","StructureAggregationPanelComponent","structureAggregationUiEventsRepository","aggregations","isAggregateTypePresent","InMemoryStructureStore","InMemoryStructureAggregateStore","inMemoryStructureStore","InMemoryStructureAggregateRepository","inMemoryStructureAggregateStore","clearEvents","StructureAggregateRepository","SelectedRowsList","rowIds","isRowSelected","Formation","selectedRows","selectedRowsList","FormationConverter","rows","SchemaCssClass","getRowColoring","Schema","verticalGridEnabled","horizontalGridEnabled","getTheme","isVerticalGridEnabled","isHorizontalGridEnabled","SchemaColumnHeader","SchemaConverter","convertColumnHeader","isHeaderOnTop","isHeaderOnBottom","PagingConverter","Source","SourceConverter","VerticalFormationReadModel","viewportHeight","getViewPortHeight","VerticalFormationConverter","verticalFormation","calcFullHeight","Structure","selectedIds","some","StructureConverter","formationConverter","schemaConverter","pagingConverter","sourceConverter","verticalFormationConverter","formationAggregate","schemaAggregate","pagingAggregate","sourceQuery","sourceCoordinator","getVerticalFormation","convertSource","originItem","rawData","InMemoryStructureReadStore","inMemoryProjectStore","structureConverter","StructureInitedEvent","SetSourceLoadingEvent","SchemaSetEvent","SchemaThemeSetEvent","SchemaHorizontalGridSetEvent","SchemaVerticalGridSetEvent","SchemaTopHeaderChangedEvent","SchemaBottomHeaderChangedEvent","RowColoringSetEvent","PagingSetEvent","FormationSetEvent","VerticalScrollEnabledSetEvent","ScrollPositionSetEvent","OriginSetEvent","getOrigin","StructureFilterToggledEvent","StructureSearchPhraseSetDomainEvent","InMemoryStructureRepository","inMemoryStructureQueryStore","structureIdToStructure","structure$","has","inMemoryStructureCommandProviders","inMemoryStructureReadProviders","inMemoryStructureProviders","OriginItemEntity","bumpVersion","StructureSourceItemEditedAggregateEvent","StructureOriginChangedAggregateEvent","SourceManager","fetched","preparedEntities","slicedEntities","isFetched","setEntities","setPreparedEntities","getPreparedEntities","setSlicedEntities","getSlicedEntities","convertItems","createOriginChangedEvent","setConvertedOrigin","getOriginSize","editOriginItem","findOriginItem","itemBeforeChange","removeOriginItem","findOriginItemIndex","splice","findIndex","SourceManagerFactory","VerticalRange","VerticalFormation","scrollPosition","rowHeight","hiddenItemsTop","hiddenItemsBottom","isInteger","calculateRange","getRange","range","itemsInViewport","floor","hiddenElements","abs","setTopHiddenItemsCount","count","setBottomHiddenItemsCount","setViewportHeight","setRowHeight","setLogger","VerticalFormationFactory","vf","AGGREGATION_CALCULATORS","StructureAggregationsChangedAggregateEvent","aggregatedValues","AggregationManager","calculators","calculations","calc","from","add","remove","update","AggregationManagerFactory","StructureFilter","filterId","getFilterValue","setFilterValue","filterString","filterNumber","filterBoolean","toLowerCase","indexOf","FilterId","FilterSettings","filteringEnabled","isFilteringEnabled","isQuickFilteringEnabled","isSearchingEnabled","FilterManager","filterSettings","filters","getAll","arr","getSettings","filteredEntities","filters_1","filters_1_1","FilterManagerFactory","FieldIdGenerator","Field","aggregationEnabled","accessorMethod","possibleAggregations","assignPossibleAggregations","assignAggregations","getKey","isAggregation","isAggregationEnabled","assignDefaultAggregations","UnknownField","NumberField","StringField","BooleanField","DateField","FieldFactory","fieldIdGenerator","columnType","FieldCollection","fieldFactory","getAllFields","getAllFieldIds","addField","addFields","fields_1","fields_1_1","FieldCollectionFactory","StructureSorter","rank","sorterId","getRank","getDirection","changeDirection","entityOne","entityTwo","valueOne","valueTwo","sortNumber","sortBoolean","sortString","sortUnknown","strOne","strTwo","localeCompare","numOne","numTwo","booleanOne","booleanTwo","sureBoolTwo","a","SorterId","SorterCollection","sorters","setConfig","multiSorting","clear","sorter","addSorter","sortedEntities","sorters_1","sorters_1_1","sorterOne","sorterTwo","reverse","FormationAggregate","toggleRow","ColumnHeaderEntity","setHeaderTop","setHeaderBottom","SchemaAggregate","headerHeight","pagerHeight","active","calculateContainerHeight","setVerticalGrid","setHorizontalGrid","getHeaderHeight","getPagerHeight","SearchManager","searchFields","addSearchPhrase","searchPhrase","searchableFields","removeSearchFilters","searchedItems","Set","e_1","StructurePreparedEntitiesSetAggregateEvent","getPreparedItems","StructureAggregate","sourceManager","aggregationManager","sorterCollection","filterCollection","searchManager","fieldCollection","filterManager","calculateSource","editParams","calculateSourceBasedOnVirtualScroll","setFormation","changePaging","createFields","toggleFilter","removeSearchPhrase","ae","searchedEntities","ents","SchemaAggregateFactory","FormationAggregateFactory","SearchManagerFactory","StructureAggregateFactory","pagingAggregateFactory","sourceManagerFactory","formationAggregateFactory","verticalFormationFactory","aggregationManagerFactory","filterManagerFactory","searchManagerFactory","fieldCollectionFactory","schemaAggregateFactory","sorterContainer","filterContainer","fieldContainer","InitStructureCommandHandler","structureAggregateRepository","structureAggregateFactory","SetVerticalScrollEnabledCommandHandler","SetScrollPositionCommandHandler","InitFieldsCommandHandler","ToggleSortCommandHandler","publishSortEvent","SortingSetEvent","SetSortingCommandHandler","StructureConfigFilterSetEvent","getEnabled","StructureSetConfigFilterCommandHandler","StructureConfigSearchingSetEvent","StructureSetConfigSearchingCommandHandler","searchingConfig","StructureConfigQuickFilterSetEvent","StructureSetConfigQuickFilterCommandHandler","StructureToggleFilterCommandHandler","StructurePreparedEntitiesSetEvent","StructureSourceDomainEventPublisher","publishEvent","structureOriginChangedAggregateEvent","domainEvent","structureSourceItemEditedAggregateEvent","structureAggregationsChangedAggregateEvent","structurePreparedEntitiesSetAggregateEvent","StructureAggregationEnabledSetEvent","StructureSetAggregationEnabledCommandHandler","structureSourceDomainEventPublisher","AggregationCalculator","filteredFields","forDataType","distinct","prepare","countForField","postCalculate","generateAggregatedValues","setCount","setDistinct","AggregatedValues","BooleanAggregatedValues","truthy","falsy","BooleanAggregationCalculator","booleanValue","truthyForField","falsyForField","DateAggregatedValues","DateAggregationCalculator","NumberAggregatedValues","min","max","average","median","setValueWithPrecision","toFixed","NumberAggregationCalculator","numberValue","sumForField","minForField","maxForField","StringAggregatedValues","StringAggregationCalculator","UnknownAggregatedValues","UnknownAggregationCalculator","provideAggregationCalculator","clazz","aggregationProviders","StructureConfigFilterSetEventHandler","StructureConfigSearchingSetEventHandler","StructureConfigQuickFilterSetEventHandler","StructureFieldUiModel","StructureFieldUiConverter","convertOne","StructureFieldsInitedEventHandler","structureFieldsRepository","structureFieldUiConverter","SetPagingCommandHandler","NextPageCommandHandler","PrevPageCommandHandler","ChangePagesizeCommandHandler","newPageSize","events_1","events_1_1","event_1","publishAggregateEvent","pageChangedEvent","pagesizeChangedEvent","pagingProviders","SetSchemaVerticalGridCommandHandler","SetSchemaHorizontalGridCommandHandler","SetSchemaThemeCommandHandler","ChangeSchemaBottomHeaderCommandHandler","ChangeSchemaTopHeaderCommandHandler","SetRowColoringCommandHandler","SetSchemaCommandHandler","schemaProviders","SetFormationCommandHandler","ToggleSelectedRowCommandHandler","console","formationProviders","SetOriginCommandHandler","StructureEditSourceItemCommandHandler","StructureOriginChangedEventHandler","origin_1","SourceRepository","SourceSetLoadingCommandHandler","StructurePreparedItemsEventHandler","sourceProviders","StructureSetSearchPhraseCommandHandler","structureProviders","ConsoleLogger","text","LoggerModule","ItemEntityFactory","createEntities","createEntity","StructureTopPanelComponent","StructureSearchComponent","searchForm","StructureTopPanelModule","createStructureDefinition","HermesModule","StructureModule","loggers","withConfig","structureConfig","hermesModuleConfig","ngModule","COMMAND_LOGGER_ENABLED","EVENT_LOGGER_ENABLED","elementComponents","GridModule","imports$1","declarations$1","providers$1","entryComponents$1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export type FieldAccessor = (element?: any) => any;\nexport type ViewTemplateMethod = (cellValue: any) => string;\n\nexport interface GuiColumn {\n\n\tfield?: string | FieldAccessor;\n\n\ttype?: string | GuiDataType;\n\n\tview?: string | GuiCellView | ViewTemplateMethod;\n\n\theader?: string;\n\n\tcustomTemplate?: string;\n\n\twidth?: string | number;\n\n\taggregation?: GuiColumnAggregation;\n}\n\nexport enum GuiDataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n\nexport enum GuiCellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM\n}\n\nexport enum GuiNumberCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiStringCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport enum GuiBooleanCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP,\n\tCHECKBOX\n}\n\nexport enum GuiDateCellView {\n\tTEXT,\n\tBOLD,\n\tITALIC,\n\tCHIP\n}\n\nexport interface GuiPagingConfig {\n\n\tenabled?: boolean;\n\n\tpage?: number;\n\n\tpageSize?: number;\n\n\tpageSizes?: Array<number>;\n\n\tpagerTop?: boolean;\n\n\tpagerBottom?: boolean;\n\n}\n\nexport enum GuiTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n\nexport enum GuiRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n\nexport interface GuiSorting {\n\n\tenabled?: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\tmultiSorting?: boolean;\n\n}\n\nexport interface GuiFiltering {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiQuickFilters {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiSearching {\n\n\tenabled?: boolean;\n\n}\n\nexport interface GuiAggregation {\n\n\tenabled?: boolean;\n\n\ttop?: boolean;\n\n\tbottom?: boolean;\n\n}\n\nexport interface GuiColumnAggregation {\n\n\tenabled?: boolean;\n\n\taggregationTypes?: Array<any>;\n}\n","export enum DataType {\n\tUNKNOWN,\n\tNUMBER,\n\tSTRING,\n\tBOOLEAN,\n\tDATE,\n\tCUSTOM\n}\n","import { GuiDataType } from '../../../ui-api/grid.api';\nimport { DataType } from '../../../../../lib/structure/domain/structure/command/field/data-type/data-type';\n\nexport class GridColumnTypeConverter {\n\n\tconvertType(type: string | GuiDataType): DataType {\n\n\t\tif (typeof type === 'string') {\n\t\t\treturn this.convertTypeString(type);\n\t\t} else {\n\t\t\treturn this.convertTypeEnum(type);\n\t\t}\n\t}\n\n\tprivate convertTypeEnum(enumType: GuiDataType): DataType {\n\n\t\tswitch (enumType) {\n\n\t\t\tcase GuiDataType.STRING:\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase GuiDataType.NUMBER:\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase GuiDataType.BOOLEAN:\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase GuiDataType.DATE:\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase GuiDataType.UNKNOWN:\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase GuiDataType.CUSTOM:\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n\tprivate convertTypeString(type: string): DataType {\n\t\tconst loweredType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredType) {\n\n\t\t\tcase 'string':\n\t\t\t\treturn DataType.STRING;\n\n\t\t\tcase 'number':\n\t\t\t\treturn DataType.NUMBER;\n\n\t\t\tcase 'boolean':\n\t\t\t\treturn DataType.BOOLEAN;\n\n\t\t\tcase 'date':\n\t\t\t\treturn DataType.DATE;\n\n\t\t\tcase 'unknown':\n\t\t\t\treturn DataType.UNKNOWN;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn DataType.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn DataType.STRING;\n\t\t}\n\t}\n\n}\n","export enum AggregationType {\n\tCOUNT = 1 << 10,\n\tDISTINCT = 1 << 0,\n\tSUM = 1 << 1,\n\tAVERAGE = 1 << 2,\n\tMIN = 1 << 3,\n\tMAX = 1 << 4,\n\tMEDIAN = 1 << 5,\n\tTRUTHY = 1 << 6,\n\tFALSY = 1 << 7,\n\tEARLIEST = 1 << 8,\n\tLATEST = 1 << 9,\n}\n\n// count\n// count distinct\n// percentile\n// std.dev\n// std.dev Pop\n// variance\n// variance pop\n","import { ColumnAggregationConfig } from '../../../../../lib/structure/domain/composition/column-aggregation.config';\nimport { AggregationType } from '../../../../../lib/structure/domain/structure/command/aggregation/aggregation.type';\n\nimport { GuiColumnAggregation } from '../../../../../grid.index';\n\n\nexport class GridColumnAggregationConverter {\n\n\tconvert(aggregationConfig: GuiColumnAggregation): ColumnAggregationConfig {\n\t\tlet columnAggregationConfig: ColumnAggregationConfig = {};\n\n\t\tif (aggregationConfig.enabled !== undefined && aggregationConfig.enabled !== null) {\n\t\t\tcolumnAggregationConfig.enabled = aggregationConfig.enabled;\n\t\t}\n\n\t\tif (aggregationConfig.aggregationTypes !== undefined && aggregationConfig.aggregationTypes !== null) {\n\t\t\tcolumnAggregationConfig.aggregationTypes = this.convertAggregationTypes(aggregationConfig.aggregationTypes);\n\t\t}\n\n\t\treturn columnAggregationConfig;\n\t}\n\n\tprivate convertAggregationTypes(configAggregationTypes: Array<string>): Array<AggregationType> {\n\n\t\tconst aggregationTypes: Array<AggregationType> = [];\n\n\t\tconfigAggregationTypes.forEach((type: string) => {\n\n\t\t\tconst aggregationType = this.convertAggregationType(type);\n\n\t\t\tif (aggregationType !== undefined && aggregationType !== null) {\n\t\t\t\taggregationTypes.push(aggregationType);\n\t\t\t}\n\t\t});\n\n\t\treturn aggregationTypes;\n\t}\n\n\tprivate convertAggregationType(type: string): AggregationType {\n\n\t\tconst loweredAggregationType = type.toLocaleLowerCase();\n\n\t\tswitch (loweredAggregationType) {\n\n\t\t\tcase 'count':\n\t\t\t\treturn AggregationType.COUNT;\n\n\t\t\tcase 'distinct':\n\t\t\t\treturn AggregationType.DISTINCT;\n\n\t\t\tcase 'sum':\n\t\t\t\treturn AggregationType.SUM;\n\n\t\t\tcase 'average':\n\t\t\t\treturn AggregationType.AVERAGE;\n\n\t\t\tcase 'min':\n\t\t\t\treturn AggregationType.MIN;\n\n\t\t\tcase 'max':\n\t\t\t\treturn AggregationType.MAX;\n\n\t\t\tcase 'median':\n\t\t\t\treturn AggregationType.MEDIAN;\n\n\t\t\tcase 'truthy':\n\t\t\t\treturn AggregationType.TRUTHY;\n\n\t\t\tcase 'falsy':\n\t\t\t\treturn AggregationType.FALSY;\n\n\t\t\tcase 'earliest':\n\t\t\t\treturn AggregationType.EARLIEST;\n\n\t\t\tcase 'latest':\n\t\t\t\treturn AggregationType.LATEST;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\n\t\t}\n\t}\n\n}\n","export enum CellView {\n\tTEXT,\n\tCHIP,\n\tLINK,\n\tIMAGE,\n\tBOLD,\n\tITALIC,\n\tCHECKBOX,\n\tCUSTOM,\n\tFUNCTION\n}\n","import { GuiCellView, ViewTemplateMethod } from '../../../ui-api/grid.api';\nimport { CellView } from '../../../../../lib/structure/domain/composition/cell-view';\n\nexport class GridColumnViewConverter {\n\n\tconvert(view: string | GuiCellView | ViewTemplateMethod): CellView | ViewTemplateMethod {\n\n\t\tif (typeof view === 'string') {\n\t\t\treturn this.convertString(view);\n\t\t} else if (typeof view === 'function') {\n\t\t\treturn view;\n\t\t} else {\n\t\t\treturn this.convertEnum(view);\n\t\t}\n\t}\n\n\tprivate convertString(view: string): CellView {\n\n\t\tconst loweredView = view.toLocaleLowerCase();\n\n\t\tswitch (loweredView) {\n\n\t\t\tcase 'text':\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase 'chip':\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase 'link':\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase 'image':\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase 'bold':\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase 'italic':\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase 'checkbox':\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase 'custom':\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n\tprivate convertEnum(view: GuiCellView): CellView {\n\n\t\tswitch (view) {\n\n\t\t\tcase GuiCellView.TEXT:\n\t\t\t\treturn CellView.TEXT;\n\n\t\t\tcase GuiCellView.CHIP:\n\t\t\t\treturn CellView.CHIP;\n\n\t\t\tcase GuiCellView.LINK:\n\t\t\t\treturn CellView.LINK;\n\n\t\t\tcase GuiCellView.IMAGE:\n\t\t\t\treturn CellView.IMAGE;\n\n\t\t\tcase GuiCellView.BOLD:\n\t\t\t\treturn CellView.BOLD;\n\n\t\t\tcase GuiCellView.ITALIC:\n\t\t\t\treturn CellView.ITALIC;\n\n\t\t\tcase GuiCellView.CHECKBOX:\n\t\t\t\treturn CellView.CHECKBOX;\n\n\t\t\tcase GuiCellView.CUSTOM:\n\t\t\t\treturn CellView.CUSTOM;\n\n\t\t\tdefault:\n\t\t\t\treturn CellView.TEXT;\n\t\t}\n\t}\n\n}\n","import { GuiColumn } from '../../../ui-api/grid.api';\nimport { ColumnConfig } from '../../../../../lib/structure/domain/composition/column.config';\n\nimport { GridColumnTypeConverter } from './grid.column-type.converter';\nimport { GridColumnAggregationConverter } from './grid.column-aggregation.converter';\nimport { GridColumnViewConverter } from './grid.column-view.converter';\n\n\nexport class GridColumnConverter {\n\n\tprivate readonly columnTypeConverter = new GridColumnTypeConverter();\n\n\tprivate readonly columnAggregationConverter = new GridColumnAggregationConverter();\n\n\tprivate readonly columnViewConverter = new GridColumnViewConverter();\n\n\tconvert(config: Array<GuiColumn>): Array<ColumnConfig> {\n\t\treturn config.map((c) => this.convertColumn(c));\n\t}\n\n\tprivate convertColumn(guiColumn: GuiColumn): ColumnConfig {\n\t\tlet columnConfig: ColumnConfig = {};\n\n\t\tif (guiColumn.type !== undefined && guiColumn.type !== null) {\n\t\t\tcolumnConfig.type = this.columnTypeConverter.convertType(guiColumn.type);\n\t\t}\n\n\t\tif (guiColumn.header !== undefined && guiColumn.header !== null) {\n\t\t\tcolumnConfig.header = guiColumn.header;\n\t\t}\n\n\t\tif (guiColumn.field !== undefined && guiColumn.field !== null) {\n\t\t\tcolumnConfig.field = guiColumn.field;\n\t\t}\n\n\t\tif (guiColumn.width !== undefined && guiColumn.width !== null) {\n\t\t\tcolumnConfig.width = guiColumn.width;\n\t\t}\n\n\t\tif (guiColumn.view !== undefined && guiColumn.view !== null) {\n\t\t\tcolumnConfig.view = this.columnViewConverter.convert(guiColumn.view);\n\t\t}\n\n\t\tif (guiColumn.aggregation !== undefined && guiColumn.aggregation !== null) {\n\t\t\tcolumnConfig.aggregation = this.columnAggregationConverter.convert(guiColumn.aggregation);\n\t\t}\n\n\t\treturn columnConfig;\n\t}\n\n}\n","export enum SchemaTheme {\n\tFABRIC,\n\tMATERIAL,\n\tLIGHT,\n\tDARK\n}\n","import { GuiTheme } from '../../../ui-api/grid.api';\nimport { SchemaTheme } from '../../../../../lib/structure/domain/schema/schema-theme';\n\n\nexport class GridThemeConverter {\n\n\tconvert(theme: string | GuiTheme): SchemaTheme {\n\n\t\tif (typeof theme === 'string') {\n\t\t\treturn this.convertString(theme);\n\t\t} else {\n\t\t\treturn this.convertEnum(theme);\n\t\t}\n\n\t}\n\n\tprivate convertString(theme: string): SchemaTheme {\n\n\t\tconst loweredTheme = theme.toLocaleLowerCase();\n\n\t\tswitch (loweredTheme) {\n\n\t\t\tcase 'material':\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase 'fabric':\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase 'light':\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase 'dark':\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(theme: GuiTheme): SchemaTheme {\n\n\t\tswitch (theme) {\n\n\t\t\tcase GuiTheme.MATERIAL:\n\t\t\t\treturn SchemaTheme.MATERIAL;\n\n\t\t\tcase GuiTheme.FABRIC:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t\tcase GuiTheme.LIGHT:\n\t\t\t\treturn SchemaTheme.LIGHT;\n\n\t\t\tcase GuiTheme.DARK:\n\t\t\t\treturn SchemaTheme.DARK;\n\n\t\t\tdefault:\n\t\t\t\treturn SchemaTheme.FABRIC;\n\n\t\t}\n\n\t}\n\n}\n","export enum RowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { GuiRowColoring } from '../../../ui-api/grid.api';\nimport { RowColoring } from '../../../../../lib/structure/ui-api/schema/row-coloring';\n\n\nexport class GridRowColoringConverter {\n\n\tconvert(rowColoring: string | GuiRowColoring): RowColoring {\n\n\t\tif (typeof rowColoring === 'string') {\n\t\t\treturn this.convertString(rowColoring);\n\t\t} else {\n\t\t\treturn this.convertEnum(rowColoring);\n\t\t}\n\n\t}\n\n\tprivate convertString(rowColoring: string): RowColoring {\n\n\t\tconst loweredRowColoring = rowColoring.toLocaleLowerCase();\n\n\t\tswitch (loweredRowColoring) {\n\n\t\t\tcase 'none':\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase 'even':\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase 'odd':\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n\tprivate convertEnum(rowColoring: GuiRowColoring): RowColoring {\n\n\t\tswitch (rowColoring) {\n\n\t\t\tcase GuiRowColoring.NONE:\n\t\t\t\treturn RowColoring.NONE;\n\n\t\t\tcase GuiRowColoring.EVEN:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t\tcase GuiRowColoring.ODD:\n\t\t\t\treturn RowColoring.ODD;\n\n\t\t\tdefault:\n\t\t\t\treturn RowColoring.EVEN;\n\n\t\t}\n\n\t}\n\n}\n","import { EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';\n\nimport {\n\tGuiAggregation,\n\tGuiColumn,\n\tGuiFiltering,\n\tGuiPagingConfig,\n\tGuiQuickFilters,\n\tGuiRowColoring,\n\tGuiSearching,\n\tGuiSorting,\n\tGuiTheme\n} from '../../ui-api/grid.api';\nimport { ColumnConfig } from '../../../../lib/structure/domain/composition/column.config';\n\nimport { GridColumnConverter } from './column/grid.column.converter';\nimport { GridThemeConverter } from './theme/grid.theme.converter';\nimport { GridRowColoringConverter } from './coloring/grid.row-coloring.converter';\n\nexport abstract class GridGateway implements OnChanges {\n\n\t/**\n\t * INPUTS\n\t */\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\theight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<GuiColumn> = [];\n\n\t@Input()\n\tpaging: boolean | GuiPagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: string | GuiTheme;\n\n\t@Input()\n\trowColoring: string | GuiRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | GuiSorting;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tfiltering: boolean | GuiFiltering;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tquickFilters: boolean | GuiQuickFilters;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tsearching: boolean | GuiSearching;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\teditMode: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tinfoPanel: boolean;\n\n\t/**\n\t * @experimental\n\t */\n\t@Input()\n\taggregation: GuiAggregation;\n\n\n\t/**\n\t * OUTPUTS\n\t */\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<{after: any, before: any}> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\t/** @internal */\n\tcolumnsConfig: Array<ColumnConfig>;\n\n\tthemeConfig: any; // SchemaTheme;\n\n\trowColoringConfig: any; // RowColoring;\n\n\tprivate readonly gridColumnConverter: GridColumnConverter = new GridColumnConverter();\n\n\tprivate readonly gridThemeConverter: GridThemeConverter = new GridThemeConverter();\n\n\tprivate readonly gridRowColoringConverter: GridRowColoringConverter = new GridRowColoringConverter();\n\n\tprotected constructor() {\n\t}\n\n\tngOnChanges(changes: SimpleChanges): void {\n\n\t\tif (changes.columns !== undefined && changes.columns.currentValue !== undefined) {\n\t\t\tthis.columnsConfig = this.gridColumnConverter.convert(this.columns);\n\t\t}\n\n\t\tif (changes.theme !== undefined && changes.theme.currentValue !== undefined) {\n\t\t\tthis.themeConfig = this.gridThemeConverter.convert(this.theme);\n\t\t}\n\n\t\tif (changes.rowColoring !== undefined && changes.rowColoring.currentValue !== undefined) {\n\t\t\tthis.rowColoringConfig = this.gridRowColoringConverter.convert(this.rowColoring);\n\t\t}\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n\tonPageSizeChange(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n\n\tonItemSelect(item: any): void {\n\t\tthis.itemsSelected.emit(item);\n\t}\n\n\tonColumnsChange(): void {\n\t\tthis.columnsChanged.emit();\n\t}\n\n\tonContainerWidthChange(containerWidth: number): void {\n\t\tthis.containerWidthChanged.emit(containerWidth);\n\t}\n\n\tonSourceEdit(value: any): void {\n\t\tthis.sourceEdited.emit(value);\n\t}\n\n\tonCellEditEnter(): void {\n\t\tthis.cellEditEntered.emit();\n\t}\n\n\tonCellEditSubmit(): void {\n\t\tthis.cellEditSubmitted.emit();\n\t}\n\n\tonCellEditCancel(): void {\n\t\tthis.cellEditCanceled.emit();\n\t}\n\n}\n","export abstract class GenericBuilder<T> {\n\n\tprotected abstract buildObject(): T;\n\n\tbuild(): T {\n\t\treturn  this.buildObject();\n\t}\n\n}\n","import { GenericBuilder } from '../../../../common/cdk/generic-builder';\n\nexport class StructurePagingDefinitionBuilder extends GenericBuilder<StructurePagingDefinition> {\n\n\tprivate enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tsuper();\n\t\tthis.enabled = enabled;\n\t}\n\n\tprotected buildObject(): StructurePagingDefinition {\n\t\treturn new StructurePagingDefinition(this.enabled);\n\t}\n\n\twithEnabled(enabled: boolean): StructurePagingDefinitionBuilder {\n\t\tthis.enabled = enabled;\n\t\treturn this;\n\t}\n}\n\nexport class StructurePagingDefinitionDefaultBuilder extends StructurePagingDefinitionBuilder {\n\n\tprivate static readonly defaultEnabled = true;\n\n\tconstructor() {\n\t\tsuper(StructurePagingDefinitionDefaultBuilder.defaultEnabled);\n\t}\n}\n\nexport class StructurePagingDefinition {\n\n\tprivate readonly enabled: boolean;\n\n\tconstructor(enabled: boolean) {\n\t\tthis.enabled = enabled;\n\t}\n\n\tstatic Builder = StructurePagingDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructurePagingDefinitionDefaultBuilder;\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { GenericBuilder } from '../../../common/cdk/generic-builder';\nimport { StructurePagingDefinition } from './paging/structure-paging-definition';\n\nexport class StructureDefinitionBuilder extends GenericBuilder<StructureDefinition> {\n\n\tprivate border: boolean = true;\n\n\tconstructor(private headerEnabled: boolean,\n\t\t\t\tprivate bottomPaging: StructurePagingDefinition,\n\t\t\t\tprivate topPaging: StructurePagingDefinition) {\n\t\tsuper();\n\t}\n\n\tprotected buildObject(): StructureDefinition {\n\t\treturn new StructureDefinition(\n\t\t\tthis.headerEnabled,\n\t\t\tthis.bottomPaging,\n\t\t\tthis.topPaging,\n\t\t\tthis.border\n\t\t);\n\t}\n\n\twithHeader(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.headerEnabled = enabled;\n\t\treturn this;\n\t}\n\n\twithBottomPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.bottomPaging = paging;\n\t\treturn this;\n\t}\n\n\twithTopPaging(paging: StructurePagingDefinition): StructureDefinitionBuilder {\n\t\tthis.topPaging = paging;\n\t\treturn this;\n\t}\n\n\twithBorder(enabled: boolean): StructureDefinitionBuilder {\n\t\tthis.border = enabled;\n\t\treturn this;\n\t}\n\n}\n\nexport class StructureDefinitionDefaultBuilder extends StructureDefinitionBuilder {\n\n\tprivate static readonly defaultHeaderEnabled: boolean = true;\n\tprivate static readonly defaultBottomPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\tprivate static readonly defaultTopPaging: StructurePagingDefinition = new StructurePagingDefinition.DefaultBuilder().build();\n\n\tconstructor() {\n\t\tsuper(\n\t\t\tStructureDefinitionDefaultBuilder.defaultHeaderEnabled,\n\t\t\tStructureDefinitionDefaultBuilder.defaultBottomPaging,\n\t\t\tStructureDefinitionDefaultBuilder.defaultTopPaging\n\t\t);\n\t}\n}\n\nexport class StructureDefinition {\n\n\tprivate readonly headerEnabled: boolean;\n\n\tprivate readonly bottomPaging: StructurePagingDefinition;\n\n\tprivate readonly topPaging: StructurePagingDefinition;\n\n\tprivate readonly border: boolean;\n\n\tconstructor(headerEnabled: boolean,\n\t\t\t\tbottomPaging: StructurePagingDefinition,\n\t\t\t\ttopPaging: StructurePagingDefinition,\n\t\t\t\tborder: boolean) {\n\t\tthis.headerEnabled = headerEnabled;\n\t\tthis.bottomPaging = bottomPaging;\n\t\tthis.topPaging = topPaging;\n\t\tthis.border = border;\n\t}\n\n\tstatic Builder = StructureDefinitionBuilder;\n\n\tstatic DefaultBuilder = StructureDefinitionDefaultBuilder;\n\n\tisHeaderEnabled(): boolean {\n\t\treturn this.headerEnabled;\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.border;\n\t}\n\n\tgetBottomPaging(): StructurePagingDefinition {\n\t\treturn this.bottomPaging;\n\t}\n\n\tgetTopPaging(): StructurePagingDefinition {\n\t\treturn this.topPaging;\n\t}\n\n}\n","import { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\n/** @internal */\nexport const gridStructureDefinition = new StructureDefinition.DefaultBuilder().build();\n","import { Provider } from '@angular/core';\n\nimport { StructureDefinition } from '../../../../lib/structure/ui/structure-definition';\n\nimport { gridStructureDefinition } from './grid-structure-definition';\n\nexport const gridProviders = [{\n\tprovide: StructureDefinition,\n\tuseValue: gridStructureDefinition\n}] as Array<Provider>;\n","import { InjectionToken } from '@angular/core';\n\nexport const structureParentComponent = new InjectionToken('StructureParentComponent');\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class GridIdGenerator {\n\n\tprivate static readonly PREFIX = 'gui-grid-';\n\n\tprivate static index = 0;\n\n\tgenerateId(): string {\n\t\tGridIdGenerator.index++;\n\n\t\treturn GridIdGenerator.PREFIX + GridIdGenerator.index;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { GridComponent } from '../grid.component';\n\n@Injectable()\nexport class GridRegister {\n\n\tprivate readonly gridMap = new Map();\n\n\t// structureId: StructureId\n\tregister(gridId: string, component: GridComponent, structureId: any): void {\n\t\tthis.gridMap.set(gridId, { component, structureId });\n\t}\n\n\tunregister(gridId: string): void {\n\t\tthis.gridMap.delete(gridId);\n\t}\n\n\tgetValues(gridId: string): any {\n\t\treturn this.gridMap.get(gridId);\n\t}\n\n}\n","import { GridComponent } from '../grid.component';\n\nexport interface GridConsoleApi {\n\n\tchangeColumnHeaderTop(enabled: boolean): void;\n\n\n}\n\nexport class GridConsoleApiProvider {\n\n\tconstructor(private readonly gridComponent: GridComponent,\n\t\t\t\tprivate readonly structureId: any) {} // StructureId\n\n\tprovide(): GridConsoleApi {\n\n\t\tconst component = this.gridComponent;\n\n\t\treturn {\n\t\t\tchangeColumnHeaderTop(enabled: boolean): void {\n\t\t\t\tcomponent.columnHeaderTop = enabled;\n\t\t\t\tcomponent.detectChanges();\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { ChangeDetectorRef, Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation, PLATFORM_ID, Inject } from '@angular/core';\n\nimport { GridGateway } from './grid-gateway';\nimport { gridProviders } from './grid.providers';\n\nimport { structureParentComponent } from '../../../../lib/structure/ui/structure-parent-component';\n\nimport { GridIdGenerator } from './register/grid-id.generator';\nimport { GridRegister } from './register/grid.register';\nimport { GridConsoleApiProvider } from './console/grid.console.api';\nimport { isPlatformBrowser } from '@angular/common';\n\nexport const gridSelector = 'gui-grid';\n\n@Component({\n\tselector: gridSelector,\n\ttemplateUrl: './grid.component.html',\n\tstyleUrls: [\n\t\t'../grid.ngx.scss'\n\t],\n\tproviders: [\n\t\t...gridProviders,\n\t\t{\n\t\t\tprovide: structureParentComponent,\n\t\t\tuseExisting: GridComponent\n\t\t}\n\t],\n\thost: {\n\t\t'[class]': `\"${gridSelector}\"`,\n\t\t'[style.height]': 'height'\n\t},\n\tencapsulation: ViewEncapsulation.None\n})\nexport class GridComponent extends GridGateway implements OnInit {\n\n\t@ViewChild('structure', { static: true })\n\tstructureRef: any;\n\n\t@Input()\n\tgridId: string; // can be set once\n\n\tprivate localGridId: string;\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate gridRegister: GridRegister,\n\t\t\t\tprivate gridIdGenerator: GridIdGenerator) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tlet gridId = this.gridId;\n\n\t\tif (gridId === undefined) {\n\t\t\tgridId = this.gridIdGenerator.generateId();\n\t\t}\n\n\t\tthis.localGridId = gridId;\n\n\t\tthis.exposeGridId();\n\n\t\t// register\n\t\tthis.gridRegister.register(gridId, this, this.structureRef.getStructureId());\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['getGuiGrid'] = (gridId: string) => {\n\n\t\t\t\tconst gridConsoleConfig = this.gridRegister.getValues(gridId);\n\n\t\t\t\tif (gridConsoleConfig) {\n\t\t\t\t\treturn new GridConsoleApiProvider(gridConsoleConfig.component, gridConsoleConfig.structureId).provide();\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.gridRegister.unregister(this.localGridId);\n\t}\n\n\tgetElementRef(): ElementRef {\n\t\treturn this.elementRef;\n\t}\n\n\tgetGridId(): string {\n\t\treturn '';\n\t}\n\n\tdetectChanges(): void {\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tprivate exposeGridId(): void {\n\t\tthis.elementRef.nativeElement.setAttribute('gui-grid-id', this.localGridId);\n\t}\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: '',\n\ttemplate: `\n\t\n\t\tCOLUMN CONFIG !!!\n\t\n\t`\n})\nexport class StructureColumnConfigComponent {\n}\n","import { Injectable } from '@angular/core';\n\nimport { FabricDialogService } from '@generic-ui/fabric';\n\nimport { StructureColumnConfigComponent } from './structure.column-config.component';\n\n@Injectable()\nexport class StructureColumnConfigService {\n\n\tconstructor(private dialogService: FabricDialogService) {\n\t}\n\n\n\topen(): void {\n\t\tthis.dialogService.open(StructureColumnConfigComponent);\n\t}\n\n\tclose(): void {\n\t\tthis.dialogService.close();\n\t}\n\n}\n","import { FabricBadgeModule, FabricDialogModule } from '@generic-ui/fabric';\nimport { FabricButtonModule } from '@generic-ui/fabric';\nimport { FabricButtonGroupModule } from '@generic-ui/fabric';\nimport { FabricCheckboxModule } from '@generic-ui/fabric';\nimport { FabricChipModule } from '@generic-ui/fabric';\nimport { FabricRadioButtonModule } from '@generic-ui/fabric';\nimport { FabricRadioGroupModule } from '@generic-ui/fabric';\nimport { FabricProgressBarModule } from '@generic-ui/fabric';\nimport { FabricProgressSpinnerModule } from '@generic-ui/fabric';\nimport { FabricSelectModule } from '@generic-ui/fabric';\nimport { FabricSpinnerModule } from '@generic-ui/fabric';\nimport { FabricToggleButtonModule } from '@generic-ui/fabric';\nimport { FabricInputModule } from '@generic-ui/fabric';\n\n\nexport const fabricImports = [\n\tFabricBadgeModule,\n\tFabricButtonModule,\n\tFabricButtonGroupModule,\n\tFabricCheckboxModule,\n\tFabricChipModule,\n\tFabricRadioButtonModule,\n\tFabricRadioGroupModule,\n\tFabricProgressBarModule,\n\tFabricProgressSpinnerModule,\n\tFabricSelectModule,\n\tFabricSpinnerModule,\n\tFabricToggleButtonModule,\n\tFabricInputModule,\n\tFabricDialogModule\n];\n","import { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class Reactive implements OnDestroy {\n\n\tprivate readonly unsubscribe$ = new Subject<void>();\n\n\tprotected constructor() {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe();\n\t}\n\n\tprotected unsubscribe(): void {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tprotected takeUntil() {\n\t\treturn takeUntil(this.unsubscribe$);\n\t}\n\n}\n","import { Reactive } from './reactive';\n\nexport abstract class SmartComponent extends Reactive {\n}\n","import { Observable } from 'rxjs/';\n\nimport { AggregateId } from '@generic-ui/hermes';\nimport { Structure } from './structure';\n\n\n\nexport abstract class StructureRepository {\n\n\tabstract onStructure(aggregateId: AggregateId): Observable<Structure>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Paging } from './paging';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class PagingRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Paging> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getPaging())\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class StructureId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { StructureId } from './structure-id';\n\nexport const globalStructureId = new StructureId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { PagingRepository } from '../../domain/paging/read/paging.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Paging } from '../../domain/paging/read/paging';\n\n\n@Injectable()\nexport class PagingReadModelService {\n\n\tconstructor(private pagingRepository: PagingRepository) {\n\t}\n\n\tonPaging(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.pagingRepository.select(structureId);\n\t}\n\n\tonSinglePaging(structureId: StructureId = globalStructureId): Observable<Paging> {\n\t\treturn this.onPaging(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { PagingConfig } from '../../paging-config';\n\nexport class SetPagingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload: PagingConfig) {\n\t\tsuper(structureId, 'SetPagingCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class ChangePagesizeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly pageSize: number) {\n\t\tsuper(structureId, 'ChangePagesizeCommand');\n\t}\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class NextPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'NextPageCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class PrevPageCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'PrevPageCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { PagingConfig } from '../paging-config';\nimport { SetPagingCommand } from './set/set-paging.command';\nimport { ChangePagesizeCommand } from './change-pagesize/change-pagesize.command';\nimport { NextPageCommand } from './next-page/next-page.command';\nimport { PrevPageCommand } from './prev-page/prev-page.command';\n\n\n@Injectable()\nexport class PagingDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetPaging(structureId: StructureId, paging: PagingConfig): void {\n\t\tthis.commandDispatcher.dispatch(new SetPagingCommand(structureId, paging));\n\t}\n\n\tchangePageSize(structureId: StructureId, pageSize: number): void {\n\t\tthis.commandDispatcher.dispatch(new ChangePagesizeCommand(structureId, pageSize));\n\t}\n\n\tnextPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new NextPageCommand(structureId));\n\t}\n\n\tprevPage(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new PrevPageCommand(structureId));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { PagingConfig } from '../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class PagingCommandService {\n\n\tconstructor(private pagingDispatcher: PagingDispatcher) {\n\t}\n\n\tenable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: true });\n\t}\n\n\tdisable(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { enabled: false });\n\t}\n\n\tsetPaging(paging: PagingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, paging);\n\t}\n\n\tchangePageSize(pageSize: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.changePageSize(structureId, pageSize);\n\t}\n\n\tnextPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.nextPage(structureId);\n\t}\n\n\tprevPage(structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.prevPage(structureId);\n\t}\n\n\tgoToPage(pageNumber: number, currentPage: number) {\n\n\t\tif (currentPage < pageNumber) {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.nextPage();\n\t\t\t\tcurrentPage += 1;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (currentPage !== pageNumber) {\n\t\t\t\tthis.prevPage();\n\t\t\t\tcurrentPage -= 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tchangePagerTop(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerTop: enabled });\n\t}\n\n\tchangePagerBottom(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.pagingDispatcher.setPaging(structureId, { pagerBottom: enabled });\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { OriginItemEntity } from '../../command/origin/origin-item-entity';\nimport { StructureId } from '../../../structure-id';\n\n\n\n@Injectable()\nexport class StructureSourceOriginRepository {\n\n\tprivate origin = new Map<string, Array<any>>();\n\n\tprivate origin$ = new ReplaySubject<Map<string, Array<any>>>();\n\n\tsetOrigin(origin: Array<OriginItemEntity>, structureId: StructureId): void {\n\t\tthis.origin.set(structureId.toString(), origin);\n\t\tthis.origin$.next(this.origin);\n\t}\n\n\tonOrigin(structureId: StructureId): Observable<Array<any>> {\n\n\t\treturn this.origin$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, Array<any>>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport { OriginItemEntity } from '../../command/origin/origin-item-entity';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructurePreparedItemsRepository {\n\n\tprivate origin = new Map<string, Array<any>>();\n\n\tprivate origin$ = new ReplaySubject<Map<string, Array<any>>>();\n\n\tsetItems(origin: Array<OriginItemEntity>, structureId: StructureId): void {\n\t\tthis.origin.set(structureId.toString(), origin);\n\t\tthis.origin$.next(this.origin);\n\t}\n\n\tonPreparedItems(structureId: StructureId): Observable<Array<OriginItemEntity>> {\n\n\t\treturn this.origin$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, Array<any>>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, take } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../domain/structure/read/structure.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/read/origin/structure.source-origin.repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\nimport { StructurePreparedItemsRepository } from '../../domain/source/read/prepared/structure.prepared-items.repository';\n\n\n@Injectable()\nexport class SourceReadModelService {\n\n\tconstructor(private structureRepository: StructureRepository,\n\t\t\t\tprivate structurePreparedItemsRepository: StructurePreparedItemsRepository,\n\t\t\t\tprivate structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t}\n\n\tonEntities(structureId: StructureId = globalStructureId): Observable<Array<ItemEntity>> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getEntities()),\n\t\t\t\t\t   distinctUntilChanged((ents1: Array<ItemEntity>, ents2: Array<ItemEntity>) => {\n\t\t\t\t\t\t   if (ents1.length !== ents2.length) {\n\t\t\t\t\t\t\t   return false;\n\t\t\t\t\t\t   }\n\n\t\t\t\t\t\t   let flag = true;\n\n\t\t\t\t\t\t   ents1.forEach((ent, index) => {\n\t\t\t\t\t\t\t   if (!ent.equals(ents2[index])) {\n\t\t\t\t\t\t\t\t   flag = false;\n\t\t\t\t\t\t\t\t   return;\n\t\t\t\t\t\t\t   }\n\t\t\t\t\t\t   });\n\n\t\t\t\t\t\t   return flag;\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonEntitiesSize(structureId: StructureId = globalStructureId): Observable<number> {\n\n\t\treturn this.onEntities(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((entities: Array<ItemEntity>) => {\n\t\t\t\t\t\t   return entities.length;\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonSingleEntities(structureId: StructureId = globalStructureId): Observable<Array<ItemEntity>> {\n\n\t\treturn this.onEntities(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tonOriginSize(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.structureSourceOriginRepository\n\t\t\t\t   .onOrigin(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map(origin => origin.length)\n\t\t\t\t   );\n\t}\n\n\tonLoading(structureId: StructureId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.getSource().isLoading())\n\t\t\t\t   );\n\t}\n\n\tonPreparedEntities(structureId: StructureId = globalStructureId): Observable<any> {\n\t\treturn this.structurePreparedItemsRepository.onPreparedItems(structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { Paging } from '../../domain/paging/read/paging';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-paging',\n\ttemplateUrl: 'structure-paging.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingComponent extends SmartComponent implements OnInit {\n\n\tsourceSize: number;\n\n\tpaging: Paging;\n\n\talternativeDisplay: boolean = false;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate pagingQueryService: PagingReadModelService,\n\t\t\t\tprivate pagingCommandService: PagingCommandService,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\t\tthis.pagingQueryService\n\t\t\t.onPaging()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.paging = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.sourceQueryService\n\t\t\t.onOriginSize()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.sourceSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tchangePageSize(pageSize: number) {\n\t\tthis.pagingCommandService.changePageSize(pageSize);\n\t}\n\n\tnextPage(): void {\n\n\t\tif (!this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.pagingCommandService.nextPage();\n\t}\n\n\tprevPage(): void {\n\t\tthis.pagingCommandService.prevPage();\n\t}\n\n}\n","export class Paging {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly page: number,\n\t\t\t\tprivate readonly pageSize: number,\n\t\t\t\tprivate readonly pageSizes: Array<number>,\n\t\t\t\tprivate readonly pagerTop: boolean,\n\t\t\t\tprivate readonly pagerBottom: boolean,\n\t\t\t\tprivate readonly isNextDisabled: boolean,\n\t\t\t\tprivate readonly isPrevDisabled: boolean,\n\t\t\t\tprivate readonly start: number,\n\t\t\t\tprivate readonly end: number,\n\t\t\t\tprivate readonly sourceSize: number) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\treturn this.pagerBottom;\n\t}\n\n\tisNextPageDisabled(): boolean {\n\t\treturn this.isNextDisabled;\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.isPrevDisabled\n\t}\n\n\tgetStart(): number {\n\t\treturn this.start;\n\t}\n\n\tgetEnd(): number {\n\t\treturn this.end;\n\t}\n\n\tgetSourceSize(): number {\n\t\treturn this.sourceSize;\n\t}\n\n\tcalculateVisiblePages(currentPage: number, numberOfVisiblePages: number, page: number): boolean {\n\t\treturn currentPage - numberOfVisiblePages < page && page < currentPage + numberOfVisiblePages;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tlet start = this.getStart();\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.getEnd());\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, OnChanges, Output, EventEmitter } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n@Component({\n\tselector: 'gui-structure-paging-navigator',\n\ttemplateUrl: `structure-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled();\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-select',\n\ttemplateUrl: `structure-paging-select.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingSelectComponent {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Output()\n\tpageSizeChanged = new EventEmitter();\n\n\tchangePageSize(pageSize: number): void {\n\t\tthis.pageSizeChanged.emit(pageSize);\n\t}\n}\n","import { Component, ChangeDetectionStrategy, Input, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n@Component({\n\tselector: 'gui-structure-paging-stats',\n\ttemplateUrl: `structure-paging-stats.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructurePagingStatsComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\tsourceSize: number;\n\n\tfirstItemIndex: number;\n\n\tlastItemIndex: number;\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging) {\n\t\t\tthis.firstItemIndex = this.paging.getStart();\n\t\t\tthis.lastItemIndex = this.paging.getEnd();\n\t\t\tthis.sourceSize = this.paging.getSourceSize();\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/read/paging';\nimport { PagingCommandService } from '../../../../ui-api/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-navigator',\n\ttemplateUrl: `structure-alternative-paging-navigator.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingNavigatorComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number;\n\n\t@Output()\n\tnextPageChanged = new EventEmitter();\n\n\t@Output()\n\tprevPageChanged = new EventEmitter();\n\n\tprevDisabled: boolean = false;\n\n\tnextDisabled: boolean = false;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.calculatePrev();\n\t\tthis.calculateNext();\n\t}\n\n\tprevPage(): void {\n\t\tthis.prevPageChanged.emit();\n\t}\n\n\tnextPage(): void {\n\t\tthis.nextPageChanged.emit();\n\t}\n\n\tfirstPage(): void {\n\t\tthis.pagingCommandService.goToPage(1, this.paging.getPage());\n\t}\n\n\tlastPage(): void {\n\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\t\tthis.pagingCommandService.goToPage(numberOfPages, this.paging.getPage());\n\t}\n\n\tprivate calculatePrev(): void {\n\n\t\tif (!this.paging) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.prevDisabled = this.paging.isPrevPageDisabled();\n\t}\n\n\tprivate calculateNext(): void {\n\n\t\tif (!this.paging && !this.sourceSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.nextDisabled = this.paging.isNextPageDisabled();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\n\nimport { Paging } from '../../../../domain/paging/read/paging';\nimport { PagingCommandService } from '../../../../ui-api/paging/paging-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-alternative-paging-pages',\n\ttemplateUrl: `structure-alternative-paging-pages.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureAlternativePagingPagesComponent implements OnChanges {\n\n\t@Input()\n\tpaging: Paging;\n\n\t@Input()\n\tsourceSize: number = 0;\n\n\tcurrentPage: number;\n\n\tpages: Array<number>;\n\n\tnumberOfVisiblePages: number = 3;\n\n\tconstructor(private pagingCommandService: PagingCommandService) {\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tthis.calculate();\n\t}\n\n\tcalculate(): void {\n\t\tif (this.paging && this.sourceSize) {\n\t\t\tlet numberOfPages = Math.ceil(this.sourceSize / this.paging.getPageSize());\n\n\t\t\tthis.currentPage = this.paging.getPage();\n\n\t\t\tthis.pages = [];\n\t\t\tif (this.pages.length <= numberOfPages) {\n\t\t\t\tfor (let i = 1; i <= numberOfPages; i++) {\n\t\t\t\t\tthis.pages.push(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tisSourceNotEmpty(): boolean {\n\t\treturn this.sourceSize > 0;\n\t}\n\n\tgoToPage(pageNumber: number) {\n\t\tconst currentPage = this.paging.getPage();\n\t\tthis.pagingCommandService.goToPage(pageNumber, currentPage);\n\t}\n\n\tcalculateVisiblePages(page: number): boolean {\n\t\treturn this.paging.calculateVisiblePages(this.currentPage, this.numberOfVisiblePages, page);\n\t}\n\n\tactivePage(page: number): boolean {\n\t\treturn this.currentPage === page;\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { StructurePagingComponent } from './structure-paging.component';\nimport { StructurePagingNavigatorComponent } from './navigator/structure-paging-navigator.component';\nimport { StructurePagingSelectComponent } from './select/structure-paging-select.component';\nimport { StructurePagingStatsComponent } from './stats/structure-paging-stats.component';\nimport { StructureAlternativePagingNavigatorComponent } from './alternative-paging/navigator/structure-alternative-paging-navigator.component';\nimport { StructureAlternativePagingPagesComponent } from './alternative-paging/pages/structure-alternative-paging-pages.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tFabricModule\n\t],\n\tdeclarations: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t],\n\texports: [\n\t\tStructurePagingComponent,\n\t\tStructurePagingNavigatorComponent,\n\t\tStructurePagingSelectComponent,\n\t\tStructurePagingStatsComponent,\n\t\tStructureAlternativePagingNavigatorComponent,\n\t\tStructureAlternativePagingPagesComponent\n\t]\n})\nexport class StructurePagingModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'numberFormatter' })\nexport class NumberFormatterPipe implements PipeTransform {\n\n\ttransform(number: number): string {\n\t\treturn number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n\t}\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { NumberFormatterPipe } from './number-formatter.pipe';\n\n@NgModule({\n\tdeclarations: [\n\t\tNumberFormatterPipe\n\t],\n\texports: [\n\t\tNumberFormatterPipe\n\t]\n})\nexport class NumberFormatterModule {\n\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n\ttemplate: `\n\t\t<div class=\"gui-structure-info-modal\">\n\t\t\t<p>Generic UI Grid</p>\n\t\t\t<p>version 0.5.3</p>\n\n\t\t\t<p>Links:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/\">Website</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"http://generic-ui.com/guide/\">Documentation</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/tree/master/ngx-grid\">Github</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<p>Feedback:</p>\n\t\t\t<ul>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Report a bug</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"https://github.com/generic-ui/generic-ui/issues\">Suggest an idea</a>\n\t\t\t\t</li>\n\n\t\t\t</ul>\n\t\t</div>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StructureInfoModalComponent {\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { FabricDialogService } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { StructureInfoModalComponent } from './structure-info-modal.component';\n\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-info-panel',\n\ttemplate: `\n\n\t\t<ng-container *ngIf=\"preparedItemsSize !== undefined && totalItemsSize !== undefined\">\n\t\t\t\n\t\t\t<p *ngIf=\"preparedItemsSize === totalItemsSize\">\n\t\t\t\tShowing <b>{{totalItemsSize | numberFormatter}}</b> items\n\t\t\t</p>\n\n\t\t\t<p *ngIf=\"preparedItemsSize !== totalItemsSize\">\n\t\t\t\tShowing <b>{{preparedItemsSize | numberFormatter}}</b> out of <b>{{totalItemsSize | numberFormatter}}</b> items\n\t\t\t</p>\n\t\t\t\n\t\t</ng-container>\n\t\t<div>\n\t\t\t<p (click)=\"openInfo()\">\n\t\t\t\t<button>i</button>\n\t\t\t\tInfo\n\t\t\t</p>\n\t\t</div>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureInfoPanelComponent extends SmartComponent implements OnInit {\n\n\ttotalItemsSize: number;\n\n\tpreparedItemsSize: number;\n\n\tinfoPanel = StructureInfoModalComponent;\n\n\tconstructor(private sourceQueryService: SourceReadModelService,\n\t\t\t\tprivate dialog: FabricDialogService,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.sourceQueryService\n\t\t\t.onOriginSize()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((size: number) => {\n\t\t\t\tthis.totalItemsSize = size;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.sourceQueryService\n\t\t\t.onPreparedEntities()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((preparedItems: Array<any>) => {\n\t\t\t\tthis.preparedItemsSize = preparedItems.length;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\topenInfo() {\n\t\tthis.dialog.open(this.infoPanel);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberFormatterModule } from '../../../../../common/cdk/number-formatter/number-formatter.module';\nimport { StructureInfoPanelComponent } from './structure.info-panel.component';\nimport { StructureInfoModalComponent } from './structure-info-modal.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tNumberFormatterModule\n\t],\n\tdeclarations: [\n\t\tStructureInfoPanelComponent,\n\t\tStructureInfoModalComponent\n\t],\n\texports: [\n\t\tStructureInfoModalComponent,\n\t\tStructureInfoPanelComponent\n\t],\n\tentryComponents: [\n\t\tStructureInfoModalComponent\n\t]\n})\nexport class StructureInfoPanelModule {\n\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { CellView } from '../../cell-view';\nimport { TemplatesComponent } from '../template/templates.component';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #text let-element=\"element\">\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #number let-element=\"element\">\n\t\t\t<span class=\"gui-cell-number\">\n\t\t\t\t{{ element }}\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #chip let-element=\"element\">\n\t\t\t<gui-chip>\n\t\t\t\t{{ element }}\n\t\t\t</gui-chip>\n\t\t</ng-template>\n\n\t\t<ng-template #link let-element=\"element\">\n\t\t\t<a gui-button link=\"true\" href=\"{{ element }}\">\n\t\t\t\t{{ element }}\n\t\t\t</a>\n\t\t</ng-template>\n\n\t\t<ng-template #image let-element=\"element\">\n\t\t\t<img src=\"{{ element }}\"/>\n\t\t</ng-template>\n\n\t\t<ng-template #checkbox let-element=\"element\">\n\t\t\t<span class=\"gui-cell-boolean\">\n\t\t\t\t<gui-checkbox [checked]=\"!!element\" [disabled]=\"true\"></gui-checkbox>\n\t\t\t</span>\n\t\t</ng-template>\n\n\t\t<ng-template #bold let-element=\"element\">\n\t\t\t<span class=\"gui-bold\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #italic let-element=\"element\">\n\t\t\t<span class=\"gui-italic\">{{ element }}</span>\n\t\t</ng-template>\n\n\t\t<ng-template #custom let-element=\"element\" >\n\t\t\t{{ element }}\n\t\t</ng-template>\n\n\t\t<ng-template #function let-element=\"element\" >\n\t\t\t<gui-function-view [element]=\"element\" ></gui-function-view>\n\t\t</ng-template>\n\n\t`\n})\nexport class ViewTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('text', { read: TemplateRef, static: true })\n\ttextTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('chip', { read: TemplateRef, static: true })\n\tchipTemplate: TemplateRef<any>;\n\n\t@ViewChild('link', { read: TemplateRef, static: true })\n\tlinkTemplate: TemplateRef<any>;\n\n\t@ViewChild('image', { read: TemplateRef, static: true })\n\timageTemplate: TemplateRef<any>;\n\n\t@ViewChild('checkbox', { read: TemplateRef, static: true })\n\tcheckboxTemplate: TemplateRef<any>;\n\n\t@ViewChild('bold', { read: TemplateRef, static: true })\n\tboldTemplate: TemplateRef<any>;\n\n\t@ViewChild('italic', { read: TemplateRef, static: true })\n\titalicTemplate: TemplateRef<any>;\n\n\t@ViewChild('custom', { read: TemplateRef, static: true })\n\tcustomTemplate: TemplateRef<any>;\n\n\t@ViewChild('function', { read: TemplateRef, static: true })\n\tfunctionTemplate: TemplateRef<any>;\n\n\tgetTemplate(view: CellView): TemplateRef<any> {\n\n\t\tswitch (view) {\n\n\t\t\tcase CellView.TEXT:\n\t\t\t\treturn this.textTemplate;\n\n\t\t\tcase CellView.CHIP:\n\t\t\t\treturn this.chipTemplate;\n\n\t\t\tcase CellView.LINK:\n\t\t\t\treturn this.linkTemplate;\n\n\t\t\tcase CellView.IMAGE:\n\t\t\t\treturn this.imageTemplate;\n\n\t\t\tcase CellView.CHECKBOX:\n\t\t\t\treturn this.checkboxTemplate;\n\n\t\t\tcase CellView.BOLD:\n\t\t\t\treturn this.boldTemplate;\n\n\t\t\tcase CellView.ITALIC:\n\t\t\t\treturn this.italicTemplate;\n\n\t\t\tcase CellView.CUSTOM:\n\t\t\t\treturn this.customTemplate;\n\n\t\t\tcase CellView.FUNCTION:\n\t\t\t\treturn this.functionTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.textTemplate;\n\t\t}\n\t}\n\n}\n","import { Observable, ReplaySubject } from 'rxjs';\n\nexport class ChangedValueEmitter<T> {\n\n\tprivate subject$ = new ReplaySubject<T>(1);\n\n\tconstructor() {}\n\n\temit(value: T): void {\n\t\tthis.subject$.next(value);\n\t}\n\n\tselect(): Observable<T> {\n\t\treturn this.subject$.asObservable();\n\t}\n}\n","export enum EditEventType {\n\tSUBMIT,\n\tBLUR,\n\tCANCEL\n}\n","import { Input } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../../common/cdk/smart-component';\n\nimport { ChangedValueEmitter } from './changed-value.emitter';\nimport { EditEventType } from './state/edit.event-type';\n\n\nexport abstract class EditCommunicationComponent<T> extends SmartComponent {\n\n\t@Input()\n\tvalue: T;\n\n\t@Input()\n\tvalueChanges: ChangedValueEmitter<T>;\n\n\t@Input()\n\tstatus: ChangedValueEmitter<EditEventType>;\n\n\t@Input()\n\tfocus: boolean;\n\n\tprotected readonly ENTER_KEY_CODE = 13;\n\n\tprotected readonly ESC_KEY_CODE = 27;\n\n\tsubmit(): void {\n\t\tthis.emitStatus(EditEventType.SUBMIT);\n\t}\n\n\tcancel(): void {\n\t\tthis.emitStatus(EditEventType.CANCEL);\n\t}\n\n\tprivate emitStatus(status: EditEventType): void {\n\t\tif (this.status) {\n\t\t\tthis.status.emit(status);\n\t\t}\n\t}\n\n}\n","import { ElementRef, SimpleChanges, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\nexport abstract class InputEditTemplateComponent<T> extends EditCommunicationComponent<T> {\n\n\t@ViewChild('input', { static: true })\n\tinputRef: ElementRef;\n\n\tfilterForm: FormGroup;\n\n\treadonly filterFieldName = 'phrase';\n\n\tprotected constructor(private formBuilder: FormBuilder) {\n\t\tsuper();\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (changes.value !== undefined) {\n\t\t\tthis.filterForm.get(this.filterFieldName).setValue(this.value);\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.inputRef.nativeElement;\n\n\t\tthis.focusField(inputElement);\n\n\t\tthis.emitValueChange(inputElement.value);\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tconst keyup$ = fromEvent(inputElement, 'keyup');\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ENTER_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\n\t\tkeyup$\n\t\t\t.pipe(\n\t\t\t\tfilter((e: any) => e.keyCode === this.ESC_KEY_CODE),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.cancel();\n\t\t\t});\n\t}\n\n\tfocusField(inputElement: HTMLElement): void {\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t}\n\t}\n\n\tprivate observeChanges() {\n\t\tthis.filterForm\n\t\t\t.controls[this.filterFieldName]\n\t\t\t.valueChanges\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: string) => {\n\t\t\t\tthis.emitValueChange(value);\n\t\t\t});\n\t}\n\n\tprivate emitValueChange(value: any): void {\n\t\tif (this.valueChanges) {\n\t\t\tthis.valueChanges.emit(value);\n\t\t}\n\t}\n}\n","import { Inject, ChangeDetectionStrategy, ViewEncapsulation, Component } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-number-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"number\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class NumberEditTemplateComponent extends InputEditTemplateComponent<number> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n}\n","/**\n * Override decorator\n *\n * class Car {\n *     drive() {}\n * }\n *\n * class FastCar {\n *     @Override\n *     drive() {}}\n * }\n */\nexport function Override(container: { [key: string]: any }, key: string) {\n\tconst basePrototype = Object.getPrototypeOf(container);\n\tif (typeof basePrototype[key] !== 'function') {\n\t\tthrow new Error('Method \"' + key + '\" of class \"' + container.constructor.name + '\" doesn\\'t override any method of base class.');\n\t}\n};\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\n\nimport { Override } from '../../../../../../../common/cdk/decorators';\n\nimport { InputEditTemplateComponent } from './input-edit-template.component';\n\n\n@Component({\n\tselector: 'gui-string-edit',\n\ttemplate: `\n\n\t\t<form [formGroup]=\"filterForm\" >\n\t\t\t<input #input [formControlName]=\"filterFieldName\" type=\"type\" class=\"gui-input\" />\n\t\t</form>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StringEditTemplateComponent extends InputEditTemplateComponent<string> {\n\n\tconstructor(fb: FormBuilder) {\n\t\tsuper(fb);\n\t}\n\n\t@Override\n\tfocusField(inputElement: any): void {\n\n\t\tif (this.focus) {\n\t\t\tinputElement.focus();\n\t\t\tinputElement.setSelectionRange(0, inputElement.value.length);\n\t\t}\n\t}\n}\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\n\nimport { TemplatesComponent } from '../template/templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n@Component({\n\ttemplate: `\n\n\t\t<ng-template #string let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-string-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-string-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #number let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-number-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-number-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #boolean let-valueChanges=\"valueChanges\" let-value=\"value\" let-status=\"status\" let-focus=\"focus\" >\n\t\t\t<gui-boolean-edit [valueChanges]=\"valueChanges\" [value]=\"value\" [status]=\"status\" [focus]=\"focus\">\n\t\t\t</gui-boolean-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #empty>\n\n\t\t</ng-template>\n\n\t`\n})\nexport class EditTemplatesComponent implements TemplatesComponent {\n\n\t@ViewChild('string', { read: TemplateRef, static: true })\n\tstringTemplate: TemplateRef<any>;\n\n\t@ViewChild('number', { read: TemplateRef, static: true })\n\tnumberTemplate: TemplateRef<any>;\n\n\t@ViewChild('boolean', { read: TemplateRef, static: true })\n\tbooleanTemplate: TemplateRef<any>;\n\n\t@ViewChild('empty', { read: TemplateRef, static: true })\n\temptyTemplate: TemplateRef<any>;\n\n\tgetTemplate(dataType: DataType): TemplateRef<any> {\n\n\t\tswitch (dataType) {\n\n\t\t\tcase DataType.STRING:\n\t\t\t\treturn this.stringTemplate;\n\n\t\t\tcase DataType.NUMBER:\n\t\t\t\treturn this.numberTemplate;\n\n\t\t\tcase DataType.BOOLEAN:\n\t\t\t\treturn this.booleanTemplate;\n\n\t\t\tdefault:\n\t\t\t\treturn this.emptyTemplate;\n\t\t}\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, ElementRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { EditCommunicationComponent } from '../edit-communication.component';\n\n\n@Component({\n\tselector: 'gui-boolean-edit',\n\ttemplate: `\n\n\t\t<gui-checkbox #checkbox\n\t\t\t\t\t  [checked]=\"value\"\n\t\t\t\t\t  [name]=\"filterFieldName\"\n\t\t\t\t\t  (changed)=\"toggle($event)\"></gui-checkbox>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class BooleanEditTemplateComponent extends EditCommunicationComponent<boolean> {\n\n\t@ViewChild('checkbox', { read: ElementRef, static: true })\n\tcheckboxRef: ElementRef;\n\n\treadonly filterFieldName = 'booleanEdit';\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tngAfterViewInit() {\n\t\tconst inputElement = this.checkboxRef.nativeElement.querySelector('input[type=\"checkbox\"]');\n\n\t\tinputElement.focus();\n\n\t\tfromEvent(inputElement, 'blur')\n\t\t\t.pipe(\n\t\t\t\tdebounceTime(400),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.unsubscribe();\n\t\t\t\tthis.submit();\n\t\t\t});\n\t}\n\n\ttoggle(changed: boolean): void {\n\t\tthis.valueChanges.emit(changed);\n\t}\n\n\n}\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\n\n\n@Component({\n\tselector: 'gui-column',\n\ttemplate: ''\n})\nexport class ColumnQueryComponent {\n\n\t@ContentChild(TemplateRef, { static: false })\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\t@Input()\n\theader: string;\n\n}\n","import { Component, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n\n@Component({\n\tselector: 'gui-function-view',\n\ttemplate: `\n\n\t\t<div [innerHTML]=\"safeHTML\"></div>\n\n\t`\n})\nexport class FunctionViewComponent {\n\n\t@Input()\n\telement: any;\n\n\tsafeHTML: SafeHtml;\n\n\tconstructor(private sanitizer: DomSanitizer) {\n\t}\n\n\tngOnChanges() {\n\t\tthis.safeHTML = this.sanitizer.bypassSecurityTrustHtml(this.element);\n\t}\n\n}\n","export enum ColumnWidthType {\n\tPERCENTAGE,\n\tNUMBER,\n\tAUTO\n}\n","import { ColumnWidthType } from './column-width-type';\n\nexport class ColumnWidth {\n\n\tprivate template: ColumnWidthType;\n\n\tprivate baseWidth: number | string;\n\n\tprivate width: number;\n\n\tconstructor(width?: number | string) {\n\t\tthis.baseWidth = width;\n\t\tthis.setWidthAndType(width);\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetColumnType(): ColumnWidthType {\n\t\treturn this.template;\n\t}\n\n\tisTypePercentage(): boolean {\n\t\treturn this.template === ColumnWidthType.PERCENTAGE;\n\t}\n\n\tisTypeAuto(): boolean {\n\t\treturn this.template === ColumnWidthType.AUTO;\n\t}\n\n\tisTypeNumber(): boolean {\n\t\treturn this.template === ColumnWidthType.NUMBER;\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.width = width;\n\t}\n\n\tsetWidthAndType(width: number | string): void {\n\n\t\tif (width === undefined || width === null || width === 'auto') {\n\n\t\t\tthis.template = ColumnWidthType.AUTO;\n\t\t\tthis.setWidth(null);\n\n\t\t} else if (this.isPercentage(width)) {\n\n\t\t\tthis.template = ColumnWidthType.PERCENTAGE;\n\t\t\tthis.setWidth(this.percentageToNumber('' + width));\n\n\t\t} else if (this.isStringNumber(width)) {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t} else {\n\n\t\t\tthis.template = ColumnWidthType.NUMBER;\n\t\t\tthis.setWidth(+width);\n\t\t}\n\t}\n\n\tclone(): ColumnWidth {\n\t\treturn new ColumnWidth(this.baseWidth);\n\t}\n\n\tprivate isPercentage(width: number | string): boolean {\n\t\treturn typeof width === 'string' && width[width.length - 1] === '%';\n\t}\n\n\t/**\n\t * Width needs to be in format '89%'\n\t * @param width\n\t */\n\tprivate percentageToNumber(width: string): number {\n\t\treturn +(width.slice(0, -1));\n\t}\n\n\tprivate isStringNumber(width: number | string): boolean {\n\t\tconst widthAsNumber = +width;\n\n\t\treturn Number.isNaN(widthAsNumber);\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\n\nexport class CompositionContainerWidthCalculator {\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number) {\n\t}\n\n\tcalculateMinWidth(columnWidths: Array<ColumnWidth>): number {\n\n\t\tconst { staticColumns, fluidColumns } = this.segregateColumns(columnWidths);\n\n\t\t// TODO reduce\n\t\tlet sum = 0;\n\t\tstaticColumns.forEach((c) => {\n\t\t\tsum += c.getWidth();\n\t\t});\n\n\t\tsum += fluidColumns.length * this.MIN_COLUMN_WIDTH;\n\n\t\treturn sum;\n\t}\n\n\tprivate segregateColumns(columns: Array<ColumnWidth>): { staticColumns: Array<ColumnWidth>, fluidColumns: Array<ColumnWidth> } {\n\n\t\tlet staticColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber() && columnWidth.getWidth() > this.MIN_COLUMN_WIDTH),\n\t\t\tfluidColumns = columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeAuto() || columnWidth.isTypePercentage() || (columnWidth.isTypeNumber() && columnWidth.getWidth() <= this.MIN_COLUMN_WIDTH));\n\n\t\treturn {\n\t\t\tstaticColumns: staticColumns,\n\t\t\tfluidColumns: fluidColumns\n\t\t};\n\t}\n}\n","import { ColumnWidth } from '../column/column-width/column-width';\nimport { ColumnWidthType } from '../column/column-width/column-width-type';\n\nexport class CompositionWidthCalculator {\n\n\tprivate readonly columns: Array<ColumnWidth>;\n\n\tconstructor(private source: Array<ColumnWidth>,\n\t\t\t\tprivate width: number,\n\t\t\t\tprivate readonly MIN_COLUMN_WIDTH: number) {\n\t\tthis.columns = this.source.map((c) => c.clone());\n\t}\n\n\tcalculate(): Array<ColumnWidth> {\n\n\t\tlet width = this.width,\n\t\t\tcolumns = [...this.columns];\n\n\t\t// adjust min value\n\t\tthis.adjustMinimalWidth(columns);\n\n\t\t// remove number columns\n\t\tlet newColumns: Array<ColumnWidth> = [];\n\n\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\twidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tnewColumns.push(column);\n\t\t\t}\n\t\t});\n\n\t\tcolumns = newColumns;\n\n\t\t// split even auto columns\n\t\tif (columns.length !== 0) {\n\n\t\t\tconst evenWidth = width / columns.length;\n\n\t\t\tcolumns.forEach((column: ColumnWidth, index: number) => {\n\t\t\t\tcolumn.setWidth(evenWidth);\n\t\t\t});\n\t\t}\n\n\t\t// adjust number columns\n\t\t// let numberColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypeNumber());\n\t\t//\n\t\t// // sort by min values\n\t\t// numberColumns.sort((columnOne: ColumnWidth, columnTwo: ColumnWidth) => {\n\t\t// \treturn columnOne.getWidth() - columnTwo.getWidth();\n\t\t// });\n\t\t//\n\t\t// numberColumns.forEach(() => {\n\t\t// });\n\n\t\t// this.adjustMinimalWidth(ColumnWidthType.NUMBER);\n\t\t//\n\t\t// this.adjustPercentageWidth();\n\t\t//\n\t\t// this.adjustAutoWidth();\n\n\t\treturn this.columns;\n\t}\n\n\tprivate adjustMinimalWidth(columns: Array<ColumnWidth>): void {\n\t\tcolumns.forEach((column: ColumnWidth) => {\n\t\t\tif (column.isTypeNumber()) {\n\t\t\t\tif (column.getWidth() < this.MIN_COLUMN_WIDTH) {\n\t\t\t\t\tcolumn.setWidthAndType(this.MIN_COLUMN_WIDTH);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate adjustPercentageWidth(): void {\n\n\t\tconst percentageColumns = this.columns.filter((columnWidth: ColumnWidth) => columnWidth.isTypePercentage());\n\n\t\tfor (let column of this.columns) {\n\t\t\tif (column.getColumnType() === ColumnWidthType.PERCENTAGE) {\n\t\t\t\tcolumn.setWidth(this.width * column.getWidth() * 0.01);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate adjustAutoWidth(): void {\n\n\t\tlet leftWidth = this.width,\n\t\t\tautoColumns = [];\n\n\t\tfor (let i = 0; i < this.columns.length; i += 1) {\n\n\t\t\tlet column = this.columns[i];\n\n\t\t\tif (column.getColumnType() !== ColumnWidthType.AUTO) {\n\t\t\t\tleftWidth -= column.getWidth();\n\t\t\t} else {\n\t\t\t\tautoColumns.push(column);\n\t\t\t}\n\t\t}\n\n\t\tif (autoColumns.length > 0) {\n\t\t\tconst splitWidth = leftWidth / autoColumns.length;\n\n\t\t\tfor (let column of autoColumns) {\n\t\t\t\tcolumn.setWidth(splitWidth);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","import { ColumnWidth } from './column-width';\nimport { ColumnConfig } from '../../../column.config';\nimport { CompositionContainerWidthCalculator } from '../../width/composition-container-width.calculator';\nimport { CompositionWidthCalculator } from '../../width/composition-width.calculator';\n\n\nexport class ColumnWidthCollection {\n\n\tprivate baseColumnWidths: Array<ColumnWidth>;\n\n\tprivate columnWidths: Array<ColumnWidth>;\n\n\tprivate width: number;\n\n\tconstructor(private readonly MIN_COLUMN_WIDTH: number,\n\t\t\t\tcolumns: Array<ColumnConfig> = [],\n\t\t\t\twidth: number = 100) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.setContainerWidth(width);\n\n\t\tthis.calculate();\n\t}\n\n\tgetColumns(): Array<ColumnWidth> {\n\t\treturn this.baseColumnWidths;\n\t}\n\n\tgetColumnsWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetWidths(): Array<number> {\n\t\treturn this.columnWidths.map(c => c.getWidth());\n\t}\n\n\tgetMinWidth(): number {\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\treturn calculator.calculateMinWidth(this.columnWidths);\n\t}\n\n\tsetWidth(width: number): void {\n\n\t\tthis.setContainerWidth(width);\n\t\tthis.calculate();\n\t}\n\n\tsetColumns(columns: Array<ColumnConfig>) {\n\t\tthis.baseColumnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\t\tthis.columnWidths = columns.map((column: ColumnConfig) => new ColumnWidth(column.width));\n\n\t\tthis.calculate();\n\t}\n\n\tprivate calculate(): void {\n\n\t\tif (this.baseColumnWidths && this.width) {\n\n\t\t\tconst calculator = new CompositionWidthCalculator(this.baseColumnWidths, this.width, this.MIN_COLUMN_WIDTH);\n\n\t\t\tthis.columnWidths = calculator.calculate();\n\t\t}\n\t}\n\n\tprivate setContainerWidth(width: number): void {\n\t\tif (this.getMinWidth() > width) {\n\t\t\tthis.width = this.getMinWidth();\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.calculate();\n\t}\n}\n","export enum SortStatus {\n\tASC,\n\tDESC,\n\tNONE\n}\n","import { CellView } from '../../cell-view';\n\nexport class ViewEntity {\n\n\tprivate readonly view: CellView;\n\n\tprivate readonly templateFunction?: (entity: any) => string = (value: any) => value;\n\n\tconstructor(columnView: CellView | any) {\n\n\t\tif (typeof columnView === 'function') {\n\t\t\tthis.view = CellView.FUNCTION;\n\t\t\tthis.templateFunction = columnView;\n\t\t} else {\n\t\t\tthis.view = columnView;\n\t\t}\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view;\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.templateFunction;\n\t}\n\n}\n","import { CellView } from '../../cell-view';\nimport { ColumnId } from './column.id';\nimport { ColumnField } from './field/column-field';\nimport { HeaderTemplate } from '../../column.config';\nimport { SortStatus } from '../sort/sort-status';\nimport { ViewEntity } from './view.entity';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\nexport class ColumnEntity {\n\n\tcolumnId: ColumnId;\n\n\tcolumnField: ColumnField;\n\n\theader?: string | HeaderTemplate;\n\n\tsortStatus = SortStatus.NONE;\n\n\twidth?: number;\n\n\tsortable?: boolean;\n\n\tprivate view: ViewEntity = new ViewEntity(CellView.TEXT);\n\n\tconstructor(columnField: ColumnField,\n\t\t\t\theader?: string | HeaderTemplate,\n\t\t\t\tview?: ViewEntity,\n\t\t\t\twidth?: number) {\n\t\tthis.columnField = columnField;\n\n\t\tif (header) {\n\t\t\tthis.header = header;\n\t\t}\n\n\t\tif (view) {\n\t\t\tthis.view = view;\n\t\t}\n\n\t\tif (width) {\n\t\t\tthis.width = width;\n\t\t}\n\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.columnField;\n\t}\n\n\tgetHeader(): string | HeaderTemplate{\n\t\treturn this.header;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.columnField.getDataType();\n\t}\n\n\tgetCellView(): CellView {\n\t\treturn this.view.getCellView();\n\t}\n\n\tgetTemplateFunction(): any {\n\t\treturn this.view.getTemplateFunction();\n\t}\n\n\tsetSortStatus(status: SortStatus): void {\n\t\tthis.sortStatus = status;\n\t}\n\n\tsetView(view: ViewEntity): void {\n\t\tthis.view = view;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnParams } from './set-columns/column.params';\nimport { ColumnEntity } from './column.entity';\nimport { ColumnConfig } from '../../column.config';\nimport { ColumnField } from './field/column-field';\nimport { ViewEntity } from './view.entity';\n\n\n@Injectable()\nexport class ColumnEntityFactory {\n\n\tcreate(params: ColumnParams): ColumnEntity;\n\tcreate(params: Array<ColumnParams>): Array<ColumnEntity>;\n\tcreate(data: ColumnParams | Array<ColumnParams>): ColumnEntity | Array<ColumnEntity> {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createColumns(data);\n\t\t} else {\n\t\t\treturn this.createColumn(data);\n\t\t}\n\t}\n\n\tprivate createColumn(params: ColumnParams): ColumnEntity {\n\n\t\tconst column: ColumnConfig = params.getColumn(),\n\t\t\tfield: ColumnField = params.getField();\n\n\t\tlet columnEntity = new ColumnEntity(field);\n\n\t\tif (column.header !== undefined) {\n\t\t\tcolumnEntity.header = column.header;\n\t\t}\n\n\t\tif (column.view !== undefined) {\n\t\t\tcolumnEntity.setView(new ViewEntity(column.view));\n\t\t}\n\n\t\tif (column.width !== undefined) {\n\t\t\tcolumnEntity.width = this.convertWidth(column.width);\n\t\t}\n\n\t\treturn columnEntity;\n\t}\n\n\tprivate createColumns(columns: Array<ColumnParams>): Array<ColumnEntity> {\n\n\t\tlet columnEntities = [] as Array<ColumnEntity>;\n\n\t\tcolumns.forEach((column: ColumnParams) => {\n\t\t\tcolumnEntities.push(this.createColumn(column));\n\t\t});\n\n\t\treturn columnEntities;\n\t}\n\n\tprivate convertWidth(width: string | number): number {\n\t\treturn +width;\n\t}\n}\n","import { AggregateId, AggregateEvent } from '@generic-ui/hermes';\n\nimport { ColumnEntity } from '../column.entity';\n\n\nexport class ColumnsSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'ColumnsSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionContainerWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId,\n\t\t\t\tpublic readonly containerWidth: number) {\n\t\tsuper(compositionId, 'CompositionContainerWidthSetAggregateEvent');\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../composition-id';\n\n\nexport class CompositionResizeWidthSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(compositionId: CompositionId) {\n\t\tsuper(compositionId, 'CompositionResizeWidthSetAggregateEvent');\n\t}\n}\n","import { Aggregate, AggregateId, RootAggregate } from '@generic-ui/hermes';\n\nimport { ColumnWidthCollection } from './column/column-width/column-width-collection';\nimport { ColumnEntity } from './column/column.entity';\nimport { ColumnConfig } from '../column.config';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { ColumnEntityFactory } from './column/column-entity.factory';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { SortStatus } from './sort/sort-status';\nimport { ColumnsSetAggregateEvent } from './column/set-columns/columns-set.aggregate-event';\nimport { CompositionContainerWidthCalculator } from './width/composition-container-width.calculator';\nimport { CompositionWidthSetAggregateEvent } from './width/set-width/composition-width-set.aggregate-event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionResizeWidthSetAggregateEvent } from './width/resize-width/composition-resize-width-set.aggregate-event';\n\n\n@RootAggregate\nexport class CompositionAggregate extends Aggregate {\n\n\tprivate readonly MIN_COLUMN_WIDTH = 50;\n\n\t/**\n\t * Columns taken from user config.\n\t * This should not be modified and it should be used as a reference point.\n\t */\n\tprivate columnWidthCollection: ColumnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH);\n\n\t/**\n\t * Collection of columns which are used in the composition.\n\t */\n\tprivate activeColumns: Array<ColumnEntity> = [];\n\n\tprivate readonly baseColumns: Array<ColumnConfig>;\n\n\tprivate readonly baseParams: Array<ColumnParams>;\n\n\t/**\n\t * Value taken from user config [width]\n\t */\n\tprivate width: number;\n\n\t/**\n\t * DOM element's width\n\t */\n\tprivate containerWidth: number;\n\n\tprivate resizeWidthEnabled: boolean = true;\n\n\t/**\n\t * Autowired\n\t */\n\tprivate readonly columnFactory: ColumnEntityFactory = new ColumnEntityFactory();\n\n\tconstructor(id: AggregateId,\n\t\t\t\tcolumnsParams: Array<ColumnParams> = [],\n\t\t\t\twidth?: number,\n\t\t\t\tresizeWidth?: boolean) {\n\t\tsuper(id);\n\n\t\tconst columns = columnsParams.map((param) => param.getColumn());\n\n\t\tthis.baseParams = columnsParams;\n\t\tthis.baseColumns = columns;\n\t\tthis.width = width;\n\n\t\tthis.activeColumns = this.columnFactory.create(columnsParams);\n\t\tthis.columnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH, columns, width);\n\n\t\tif (resizeWidth !== undefined && resizeWidth !== null) {\n\t\t\tthis.resizeWidthEnabled = resizeWidth;\n\t\t}\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.activeColumns;\n\t}\n\n\tgetWidth(): number {\n\n\t\tif (this.resizeWidthEnabled) {\n\t\t\treturn this.containerWidth;\n\t\t} else {\n\t\t\treturn this.width;\n\t\t}\n\t}\n\n\tisResizeEnabled(): boolean {\n\t\treturn this.resizeWidthEnabled;\n\t}\n\n\tisReady(): boolean {\n\t\treturn !!this.getWidth() && this.activeColumns.length > 0;\n\t}\n\n\tclone(): CompositionAggregate {\n\n\t\tconst activeColumns = [...this.activeColumns];\n\n\t\tlet composition = new CompositionAggregate(\n\t\t\tthis.getId(),\n\t\t\tthis.baseParams,\n\t\t\tthis.width,\n\t\t\tthis.resizeWidthEnabled\n\t\t);\n\n\t\tcomposition.containerWidth = this.containerWidth;\n\t\tcomposition.activeColumns = activeColumns;\n\t\tcomposition.columnWidthCollection = this.columnWidthCollection;\n\n\t\treturn composition;\n\t}\n\n\tsetColumns(params: Array<ColumnParams>): void {\n\n\t\tconst columns: Array<ColumnConfig> = params.map((param: ColumnParams) => param.getColumn());\n\n\t\tthis.columnWidthCollection.setColumns(columns);\n\n\t\tconst newColumns = this.columnFactory.create(params),\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tsetContainerWidth(containerWidth: number): void {\n\n\t\tthis.setContainerWidthWithEvent(containerWidth);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetWidth(width: number): void {\n\t\tthis.setWidthWithEvent(width);\n\n\t\tthis.setResizeWidthWithEvent(false);\n\n\t\tthis.recalculateColumns();\n\t}\n\n\tsetResizeWidth(enabled: boolean): void {\n\t\tthis.setResizeWidthWithEvent(enabled);\n\t}\n\n\t// TODO Aggregate events\n\tchangeSort(sortParams: Array<ChangeSortParams>): void {\n\n\t\tthis.activeColumns.forEach((column: ColumnEntity) => {\n\t\t\tcolumn.setSortStatus(SortStatus.NONE);\n\t\t});\n\n\t\tfor (let param of sortParams) {\n\n\t\t\tconst fieldId = param.fieldId,\n\t\t\t\tdirection = param.direction,\n\t\t\t\tsortStatus = direction ? SortStatus.ASC : SortStatus.DESC;\n\n\t\t\tconst columns = this.activeColumns.filter((column: ColumnEntity) => {\n\t\t\t\treturn column.getField().getId().getId() === fieldId.getId();\n\t\t\t});\n\n\t\t\tif (columns.length > 0) {\n\t\t\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\t\t\tcolumn.setSortStatus(sortStatus);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate recalculateColumns(): void {\n\n\t\tthis.columnWidthCollection.setWidth(this.getWidth());\n\n\t\tconst newColumns = [...this.activeColumns],\n\t\t\twidths = this.columnWidthCollection.getWidths();\n\n\t\tthis.updateColumnsWidths(newColumns, widths);\n\n\t\tthis.setActiveColumnsWithEvent(newColumns);\n\t}\n\n\tprivate updateColumnsWidths(columns: Array<ColumnEntity>, widths: Array<number>): void {\n\t\tcolumns.forEach((columnEntity: ColumnEntity, index: number) => {\n\t\t\tcolumnEntity.width = widths[index];\n\t\t});\n\t}\n\n\tprivate setActiveColumnsWithEvent(columns: Array<ColumnEntity>): void {\n\t\tthis.activeColumns = columns;\n\t\tthis.addEvent(new ColumnsSetAggregateEvent(this.getId(), columns));\n\t}\n\n\t// TODO Refactor\n\tprivate setWidthWithEvent(width: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > width) {\n\t\t\tthis.width = minWidth;\n\t\t} else {\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tthis.addEvent(new CompositionWidthSetAggregateEvent(this.getId()));\n\t}\n\n\t// TODO Refactor\n\tprivate setContainerWidthWithEvent(containerWidth: number): void {\n\n\t\tconst calculator = new CompositionContainerWidthCalculator(this.MIN_COLUMN_WIDTH);\n\n\t\tconst minWidth = calculator.calculateMinWidth(this.columnWidthCollection.getColumns());\n\n\t\tif (minWidth > containerWidth) {\n\t\t\tthis.containerWidth = minWidth;\n\t\t} else {\n\t\t\tthis.containerWidth = containerWidth;\n\t\t}\n\n\t\tthis.addEvent(new CompositionContainerWidthSetAggregateEvent(this.getId(), containerWidth));\n\t}\n\n\tprivate setResizeWidthWithEvent(enabled: boolean): void {\n\t\tthis.resizeWidthEnabled = enabled;\n\t\tthis.addEvent(new CompositionResizeWidthSetAggregateEvent(this.getId()));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { CompositionAggregate } from '../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionStore extends InMemoryStore<CompositionAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore, AggregateStoreRegister, AggregateId } from '@generic-ui/hermes';\n\nimport { Override } from '../../../../../../common/cdk/decorators';\n\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateStore extends InMemoryAggregateStore<CompositionAggregate> {\n\n\tconstructor(inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryCompositionStore, aggregateStoreRegister);\n\t}\n\n\t@Override\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\tlet composition = super.getById(aggregateId);\n\n\t\tif (composition) {\n\t\t\treturn composition.clone();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n}\n","import { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\nexport abstract class CompositionAggregateRepository {\n\n\tabstract getById(compositionId: CompositionId): CompositionAggregate;\n\n\tabstract save(aggregate: CompositionAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateStore } from './in-memory.composition.aggregate-store';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\n\n\n@Injectable()\nexport class InMemoryCompositionAggregateRepository extends CompositionAggregateRepository {\n\n\tconstructor(private inMemoryCompositionAggregateStore: InMemoryCompositionAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): CompositionAggregate {\n\t\treturn this.inMemoryCompositionAggregateStore.getById(aggregateId);\n\t}\n\n\tsave(aggregate: CompositionAggregate): void {\n\t\tthis.inMemoryCompositionAggregateStore.save(aggregate);\n\t}\n\n}\n","import { ComponentFactoryResolver, ComponentRef, Injector, TemplateRef, Type } from '@angular/core';\nimport { TemplatesComponent } from './templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\nimport { CellView } from '../../cell-view';\n\n\n\nexport abstract class TemplateFactory<T extends TemplatesComponent> {\n\n\tprivate templates: Map<DataType | CellView, TemplateRef<any>> = new Map<DataType | CellView, TemplateRef<any>>();\n\n\tprivate templatesComponent: ComponentRef<T> = null;\n\n\tprotected constructor(private readonly templatesComponentDefinition: Type<T>,\n\t\t\t\t\t\t  private componentFactoryResolver: ComponentFactoryResolver) {\n\t\tthis.createTemplatesComponent();\n\t}\n\n\tabstract generateMapKeys(): Array<DataType | CellView>;\n\n\tgetTemplates(): Map<DataType | CellView, TemplateRef<any>> {\n\t\treturn this.templates;\n\t}\n\n\tdestroy(): void {\n\t\tif (this.templatesComponent) {\n\t\t\tthis.templatesComponent.destroy();\n\t\t\tthis.templatesComponent = null;\n\t\t}\n\t}\n\n\tprivate createTemplatesComponent(): void {\n\n\t\tconst componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.templatesComponentDefinition);\n\n\t\tconst injector: Injector = Injector.create({ providers: [] });\n\n\t\tthis.templatesComponent = componentFactory.create(injector);\n\n\t\tthis.generateMap();\n\t}\n\n\tprivate generateMap(): void {\n\t\tthis.generateMapKeys()\n\t\t\t.forEach((type: DataType | CellView) => {\n\t\t\t\tthis.findAndSetTemplate(type);\n\t\t\t});\n\t};\n\n\tprivate findAndSetTemplate(dt: DataType | CellView): void {\n\n\t\tconst template = this.templatesComponent.instance.getTemplate(dt);\n\n\t\tthis.templates.set(dt, template);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\n\nimport { ViewTemplatesComponent } from './view-templates.component';\nimport { CellView } from '../../cell-view';\nimport { TemplateFactory } from '../template/template.factory';\n\n\n@Injectable()\nexport class ViewTemplateFactory extends TemplateFactory<ViewTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tViewTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<CellView> {\n\t\treturn Object.keys(CellView)\n\t\t\t\t\t .map(key => CellView[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { ViewTemplateFactory } from './view-template.factory';\nimport { CellView } from '../../cell-view';\n\n\n\n@Injectable()\nexport class ViewTemplateRepository {\n\n\tconstructor(private columnTemplateFactory: ViewTemplateFactory) {\n\t}\n\n\tfindTemplate(view: CellView): TemplateRef<any> {\n\t\tconst typeToTemplate = this.columnTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(view);\n\t}\n\n}\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { TemplateFactory } from '../template/template.factory';\nimport { EditTemplatesComponent } from './edit-templates.component';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateFactory extends TemplateFactory<EditTemplatesComponent> {\n\n\tconstructor(componentFactoryResolver: ComponentFactoryResolver) {\n\t\tsuper(\n\t\t\tEditTemplatesComponent,\n\t\t\tcomponentFactoryResolver\n\t\t);\n\t}\n\n\tgenerateMapKeys(): Array<DataType> {\n\t\treturn Object.keys(DataType)\n\t\t\t\t\t .map(key => DataType[key]);\n\t}\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { EditTemplateFactory } from './edit-template.factory';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class EditTemplateRepository {\n\n\tconstructor(private editTemplateFactory: EditTemplateFactory) {\n\t}\n\n\tfindTemplate(dataType: DataType): TemplateRef<any> {\n\t\tconst typeToTemplate = this.editTemplateFactory.getTemplates();\n\n\t\treturn typeToTemplate.get(dataType);\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { SortStatus } from '../../command/sort/sort-status';\n\n\nexport class CellTemplateWithContext {\n\n\tconstructor(public viewTemplate: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\t// public editContext: any,\n\t\t\t\tpublic context: CellContext,\n\t\t\t\tpublic width: number,\n\t\t\t\tprivate readonly fieldId: FieldId,\n\t\t\t\tprivate readonly sortStatus: SortStatus) {\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetSortStatus(): SortStatus {\n\t\treturn this.sortStatus;\n\t}\n}\n","export class CellContext {\n\n\tconstructor(public element: string) {\n\t}\n}\n","export class FieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n\n\tequals(fieldId: FieldId): boolean {\n\t\treturn fieldId.getId() === this.id;\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnFieldId } from '../../command/column/field/column-field.id';\n\n\nexport class CellTemplateWithAccessor {\n\n\tconstructor(public template: TemplateRef<any>,\n\t\t\t\tpublic editTemplate: TemplateRef<any>,\n\t\t\t\tpublic editable: boolean,\n\t\t\t\tpublic accessor: (element: any) => any,\n\t\t\t\tpublic width: number,\n\t\t\t\tpublic columnFieldId: ColumnFieldId) {\n\t}\n\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { ColumnField } from '../../command/column/field/column-field';\nimport { SortStatus } from '../../command/sort/sort-status';\nimport { HeaderTemplate } from '../../column.config';\nimport { CellTemplateWithContext } from './cell-template-with-context';\nimport { CellContext } from './cell-context';\nimport { FieldId } from '../../../structure/command/field/data-type/field.id';\nimport { CellTemplateWithAccessor } from './cell-template-with-accessor';\n\n\nexport class ColumnDefinition {\n\n\tcellTemplate: TemplateRef<any>;\n\n\theaderTemplate: TemplateRef<any>;\n\n\teditTemplate: TemplateRef<any>;\n\n\twidth: number;\n\n\ttemplateFunction: (i: any) => string;\n\n\tprivate field: ColumnField;\n\n\tprivate sortStatus: SortStatus;\n\n\tprivate header: string | HeaderTemplate;\n\n\tconstructor(field: ColumnField,\n\t\t\t\theader: string | HeaderTemplate,\n\t\t\t\tsort: SortStatus = SortStatus.NONE) {\n\t\tthis.field = field;\n\t\tthis.header = header;\n\t\tthis.sortStatus = sort;\n\t}\n\n\tsetHeader(header: string): void {\n\t\tthis.header = header;\n\t}\n\n\tsetField(field: ColumnField): void {\n\t\tthis.field = field;\n\t}\n\n\tgetHeaderCellTemplateWithContext(index: number): CellTemplateWithContext {\n\n\t\tconst header: any = this.header;\n\t\tlet headerCellContext: CellContext;\n\n\t\tif (typeof header === 'string') {\n\t\t\theaderCellContext = new CellContext(header);\n\t\t} else if (typeof header === 'function') {\n\t\t\theaderCellContext = new CellContext(header(index));\n\t\t}\n\n\t\tconst fieldId = new FieldId(this.field.getId().getId());\n\n\t\treturn new CellTemplateWithContext(this.headerTemplate, this.editTemplate, headerCellContext, this.width, fieldId, this.sortStatus);\n\t}\n\n\tgetContentCellTemplateWithAccessor(): CellTemplateWithAccessor {\n\n\t\tlet accessor = (entity: any) => {\n\t\t\treturn this.templateFunction(this.field.getAccessor()(entity));\n\t\t};\n\n\t\treturn new CellTemplateWithAccessor(this.cellTemplate, this.editTemplate, true, accessor, this.width, this.field.getId());\n\t}\n\n}\n","import { Injectable, TemplateRef } from '@angular/core';\n\nimport { ViewTemplateRepository } from '../view/view-template.repository';\nimport { EditTemplateRepository } from '../edit/edit-template.repository';\nimport { ColumnEntity } from '../../command/column/column.entity';\nimport { ColumnDefinition } from './column-definition';\nimport { CellView } from '../../cell-view';\nimport { DataType } from '../../../structure/command/field/data-type/data-type';\n\n\n\n@Injectable()\nexport class ColumnDefinitionFactory {\n\n\tconstructor(private viewTemplateRepository: ViewTemplateRepository,\n\t\t\t\tprivate editTemplateRepository: EditTemplateRepository) {\n\t}\n\n\tcreate(column: ColumnEntity): ColumnDefinition {\n\n\t\tlet columnDef = new ColumnDefinition(column.getField(), column.getHeader(), column.sortStatus);\n\n\t\tcolumnDef.cellTemplate = this.findViewTemplate(column.getCellView());\n\t\tcolumnDef.headerTemplate = this.findViewTemplate(CellView.TEXT);\n\n\t\tcolumnDef.templateFunction = column.getTemplateFunction();\n\n\t\tcolumnDef.editTemplate = this.findEditTemplate(column.getDataType());\n\n\t\tcolumnDef.width = +column.width;\n\n\t\treturn columnDef;\n\t}\n\n\tcreateColumns(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\t\treturn columns.map((column: ColumnEntity) => this.create(column));\n\t}\n\n\tprivate findViewTemplate(view: CellView): TemplateRef<any> {\n\n\t\tif (view === CellView.FUNCTION) {\n\t\t\treturn this.viewTemplateRepository.findTemplate(CellView.FUNCTION);\n\t\t} else {\n\t\t\treturn this.viewTemplateRepository.findTemplate(view);\n\t\t}\n\t}\n\n\tprivate findEditTemplate(dataType: DataType): TemplateRef<any> {\n\t\treturn this.editTemplateRepository.findTemplate(dataType);\n\t}\n\n}\n","import { ReadModel, AggregateId } from '@generic-ui/hermes';\n\nimport { ColumnDefinition } from './definition/column-definition';\nimport { CellTemplateWithContext } from './definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from './definition/cell-template-with-accessor';\n\n\nexport class Composition extends ReadModel {\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tprivate readonly ready: boolean,\n\t\t\t\tprivate readonly columns: Array<ColumnDefinition>,\n\t\t\t\tprivate readonly width: number,\n\t\t\t\tprivate readonly resizeWidth: boolean) {\n\t\tsuper(uid);\n\t}\n\n\tgetColumns(): Array<ColumnDefinition> {\n\t\treturn this.columns;\n\t}\n\n\tgetHeaderColumns(): Array<CellTemplateWithContext> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition, index: number) => column.getHeaderCellTemplateWithContext(index));\n\t}\n\n\tgetTemplateColumns(): Array<CellTemplateWithAccessor> {\n\t\treturn this.columns\n\t\t\t\t   .map((column: ColumnDefinition) => column.getContentCellTemplateWithAccessor());\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetContainerWidth(): number {\n\t\treturn +this.width - 2;\n\t}\n\n\tisReady(): boolean {\n\t\treturn this.ready;\n\t}\n\n\tisResizeWidthEnabled(): boolean {\n\t\treturn this.resizeWidth;\n\t}\n\n\tequals(composition: Composition): boolean {\n\t\treturn this.width === composition.width &&\n\t\t\tthis.resizeWidth === composition.resizeWidth &&\n\t\t\tthis.equalsByColumns(composition.columns);\n\t}\n\n\tequalsByColumns(columns: Array<ColumnDefinition>): boolean {\n\t\treturn this.columns.length === columns.length;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnDefinitionFactory } from './read/definition/column-definition.factory';\nimport { CompositionAggregate } from './command/composition.aggregate';\nimport { Composition } from './read/composition';\nimport { ColumnEntity } from './command/column/column.entity';\nimport { ColumnDefinition } from './read/definition/column-definition';\n\n\n@Injectable()\nexport class CompositionConverter {\n\n\tconstructor(private columnDefinitionFactory: ColumnDefinitionFactory) {}\n\n\tconvert(aggregate: CompositionAggregate): Composition {\n\n\t\tconst ready = aggregate.isReady(),\n\t\t\tcolumns: Array<ColumnEntity> = aggregate.getColumns(),\n\t\t\tcolumnDefs: Array<ColumnDefinition> = this.convertColumnsToColumnDef(columns),\n\t\t\twidth = aggregate.getWidth(),\n\t\t\tresizeWidth = aggregate.isResizeEnabled(),\n\t\t\tid = aggregate.getId();\n\n\t\treturn new Composition(id, ready, columnDefs, width, resizeWidth);\n\t}\n\n\tprivate convertColumnsToColumnDef(columns: Array<ColumnEntity>): Array<ColumnDefinition> {\n\n\t\tconst columnDefs: Array<ColumnDefinition> = [];\n\n\t\tcolumns.forEach((column: ColumnEntity) => {\n\n\t\t\tconst columnDef = this.columnDefinitionFactory.create(column);\n\n\t\t\tcolumnDefs.push(columnDef);\n\t\t});\n\n\t\treturn columnDefs;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Composition } from '../../../../domain/composition/read/composition';\nimport { CompositionAggregate } from '../../../../domain/composition/command/composition.aggregate';\nimport { InMemoryCompositionStore } from '../in-memory.composition.store';\nimport { CompositionConverter } from '../../../../domain/composition/composition.converter';\n\n\n@Injectable()\nexport class InMemoryCompositionReadStore extends InMemoryReadModelStore<Composition, CompositionAggregate> {\n\n\tconstructor(private inMemoryCompositionStore: InMemoryCompositionStore,\n\t\t\t\tprivate compositionConverter: CompositionConverter) {\n\t\tsuper(inMemoryCompositionStore);\n\t}\n\n\ttoReadModel(aggregate: CompositionAggregate): Composition {\n\t\treturn this.compositionConverter.convert(aggregate);\n\t}\n\n}\n","import { Observable } from 'rxjs';\n\nimport { CompositionId } from '../composition-id';\nimport { Composition } from './composition';\n\n\nexport abstract class CompositionRepository {\n\n\tabstract select(compositionId: CompositionId): Observable<Composition>;\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class CompositionInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionInitedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionResizeWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionResizeWidthSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class ColumnsSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ColumnsSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionContainerWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tpayload: any) {\n\t\tsuper(aggregateId, 'CompositionContainerWidthSetEvent', payload);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionWidthSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'CompositionWidthSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ColumnEntity } from '../column/column.entity';\n\n\nexport class CompositionChangeSortStatusEvent extends DomainEvent {\n\n\tconstructor(aggregateId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnEntity>) {\n\t\tsuper(aggregateId, 'CompositionChangeSortStatusEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.aggregateId;\n\t}\n\n\tgetColumns(): Array<ColumnEntity> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { CompositionRepository } from '../../../../domain/composition/read/composition.repository';\nimport { Composition } from '../../../../domain/composition/read/composition';\nimport { InMemoryCompositionReadStore } from './in-memory.composition.read-store';\nimport { CompositionInitedEvent } from '../../../../domain/composition/command/init/composition-inited.event';\nimport { CompositionResizeWidthSetEvent } from '../../../../domain/composition/command/width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from '../../../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from '../../../../domain/composition/command/width/set-width/composition-width-set.event';\nimport { CompositionChangeSortStatusEvent } from '../../../../domain/composition/command/sort/composition-change-sort-status.event';\n\n\n@Injectable()\nexport class InMemoryCompositionRepository extends CompositionRepository implements OnDestroy {\n\n\tprivate readonly composition$ = new ReplaySubject<Composition>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryCompositionQueryStore: InMemoryCompositionReadStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tCompositionInitedEvent,\n\t\t\t\tCompositionResizeWidthSetEvent,\n\t\t\t\tColumnsSetEvent,\n\t\t\t\tCompositionContainerWidthSetEvent,\n\t\t\t\tCompositionWidthSetEvent,\n\t\t\t\tCompositionChangeSortStatusEvent as any\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst composition = this.inMemoryCompositionQueryStore.getById(aggregateId);\n\n\t\t\t\tthis.composition$.next(composition);\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tselect(aggregateId: AggregateId): Observable<Composition> {\n\n\t\treturn this.composition$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((composition: Composition) => composition.getId().toString() === aggregateId.toString()),\n\t\t\t\t\t   filter((composition: Composition) => composition.isReady())\n\t\t\t\t   );\n\t}\n\n}\n","import { InMemoryCompositionAggregateStore } from './command/in-memory.composition.aggregate-store';\nimport { CompositionAggregateRepository } from '../../../domain/composition/command/composition.aggregate-repository';\nimport { InMemoryCompositionAggregateRepository } from './command/in-memory.composition.aggregate-repository';\nimport { InMemoryCompositionReadStore } from './read/in-memory.composition.read-store';\nimport { CompositionRepository } from '../../../domain/composition/read/composition.repository';\nimport { InMemoryCompositionRepository } from './read/in-memory.composition.repository';\nimport { InMemoryCompositionStore } from './in-memory.composition.store';\n\nexport const inMemoryCompositionCommandProviders = [\n\tInMemoryCompositionAggregateStore,\n\t{\n\t\tprovide: CompositionAggregateRepository,\n\t\tuseClass: InMemoryCompositionAggregateRepository\n\t},\n];\n\nexport const inMemoryCompositionQueryProviders = [\n\tInMemoryCompositionReadStore,\n\t{\n\t\tprovide: CompositionRepository,\n\t\tuseClass: InMemoryCompositionRepository\n\t}\n];\n\nexport const inMemoryCompositionProviders = [\n\tInMemoryCompositionStore\n];\n","import { Injectable } from '@angular/core';\n\nimport { CompositionId } from '../composition-id';\nimport { CompositionAggregate } from './composition.aggregate';\n\n\n@Injectable()\nexport class CompositionAggregateFactory {\n\n\tcreate(id: CompositionId): CompositionAggregate {\n\t\treturn new CompositionAggregate(id);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\n\n\nexport class InitCompositionCommand extends Command {\n\n\tconstructor(public readonly compositionId: CompositionId) {\n\t\tsuper(compositionId, 'InitCompositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../../composition-id';\n\nimport { ColumnParams } from './column.params';\n\n\nexport class SetColumnsCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly columns: Array<ColumnParams>) {\n\t\tsuper(compositionId, 'SetColumnsCommand');\n\t}\n\n\tgetParams(): Array<ColumnParams> {\n\t\treturn this.columns;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionContainerWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly width: number) {\n\t\tsuper(structureId, 'SetCompositionContainerWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetCompositionResizeWidthCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetCompositionResizeWidthCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../composition-id';\nimport { ChangeSortParams } from './change-sort.params';\n\n\nexport class CompositionChangeSortStatusCommand extends Command {\n\n\tconstructor(readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly sortParams: Array<ChangeSortParams>) {\n\t\tsuper(compositionId, 'CompositionChangeSortStatusCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetSortParams(): Array<ChangeSortParams> {\n\t\treturn this.sortParams;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../composition-id';\nimport { InitCompositionCommand } from './init/init-composition.command';\nimport { ColumnParams } from './column/set-columns/column.params';\nimport { SetColumnsCommand } from './column/set-columns/set-columns.command';\nimport { SetCompositionWidthCommand } from './width/set-width/set-composition-width.command';\nimport { SetCompositionContainerWidthCommand } from './width/set-container-width/set-composition-container-width.command';\nimport { SetCompositionResizeWidthCommand } from './width/resize-width/set-composition-resize-width.command';\nimport { ChangeSortParams } from './sort/change-sort.params';\nimport { CompositionChangeSortStatusCommand } from './sort/composition-change-sort-status.command';\n\n\n@Injectable()\nexport class CompositionDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId): void {\n\t\tthis.commandDispatcher.dispatch(new InitCompositionCommand(compositionId));\n\t}\n\n\tsetColumns(compositionId: CompositionId, params: Array<ColumnParams>): void {\n\t\tthis.commandDispatcher.dispatch(new SetColumnsCommand(compositionId, params));\n\t}\n\n\tsetWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionWidthCommand(compositionId, width));\n\t}\n\n\tsetContainerWidth(compositionId: CompositionId, width: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionContainerWidthCommand(compositionId, width));\n\t}\n\n\tsetResizeWidth(compositionId: CompositionId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetCompositionResizeWidthCommand(compositionId, enabled));\n\t}\n\n\tchangeSort(compositionId: CompositionId, params: Array<ChangeSortParams>): void {\n\t\tthis.commandDispatcher.dispatch(new CompositionChangeSortStatusCommand(compositionId, params));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionAggregateFactory } from '../composition.aggregate-factory';\nimport { InitCompositionCommand } from './init-composition.command';\nimport { CompositionInitedEvent } from './composition-inited.event';\n\n\n@Injectable()\nexport class InitCompositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly compositionAggregateFactory: CompositionAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitCompositionCommand,\n\t\t\tCompositionInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitCompositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.compositionId;\n\n\t\tconst compositionAggregate = this.compositionAggregateFactory.create(aggregateId);\n\n\t\tthis.compositionAggregateRepository.save(compositionAggregate);\n\t}\n\n}\n","export const CompositionAggregateEvents = {\n\tCompositionResizeWidthSetAggregateEvent: 'CompositionResizeWidthSetAggregateEvent',\n\tColumnsSetAggregateEvent: 'ColumnsSetAggregateEvent',\n\tCompositionContainerWidthSetAggregateEvent: 'CompositionContainerWidthSetAggregateEvent',\n\tCompositionWidthSetAggregateEvent: 'CompositionWidthSetAggregateEvent',\n};\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateEvents } from './composition.events';\nimport { CompositionResizeWidthSetEvent } from './width/resize-width/composition-resize-width-set.event';\nimport { ColumnsSetEvent } from './column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetAggregateEvent } from './width/set-container-width/composition-container-width-set.aggregate-event';\nimport { CompositionContainerWidthSetEvent } from './width/set-container-width/composition-container-width-set.event';\nimport { CompositionWidthSetEvent } from './width/set-width/composition-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventConverter {\n\n\tconvert(event: AggregateEvent): DomainEvent;\n\tconvert(events: Array<AggregateEvent>): Array<DomainEvent>;\n\tconvert(arg: AggregateEvent | Array<AggregateEvent>): DomainEvent | Array<DomainEvent> {\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn this.convertEvents(arg);\n\t\t} else {\n\t\t\treturn this.convertEvent(arg);\n\t\t}\n\t}\n\n\tprivate convertEvents(aggregateEvents: Array<AggregateEvent>): Array<DomainEvent> {\n\t\treturn aggregateEvents.map((event: AggregateEvent) => {\n\t\t\treturn this.convertEvent(event);\n\t\t});\n\t}\n\n\tprivate convertEvent(aggregateEvent: AggregateEvent): DomainEvent {\n\n\t\tswitch (aggregateEvent.getType()) {\n\t\t\tcase CompositionAggregateEvents.CompositionResizeWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionResizeWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.ColumnsSetAggregateEvent:\n\n\t\t\t\treturn new ColumnsSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tcase CompositionAggregateEvents.CompositionContainerWidthSetAggregateEvent:\n\n\t\t\t\tconst payload = (aggregateEvent as CompositionContainerWidthSetAggregateEvent).containerWidth;\n\n\t\t\t\treturn new CompositionContainerWidthSetEvent(aggregateEvent.getAggregateId(), payload);\n\n\t\t\tcase CompositionAggregateEvents.CompositionWidthSetAggregateEvent:\n\n\t\t\t\treturn new CompositionWidthSetEvent(aggregateEvent.getAggregateId());\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Command, DomainEventPublisher, CommandHandler, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { CompositionAggregate } from '../../composition.aggregate';\n\nimport { SetColumnsCommand } from './set-columns.command';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class SetColumnsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetColumnsCommand);\n\t}\n\n\thandle(command: SetColumnsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.getAggregateId(),\n\t\t\tsetColumnsParams: Array<ColumnParams> = command.getParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setColumns(setColumnsParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishEvents(composition, command);\n\t}\n\n\tprivate publishEvents(composition: CompositionAggregate, command: Command): void {\n\n\t\tconst events = composition.getEvents() as Array<AggregateEvent>;\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(events);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionWidthCommand } from './set-composition-width.command';\nimport { CompositionWidthSetEvent } from './composition-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionWidthCommand,\n\t\t\tCompositionWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { ColumnEntityFactory } from '../../column/column-entity.factory';\nimport { SetCompositionResizeWidthCommand } from './set-composition-resize-width.command';\nimport { CompositionResizeWidthSetEvent } from './composition-resize-width-set.event';\n\n\n@Injectable()\nexport class SetCompositionResizeWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprivate readonly columnConverter: ColumnEntityFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetCompositionResizeWidthCommand,\n\t\t\tCompositionResizeWidthSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetCompositionResizeWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setResizeWidth(enabled);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse, AggregateEvent } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../../composition-event.converter';\nimport { SetCompositionContainerWidthCommand } from './set-composition-container-width.command';\n\n\n@Injectable()\nexport class SetCompositionContainerWidthCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(SetCompositionContainerWidthCommand);\n\t}\n\n\thandle(command: SetCompositionContainerWidthCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\twidth = command.width;\n\n\t\tconst composition = this.compositionAggregateRepository.getById(aggregateId);\n\n\t\tcomposition.setContainerWidth(width);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tthis.publishAggregateEvents(composition.getEvents() as Array<AggregateEvent>);\n\t}\n\n\tprivate publishAggregateEvents(aggregateEvents: Array<AggregateEvent>): void {\n\n\t\tconst domainEvents = this.compositionEventConverter.convert(aggregateEvents);\n\n\t\tthis.domainEventPublisher.publish(domainEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { CompositionAggregateRepository } from '../composition.aggregate-repository';\nimport { CompositionEventConverter } from '../composition-event.converter';\nimport { CompositionChangeSortStatusCommand } from './composition-change-sort-status.command';\nimport { CompositionChangeSortStatusEvent } from './composition-change-sort-status.event';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly compositionAggregateRepository: CompositionAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate compositionEventConverter: CompositionEventConverter) {\n\t\tsuper(CompositionChangeSortStatusCommand);\n\t}\n\n\thandle(command: CompositionChangeSortStatusCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst compositionId = command.getCompositionId(),\n\t\t\tsortParams = command.getSortParams();\n\n\t\tconst composition = this.compositionAggregateRepository.getById(compositionId);\n\n\t\tcomposition.changeSort(sortParams);\n\n\t\tthis.compositionAggregateRepository.save(composition);\n\n\t\tconst columns = composition.getColumns();\n\n\t\tthis.domainEventPublisher.publish(new CompositionChangeSortStatusEvent(compositionId, columns));\n\t}\n\n}\n","import { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\n\n\nexport class ColumnField {\n\n\tprivate readonly fieldId: ColumnFieldId;\n\n\tprivate readonly accessor: ColumnFieldAccessor;\n\n\tprivate readonly dataType: DataType;\n\n\tconstructor(fieldId: ColumnFieldId,\n\t\t\t\taccessor: ColumnFieldAccessor,\n\t\t\t\tdataType: DataType) {\n\t\tthis.fieldId = fieldId;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\t}\n\n\tgetId(): ColumnFieldId {\n\t\treturn this.fieldId;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessor(entity);\n\t}\n\n\tgetAccessor(): ColumnFieldAccessor {\n\t\treturn this.accessor;\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { ColumnFieldId } from './column-field.id';\nimport { ColumnFieldAccessor } from './column-field-accessor';\nimport { ColumnField } from './column-field';\n\nimport { DataType } from '../../../../structure/command/field/data-type/data-type';\n\n\n@Injectable()\nexport class ColumnFieldFactory {\n\n\tcreate(columnFieldId: ColumnFieldId, accessor: ColumnFieldAccessor, dataType: DataType): ColumnField {\n\t\treturn new ColumnField(columnFieldId, accessor, dataType);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { ColumnsSetEvent } from '../../domain/composition/command/column/set-columns/columns-set.event';\nimport { CompositionContainerWidthSetEvent } from '../../domain/composition/command/width/set-container-width/composition-container-width-set.event';\n\n\n@Injectable()\nexport class CompositionEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tselectColumnsChanged(compositionId: CompositionId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tselectWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   ColumnsSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === compositionId.toString())\n\t\t\t\t   );\n\t}\n\n\tselectContainerWidthChanged(compositionId: CompositionId): Observable<number> {\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   CompositionContainerWidthSetEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.getAggregateId().equals(compositionId)),\n\t\t\t\t\t   map((event: CompositionContainerWidthSetEvent) => {\n\t\t\t\t\t\t   return event.getPayload();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((width: number) => !!width)\n\t\t\t\t   );\n\t}\n\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nexport class CompositionId extends AggregateId {\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n}\n","import { CompositionId } from './composition-id';\n\nexport const globalCompositionId = new CompositionId('-1');\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CompositionRepository } from '../../domain/composition/read/composition.repository';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../domain/composition/global-composition-id';\nimport { Composition } from '../../domain/composition/read/composition';\nimport { CellTemplateWithContext } from '../../domain/composition/read/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\n\n\n\n@Injectable()\nexport class CompositionReadModelService {\n\n\tconstructor(private compositionRepository: CompositionRepository) {\n\t}\n\n\tonWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getWidth())\n\t\t\t\t   );\n\t}\n\n\tonContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getContainerWidth())\n\t\t\t\t   );\n\t}\n\n\tonWidthForEachColumn(compositionId: CompositionId = globalCompositionId): Observable<Array<number>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getColumns().map(c => c.width))\n\t\t\t\t   );\n\t}\n\n\tonHeaderColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithContext>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getHeaderColumns())\n\t\t\t\t   );\n\t}\n\n\tonTemplateColumns(compositionId: CompositionId = globalCompositionId): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.getTemplateColumns()),\n\t\t\t\t   );\n\t}\n\n\tonResizeWidth(compositionId: CompositionId = globalCompositionId): Observable<boolean> {\n\t\treturn this.compositionRepository\n\t\t\t\t   .select(compositionId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((composition: Composition) => composition.isResizeWidthEnabled())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CompositionDispatcher } from '../../domain/composition/command/composition.dispatcher';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { globalCompositionId } from '../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../domain/composition/command/column/set-columns/column.params';\n\n\n\n@Injectable()\nexport class CompositionCommandService {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t}\n\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.init(compositionId);\n\t}\n\n\tsetColumns(params: Array<ColumnParams>, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setColumns(compositionId, params);\n\t}\n\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setWidth(compositionId, width);\n\t}\n\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setContainerWidth(compositionId, width);\n\t}\n\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tthis.compositionDispatcher.setResizeWidth(compositionId, enabled);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class SortToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly directions: Array<{fieldId: FieldId, direction: boolean}>) {\n\t\tsuper(aggregateId, 'ToggleSortEvent');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetDirections(): any {\n\t\treturn this.directions;\n\t}\n}\n","export class ColumnFieldId {\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string) {\n\t\tthis.id = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n}\n","import { ColumnFieldId } from '../column/field/column-field.id';\n\nexport class ChangeSortParams {\n\n\tconstructor(public readonly fieldId: ColumnFieldId,\n\t\t\t\tpublic readonly direction: boolean) {}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent, DomainEventHandler } from '@generic-ui/hermes';\n\nimport { SortToggledEvent } from '../../../structure/command/sort/toggle/sort-toggled.event';\n\nimport { CompositionDispatcher } from '../composition.dispatcher';\nimport { ColumnFieldId } from '../column/field/column-field.id';\nimport { ChangeSortParams } from './change-sort.params';\n\n\n@Injectable()\nexport class CompositionChangeSortStatusEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof SortToggledEvent) {\n\n\t\t\tconst compositionId = event.getCompositionId(),\n\t\t\t\tdirs = event.getDirections();\n\n\t\t\tlet params = dirs.map((dir: any) => {\n\n\t\t\t\tconst columnFieldId = new ColumnFieldId(dir.fieldId.getId());\n\n\t\t\t\treturn new ChangeSortParams(columnFieldId, dir.direction);\n\t\t\t});\n\n\t\t\tthis.compositionDispatcher.changeSort(compositionId, params);\n\t\t}\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from '../data-type/field';\n\n\nexport class FieldsInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>, // TODO merge\n\t\t\t\tprivate readonly fields: Array<Field>) {\n\t\tsuper(aggregateId, 'FieldsInitedEvent');\n\t}\n\n\tgetFields(): Array<Field> {\n\t\treturn this.fields;\n\t}\n}\n","import { ColumnConfig } from '../../../column.config';\nimport { ColumnField } from '../field/column-field';\n\nexport class ColumnParams {\n\n\tconstructor(private readonly column: ColumnConfig,\n\t\t\t\tprivate readonly field: ColumnField) {\n\t}\n\n\tgetColumn(): ColumnConfig {\n\t\treturn this.column;\n\t}\n\n\tgetField(): ColumnField {\n\t\treturn this.field;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEvent, DomainEventHandler } from '@generic-ui/hermes';\n\nimport { FieldsInitedEvent } from '../../../../structure/command/field/init/fields-inited.event';\nimport { Field } from '../../../../structure/command/field/data-type/field';\n\nimport { CompositionDispatcher } from '../../composition.dispatcher';\nimport { ColumnFieldFactory } from '../field/colum-field.factory';\nimport { ColumnFieldId } from '../field/column-field.id';\nimport { ColumnConfig } from '../../../column.config';\nimport { ColumnParams } from './column.params';\n\n\n@Injectable()\nexport class CompositionFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private compositionDispatcher: CompositionDispatcher,\n\t\t\t\tprivate readonly columnFieldFactory: ColumnFieldFactory) {\n\t\tsuper();\n\t}\n\n\thandle(event: DomainEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\t// TODO Move to different layer\n\t\t\tconst fields = event.getFields(),\n\t\t\t\tcolumnFieldIds = this.convertColumnFieldIds(fields),\n\t\t\t\tcolumns = event.columns,\n\t\t\t\tparams = this.convertColumns(columns, fields, columnFieldIds);\n\n\t\t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t\t}\n\t}\n\n\tprivate convertColumnFieldIds(fields: Array<Field>): Array<ColumnFieldId> {\n\n\t\tif (!fields) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn fields.map((field: Field) => new ColumnFieldId(field.getId().getId()));\n\t}\n\n\tprivate convertColumns(columns: Array<ColumnConfig>, fields: Array<Field>, columnFieldIds: Array<ColumnFieldId>): Array<ColumnParams> {\n\n\t\tif (!columns) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn columns.map((column: ColumnConfig, index: number) => {\n\n\t\t\tconst columnFieldId = columnFieldIds[index],\n\t\t\t\tfield = fields[index];\n\n\t\t\tconst columnField = this.columnFieldFactory.create(columnFieldId, field.getAccessorMethod(), field.getDataType());\n\n\t\t\treturn new ColumnParams(column, columnField);\n\t\t});\n\n\t}\n\n\t// handle(event: DomainEvent): void {\n\t//\n\t// \tif (event instanceof FieldsInitedEvent) {\n\t//\n\t// \t\t// TODO Move to different layer\n\t// \t\tlet fields = event.getFields();\n\t//\n\t// \t\tif (!!fields) {\n\t// \t\t\tfields = [];\n\t// \t\t}\n\t// \t\tconst columnFieldIds = fields.map((field: Field) => new ColumnFieldId(field.getId().getId()));\n\t//\n\t// \t\tlet columns = event.columns || [];\n\t//\n\t// \t\tconst params = columns.map((column: ColumnConfig, index: number) => {\n\t// \t\t\tconst columnField = new ColumnField(columnFieldIds[index], fields[index].getAccessorMethod());\n\t//\n\t// \t\t\treturn new ColumnParams(column, columnField);\n\t// \t\t});\n\t//\n\t// \t\tthis.compositionDispatcher.setColumns(event.compositionId, params);\n\t// \t}\n\t// }\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryCompositionCommandProviders, inMemoryCompositionProviders,\n\tinMemoryCompositionQueryProviders\n} from '../../infrastructure/in-memory/composition/in-memory.composition.providers';\nimport { CompositionAggregateFactory } from '../../domain/composition/command/composition.aggregate-factory';\nimport { CompositionDispatcher } from '../../domain/composition/command/composition.dispatcher';\nimport { InitCompositionCommandHandler } from '../../domain/composition/command/init/init-composition.command-handler';\nimport { SetColumnsCommandHandler } from '../../domain/composition/command/column/set-columns/set-columns.command-handler';\nimport { SetCompositionWidthCommandHandler } from '../../domain/composition/command/width/set-width/set-composition-width.command-handler';\nimport { SetCompositionResizeWidthCommandHandler } from '../../domain/composition/command/width/resize-width/set-composition-resize-width.command-handler';\nimport { SetCompositionContainerWidthCommandHandler } from '../../domain/composition/command/width/set-container-width/set-composition-container-width.command-handler';\nimport { CompositionChangeSortStatusCommandHandler } from '../../domain/composition/command/sort/composition-change-sort-status.command-handler';\nimport { ColumnEntityFactory } from '../../domain/composition/command/column/column-entity.factory';\nimport { CompositionEventConverter } from '../../domain/composition/command/composition-event.converter';\nimport { ColumnFieldFactory } from '../../domain/composition/command/column/field/colum-field.factory';\nimport { CompositionEventService } from './composition.event-service';\nimport { CompositionReadModelService } from './composition-read-model.service';\nimport { CompositionCommandService } from './composition.command-service';\nimport { CompositionConverter } from '../../domain/composition/composition.converter';\nimport { EditTemplateRepository } from '../../domain/composition/read/edit/edit-template.repository';\nimport { EditTemplateFactory } from '../../domain/composition/read/edit/edit-template.factory';\nimport { ViewTemplateFactory } from '../../domain/composition/read/view/view-template.factory';\nimport { ViewTemplateRepository } from '../../domain/composition/read/view/view-template.repository';\nimport { ColumnDefinitionFactory } from '../../domain/composition/read/definition/column-definition.factory';\nimport { CompositionChangeSortStatusEventHandler } from '../../domain/composition/command/sort/composition-change-sort-status.event-handler';\nimport { CompositionFieldsInitedEventHandler } from '../../domain/composition/command/column/set-columns/composition-fields-inited.event-handler';\n\n\nconst commandProviders = [\n\t...inMemoryCompositionCommandProviders,\n\tCompositionDispatcher,\n\tCompositionAggregateFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitCompositionCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetColumnsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionResizeWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetCompositionContainerWidthCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusCommandHandler,\n\t\tmulti: true\n\t},\n\tColumnEntityFactory,\n\tCompositionEventConverter,\n\tColumnFieldFactory\n];\n\nconst readProviders = [\n\t...inMemoryCompositionQueryProviders,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionFieldsInitedEventHandler,\n\t\tmulti: true\n\t}, \t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: CompositionChangeSortStatusEventHandler,\n\t\tmulti: true\n\t},\n\tColumnDefinitionFactory,\n\tViewTemplateRepository,\n\tViewTemplateFactory,\n\tEditTemplateFactory,\n\tEditTemplateRepository\n];\n\nexport const compositionProviders = [\n\t...inMemoryCompositionProviders,\n\t...commandProviders,\n\t...readProviders,\n\n\tCompositionConverter,\n\n\tCompositionCommandService,\n\tCompositionReadModelService,\n\tCompositionEventService\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport {\n\tFabricButtonComponent,\n\tFabricButtonModule,\n\tFabricCheckboxComponent,\n\tFabricCheckboxModule,\n\tFabricChipComponent,\n\tFabricChipModule,\n\tFabricInputComponent,\n\tFabricInputModule\n} from '@generic-ui/fabric';\nimport { ViewTemplatesComponent } from '../../domain/composition/read/view/view-templates.component';\nimport { NumberEditTemplateComponent } from '../../domain/composition/read/edit/template/number-edit-template.component';\nimport { StringEditTemplateComponent } from '../../domain/composition/read/edit/template/string-edit-template.component';\nimport { EditTemplatesComponent } from '../../domain/composition/read/edit/edit-templates.component';\nimport { BooleanEditTemplateComponent } from '../../domain/composition/read/edit/template/boolean-edit-template.component';\nimport { ColumnQueryComponent } from '../../ui/composition/column-query.component';\nimport { FunctionViewComponent } from '../../domain/composition/read/view/function-view.component';\nimport { compositionProviders } from './composition.providers';\n\n\nconst components = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tStringEditTemplateComponent,\n\tNumberEditTemplateComponent,\n\tBooleanEditTemplateComponent,\n\tColumnQueryComponent,\n\tFunctionViewComponent\n];\n\nconst exportDeclarations = [\n\tViewTemplatesComponent,\n\tEditTemplatesComponent,\n\tColumnQueryComponent,\n\n\tFabricChipModule,\n\tFabricCheckboxModule,\n\tFabricButtonModule,\n\tFabricInputModule,\n\tFunctionViewComponent\n];\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tReactiveFormsModule,\n\n\t\tFabricChipModule,\n\t\tFabricCheckboxModule,\n\t\tFabricButtonModule,\n\t\tFabricInputModule\n\t],\n\tproviders: [\n\t\t...compositionProviders\n\t],\n\tdeclarations: [\n\t\tcomponents\n\t],\n\texports: exportDeclarations,\n\tentryComponents: [\n\t\tViewTemplatesComponent,\n\t\tEditTemplatesComponent,\n\t\tFabricChipComponent,\n\t\tFabricCheckboxComponent,\n\t\tFabricButtonComponent,\n\t\tFabricInputComponent\n\t]\n})\nexport class CompositionModule {\n\n}\n","export class StructureIdGenerator {\n\n\tprivate increment = 0;\n\n\tgenerateId(): number {\n\t\tthis.increment++;\n\t\treturn this.increment;\n\t}\n\n}\n","export abstract class Logger {\n\n\tabstract warn(text: string): void;\n\n\tabstract error(text: string): void;\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class PageChangedAggregateEvent extends AggregateEvent{\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PageChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\nexport class PagesizeChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(structureId: StructureId) {\n\t\tsuper(structureId, 'PagesizeChangedAggregateEvent');\n\t}\n\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\nimport { PagingConfigWithId } from '../paging-config-with-id';\nimport { PagingConfig } from '../paging-config';\nimport { PageChangedAggregateEvent } from './page/page-changed.aggregate-event';\nimport { StructureId } from '../../structure-id';\nimport { PagesizeChangedAggregateEvent } from './pagesize/pagesize-changed.aggregate-event';\n\n\n\n// Aggregate\nexport class PagingAggregate {\n\n\tprivate readonly events: Array<AggregateEvent> = [];\n\n\t// TODO Remove\n\tstatic default(logger: Logger) {\n\t\treturn new PagingAggregate(\n\t\t\tfalse,\n\t\t\t1,\n\t\t\t25,\n\t\t\t[10, 25, 50, 100],\n\t\t\tfalse,\n\t\t\ttrue,\n\t\t\t0,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tprivate readonly logger: Logger;\n\n\tprivate constructor(private enabled: boolean,\n\t\t\t\t\t\tprivate page: number,\n\t\t\t\t\t\tprivate pageSize: number,\n\t\t\t\t\t\tprivate pageSizes: Array<number>,\n\t\t\t\t\t\tprivate pagerTop: boolean,\n\t\t\t\t\t\tprivate pagerBottom: boolean,\n\t\t\t\t\t\tprivate sourceSize: number,\n\t\t\t\t\t\tlogger: Logger) {\n\t\tthis.logger = logger;\n\t}\n\n\t// TODO Remove\n\tstatic fromConfig(paging: PagingConfigWithId, logger: Logger): PagingAggregate {\n\n\t\tconst defaultPagingDefinition = PagingAggregate.default(logger),\n\t\t\tenabled = paging.enabled || defaultPagingDefinition.isEnabled(),\n\t\t\tpage = paging.page || defaultPagingDefinition.getPage(),\n\t\t\tpageSize = paging.pageSize || defaultPagingDefinition.getPageSize(),\n\t\t\tpageSizes = paging.pageSizes || defaultPagingDefinition.getPageSizes(),\n\t\t\tpagerTop = paging.pagerTop || defaultPagingDefinition.isPagerTop(),\n\t\t\tpagerBottom = paging.pagerBottom || defaultPagingDefinition.isPagerBottom();\n\n\t\treturn new PagingAggregate(\n\t\t\tenabled,\n\t\t\tpage,\n\t\t\tpageSize,\n\t\t\tpageSizes,\n\t\t\tpagerTop,\n\t\t\tpagerBottom,\n\t\t\t0,\n\t\t\tlogger\n\t\t);\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn !this.enabled;\n\t}\n\n\tgetPage(): number {\n\t\treturn this.page;\n\t}\n\n\tgetPageSize(): number {\n\t\treturn this.pageSize;\n\t}\n\n\tgetPageSizes(): Array<number> {\n\t\treturn this.pageSizes;\n\t}\n\n\tisPagerTop(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerTop;\n\t}\n\n\tisPagerBottom(): boolean {\n\t\tif (this.isDisabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.pagerBottom;\n\t}\n\n\tgetSourceSize(): number {\n\t\treturn this.sourceSize;\n\t}\n\n\tchange(pagingConfig: PagingConfig): void {\n\n\t\tif (pagingConfig.enabled !== undefined) {\n\t\t\tthis.enabled = pagingConfig.enabled;\n\t\t}\n\n\t\tif (pagingConfig.page !== undefined) {\n\t\t\tthis.page = pagingConfig.page;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSize !== undefined) {\n\t\t\tthis.pageSize = pagingConfig.pageSize;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pageSizes !== undefined) {\n\t\t\tthis.pageSizes = pagingConfig.pageSizes;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerTop !== undefined) {\n\t\t\tthis.pagerTop = pagingConfig.pagerTop;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (pagingConfig.pagerBottom !== undefined) {\n\t\t\tthis.pagerBottom = pagingConfig.pagerBottom;\n\n\t\t\tif (pagingConfig.enabled === undefined) {\n\t\t\t\tthis.enabled = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.enabled === true &&\n\t\t\tpagingConfig.pagerTop === false &&\n\t\t\tpagingConfig.pagerBottom === false) {\n\t\t\tthis.pagerBottom = true;\n\n\t\t\tthis.logger.warn('Pagers cannot be turn off when paging is enabled.');\n\t\t}\n\n\t}\n\n\tsetSourceSize(size: number): void {\n\t\tthis.sourceSize = size;\n\t}\n\n\tnextPage(): void {\n\t\tlet nextPage = this.page;\n\n\t\tif (!this.isNextPageDisabled()) {\n\t\t\tnextPage += 1;\n\t\t}\n\n\t\tthis.page = nextPage;\n\t}\n\n\tprevPage(): void {\n\t\tlet prevPage = this.page;\n\n\t\tif (!this.isPrevPageDisabled()) {\n\t\t\tprevPage -= 1;\n\t\t}\n\n\t\tthis.page = prevPage;\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tif (this.pageSizes.find((ps: number) => ps === pageSize)) {\n\n\t\t\tthis.setPage(1);\n\t\t\tthis.setPageSize(pageSize);\n\t\t}\n\n\t\treturn this.events;\n\t}\n\n\tisNextPageDisabled(): boolean {\n\n\t\tif (this.sourceSize === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.page === Math.ceil(this.sourceSize / this.pageSize);\n\t}\n\n\tisPrevPageDisabled(): boolean {\n\t\treturn this.page === 1;\n\t}\n\n\tcalculateStart(): number {\n\n\t\tconst firstItem = 1 + ((this.page - 1) * this.pageSize);\n\n\t\tif (this.sourceSize < firstItem) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn firstItem;\n\t}\n\n\tcalculateEnd(): number {\n\n\t\tconst lastItem = this.page * this.pageSize;\n\n\t\tif (this.sourceSize < lastItem) {\n\t\t\treturn this.sourceSize;\n\t\t}\n\n\t\treturn lastItem;\n\t}\n\n\tsample(source: Array<any>): Array<any> {\n\n\t\tif (this.isDisabled()) {\n\t\t\treturn source;\n\t\t}\n\n\t\tlet start = this.calculateStart();\n\n\t\tif (start !== 0) {\n\t\t\tstart -= 1;\n\t\t}\n\n\t\treturn source.slice(start, this.calculateEnd());\n\t}\n\n\tprivate setPage(page: number): void {\n\t\tthis.page = page;\n\t\tthis.events.push(new PageChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n\tprivate setPageSize(pageSize: number): void {\n\t\tthis.pageSize = pageSize;\n\t\tthis.events.push(new PagesizeChangedAggregateEvent(new StructureId('TODO need to be changed')));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Logger } from '../../../../../common/cdk/logger/logger';\n\nimport { PagingAggregate } from './paging.aggregate';\nimport { PagingConfigWithId } from '../paging-config-with-id';\n\n\n@Injectable()\nexport class PagingAggregateFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreateDefault(): PagingAggregate {\n\t\treturn PagingAggregate.default(this.logger);\n\t}\n\n\tcreateFromConfig(config: PagingConfigWithId): PagingAggregate {\n\t\treturn PagingAggregate.fromConfig(config, this.logger);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { PagingCommandService } from '../../../ui-api/paging/paging-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingAggregateFactory } from '../../../domain/paging/command/paging.aggregate-factory';\nimport { PagingDispatcher } from '../../../domain/paging/command/paging.dispatcher';\nimport { PagingConfig } from '../../../domain/paging/paging-config';\n\n\n@Injectable()\nexport class LocalPagingCommandService extends PagingCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tprivate aggregateFactory: PagingAggregateFactory,\n\t\t\t\tpagingDispatcher: PagingDispatcher) {\n\t\tsuper(pagingDispatcher);\n\t}\n\n\tsetDefaultPaging(): void {\n\n\t\tconst defaultPaggingAggregate = this.aggregateFactory.createDefault();\n\n\t\tsuper.setPaging({\n\t\t\tpage: defaultPaggingAggregate.getPage(),\n\t\t\tpageSize: defaultPaggingAggregate.getPageSize(),\n\t\t\tpageSizes: defaultPaggingAggregate.getPageSizes()\n\t\t}, this.structureId);\n\t}\n\n\t@Override\n\tsetPaging(paging: PagingConfig): void {\n\t\tsuper.setPaging(paging, this.structureId);\n\t}\n\n\t@Override\n\tchangePageSize(pageSize: number): void {\n\t\tsuper.changePageSize(pageSize, this.structureId);\n\t}\n\n\t@Override\n\tnextPage(): void {\n\t\tsuper.nextPage(this.structureId);\n\t}\n\n\t@Override\n\tprevPage(): void {\n\t\tsuper.prevPage(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PagingReadModelService } from '../../../ui-api/paging/paging-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { PagingRepository } from '../../../domain/paging/read/paging.repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Paging } from '../../../domain/paging/read/paging';\n\n\n\n@Injectable()\nexport class LocalPagingReadModelService extends PagingReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tpagingRepository: PagingRepository) {\n\t\tsuper(pagingRepository);\n\t}\n\n\t@Override\n\tonPaging(): Observable<Paging> {\n\t\treturn super.onPaging(this.structureId);\n\t}\n\n\t@Override\n\tonSinglePaging(): Observable<Paging> {\n\t\treturn super.onPaging(this.structureId)\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttake(1)\n\t\t\t\t\t);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetSchemaCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly height: number) {\n\t\tsuper(structureId, 'SetSchemaCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaVerticalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaVerticalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetSchemaHorizontalGridCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetSchemaHorizontalGridCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\nimport { SchemaTheme } from '../../schema-theme';\n\nexport class SetSchemaThemeCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly theme: SchemaTheme) {\n\t\tsuper(structureId, 'SetSchemaThemeCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SchemaRowColoring } from '../../../schema-row-coloring';\n\nexport class SetRowColoringCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly coloring: SchemaRowColoring) {\n\t\tsuper(structureId, 'SetRowColoringCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaTopHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaTopHeaderCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class ChangeSchemaBottomHeaderCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'ChangeSchemaBottomHeaderCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SetSchemaCommand } from './set/set-schema.command';\nimport { SetSchemaVerticalGridCommand } from './grid/vertical/set-schema-vertical-grid.command';\nimport { SetSchemaHorizontalGridCommand } from './grid/horizontal/set-schema-horizontal-grid.command';\nimport { SchemaTheme } from '../schema-theme';\nimport { SetSchemaThemeCommand } from './theme/set-schema-theme.command';\nimport { globalStructureId } from '../../global-structure-id';\nimport { SchemaRowColoring } from '../schema-row-coloring';\nimport { SetRowColoringCommand } from './coloring/set/set-row-coloring.command';\nimport { ChangeSchemaTopHeaderCommand } from './column-header/top/change-schema-top-header.command';\nimport { ChangeSchemaBottomHeaderCommand } from './column-header/bottom/change-schema-bottom-header.command';\n\n\n@Injectable()\nexport class SchemaDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetSchema(structureId: StructureId, height: number): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaCommand(structureId, height));\n\t}\n\n\tchangeVerticalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaVerticalGridCommand(structureId, enabled));\n\t}\n\n\tchangeHorizontalGrid(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaHorizontalGridCommand(structureId, enabled));\n\t}\n\n\tsetTheme(structureId: StructureId, theme: SchemaTheme): void {\n\t\tthis.commandDispatcher.dispatch(new SetSchemaThemeCommand(structureId, theme));\n\t}\n\n\tsetRowColoring(structureId: StructureId = globalStructureId, coloring: SchemaRowColoring): void {\n\t\tthis.commandDispatcher.dispatch(new SetRowColoringCommand(structureId, coloring));\n\t}\n\n\tchangeTopHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaTopHeaderCommand(structureId, enabled));\n\t}\n\n\tchangeBottomHeader(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new ChangeSchemaBottomHeaderCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from './schema';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class SchemaRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { SchemaRepository } from '../../domain/schema/read/schema-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Schema } from '../../domain/schema/read/schema';\nimport { SchemaColumnHeader } from '../../domain/schema/read/schema-column-header';\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\n\n\n@Injectable()\nexport class SchemaReadModelService {\n\n\tconstructor(private schemaRepository: SchemaRepository) {\n\t}\n\n\tonSchema(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.schemaRepository.select(structureId);\n\t}\n\n\tonSingleSchema(structureId: StructureId = globalStructureId): Observable<Schema> {\n\t\treturn this.onSchema(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   take(1)\n\t\t\t\t   );\n\t}\n\n\tonHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tonContainerHeight(structureId: StructureId = globalStructureId): Observable<number> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getContainerHeight();\n\t\t\t\t\t   }),\n\t\t\t\t\t   filter((height: number) => height !== undefined)\n\t\t\t\t   );\n\t}\n\n\tonCssClasses(structureId: StructureId = globalStructureId): Observable<SchemaCssClass> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getCssClasses();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn this.schemaRepository\n\t\t\t\t   .select(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((schema: Schema) => {\n\t\t\t\t\t\t   return schema.getColumnHeader();\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, map, take, takeUntil } from 'rxjs/operators';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SchemaReadModelService } from './schema-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\nimport { SchemaColumnHeader } from '../../domain/schema/read/schema-column-header';\n\n\n@Injectable()\nexport class SchemaCommandService implements OnDestroy {\n\n\tprivate unsubscribe$ = new Subject<void>();\n\n\tconstructor(private schemaDispatcher: SchemaDispatcher,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService) {\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete()\n\t}\n\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tsetHeight(height: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setSchema(structureId, height);\n\t}\n\n\tchangeVerticalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeVerticalGrid(structureId, enabled);\n\t}\n\n\tchangeHorizontalGrid(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeHorizontalGrid(structureId, enabled);\n\t}\n\n\tsetTheme(theme: SchemaTheme, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setTheme(structureId, theme);\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.setRowColoring(structureId, coloring);\n\t}\n\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeTopHeader(structureId, enabled);\n\t}\n\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaDispatcher.changeBottomHeader(structureId, enabled);\n\t}\n\n\ttoggleVerticalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.verticalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeVerticalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleHorizontalGrid(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((css: SchemaCssClass) => css.horizontalGrid),\n\t\t\t\tfilter((grid: boolean) => grid !== undefined),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((grid: boolean) => {\n\t\t\t\tthis.changeHorizontalGrid(!grid, structureId);\n\t\t\t});\n\t}\n\n\ttoggleTopHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isTopHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeTopHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n\ttoggleBottomHeader(structureId: StructureId = globalStructureId): void {\n\t\tthis.schemaQueryService\n\t\t\t.onColumnHeader(structureId)\n\t\t\t.pipe(\n\t\t\t\tmap((columnHeader: SchemaColumnHeader) => columnHeader.isBottomHeaderEnabled()),\n\t\t\t\ttake(1),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.changeBottomHeader(!enabled, structureId);\n\t\t\t});\n\t}\n\n}\n","export enum SchemaRowColoring {\n\tNONE,\n\tEVEN,\n\tODD\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaCommandService } from '../../../ui-api/schema/schema-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaReadModelService } from '../../../ui-api/schema/schema-read-model.service';\nimport { SchemaDispatcher } from '../../../domain/schema/command/schema.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaTheme } from '../../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class LocalSchemaCommandService extends SchemaCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaQueryService: SchemaReadModelService,\n\t\t\t\tschemaDispatcher: SchemaDispatcher) {\n\t\tsuper(schemaDispatcher, schemaQueryService);\n\t}\n\n\tsetDefaultSchema(): void {\n\t\tsuper.setSchema(Number.MAX_SAFE_INTEGER, this.structureId);\n\t}\n\n\t@Override\n\tsetSchema(height: number, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSchema(height, this.structureId);\n\t}\n\n\t@Override\n\tsetHeight(height: number): void {\n\t\tsuper.setHeight(height, this.structureId);\n\t}\n\n\t@Override\n\tchangeVerticalGrid(enabled: boolean): void {\n\t\tsuper.changeVerticalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeHorizontalGrid(enabled: boolean): void {\n\t\tsuper.changeHorizontalGrid(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleVerticalGrid(): void {\n\t\tsuper.toggleVerticalGrid(this.structureId);\n\t}\n\n\t@Override\n\ttoggleHorizontalGrid(): void {\n\t\tsuper.toggleHorizontalGrid(this.structureId);\n\t}\n\n\t@Override\n\tsetTheme(theme: SchemaTheme): void {\n\t\tsuper.setTheme(theme, this.structureId);\n\t}\n\n\t@Override\n\tsetRowColoring(coloring: SchemaRowColoring, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setRowColoring(coloring, this.structureId);\n\t}\n\n\t@Override\n\tchangeTopHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeTopHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\tchangeBottomHeader(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tsuper.changeBottomHeader(enabled, this.structureId);\n\t}\n\n\t@Override\n\ttoggleTopHeader(): void {\n\t\tsuper.toggleTopHeader(this.structureId);\n\t}\n\n\t@Override\n\ttoggleBottomHeader(): void {\n\t\tsuper.toggleBottomHeader(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SchemaReadModelService } from '../../../ui-api/schema/schema-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SchemaRepository } from '../../../domain/schema/read/schema-repository';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { Schema } from '../../../domain/schema/read/schema';\nimport { SchemaCssClass } from '../../../domain/schema/read/schema-css-class';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { SchemaColumnHeader } from '../../../domain/schema/read/schema-column-header';\n\n\n\n@Injectable()\nexport class LocalSchemaReadModelService extends SchemaReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tschemaRepository: SchemaRepository) {\n\t\tsuper(schemaRepository);\n\t}\n\n\t@Override\n\tonSchema(): Observable<Schema> {\n\t\treturn super.onSchema(this.structureId);\n\t}\n\n\t@Override\n\tonHeight(): Observable<number> {\n\t\treturn super.onHeight(this.structureId);\n\t}\n\n\t@Override\n\tonContainerHeight(): Observable<number> {\n\t\treturn super.onContainerHeight(this.structureId);\n\t}\n\n\t@Override\n\tonSingleSchema(): Observable<Schema> {\n\t\treturn super.onSingleSchema(this.structureId);\n\t}\n\n\t@Override\n\tonCssClasses(): Observable<SchemaCssClass> {\n\t\treturn super.onCssClasses(this.structureId);\n\t}\n\n\t@Override\n\tonColumnHeader(structureId: StructureId = globalStructureId): Observable<SchemaColumnHeader> {\n\t\treturn super.onColumnHeader(this.structureId);\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class SetFormationCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly payload?: any) {\n\t\tsuper(structureId, 'SetFormationCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class ToggleSelectedRowCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly selectedRow: string) {\n\t\tsuper(structureId, 'ToggleSelectedRowCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../structure-id';\nimport { SetFormationCommand } from './set/set-formation.command';\nimport { ToggleSelectedRowCommand } from './toggle/toggle-selected-row.command';\n\n@Injectable()\nexport class FormationDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetDefault(structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetFormationCommand(structureId));\n\t}\n\n\ttoggleSelectedRow(structureId: StructureId, selectedRow: string): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSelectedRowCommand(structureId, selectedRow));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\n\n\n@Injectable()\nexport class FormationCommandService {\n\n\tconstructor(private formationDispatcher: FormationDispatcher) {\n\t}\n\n\tsetDefaultFormation(structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.setDefault(structureId);\n\t}\n\n\ttoggleSelectedRow(selectedRow: string, structureId: StructureId = globalStructureId): void {\n\t\tthis.formationDispatcher.toggleSelectedRow(structureId, selectedRow);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { FormationCommandService } from '../../../ui-api/formation/formation-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationDispatcher } from '../../../domain/formation/command/formation.dispatcher';\n\n\n@Injectable()\nexport class LocalFormationCommandService extends FormationCommandService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationDispatcher: FormationDispatcher) {\n\t\tsuper(formationDispatcher);\n\t}\n\n\tsetDefault(): void {\n\t\tsuper.setDefaultFormation(this.structureId);\n\t}\n\n\t@Override\n\ttoggleSelectedRow(selectedRow: string): void {\n\t\tsuper.toggleSelectedRow(selectedRow, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Formation } from './formation';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class FormationRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tonFormation(structureId: StructureId): Observable<Formation> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getFormation())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { FormationRepository } from '../../domain/formation/read/formation-repository';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { SelectedRowsList } from '../../domain/formation/read/selected-rows/selected-rows-list';\nimport { Formation } from '../../domain/formation/read/formation';\n\n\n@Injectable()\nexport class FormationReadModelService {\n\n\tconstructor(private formationRepository: FormationRepository) {\n\t}\n\n\tonSelectedRows(structureId: StructureId = globalStructureId): Observable<SelectedRowsList> {\n\t\treturn this.formationRepository\n\t\t\t\t   .onFormation(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((formation: Formation) => formation.getSelectedRows())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { FormationReadModelService } from '../../../ui-api/formation/formation-read-model.service';\nimport { FormationRepository } from '../../../domain/formation/read/formation-repository';\nimport { SelectedRowsList } from '../../../domain/formation/read/selected-rows/selected-rows-list';\n\n\n@Injectable()\nexport class LocalFormationReadModelService extends FormationReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tformationRepository: FormationRepository) {\n\t\tsuper(formationRepository);\n\t}\n\n\t@Override\n\tonSelectedRows(): Observable<SelectedRowsList> {\n\t\treturn super.onSelectedRows(this.structureId);\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FilterConfig } from '../../../../../ui-api/structure/filter/filter-config';\n\nexport class StructureSetConfigFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly filterConfig: FilterConfig) {\n\t\tsuper(structureId, 'StructureSetConfigFilterCommand');\n\t}\n\n\tgetConfig(): FilterConfig {\n\t\treturn this.filterConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class StructureToggleFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly fieldId: FieldId,\n\t\t\t\tpublic readonly externalFilterId: string,\n\t\t\t\tpublic readonly filterValue: string) {\n\t\tsuper(structureId, 'StructureToggleFilterCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { FilterConfig } from './filter-config';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetConfigFilterCommand } from '../../../domain/structure/command/filter/config/structure.set-config-filter.command';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { StructureToggleFilterCommand } from '../../../domain/structure/command/filter/toggle/structure.toggle-filter.command';\n\n\n@Injectable()\nexport class StructureFilterCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {}\n\n\tsetFilteringEnabled(config: FilterConfig, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigFilterCommand(structureId, config));\n\t}\n\n\taddFilter(fieldId: FieldId, externalFieldId: string, filterValue: string, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureToggleFilterCommand(structureId, fieldId, externalFieldId, filterValue));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../structure-id';\n\n\nexport class SourceSetLoadingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SourceSetLoadingCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetOriginCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly items: Array<any> = []) {\n\t\tsuper(structureId, 'SetOriginCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemParams } from './structure.edit-source-item.params';\nimport { StructureId } from '../../../../structure-id';\n\nexport class StructureEditSourceItemCommand extends Command {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly params: StructureEditSourceItemParams) {\n\t\tsuper(structureId, 'StructureEditSourceItemCommand');\n\t}\n\n\tgetParams(): StructureEditSourceItemParams {\n\t\treturn this.params;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../structure-id';\nimport { SourceSetLoadingCommand } from './loading/source-set-loading.command';\nimport { SetOriginCommand } from './origin/set-origin/set-origin.command';\nimport { StructureEditSourceItemParams } from './origin/edit/structure.edit-source-item.params';\nimport { StructureEditSourceItemCommand } from './origin/edit/structure.edit-source-item.command';\n\n\n@Injectable()\nexport class SourceDispatcher {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetLoading(structureId: StructureId, enabled: boolean): void {\n\t\tthis.commandDispatcher.dispatch(new SourceSetLoadingCommand(structureId, enabled));\n\t}\n\n\tsetOrigin(structureId: StructureId, items: Array<any>): void {\n\t\tthis.commandDispatcher.dispatch(new SetOriginCommand(structureId, items));\n\t}\n\n\teditItem(structureId: StructureId, params: StructureEditSourceItemParams): void {\n\t\tthis.commandDispatcher.dispatch(new StructureEditSourceItemCommand(structureId, params));\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\n\nexport class InitStructureCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId) {\n\t\tsuper(structureId, 'InitStructureCommand');\n\t}\n\n}\n","\nimport { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\nexport class SetVerticalScrollEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'SetVerticalScrollEnabledCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class SetScrollPositionCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly position: number) {\n\t\tsuper(structureId, 'SetScrollPositionCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SortingConfig } from '../../../../../ui-api/structure/sorting-config';\n\n\nexport class SetSortingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly sortingConfig: SortingConfig) {\n\t\tsuper(structureId, 'SetSortingCommand');\n\t}\n\n\tgetSortingConfig(): SortingConfig {\n\t\treturn this.sortingConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\n\n\nexport class ToggleSortCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tprivate readonly fieldId: FieldId) {\n\t\tsuper(structureId, 'ToggleSortCommand');\n\t}\n\n\tgetCompositionId(): CompositionId {\n\t\treturn this.compositionId;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.fieldId;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { QuickFiltersConfig } from '../../../../../ui-api/structure/filter/quick-filters.config';\n\n\n\nexport class StructureSetConfigQuickFilterCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly quickFiltersConfig: QuickFiltersConfig) {\n\t\tsuper(structureId, 'StructureSetConfigQuickFilterCommand');\n\t}\n\n\tgetConfig(): QuickFiltersConfig {\n\t\treturn this.quickFiltersConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { SearchConfig } from '../../../../../ui-api/structure/search/search-config';\n\n\nexport class StructureSetConfigSearchingCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tprivate readonly searchConfig: SearchConfig) {\n\t\tsuper(structureId, 'StructureSetConfigSearchingCommand');\n\t}\n\n\tgetConfig(): SearchConfig {\n\t\treturn this.searchConfig;\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { ColumnConfig } from '../../../../composition/column.config';\n\n\nexport class InitFieldsCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly compositionId: CompositionId,\n\t\t\t\tpublic readonly columns: Array<ColumnConfig>) {\n\t\tsuper(structureId, 'InitFieldsCommand');\n\t}\n\n}\n","import { Command } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\nexport class StructureSetSearchPhraseCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly phrase: string) {\n\t\tsuper(structureId, 'StructureSetSearchPhraseCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureFilterCommandService } from './filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { InitStructureCommand } from '../../domain/structure/command/init/init-structure.command';\nimport { SetVerticalScrollEnabledCommand } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command';\nimport { SetScrollPositionCommand } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command';\nimport { SortingConfig } from './sorting-config';\nimport { SetSortingCommand } from '../../domain/structure/command/sort/set/set-sorting.command';\nimport { FieldId } from '../../domain/structure/command/field/data-type/field.id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { ToggleSortCommand } from '../../domain/structure/command/sort/toggle/toggle-sort.command';\nimport { FilterConfig } from './filter/filter-config';\nimport { QuickFiltersConfig } from './filter/quick-filters.config';\nimport { StructureSetConfigQuickFilterCommand } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command';\nimport { SearchConfig } from './search/search-config';\nimport { StructureSetConfigSearchingCommand } from '../../domain/structure/command/search/config/structure.set-config-searching.command';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { InitFieldsCommand } from '../../domain/structure/command/field/init/init-fields.command';\nimport { StructureSetSearchPhraseCommand } from '../../domain/structure/command/search/set/structure.set-search-phrase.command';\n\n\n@Injectable()\nexport class StructureCommandService {\n\n\tconstructor(private readonly commandDispatcher: CommandDispatcher,\n\t\t\t\tprivate readonly structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate readonly sourceDispatcher: SourceDispatcher) {\n\t}\n\n\tinit(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitStructureCommand(structureId));\n\t}\n\n\tenableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, true));\n\t}\n\n\tdisableVerticalScroll(structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetVerticalScrollEnabledCommand(structureId, false));\n\t}\n\n\tsetScrollPosition(position: number, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetScrollPositionCommand(structureId, position));\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new SetSortingCommand(structureId, config));\n\t}\n\n\ttoggleSort(fieldId: FieldId, compositionId?: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new ToggleSortCommand(structureId, compositionId, fieldId));\n\t}\n\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.structureFilterCommandService.setFilteringEnabled(config, structureId);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigQuickFilterCommand(structureId, config));\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>, compositionId: CompositionId, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new InitFieldsCommand(structureId, compositionId, columns));\n\t}\n\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetConfigSearchingCommand(structureId, config));\n\t}\n\n\tsearch(phrase: string, structureId: StructureId = globalStructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetSearchPhraseCommand(structureId, phrase));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\n\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { Override } from '../../../../../common/cdk/decorators';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { globalStructureId } from '../../../domain/global-structure-id';\nimport { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\nimport { ColumnConfig } from '../../../domain/composition/column.config';\n\n\n@Injectable()\nexport class LocalStructureCommandService extends StructureCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tprivate readonly compositionId: CompositionId,\n\t\t\t\tcommandDispatcher: CommandDispatcher,\n\t\t\t\tstructureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tsourceDispatcher: SourceDispatcher) {\n\t\tsuper(commandDispatcher, structureFilterCommandService, sourceDispatcher);\n\t}\n\n\t@Override\n\tinit(): void {\n\t\tsuper.init(this.structureId);\n\t}\n\n\t@Override\n\tenableVerticalScroll(): void {\n\t\tsuper.enableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tdisableVerticalScroll(): void {\n\t\tsuper.disableVerticalScroll(this.structureId);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetScrollPosition(position: number): void {\n\t\tsuper.setScrollPosition(position, this.structureId);\n\t}\n\n\t@Override\n\tsetSortingConfig(config: SortingConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSortingConfig(config, this.structureId);\n\t}\n\n\t@Override\n\ttoggleSort(fieldId: FieldId): void {\n\t\tsuper.toggleSort(fieldId, this.compositionId, this.structureId);\n\t}\n\n\t@Override\n\tsetFilterConfig(config: FilterConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setFilterConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetQuickFiltersConfig(config: QuickFiltersConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setQuickFiltersConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tsetSearchingConfig(config: SearchConfig, structureId: StructureId = globalStructureId): void {\n\t\tsuper.setSearchingConfig(config, this.structureId);\n\t}\n\n\t@Override\n\tinitFields(columns: Array<ColumnConfig>): void {\n\t\tsuper.initFields(columns, this.compositionId, this.structureId);\n\t}\n\n\t@Override\n\tsearch(phrase: string): void {\n\t\tsuper.search(phrase, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../domain/structure/read/structure.repository';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { Structure } from '../../domain/structure/read/structure';\n\n\n@Injectable()\nexport class StructureReadModelService {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tonStructure(aggregateId: AggregateId = globalStructureId): Observable<Structure> {\n\t\treturn this.structureRepository.onStructure(aggregateId);\n\t}\n\n\tonVerticalScrollEnabled(aggregateId: AggregateId = globalStructureId): Observable<boolean> {\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(aggregateId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((structure: Structure) => structure.isVerticalScrollEnabled()),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { StructureReadModelService } from '../../../ui-api/structure/structure-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { Structure } from '../../../domain/structure/read/structure';\n\n\n@Injectable()\nexport class LocalStructureReadModelService extends StructureReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository) {\n\t\tsuper(structureRepository);\n\t}\n\n\t@Override\n\tonStructure(): Observable<Structure> {\n\t\treturn super.onStructure(this.structureId);\n\t}\n\n\t@Override\n\tonVerticalScrollEnabled(): Observable<boolean> {\n\t\treturn super.onVerticalScrollEnabled(this.structureId)\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateArchive } from '@generic-ui/hermes';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n\n@Injectable()\nexport class StructureFieldUiArchive extends AggregateArchive<Array<StructureFieldUiModel>> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiRepository {\n\n\tconstructor(private structureFieldUiArchive: StructureFieldUiArchive) {\n\t}\n\n\tonFields(structureId: StructureId): Observable<Array<StructureFieldUiModel>> {\n\t\treturn this.structureFieldUiArchive.when(structureId);\n\t}\n\n}\n","import { ColumnFieldId } from '../../../../composition/command/column/field/column-field.id';\n\nexport class StructureEditSourceItemParams {\n\n\tconstructor(private readonly itemId: string,\n\t\t\t\tprivate readonly columnFieldId: ColumnFieldId, // TODO Rethink\n\t\t\t\tprivate readonly value: any) {}\n\n\tgetItemId(): string {\n\t\treturn this.itemId;\n\t}\n\n\tgetColumnFieldId(): ColumnFieldId {\n\t\treturn this.columnFieldId;\n\t}\n\n\tgetValue(): any {\n\t\treturn this.value;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { zip } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nimport { Reactive } from '../../../../common/cdk/reactive';\n\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../structure/field/structure.field.ui-repository';\nimport { SourceReadModelService } from './source-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { globalStructureId } from '../../domain/global-structure-id';\nimport { StructureEditSourceItemParams } from '../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n\n@Injectable()\nexport class SourceCommandService extends Reactive {\n\n\tconstructor(private sourceDispatcher: SourceDispatcher,\n\t\t\t\tprivate structureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService) {\n\t\tsuper();\n\t}\n\n\tsetOrigin(items: Array<any>, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setOrigin(structureId, items);\n\t}\n\n\tsetLoading(enabled: boolean, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.setLoading(structureId, enabled);\n\t}\n\n\teditItem(params: StructureEditSourceItemParams, structureId: StructureId = globalStructureId): void {\n\t\tthis.sourceDispatcher.editItem(structureId, params);\n\t}\n\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any, structureId: StructureId = globalStructureId): void {\n\n\t\tconst itemId$ = this.sourceQueryService\n\t\t\t\t\t\t\t.onSingleEntities()\n\t\t\t\t\t\t\t.pipe(\n\t\t\t\t\t\t\t\tmap((entities: Array<ItemEntity>) => {\n\t\t\t\t\t\t\t\t\treturn entities[itemIndex].getId();\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\n\t\tconst fieldId$ = this.structureFieldUiRepository\n\t\t\t\t\t\t\t .onFields(structureId);\n\n\t\tzip(itemId$, fieldId$)\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((array: Array<any>) => {\n\n\t\t\t\tconst itemId = array[0],\n\t\t\t\t\tfields = array[1];\n\n\t\t\t\tthis.editItem(\n\t\t\t\t\tnew StructureEditSourceItemParams(itemId, fields[fieldIndex], value),\n\t\t\t\t\tstructureId\n\t\t\t\t);\n\t\t\t});\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceCommandService } from '../../../ui-api/source/source-command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { SourceDispatcher } from '../../../domain/source/command/source.dispatcher';\nimport { StructureFieldUiRepository } from '../../../ui-api/structure/field/structure.field.ui-repository';\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\n\n\n@Injectable()\nexport class LocalSourceCommandService extends SourceCommandService {\n\n\tconstructor(private readonly structureId: StructureId,\n\t\t\t\tsourceDispatcher: SourceDispatcher,\n\t\t\t\tstructureFieldUiRepository: StructureFieldUiRepository,\n\t\t\t\tsourceQueryService: SourceReadModelService) {\n\t\tsuper(sourceDispatcher, structureFieldUiRepository, sourceQueryService);\n\t}\n\n\t@Override\n\tsetOrigin(items: Array<any>): void {\n\t\tsuper.setOrigin(items, this.structureId);\n\t}\n\n\t@Override\n\tsetLoading(enabled: boolean): void {\n\t\tsuper.setLoading(enabled, this.structureId);\n\t}\n\n\t@Override\n\teditItem(params: StructureEditSourceItemParams): void {\n\t\tsuper.editItem(params, this.structureId);\n\t}\n\n\t@Override\n\teditItemByIndex(itemIndex: number, fieldIndex: number, value: any): void {\n\t\tsuper.editItemByIndex(itemIndex, fieldIndex, value, this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { SourceReadModelService } from '../../../ui-api/source/source-read-model.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { StructureSourceOriginRepository } from '../../../domain/source/read/origin/structure.source-origin.repository';\nimport { ItemEntity } from '../../../domain/source/item.entity';\nimport { StructurePreparedItemsRepository } from '../../../domain/source/read/prepared/structure.prepared-items.repository';\n\n\n@Injectable()\nexport class LocalSourceReadModelService extends SourceReadModelService {\n\n\tconstructor(private structureId: StructureId,\n\t\t\t\tstructureRepository: StructureRepository,\n\t\t\t\tstructurePreparedItemsRepository: StructurePreparedItemsRepository,\n\t\t\t\tstructureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper(structureRepository, structurePreparedItemsRepository, structureSourceOriginRepository);\n\t}\n\n\t@Override\n\tonEntities(): Observable<Array<ItemEntity>> {\n\t\treturn super.onEntities(this.structureId);\n\t}\n\n\t@Override\n\tonEntitiesSize(): Observable<number> {\n\t\treturn super.onEntitiesSize(this.structureId);\n\t}\n\n\t@Override\n\tonOriginSize(): Observable<number> {\n\t\treturn super.onOriginSize(this.structureId);\n\t}\n\n\t@Override\n\tonSingleEntities(): Observable<Array<ItemEntity>> {\n\t\treturn super.onSingleEntities(this.structureId);\n\t}\n\n\t@Override\n\tonLoading(): Observable<boolean> {\n\t\treturn super.onLoading(this.structureId);\n\t}\n\n\t@Override\n\tonPreparedEntities(): Observable<boolean> {\n\t\treturn super.onPreparedEntities(this.structureId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionCommandService } from '../../../ui-api/composition/composition.command-service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionDispatcher } from '../../../domain/composition/command/composition.dispatcher';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\nimport { ColumnParams } from '../../../domain/composition/command/column/set-columns/column.params';\n\n\n@Injectable()\nexport class LocalCompositionCommandService extends CompositionCommandService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionDispatcher: CompositionDispatcher) {\n\t\tsuper(compositionDispatcher);\n\t}\n\n\t@Override\n\tinit(compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.init(this.compositionId);\n\t}\n\n\t@Override\n\tsetColumns(params: Array<ColumnParams>): void {\n\t\tsuper.setColumns(params, this.compositionId);\n\t}\n\n\t@Override\n\tsetWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetContainerWidth(width: number, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setContainerWidth(width, this.compositionId);\n\t}\n\n\t@Override\n\tsetResizeWidth(enabled: boolean, compositionId: CompositionId = globalCompositionId): void {\n\t\tsuper.setResizeWidth(enabled, this.compositionId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Override } from '../../../../../common/cdk/decorators';\n\nimport { CompositionReadModelService } from '../../../ui-api/composition/composition-read-model.service';\nimport { CompositionId } from '../../../domain/composition/composition-id';\nimport { CompositionRepository } from '../../../domain/composition/read/composition.repository';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { globalCompositionId } from '../../../domain/composition/global-composition-id';\n\n\n\n@Injectable()\nexport class LocalCompositionReadModelService extends CompositionReadModelService {\n\n\tconstructor(private readonly compositionId: CompositionId,\n\t\t\t\tcompositionRepository: CompositionRepository) {\n\t\tsuper(compositionRepository);\n\t}\n\n\t@Override\n\tonHeaderColumns(): Observable<Array<CellTemplateWithContext>> {\n\t\treturn super.onHeaderColumns(this.compositionId);\n\t}\n\n\t@Override\n\tonTemplateColumns(): Observable<Array<CellTemplateWithAccessor>> {\n\t\treturn super.onTemplateColumns(this.compositionId);\n\t}\n\n\t@Override\n\tonWidthForEachColumn(): Observable<Array<number>> {\n\t\treturn super.onWidthForEachColumn(this.compositionId);\n\t}\n\n\t@Override\n\tonWidth(): Observable<number> {\n\t\treturn super.onWidth(this.compositionId);\n\t}\n\n\t@Override\n\tonContainerWidth(compositionId: CompositionId = globalCompositionId): Observable<number> {\n\t\treturn super.onContainerWidth(this.compositionId);\n\t}\n\n\t@Override\n\tonResizeWidth(): Observable<boolean> {\n\t\treturn super.onResizeWidth(this.compositionId);\n\t}\n\n}\n","import { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { LocalPagingCommandService } from './paging/local-paging-command.service';\nimport { LocalPagingReadModelService } from './paging/local-paging-read-model.service';\nimport { SchemaCommandService } from '../../ui-api/schema/schema-command.service';\nimport { LocalSchemaCommandService } from './schema/local-schema-command.service';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { LocalSchemaReadModelService } from './schema/local-schema-read-model.service';\nimport { FormationCommandService } from '../../ui-api/formation/formation-command.service';\nimport { LocalFormationCommandService } from './formation/local-formation-command.service';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { LocalFormationReadModelService } from './formation/local-formation-read-model.service';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { LocalStructureCommandService } from './structure/local-structure-command.service';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { LocalStructureReadModelService } from './structure/local-structure-read-model.service';\nimport { SourceCommandService } from '../../ui-api/source/source-command.service';\nimport { LocalSourceCommandService } from './source/local-source-command.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\nimport { LocalSourceReadModelService } from './source/local-source-read-model.service';\nimport { LocalCompositionCommandService } from './composition/local-composition-command.service';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\nimport { LocalCompositionReadModelService } from './composition/local-composition-read-model.service';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\n\nexport const localProviders = [\n\t{ provide: PagingCommandService, useClass: LocalPagingCommandService},\n\t{ provide: PagingReadModelService, useClass: LocalPagingReadModelService},\n\t{ provide: SchemaCommandService, useClass: LocalSchemaCommandService},\n\t{ provide: SchemaReadModelService, useClass: LocalSchemaReadModelService},\n\t{ provide: FormationCommandService, useClass: LocalFormationCommandService},\n\t{ provide: FormationReadModelService, useClass: LocalFormationReadModelService},\n\t{ provide: StructureCommandService, useClass: LocalStructureCommandService},\n\t{ provide: StructureReadModelService, useClass: LocalStructureReadModelService},\n\t{ provide: SourceCommandService, useClass: LocalSourceCommandService},\n\t{ provide: SourceReadModelService, useClass: LocalSourceReadModelService},\n\n\t{ provide: CompositionCommandService, useClass: LocalCompositionCommandService },\n\t{ provide: CompositionReadModelService, useClass: LocalCompositionReadModelService},\n];\n","import { ElementRef, Injectable, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { SchemaCssClass } from '../../domain/schema/read/schema-css-class';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\n\n\n@Injectable()\nexport class SchemaCssClassManager implements OnDestroy {\n\n\tprivate readonly VERTICAL_GRID_CLASS_NAME = 'gui-vertical-grid';\n\n\tprivate readonly HORIZONTAL_GRID_CLASS_NAME = 'gui-horizontal-grid';\n\n\tprivate readonly THEME_FABRIC_CLASS_NAME = 'gui-fabric';\n\n\tprivate readonly THEME_MATERIAL_CLASS_NAME = 'gui-material';\n\n\tprivate readonly THEME_LIGHT_CLASS_NAME = 'gui-light';\n\n\tprivate readonly THEME_DARK_CLASS_NAME = 'gui-dark';\n\n\tprivate readonly ROW_COLORING_ODD = 'gui-rows-odd';\n\n\tprivate readonly ROW_COLORING_EVEN = 'gui-rows-even';\n\n\tprivate readonly renderer: Renderer2;\n\n\tprivate cssClass: SchemaCssClass = null;\n\n\tprivate cssHostRef: ElementRef;\n\n\tprivate unsubscribe$ = new Subject();\n\n\tconstructor(private rendererFactory2: RendererFactory2,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService) {\n\t\tthis.renderer = this.rendererFactory2.createRenderer(null, null);\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n\tinit(elementRef: ElementRef, structureId: StructureId): void {\n\n\t\tthis.cssHostRef = elementRef;\n\n\t\tthis.schemaQueryService\n\t\t\t.onCssClasses(structureId)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((classes: SchemaCssClass) => {\n\n\t\t\t\tconst diff = this.updateState(classes);\n\n\t\t\t\tthis.renderCssClasses(diff);\n\t\t\t});\n\t}\n\n\tprivate updateState(css: SchemaCssClass): Partial<SchemaCssClass> {\n\n\t\tif (!this.cssClass) {\n\t\t\tthis.cssClass = css;\n\t\t\treturn this.cssClass;\n\t\t} else {\n\n\t\t\tlet diff = {};\n\n\t\t\tObject.keys(this.cssClass)\n\t\t\t\t  .forEach((key: string) => {\n\t\t\t\t\t  if (css[key] !== this.cssClass[key]) {\n\t\t\t\t\t\t  diff[key] = css[key];\n\t\t\t\t\t  }\n\t\t\t\t  });\n\n\t\t\tthis.cssClass = css;\n\n\t\t\treturn diff;\n\t\t}\n\t}\n\n\tprivate renderCssClasses(diff: Partial<SchemaCssClass>): void {\n\n\t\tif (diff.hasOwnProperty('verticalGrid')) {\n\t\t\tthis.toggleCssClass(diff.verticalGrid, this.VERTICAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('horizontalGrid')) {\n\t\t\tthis.toggleCssClass(diff.horizontalGrid, this.HORIZONTAL_GRID_CLASS_NAME);\n\t\t}\n\n\t\tif (diff.hasOwnProperty('theme')) {\n\t\t\tthis.removeThemeCssClasses();\n\t\t\tthis.addClass(this.resolveThemeClassName(diff.theme));\n\t\t}\n\n\t\tif (diff.hasOwnProperty('rowColoring')) {\n\t\t\tthis.removeRowColoringClasses();\n\t\t\tthis.addClass(this.resolveRowColoringClassName(diff.rowColoring));\n\t\t}\n\t}\n\n\tprivate toggleCssClass(toggle: boolean, cssClassName: string): void {\n\t\tif (toggle) {\n\t\t\tthis.addClass(cssClassName);\n\t\t} else {\n\t\t\tthis.removeClass(cssClassName);\n\t\t}\n\t}\n\n\tprivate removeThemeCssClasses(): void {\n\t\tObject.keys(SchemaTheme)\n\t\t\t  .map((key: string) => SchemaTheme[key])\n\t\t\t  .map((theme: SchemaTheme) => this.resolveThemeClassName(theme))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate resolveThemeClassName(theme: SchemaTheme | string): string {\n\t\tswitch (theme) {\n\t\t\tcase SchemaTheme.FABRIC:\n\t\t\tcase SchemaTheme[SchemaTheme.FABRIC]:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.MATERIAL:\n\t\t\tcase SchemaTheme[SchemaTheme.MATERIAL]:\n\t\t\t\treturn this.THEME_MATERIAL_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.LIGHT:\n\t\t\tcase SchemaTheme[SchemaTheme.LIGHT]:\n\t\t\t\treturn this.THEME_LIGHT_CLASS_NAME;\n\n\t\t\tcase SchemaTheme.DARK:\n\t\t\tcase SchemaTheme[SchemaTheme.DARK]:\n\t\t\t\treturn this.THEME_DARK_CLASS_NAME;\n\n\t\t\tdefault:\n\t\t\t\treturn this.THEME_FABRIC_CLASS_NAME;\n\t\t}\n\t}\n\n\tprivate resolveRowColoringClassName(coloring: SchemaRowColoring | string): string {\n\t\tswitch (coloring) {\n\t\t\tcase SchemaRowColoring.ODD:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.ODD]:\n\t\t\t\treturn this.ROW_COLORING_ODD;\n\n\t\t\tcase SchemaRowColoring.EVEN:\n\t\t\tcase SchemaRowColoring[SchemaRowColoring.EVEN]:\n\t\t\t\treturn this.ROW_COLORING_EVEN;\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate removeRowColoringClasses(): void {\n\t\tObject.keys(SchemaRowColoring)\n\t\t\t  .map((key: string) => SchemaRowColoring[key])\n\t\t\t  .map((coloring: SchemaRowColoring) => this.resolveRowColoringClassName(coloring))\n\t\t\t  .filter((className: string) => !!className)\n\t\t\t  .forEach((className: string) => {\n\t\t\t\t  this.removeClass(className);\n\t\t\t  });\n\t}\n\n\tprivate addClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.addClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n\tprivate removeClass(cssClassName: string): void {\n\t\tif (cssClassName) {\n\t\t\tthis.renderer.removeClass(this.cssHostRef.nativeElement, cssClassName);\n\t\t}\n\t}\n\n}\n","import { Observable, ReplaySubject, Subject, BehaviorSubject } from 'rxjs';\n\nexport abstract class Archive<T> {\n\n\tprivate readonly archive$: Subject<T>;\n\n\tprotected constructor(value?: T) {\n\t\tif (value) {\n\t\t\tthis.archive$ = new BehaviorSubject(value);\n\t\t} else {\n\t\t\tthis.archive$ = new ReplaySubject(1);\n\t\t}\n\t}\n\n\tonValue(): Observable<T> {\n\t\treturn this.archive$.asObservable();\n\t}\n\n\tnext(value: T): void {\n\t\tthis.archive$.next(value);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\n\n@Injectable()\nexport class StructureCellEditArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\nimport { StructureCellEditState } from './structure.cell-edit.state';\n\n\n@Injectable()\nexport class StructureCellEditStore extends Archive<StructureCellEditState> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../common/cdk/archive';\n\n@Injectable()\nexport class StructureEditModeArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../../common/cdk/archive';\n\n\n@Injectable()\nexport class StructureInfoPanelEnabledArchive extends Archive<boolean> {\n\n\tconstructor() {\n\t\tsuper(false);\n\t}\n}\n","export class StructureAggregationPanelConfig {\n\n\tprivate readonly top: boolean = false;\n\n\tprivate readonly bottom: boolean = true;\n\n\tconstructor(top?: boolean,\n\t\t\t\tbottom?: boolean) {\n\n\t\tif (top !== undefined && top !== null) {\n\t\t\tthis.top = top;\n\t\t}\n\n\t\tif (bottom !== undefined && bottom !== null) {\n\t\t\tthis.bottom = bottom;\n\t\t}\n\n\t}\n\n\titTopEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\titBottomEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Archive } from '../../../../../common/cdk/archive';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\n\n\n@Injectable()\nexport class StructureAggregationArchive extends Archive<StructureAggregationPanelConfig> {\n\n\tconstructor() {\n\t\tsuper(new StructureAggregationPanelConfig());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfig } from './structure.aggregation-panel.config';\n\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n@Injectable()\nexport class StructureAggregationPanelConfigConverter {\n\n\tconvert(config: AggregationConfig): StructureAggregationPanelConfig {\n\n\t\tif (config.enabled) {\n\t\t\treturn new StructureAggregationPanelConfig(config.top, config.bottom);\n\t\t} else {\n\t\t\treturn new StructureAggregationPanelConfig(false, false);\n\t\t}\n\t}\n}\n","import { Command } from '@generic-ui/hermes';\nimport { StructureId } from '../../../../structure-id';\n\n\n\nexport class StructureSetAggregationEnabledCommand extends Command {\n\n\tconstructor(public readonly structureId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(structureId, 'StructureSetAggregationEnabledCommand');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { CommandDispatcher } from '@generic-ui/hermes';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureSetAggregationEnabledCommand } from '../../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command';\n\n\n\n@Injectable()\nexport class StructureAggregationCommandService {\n\n\tconstructor(private commandDispatcher: CommandDispatcher) {\n\t}\n\n\tsetAggregationEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.commandDispatcher.dispatch(new StructureSetAggregationEnabledCommand(structureId, enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { StructureAggregationPanelConfigConverter } from './structure.aggregation-panel.config-converter';\nimport { StructureAggregationArchive } from './structure.aggregation.archive';\n\nimport { StructureAggregationCommandService } from '../../../ui-api/structure/aggregation/structure.aggregation.command-service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { AggregationConfig } from '../../../ui-api/structure/aggregation/aggregation-config';\n\n\n\n@Injectable()\nexport class StructureAggregationConfigService {\n\n\tconstructor(private structureAggregationPanelConfigConverter: StructureAggregationPanelConfigConverter,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureAggregationCommandService: StructureAggregationCommandService,\n\t\t\t\tprivate structureId: StructureId) {}\n\n\tset(config: AggregationConfig): void {\n\n\t\tconst aggregationPanelConfig = this.structureAggregationPanelConfigConverter.convert(config);\n\n\t\tthis.structureAggregationArchive.next(aggregationPanelConfig);\n\n\t\tthis.structureAggregationCommandService.setAggregationEnabled(config.enabled, this.structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { StructureComponent } from './structure.component';\n\nexport const structureComponentToken = new InjectionToken<StructureComponent>('StructureComponentToken');\n","export enum StructureCellEditState {\n\tENTER,\n\tSUBMIT,\n\tCANCEL\n}\n","import {\n\tEventEmitter,\n\tInput,\n\tOnChanges,\n\tOnInit,\n\tOutput,\n\tSimpleChanges\n} from '@angular/core';\nimport { skip } from 'rxjs/operators';\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { ColumnConfig } from '../../domain/composition/column.config';\nimport { PagingConfig } from '../../domain/paging/paging-config';\nimport { SchemaTheme } from '../../domain/schema/schema-theme';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { SortingConfig } from '../../ui-api/structure/sorting-config';\nimport { FilterConfig } from '../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../ui-api/structure/search/search-config';\nimport { AggregationConfig } from '../../ui-api/structure/aggregation/aggregation-config';\nimport { EditemItemValues } from '../../ui-api/source/event/editem-item.values';\nimport { StructureId } from '../../domain/structure-id';\nimport { CompositionId } from '../../domain/composition/composition-id';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { PagingCommandService } from '../../ui-api/paging/paging-command.service';\nimport { PagingEventService } from '../../ui-api/paging/paging-event.service';\nimport { SourceCommandService } from '../../ui-api/source/source-command.service';\nimport { SourceEventService } from '../../ui-api/source/event/source-event.service';\nimport { SchemaCommandService } from '../../ui-api/schema/schema-command.service';\nimport { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { CompositionEventService } from '../../ui-api/composition/composition.event-service';\nimport { FormationEventService } from '../../ui-api/formation/formation-event.service';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureInfoPanelEnabledArchive } from '../panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationConfigService } from '../panel/aggregation/structure.aggregation-config.service';\nimport { StructureCellEditStore } from '../edit/structure.cell-edit.store';\nimport { StructureCellEditState } from '../edit/structure.cell-edit.state';\n\n\n\n\n/** @internal */\nexport abstract class StructureGateway extends SmartComponent implements OnChanges, OnInit {\n\n\t/***********************\n\t * INPUTS\n\t ***********************/\n\n\t@Input()\n\tcolumnHeaderTop: boolean;\n\n\t@Input()\n\tcolumnHeaderBottom: boolean;\n\n\t@Input()\n\theight: number;\n\n\t@Input()\n\twidth: number;\n\n\t@Input()\n\tautoResizeWidth: boolean;\n\n\t@Input()\n\tsource: Array<any> = [];\n\n\t@Input()\n\tcolumns: Array<ColumnConfig> = [];\n\n\t@Input()\n\tpaging: boolean | PagingConfig;\n\n\t@Input()\n\tverticalGrid: boolean;\n\n\t@Input()\n\thorizontalGrid: boolean;\n\n\t@Input()\n\ttheme: SchemaTheme;\n\n\t@Input()\n\trowColoring: SchemaRowColoring;\n\n\t@Input()\n\tloading: boolean;\n\n\t@Input()\n\tvirtualScroll: boolean;\n\n\t@Input()\n\tsorting: boolean | SortingConfig;\n\n\t@Input()\n\tfiltering: boolean | FilterConfig;\n\n\t@Input()\n\tquickFilters: boolean | QuickFiltersConfig;\n\n\t@Input()\n\tsearching: boolean | SearchConfig;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\t@Input()\n\tinfoPanel: boolean;\n\n\t@Input()\n\taggregation: AggregationConfig;\n\n\n\t/***********************\n\t * OUTPUTS\n\t ***********************/\n\n\t@Output()\n\tpageChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\tpageSizeChanged: EventEmitter<number> = new EventEmitter<number>();\n\n\t@Output()\n\titemsSelected: EventEmitter<any> = new EventEmitter();\n\n\t@Output()\n\tcolumnsChanged: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcontainerWidthChanged: EventEmitter<number> = new EventEmitter();\n\n\t@Output()\n\tsourceEdited: EventEmitter<EditemItemValues> = new EventEmitter();\n\n\t@Output()\n\tcellEditEntered: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditCanceled: EventEmitter<void> = new EventEmitter();\n\n\t@Output()\n\tcellEditSubmitted: EventEmitter<void> = new EventEmitter();\n\n\n\tprotected constructor(\n\t\tpublic structureId: StructureId,\n\t\tprotected compositionId: CompositionId,\n\t\tprotected structureCommandService: StructureCommandService,\n\t\tprotected pagingCommandService: PagingCommandService,\n\t\tprotected pagingEventService: PagingEventService,\n\t\tprotected sourceCommandService: SourceCommandService,\n\t\tprotected sourceEventService: SourceEventService,\n\t\tprotected schemaCommandService: SchemaCommandService,\n\t\tprotected compositionCommandService: CompositionCommandService,\n\t\tprotected compositionEventService: CompositionEventService,\n\t\tprotected formationEventService: FormationEventService,\n\t\tprotected structureEditModeArchive: StructureEditModeArchive,\n\t\tprotected structureCellEditArchive: StructureCellEditArchive,\n\t\tprotected structureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\tprotected structureAggregationConfigService: StructureAggregationConfigService,\n\t\tprotected structureCellEditStore: StructureCellEditStore\n\t) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(simpleChanges: SimpleChanges) {\n\n\t\tif (simpleChanges.infoPanel !== undefined && simpleChanges.infoPanel.currentValue !== undefined) {\n\t\t\tthis.structureInfoPanelEnabledArchive.next(this.infoPanel);\n\t\t}\n\n\t\tif (simpleChanges.aggregation !== undefined && simpleChanges.aggregation.currentValue !== undefined) {\n\t\t\tthis.structureAggregationConfigService.set(this.aggregation);\n\t\t}\n\n\t\tif (simpleChanges.editMode !== undefined && simpleChanges.editMode.currentValue !== undefined) {\n\t\t\tthis.structureEditModeArchive.next(this.editMode);\n\t\t}\n\n\t\tif (simpleChanges.cellEditing !== undefined && simpleChanges.cellEditing.currentValue !== undefined) {\n\t\t\tthis.structureCellEditArchive.next(this.cellEditing);\n\t\t}\n\n\t\tif (simpleChanges.width !== undefined && simpleChanges.width.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setWidth(this.width);\n\t\t}\n\n\t\tif (simpleChanges.autoResizeWidth !== undefined && simpleChanges.autoResizeWidth.currentValue !== undefined) {\n\t\t\tthis.compositionCommandService.setResizeWidth(this.autoResizeWidth);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderTop !== undefined && simpleChanges.columnHeaderTop.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeTopHeader(this.columnHeaderTop);\n\t\t}\n\n\t\tif (simpleChanges.columnHeaderBottom !== undefined && simpleChanges.columnHeaderBottom.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeBottomHeader(this.columnHeaderBottom);\n\t\t}\n\n\t\tif (simpleChanges.loading !== undefined && simpleChanges.loading.currentValue !== undefined) {\n\t\t\tthis.sourceCommandService.setLoading(this.loading);\n\t\t}\n\n\t\tif (simpleChanges.paging !== undefined && simpleChanges.paging.currentValue !== undefined) {\n\n\t\t\tlet pagingConfig: PagingConfig;\n\n\t\t\tif (typeof this.paging === 'boolean') {\n\t\t\t\tpagingConfig = {\n\t\t\t\t\tenabled: this.paging\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tpagingConfig = this.paging;\n\t\t\t}\n\n\t\t\tthis.pagingCommandService.setPaging(pagingConfig);\n\t\t}\n\n\t\tif (simpleChanges.columns) {\n\t\t\tthis.structureCommandService.initFields(this.columns, this.compositionId, this.structureId)\n\t\t\t// this.compositionCommandService.setColumns(this.columns);\n\t\t}\n\n\t\tif (simpleChanges.verticalGrid !== undefined && simpleChanges.verticalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeVerticalGrid(this.verticalGrid);\n\t\t}\n\n\t\tif (simpleChanges.horizontalGrid !== undefined && simpleChanges.horizontalGrid.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.changeHorizontalGrid(this.horizontalGrid);\n\t\t}\n\n\t\tif (simpleChanges.theme !== undefined && simpleChanges.theme.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setTheme(this.theme);\n\t\t}\n\n\t\tif (simpleChanges.rowColoring !== undefined && simpleChanges.rowColoring.currentValue !== undefined) {\n\t\t\tthis.schemaCommandService.setRowColoring(this.rowColoring);\n\t\t}\n\n\t\tif (simpleChanges.height && this.height) {\n\t\t\tthis.schemaCommandService.setHeight(this.height);\n\t\t}\n\n\t\tif (simpleChanges.virtualScroll !== undefined  && simpleChanges.virtualScroll.currentValue !== undefined) {\n\t\t\tif (this.virtualScroll) {\n\t\t\t\tthis.structureCommandService.enableVerticalScroll();\n\t\t\t} else {\n\t\t\t\tthis.structureCommandService.disableVerticalScroll();\n\t\t\t}\n\t\t}\n\n\t\tif (simpleChanges.sorting !== undefined && simpleChanges.sorting.currentValue !== undefined) {\n\n\t\t\tlet sorting: SortingConfig;\n\n\t\t\tif (typeof this.sorting === 'boolean') {\n\t\t\t\tsorting = {\n\t\t\t\t\tenabled: this.sorting\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsorting = this.sorting;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSortingConfig(sorting);\n\t\t}\n\n\t\tif (simpleChanges.filtering !== undefined && simpleChanges.filtering.currentValue !== undefined) {\n\n\t\t\tlet filtering: FilterConfig;\n\n\t\t\tif (typeof this.filtering === 'boolean') {\n\t\t\t\tfiltering = {\n\t\t\t\t\tenabled: this.filtering\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tfiltering = this.filtering;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setFilterConfig(filtering);\n\t\t}\n\n\t\tif (simpleChanges.quickFilters !== undefined && simpleChanges.quickFilters.currentValue !== undefined) {\n\n\t\t\tlet quickFilters: QuickFiltersConfig;\n\n\t\t\tif (typeof this.quickFilters === 'boolean') {\n\t\t\t\tquickFilters = {\n\t\t\t\t\tenabled: this.quickFilters\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tquickFilters = this.quickFilters;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setQuickFiltersConfig(quickFilters);\n\t\t}\n\n\t\tif (simpleChanges.searching !== undefined && simpleChanges.searching.currentValue !== undefined) {\n\n\t\t\tlet searching: SearchConfig;\n\n\t\t\tif (typeof this.searching === 'boolean') {\n\t\t\t\tsearching = {\n\t\t\t\t\tenabled: this.searching\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tsearching = this.searching;\n\t\t\t}\n\n\t\t\tthis.structureCommandService.setSearchingConfig(searching);\n\t\t}\n\n\t\t/**\n\t\t * Setting source should be last step\n\t\t */\n\t\tif (simpleChanges.source) {\n\t\t\tthis.sourceCommandService.setOrigin(this.source);\n\t\t}\n\t}\n\n\tngOnInit() {\n\n\t\tthis.pagingEventService\n\t\t\t.onPageChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageNumber: number) => {\n\t\t\t\tthis.pageChanged.emit(pageNumber);\n\t\t\t});\n\n\t\tthis.pagingEventService\n\t\t\t.onPageSizeChange(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((pageSize: number) => {\n\t\t\t\tthis.pageSizeChanged.emit(pageSize);\n\t\t\t});\n\n\t\tthis.formationEventService\n\t\t\t.onItemSelected(this.structureId)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((items: Array<any>) => {\n\t\t\t\tthis.itemsSelected.emit(items);\n\t\t\t});\n\n\t\tthis.compositionEventService\n\t\t\t.selectColumnsChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\tskip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil())\n\t\t\t.subscribe(() => {\n\t\t\t\tthis.columnsChanged.emit();\n\t\t\t});\n\n\n\t\tthis.compositionEventService\n\t\t\t.selectContainerWidthChanged(this.compositionId)\n\t\t\t.pipe(\n\t\t\t\t// skip(1), // TODO system should emit response that it is ready\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((containerWidth: number) => {\n\t\t\t\tthis.containerWidthChanged.emit(containerWidth);\n\t\t\t});\n\n\t\tthis.sourceEventService\n\t\t\t.onSourceEdited(this.structureId)\n\t\t\t.pipe(\n\t\t\t\t// this.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((values: EditemItemValues) => {\n\t\t\t\tthis.sourceEdited.emit(values);\n\t\t\t});\n\n\t\tthis.structureCellEditStore\n\t\t\t.onValue()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((state: StructureCellEditState) => {\n\n\t\t\t\tswitch(state) {\n\n\t\t\t\t\tcase StructureCellEditState.ENTER:\n\t\t\t\t\t\tthis.cellEditEntered.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.SUBMIT:\n\t\t\t\t\t\tthis.cellEditSubmitted.emit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase StructureCellEditState.CANCEL:\n\t\t\t\t\t\tthis.cellEditCanceled.emit();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t});\n\n\n\n\t}\n\n\tonPageChange(page: number): void {\n\t\tthis.pageChanged.emit(page);\n\t}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class NextPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'NextPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PrevPageEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PrevPageEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PageChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PageChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagesizeChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagesizeChangedEvent');\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { PagingReadModelService } from './paging-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { NextPageEvent } from '../../domain/paging/command/next-page/next-page.event';\nimport { PrevPageEvent } from '../../domain/paging/command/prev-page/prev-page.event';\nimport { PageChangedEvent } from '../../domain/paging/command/page/page-changed.event';\nimport { Paging } from '../../domain/paging/read/paging';\nimport { PagesizeChangedEvent } from '../../domain/paging/command/change-pagesize/pagesize-changed.event';\n\n\n@Injectable()\nexport class PagingEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate readonly pagingQueryService: PagingReadModelService) {\n\t}\n\n\tonPageChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   NextPageEvent,\n\t\t\t\t\t   PrevPageEvent,\n\t\t\t\t\t   PageChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .onPaging(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPage()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n\tonPageSizeChange(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   PagesizeChangedEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.pagingQueryService\n\t\t\t\t\t\t\t\t\t  .onPaging(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  map((paging: Paging) => paging.getPageSize()),\n\t\t\t\t\t\t\t\t\t\t  take(1)\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","export class EditemItemValues {\n\n\tconstructor(public readonly after: any,\n\t\t\t\tpublic readonly before: any) {}\n\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class StructureSourceItemEditedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { EditemItemValues } from './editem-item.values';\nimport { StructureSourceItemEditedEvent } from '../../../domain/source/command/origin/edit/structure.source-item-edited.event';\n\n\n@Injectable()\nexport class SourceEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tonSourceEdited(structureId: StructureId): Observable<EditemItemValues> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   StructureSourceItemEditedEvent as any\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   map((event: StructureSourceItemEditedEvent) => {\n\n\t\t\t\t\t\t   const afterItem = event.getAfterItem().getData(),\n\t\t\t\t\t\t\t   beforeItem = event.getBeforeItem().getData();\n\n\t\t\t\t\t\t   return new EditemItemValues(afterItem, beforeItem);\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SelectedRowToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SelectedRowToggledEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, take, switchMap } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureReadModelService } from '../structure/structure-read-model.service';\nimport { StructureId } from '../../domain/structure-id';\nimport { SelectedRowToggledEvent } from '../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Injectable()\nexport class FormationEventService {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus,\n\t\t\t\tprivate readonly structureQueryService: StructureReadModelService) {\n\t}\n\n\tonItemSelected(structureId: StructureId): Observable<number> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .ofEvent(\n\t\t\t\t\t   SelectedRowToggledEvent\n\t\t\t\t   )\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString()),\n\t\t\t\t\t   switchMap((event: DomainEvent) => {\n\n\t\t\t\t\t\t   return this.structureQueryService\n\t\t\t\t\t\t\t\t\t  .onStructure(structureId)\n\t\t\t\t\t\t\t\t\t  .pipe(\n\t\t\t\t\t\t\t\t\t\t  take(1),\n\t\t\t\t\t\t\t\t\t\t  map((str: Structure) => str.getSelectedEntities()),\n\t\t\t\t\t\t\t\t\t\t  map((entities: Array<ItemEntity>) => entities.map(ent => ent.getData()))\n\t\t\t\t\t\t\t\t\t  );\n\t\t\t\t\t   })\n\t\t\t\t   );\n\t}\n\n}\n","import {\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tOnChanges,\n\tOnDestroy,\n\tOnInit,\n\tRenderer2,\n\tSimpleChanges,\n\tViewEncapsulation\n} from '@angular/core';\nimport { timer } from 'rxjs';\n\n\nimport { StructureDefinition } from './structure-definition';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureId } from '../domain/structure-id';\nimport { CompositionId } from '../domain/composition/composition-id';\nimport { localProviders } from './local/local-providers';\nimport { SchemaCssClassManager } from './schema/schema-css-class.manager';\nimport { StructureCellEditArchive } from './edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from './edit/structure.cell-edit.store';\nimport { StructureEditModeArchive } from './edit/structure.edit-mode.archive';\nimport { StructureInfoPanelEnabledArchive } from './panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationArchive } from './panel/aggregation/structure.aggregation.archive';\nimport { StructureAggregationConfigService } from './panel/aggregation/structure.aggregation-config.service';\nimport { structureComponentToken } from './structure-component-token';\nimport { StructureGateway } from './gateway/structure.gateway';\nimport { SchemaColumnHeader } from '../domain/schema/read/schema-column-header';\nimport { Structure } from '../domain/structure/read/structure';\nimport { PagingCommandService } from '../ui-api/paging/paging-command.service';\nimport { PagingEventService } from '../ui-api/paging/paging-event.service';\nimport { SourceCommandService } from '../ui-api/source/source-command.service';\nimport { SourceEventService } from '../ui-api/source/event/source-event.service';\nimport { SchemaCommandService } from '../ui-api/schema/schema-command.service';\nimport { CompositionCommandService } from '../ui-api/composition/composition.command-service';\nimport { CompositionEventService } from '../ui-api/composition/composition.event-service';\nimport { FormationEventService } from '../ui-api/formation/formation-event.service';\nimport { StructureCommandService } from '../ui-api/structure/structure-command.service';\nimport { StructureReadModelService } from '../ui-api/structure/structure-read-model.service';\nimport { CompositionReadModelService } from '../ui-api/composition/composition-read-model.service';\nimport { SchemaReadModelService } from '../ui-api/schema/schema-read-model.service';\n\n/** @internal */\nexport function structureIdFactory(generator: StructureIdGenerator): StructureId {\n\treturn new StructureId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport function compositionIdFactory(generator: StructureIdGenerator): CompositionId {\n\treturn new CompositionId('gui-' + generator.generateId());\n}\n\n/** @internal */\nexport const structureComponentSelfProviders = [\n\t{\n\t\tprovide: StructureId,\n\t\tuseFactory: structureIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t{\n\t\tprovide: CompositionId,\n\t\tuseFactory: compositionIdFactory,\n\t\tdeps: [\n\t\t\tStructureIdGenerator\n\t\t]\n\t},\n\t...localProviders,\n\n\tSchemaCssClassManager,\n\tStructureCellEditArchive,\n\tStructureCellEditStore,\n\tStructureEditModeArchive,\n\tStructureInfoPanelEnabledArchive,\n\tStructureAggregationArchive,\n\tStructureAggregationConfigService\n\n];\n\n/** @internal */\n@Component({\n\tselector: 'gui-structure',\n\ttemplateUrl: './structure.component.html',\n\tstyleUrls: [\n\t\t'./style/styles.ngx.scss',\n\t\t'./style/structure.ngx.scss',\n\t\t'./style/structure-paging.ngx.scss',\n\t\t'./style/structure-responsive.ngx.scss',\n\t\t'./style/structure-flex.ngx.scss',\n\t\t'./composition/composition.ngx.scss',\n\t\t'./style/themes/material.structure.ngx.scss',\n\t\t'./style/themes/dark.structure.ngx.scss',\n\t\t'./style/themes/light.structure.ngx.scss'\n\t],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None,\n\thost: {\n\t\t'[class]': `\"gui-structure\"`,\n\t\t'[style.min-height.px]': 'structureHeight',\n\t\t'[class.gui-structure-border]': 'isBorderEnabled()',\n\t\t'[id]': 'structureId.toString()'\n\t},\n\tproviders: [\n\t\t...structureComponentSelfProviders,\n\t\t{\n\t\t\tprovide: structureComponentToken,\n\t\t\tuseExisting: StructureComponent\n\t\t}\n\t]\n})\nexport class StructureComponent extends StructureGateway implements OnChanges, OnInit, AfterViewInit {\n\n\tloaderEnabled: boolean = false;\n\n\tcircleLoaderEnabled: boolean = true;\n\n\tinitialLoaderAnimation: boolean = false;\n\n\tstructureHeight: number;\n\n\tprivate columnHeader: SchemaColumnHeader;\n\n\tprivate structure: Structure;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tcompositionId: CompositionId,\n\t\t\t\tpagingCommandService: PagingCommandService,\n\t\t\t\tpagingEventService: PagingEventService,\n\t\t\t\tsourceCommandService: SourceCommandService,\n\t\t\t\tsourceEventService: SourceEventService,\n\t\t\t\tschemaCommandService: SchemaCommandService,\n\t\t\t\tcompositionCommandService: CompositionCommandService,\n\t\t\t\tcompositionEventService: CompositionEventService,\n\t\t\t\tformationEventService: FormationEventService,\n\t\t\t\tstructureCommandService: StructureCommandService,\n\t\t\t\tstructureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tstructureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tstructureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\t\t\tstructureAggregationConfigService: StructureAggregationConfigService,\n\t\t\t\tstructureCellEditStore: StructureCellEditStore,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate compositionQueryService: CompositionReadModelService,\n\t\t\t\tprivate schemaReadModelService: SchemaReadModelService,\n\t\t\t\tprivate schemaStylesManager: SchemaCssClassManager) {\n\n\t\tsuper(\n\t\t\tstructureId,\n\t\t\tcompositionId,\n\t\t\tstructureCommandService,\n\t\t\tpagingCommandService,\n\t\t\tpagingEventService,\n\t\t\tsourceCommandService,\n\t\t\tsourceEventService,\n\t\t\tschemaCommandService,\n\t\t\tcompositionCommandService,\n\t\t\tcompositionEventService,\n\t\t\tformationEventService,\n\t\t\tstructureEditModeArchive,\n\t\t\tstructureCellEditArchive,\n\t\t\tstructureInfoPanelEnabledArchive,\n\t\t\tstructureAggregationConfigService,\n\t\t\tstructureCellEditStore\n\t\t);\n\n\t\tthis.structureCommandService.init();\n\t\tcompositionCommandService.init();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tsuper.ngOnChanges(changes);\n\t}\n\n\tngOnInit() {\n\t\tsuper.ngOnInit();\n\n\t\tthis.schemaReadModelService\n\t\t\t.onHeight()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((height: number) => {\n\t\t\t\tthis.structureHeight = height;\n\t\t\t});\n\n\t\tthis.schemaReadModelService\n\t\t\t.onColumnHeader()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columnHeader: SchemaColumnHeader) => {\n\t\t\t\tthis.columnHeader = columnHeader;\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\n\t\t\t\tthis.loaderEnabled = structure.getSource().isLoading();\n\n\t\t\t\tthis.circleLoaderEnabled = structure.isLoaderVisible();\n\n\t\t\t\tif (this.loaderEnabled && !this.initialLoaderAnimation) {\n\t\t\t\t\tthis.initialLoaderAnimation = true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\t\tlet width = this.elementRef.nativeElement.offsetWidth;\n\n\t\tif (width > 0) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * When gui-grid is in dynamic container which is created later then grid.\n\t\t\t */\n\t\t\ttimer(0)\n\t\t\t\t.pipe(\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe(() => {\n\n\t\t\t\t\twidth = this.elementRef.nativeElement.offsetWidth;\n\n\t\t\t\t\tif (width > 0) {\n\t\t\t\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\t\tthis.schemaStylesManager\n\t\t\t.init(this.elementRef, this.structureId);\n\n\t\tthis.compositionQueryService\n\t\t\t.onWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\t}\n\n\tisBorderEnabled(): boolean {\n\t\treturn this.structureDefinition.isBorderEnabled() && this.structure.isReadyToDisplay();\n\t}\n\n\tgetStructureId(): StructureId {\n\t\treturn this.structureId;\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureCommandService } from '../../../ui-api/structure/structure-command.service';\nimport { StructureColumnConfigService } from '../config/structure.column-config.service';\nimport { SortStatus } from '../../../domain/composition/command/sort/sort-status';\n\n\n\n@Component({\n\tselector: 'gui-structure-header-columns',\n\ttemplateUrl: './structure-header-columns.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderColumnsComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\tconstructor(private structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureColumnConfigService: StructureColumnConfigService) {\n\t}\n\n\ttoggleSort(column: CellTemplateWithContext) {\n\t\tthis.structureCommandService.toggleSort(column.getFieldId());\n\t}\n\n\tisSortAsc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.ASC;\n\t}\n\n\tisSortDesc(column: CellTemplateWithContext): boolean {\n\t\treturn column.getSortStatus() === SortStatus.DESC;\n\t}\n\n\topenConfigDialog(): void {\n\t\tthis.structureColumnConfigService.open();\n\t}\n\n\tcloseConfigDialog(): void {\n\t\tthis.structureColumnConfigService.close();\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureQuickFilterRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectQuickFilterEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureFilterRepository } from '../../../domain/structure/read/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../../domain/structure/read/filter/structure.quick-filter.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureFilterReadModelRepository {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository,\n\t\t\t\tprivate structureQuickFilterRepository: StructureQuickFilterRepository) {}\n\n\tonFilteringEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureFilterRepository.selectFilterEnabled(structureId);\n\t}\n\n\tonQuickFiltersEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureQuickFilterRepository.selectQuickFilterEnabled(structureId);\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnInit, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { DomainEventBus } from '@generic-ui/hermes';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { StructureHeaderColumnsComponent } from './columns/structure-header-columns.component';\nimport { CellTemplateWithContext } from '../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\n\n\n@Component({\n\tselector: 'gui-structure-header',\n\ttemplateUrl: './structure-header.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderComponent extends SmartComponent implements OnInit {\n\n\t@ViewChild(StructureHeaderColumnsComponent, { read: ElementRef, static: true })\n\tcontainerRef: ElementRef;\n\n\theaderColumns: Array<CellTemplateWithContext> = [];\n\n\tfilterRowEnabled: boolean = false;\n\n\tconstructor(private readonly changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate readonly renderer: Renderer2,\n\t\t\t\tprivate readonly eventBus: DomainEventBus,\n\t\t\t\tprivate readonly structureId: StructureId,\n\t\t\t\tprivate readonly structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate readonly compositionQueryService: CompositionReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.compositionQueryService\n\t\t\t.onHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.onFilteringEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\n\t\t\t\tthis.filterRowEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\n\n\n@Component({\n\tselector: 'gui-structure-header-filters',\n\ttemplate: `\n\t\t\n\t\t<ng-container *ngIf=\"!filterMode\">\n\n\t\t\t<div *ngFor=\"let cell of columns\"\n\t\t\t\t [style.width.px]=\"cell.width\"\n\t\t\t\t class=\"gui-header-cell\">\n\n\t\t\t\t<!--\t\t\t\t<gui-structure-header-filter [column]=\"cell\">-->\n\t\t\t\t<!--\t\t\t\t</gui-structure-header-filter>-->\n\n\t\t\t\t<button (click)=\"turnOnFilterMode()\">Add Filter</button>\n\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t\t<ng-container *ngIf=\"filterMode\">\n\n\t\t\t<gui-select [options]=\"['has value', 'is the same as', 'starts with', 'ends with']\" [selected]=\"'has value'\" >\n\n\t\t\t</gui-select>\n\n\t\t\t<form [formGroup]=\"filterForm\">\n\t\t\t\t<input type=\"text\" [formControlName]=\"filterFieldName\" gui-input/>\n\t\t\t</form>\n\n\t\t\t<button gui-button (click)=\"clearFilters()\">Clear All</button>\n\t\t\t<button gui-button (click)=\"turnOffFilterMode()\">Close</button>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFiltersComponent {\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithContext>;\n\n\t@Output()\n\tclosed = new EventEmitter<void>();\n\n\treadonly filterFieldName = 'phrase';\n\n\tfilterForm: FormGroup;\n\n\tfilterMode: boolean = false;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate formBuilder: FormBuilder,\n\t\t\t\tprivate cd: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tthis.filterForm = this.formBuilder.group({\n\t\t\t[this.filterFieldName]: ['']\n\t\t});\n\n\t}\n\n\tngOnInit() {\n\t\tthis.filterForm\n\t\t\t.valueChanges\n\t\t\t// .pipe(\n\t\t\t// debounceTime(500)\n\t\t\t// )\n\t\t\t.subscribe((f) => {\n\t\t\t\tthis.filter(f[this.filterFieldName]);\n\t\t\t});\n\t}\n\n\tfilter(phrase: string): void {\n\n\t\tif (phrase === undefined || phrase === null) {\n\t\t\tphrase = '';\n\t\t}\n\n\t\tthis.structureFilterCommandService.addFilter(this.columns[0].getFieldId(), '1', phrase, this.structureId);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.filterForm.reset();\n\t}\n\n\tturnOnFilterMode(): void {\n\t\tthis.filterMode = true;\n\t\tthis.cd.detectChanges();\n\t}\n\n\tturnOffFilterMode(): void {\n\t\tthis.filterMode = false;\n\t\tthis.cd.detectChanges();\n\t}\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { ChangedValueEmitter } from '../../../domain/composition/read/edit/changed-value.emitter';\nimport { StructureFilterCommandService } from '../../../ui-api/structure/filter/structure.filter.command.service';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n\n@Component({\n\tselector: 'gui-structure-header-filter',\n\ttemplate: `\n\t\t\n<!--\t\t<ng-container-->\n<!--\t\t\t\t*ngTemplateOutlet=\"column.editTemplate; context: editContext\">-->\n<!--\t\t</ng-container>-->\n\t\t\n\t\t<button gui-button [primary]=\"true\" >Add Filter</button>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureHeaderFilterComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tcolumn: CellTemplateWithContext;\n\n\tsub = new ChangedValueEmitter();\n\n\teditContext: any;\n\n\tconstructor(private structureFilterCommandService: StructureFilterCommandService,\n\t\t\t\tprivate structureId: StructureId) {\n\t\tsuper();\n\n\t\tthis.editContext = {\n\t\t\tchanges: this.sub\n\t\t}\n\t}\n\n\tngOnInit() {\n\t\tthis.sub\n\t\t\t.select()\n\t\t\t.subscribe((phrase: string) => this.filter(phrase));\n\t}\n\n\tfilter(phrase: string): void {\n\t\tthis.structureFilterCommandService.addFilter(this.column.getFieldId(), '1', phrase, this.structureId);\n\t}\n\n}\n","import {\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tElementRef,\n\tInject,\n\tInput,\n\tOnInit,\n\tPLATFORM_ID,\n\tRenderer2,\n\tViewEncapsulation\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\nimport { FormationCommandService } from '../../ui-api/formation/formation-command.service';\nimport { StructureCellEditArchive } from '../edit/structure.cell-edit.archive';\nimport { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { SelectedRowsList } from '../../domain/formation/read/selected-rows/selected-rows-list';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-content',\n\ttemplateUrl: `structure-content.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContentComponent extends SmartComponent implements OnInit {\n\n\t@Input()\n\tsource: Array<ItemEntity>;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\teditMode = false;\n\n\tcellEditing = false;\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate elementRef: ElementRef,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate formationCommandService: FormationCommandService,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureEditModeArchive: StructureEditModeArchive,\n\t\t\t\tprivate formationQueryService: FormationReadModelService) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\tthis.formationQueryService\n\t\t\t.onSelectedRows()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((rowsList: SelectedRowsList) => {\n\n\t\t\t\tthis.clearSelectedRows();\n\n\t\t\t\trowsList.getIds().forEach((id: string) => {\n\n\t\t\t\t\tconst strippedId = 'gui' + id.replace(/-/g, ''),\n\t\t\t\t\t\tselectedRowEl = this.elementRef.nativeElement.querySelector(`#${strippedId}`);\n\n\t\t\t\t\tif (selectedRowEl) {\n\t\t\t\t\t\tthis.renderer.addClass(selectedRowEl, 'selected');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\tthis.structureEditModeArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.editMode = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureCellEditArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.cellEditing = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\ttrackByFn() {\n\t\treturn 0;\n\t}\n\n\ttranslateY(index: number): string {\n\t\treturn `translateY(${index * 30}px)`;\n\t}\n\n\ttoggleSelectedRow(entity: ItemEntity): void {\n\t\tthis.formationCommandService.toggleSelectedRow((entity as any).id);\n\t}\n\n\tprivate clearSelectedRows(): void {\n\t\tconst selectedElements = this.elementRef.nativeElement.querySelectorAll('.selected');\n\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\tselectedElements.forEach((el: any) => {\n\t\t\t\tthis.renderer.removeClass(el, 'selected');\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n","import { Entity, RandomStringGenerator } from '@generic-ui/hermes';\n\n\n@Entity\nexport class ItemEntity {\n\n\tprivate readonly id: string;\n\n\tprivate readonly data: any;\n\n\tprivate readonly version: number = 0;\n\n\tconstructor(data: any,\n\t\t\t\tid?: string,\n\t\t\t\tversion: number = 0) {\n\t\tthis.data = data;\n\t\tthis.version = version;\n\t\tif (!id) {\n\t\t\tthis.id = RandomStringGenerator.generate();\n\t\t} else {\n\t\t\tthis.id = id;\n\t\t}\n\t}\n\n\tgetData(): any {\n\t\treturn this.data;\n\t}\n\n\tgetUiId(): string {\n\t\treturn 'gui' + this.id.replace(/-/g, '');\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tequals(entity: ItemEntity): boolean {\n\t\treturn this.id === entity.id && this.getVersion() === entity.getVersion();\n\t}\n\n\tequalsById(id: string): boolean {\n\t\treturn this.id === id;\n\t}\n\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input } from '@angular/core';\n\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { ItemEntity } from '../../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-row',\n\ttemplateUrl: `structure-row.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureRowComponent {\n\n\t@Input()\n\tentity: ItemEntity;\n\n\t@Input()\n\tcolumns: Array<CellTemplateWithAccessor>;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditing: boolean;\n\n\ttrackByFn(): number {\n\t\treturn 0;\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, SimpleChanges, OnDestroy, OnChanges } from '@angular/core';\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\nimport { CellTemplateWithAccessor } from '../../../domain/composition/read/definition/cell-template-with-accessor';\nimport { StructureCellEditArchive } from '../../edit/structure.cell-edit.archive';\nimport { StructureCellEditStore } from '../../edit/structure.cell-edit.store';\nimport { SourceCommandService } from '../../../ui-api/source/source-command.service';\nimport { ChangedValueEmitter } from '../../../domain/composition/read/edit/changed-value.emitter';\nimport { EditEventType } from '../../../domain/composition/read/edit/state/edit.event-type';\nimport { StructureEditSourceItemParams } from '../../../domain/source/command/origin/edit/structure.edit-source-item.params';\nimport { StructureCellEditState } from '../../edit/structure.cell-edit.state';\nimport { ItemEntity } from '../../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-cell',\n\ttemplate: `\n\n\t\t<span *ngIf=\"!inEditMode\"\n\t\t\t  (click)=\"enterEditMode()\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.template;\n\t\t\t\t\tcontext: { element: cell.accessor(entity) }\">\n\t\t\t</ng-container>\n\t\t</span>\n\t\t\n\t\t<span *ngIf=\"inEditMode\" class=\"gui-cell-edit-mode\">\n\t\t\t<ng-container\n\t\t\t\t\t*ngTemplateOutlet=\"cell.editTemplate;\n\t\t\t\t\tcontext: editContext\">\n\t\t\t</ng-container>\n\t\t</span>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureCellComponent extends SmartComponent implements OnChanges, OnDestroy {\n\n\t@Input()\n\tentity: ItemEntity;\n\n\t@Input()\n\tcell: CellTemplateWithAccessor;\n\n\t@Input()\n\teditMode: boolean;\n\n\t@Input()\n\tcellEditingEnabled: boolean;\n\n\tinEditMode: boolean = false;\n\n\teditContext: any;\n\n\tvalueChanges$: any;\n\n\tstatus$: any;\n\n\tactualValue: any;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureCellEditArchive: StructureCellEditArchive,\n\t\t\t\tprivate structureCellEditStore: StructureCellEditStore,\n\t\t\t\tprivate sourceCommandService: SourceCommandService) {\n\t\tsuper();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\n\t\tif (changes.editMode !== undefined) {\n\t\t\tif (this.editMode) {\n\t\t\t\tthis.cellEditingEnabled = true;\n\t\t\t\tthis.enterEditMode(false);\n\t\t\t} else if (!this.editMode) {\n\t\t\t\tthis.exitEditMode();\n\t\t\t}\n\t\t}\n\n\t\tif (!this.editMode) {\n\t\t\tthis.exitEditMode();\n\t\t}\n\t}\n\n\tenterEditMode(forceCheck: boolean = true): void {\n\n\t\tif (!this.cellEditingEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.inEditMode = true;\n\n\t\tthis.valueChanges$ = new ChangedValueEmitter();\n\t\tthis.status$ = new ChangedValueEmitter<EditEventType>();\n\n\t\tthis.editContext = {\n\t\t\tstatus: this.status$,\n\t\t\tvalueChanges: this.valueChanges$,\n\t\t\tvalue: this.cell.accessor(this.entity),\n\t\t\tfocus: forceCheck\n\t\t};\n\n\t\tthis.observeFieldStatus();\n\t\tthis.observeValueChanges();\n\n\t\tthis.publishEditEnter();\n\n\t\tif (!forceCheck) {\n\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t} else {\n\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t}\n\n\t}\n\n\texitEditMode(): void {\n\t\tthis.inEditMode = false;\n\t\tthis.changeDetectorRef.detectChanges();\n\t}\n\n\tsubmitChangesAndExit(): void {\n\n\t\tconst itemId = this.entity.getId(),\n\t\t\tupdatedValue = this.actualValue,\n\t\t\tfieldId = this.cell.columnFieldId;\n\n\t\tthis.sourceCommandService.editItem(new StructureEditSourceItemParams(itemId, fieldId, updatedValue));\n\n\t\tthis.exitEditMode();\n\t}\n\n\tprivate observeFieldStatus(): void {\n\n\t\tthis.status$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((status: EditEventType) => {\n\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase EditEventType.SUBMIT:\n\t\t\t\t\t\tthis.submitChangesAndExit();\n\t\t\t\t\t\tthis.publishEditSubmit();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EditEventType.CANCEL:\n\t\t\t\t\t\tthis.exitEditMode();\n\t\t\t\t\t\tthis.publishEditCancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate observeValueChanges(): void {\n\n\t\tthis.valueChanges$\n\t\t\t.select()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((value: any) => {\n\t\t\t\tthis.actualValue = value;\n\t\t\t});\n\t}\n\n\tprivate publishEditState(state: StructureCellEditState): void {\n\t\tthis.structureCellEditStore.next(state);\n\t}\n\n\tprivate publishEditEnter(): void {\n\t\tthis.publishEditState(StructureCellEditState.ENTER);\n\t}\n\n\tprivate publishEditCancel(): void {\n\t\tthis.publishEditState(StructureCellEditState.CANCEL);\n\t}\n\n\tprivate publishEditSubmit(): void {\n\t\tthis.publishEditState(StructureCellEditState.SUBMIT);\n\t}\n\n}\n","import {\n\tComponent,\n\tChangeDetectionStrategy,\n\tViewChild,\n\tElementRef,\n\tRenderer2,\n\tOnDestroy,\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tOnInit,\n\tInject,\n\tOptional,\n\tViewEncapsulation,\n\tNgZone\n} from '@angular/core';\nimport { Subject, combineLatest, fromEvent } from 'rxjs';\nimport { distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\n\nimport { ResizeDetector } from '@generic-ui/fabric';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { CellTemplateWithAccessor } from '../../domain/composition/read/definition/cell-template-with-accessor';\nimport { SchemaRowColoring } from '../../domain/schema/schema-row-coloring';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureCommandService } from '../../ui-api/structure/structure-command.service';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { SourceReadModelService } from '../../ui-api/source/source-read-model.service';\nimport { SchemaReadModelService } from '../../ui-api/schema/schema-read-model.service';\nimport { CompositionCommandService } from '../../ui-api/composition/composition.command-service';\nimport { CompositionReadModelService } from '../../ui-api/composition/composition-read-model.service';\nimport { FormationReadModelService } from '../../ui-api/formation/formation-read-model.service';\nimport { structureParentComponent } from '../structure-parent-component';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { ItemEntity } from '../../domain/source/item.entity';\n\n\n@Component({\n\tselector: 'gui-structure-container',\n\ttemplateUrl: `structure-container.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureContainerComponent extends SmartComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\t@ViewChild('container', { static: false })\n\tcontainerRef: ElementRef;\n\n\tcolumns: Array<CellTemplateWithAccessor> = [];\n\n\tsource: Array<ItemEntity> = [];\n\n\theight: number;\n\n\trowColoring: SchemaRowColoring;\n\n\tprivate autoResizeWidthEnabled: boolean = false;\n\n\tprivate scrollObservation$ = new Subject();\n\n\tconstructor(private elementRef: ElementRef,\n\t\t\t\tprivate renderer: Renderer2,\n\t\t\t\tprivate changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate ngZone: NgZone,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureCommandService: StructureCommandService,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate sourceQueryService: SourceReadModelService,\n\t\t\t\tprivate schemaQueryService: SchemaReadModelService,\n\t\t\t\tprivate compositionCommandService: CompositionCommandService,\n\t\t\t\tprivate compositionQueryService: CompositionReadModelService,\n\t\t\t\tprivate formationQueryService: FormationReadModelService,\n\t\t\t\tprivate resizeDetector: ResizeDetector,\n\t\t\t\t@Optional() @Inject(structureParentComponent) private structureParent: any) {\n\t\tsuper();\n\t}\n\n\tngOnInit() {\n\n\t\t/**\n\t\t * TODO One source of truth\n\t\t *\n\t\t * There should only one sub here.\n\t\t */\n\t\tthis.sourceQueryService\n\t\t\t.onEntities()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((source: Array<ItemEntity>) => {\n\t\t\t\tthis.source = source;\n\t\t\t\tthis.setHeight(source.length * 30);\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onTemplateColumns()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((columns: Array<CellTemplateWithAccessor>) => {\n\t\t\t\tthis.columns = columns;\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.compositionQueryService\n\t\t\t.onResizeWidth()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.autoResizeWidthEnabled = enabled;\n\t\t\t});\n\n\t\tcombineLatest(\n\t\t\tthis.sourceQueryService.onEntities(),\n\t\t\tthis.schemaQueryService.onContainerHeight()\n\t\t)\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((combine: Array<any>) => {\n\n\t\t\t\tconst source: Array<ItemEntity> = combine[0],\n\t\t\t\t\theight: number = combine[1];\n\n\t\t\t\tconst sourceSizeHeight = source.length * 27;\n\n\t\t\t\tif (sourceSizeHeight > height) {\n\t\t\t\t\tthis.setHeight(height);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setHeight(sourceSizeHeight);\n\t\t\t\t}\n\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngAfterViewInit() {\n\n\t\t// turn on when structure is ready\n\t\tif (this.structureParent) {\n\t\t\tthis.resizeDetector\n\t\t\t\t.observe(this.structureParent.getElementRef().nativeElement)\n\t\t\t\t.pipe(\n\t\t\t\t\tfilter(() => this.autoResizeWidthEnabled),\n\t\t\t\t\tmap((element: HTMLElement) => element.offsetWidth),\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\tthis.takeUntil()\n\t\t\t\t)\n\t\t\t\t.subscribe((width: number) => {\n\t\t\t\t\tthis.recalculateContainer(width);\n\t\t\t\t});\n\t\t}\n\n\t\tthis.compositionQueryService\n\t\t\t.onContainerWidth()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((width: number) => {\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'width', width + 'px');\n\t\t\t});\n\n\t\tthis.structureQueryService\n\t\t\t.onVerticalScrollEnabled()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tif (enabled) {\n\t\t\t\t\tthis.enableScrollObservation();\n\t\t\t\t} else {\n\t\t\t\t\tthis.disableScrollObservation();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t// never runs ??\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(\n\t\t\t\tfilter((str: Structure) => {\n\t\t\t\t\treturn str.isVerticalScrollEnabled();\n\t\t\t\t}),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((structure: Structure) => {\n\n\t\t\t\tconst containerHeight = structure.getContainerHeight(),\n\t\t\t\t\ttopMargin = structure.getTopMargin();\n\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'padding-top', topMargin + 'px');\n\t\t\t\tthis.renderer.setStyle(this.containerRef.nativeElement, 'height', containerHeight + 'px');\n\t\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tsuper.ngOnDestroy();\n\t\tthis.resizeDetector.destroy(this.elementRef.nativeElement);\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\t\tthis.renderer.setStyle(this.elementRef.nativeElement, 'height', this.height + 'px');\n\t}\n\n\tprivate recalculateContainer(width: number): void {\n\t\tif (this.autoResizeWidthEnabled) {\n\t\t\tthis.compositionCommandService.setContainerWidth(width);\n\t\t}\n\t}\n\n\tprivate enableScrollObservation(): void {\n\t\tthis.ngZone\n\t\t\t.runOutsideAngular(() => {\n\n\t\t\t\tfromEvent(this.elementRef.nativeElement, 'scroll')\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\t// auditTime(10),\n\t\t\t\t\t\ttakeUntil(this.scrollObservation$),\n\t\t\t\t\t\tthis.takeUntil()\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe((event: any) => {\n\n\t\t\t\t\t\tconst scrollTop = event.target.scrollTop;\n\n\t\t\t\t\t\tthis.structureCommandService.setScrollPosition(scrollTop);\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate disableScrollObservation(): void {\n\t\tthis.scrollObservation$.next();\n\t\tthis.scrollObservation$.complete();\n\t}\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'gui-structure-quick-fitlers',\n\ttemplate: `\n\t\n\t\tQuickFilters\n\t\t\n\t`\n})\nexport class StructureQuickFiltersComponent {}\n","import { Injectable } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { StructureId } from '../../../structure-id';\n\n\n@Injectable()\nexport class StructureSearchingRepository {\n\n\tprivate enabled = new Map<string, boolean>();\n\n\tprivate enabled$ = new ReplaySubject<Map<string, boolean>>();\n\n\tconstructor() {\n\t}\n\n\tsetEnabled(enabled: boolean, structureId: StructureId): void {\n\t\tthis.enabled.set(structureId.toString(), enabled);\n\t\tthis.enabled$.next(this.enabled);\n\t}\n\n\tselectSearchingEnabled(structureId: StructureId): Observable<boolean> {\n\n\t\treturn this.enabled$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   map((map: Map<string, boolean>) => {\n\t\t\t\t\t\t   return map.get(structureId.toString());\n\t\t\t\t\t   }),\n\t\t\t\t\t   distinctUntilChanged()\n\t\t\t\t   );\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { StructureSearchingRepository } from '../../../domain/structure/read/searching/structure.searching.repository';\nimport { StructureId } from '../../../domain/structure-id';\n\n\n@Injectable()\nexport class StructureSearchReadModelRepository {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {}\n\n\tonSearchEnabled(structureId: StructureId): Observable<boolean> {\n\t\treturn this.structureSearchingRepository.selectSearchingEnabled(structureId);\n\t}\n\n}\n","import { InjectionToken } from '@angular/core';\n\nconst prefix = 'Structure -';\n\nexport const STRUCTURE_CSS_CLASS_NAME = new InjectionToken<string>(`${prefix} - css className`);\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, ViewEncapsulation } from '@angular/core';\n\nimport { SmartComponent } from '../../../../common/cdk/smart-component';\nimport { Structure } from '../../domain/structure/read/structure';\nimport { Paging } from '../../domain/paging/read/paging';\nimport { StructureDefinition } from '../structure-definition';\nimport { StructureId } from '../../domain/structure-id';\nimport { StructureReadModelService } from '../../ui-api/structure/structure-read-model.service';\nimport { PagingReadModelService } from '../../ui-api/paging/paging-read-model.service';\nimport { StructureInfoPanelEnabledArchive } from '../panel/info/structure.info-panel-enabled.archive';\nimport { StructureAggregationArchive } from '../panel/aggregation/structure.aggregation.archive';\nimport { StructureFilterReadModelRepository } from '../../ui-api/structure/filter/structure.filter.read-model.repository';\nimport { StructureSearchReadModelRepository } from '../../ui-api/structure/search/structure-search.read-model.repository';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../../ui-api/structure/structure-tokens';\nimport { StructureAggregationPanelConfig } from '../panel/aggregation/structure.aggregation-panel.config';\n\n\n\n@Component({\n\tselector: 'gui-structure-blueprint',\n\ttemplateUrl: `structure.blueprint.component.html`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureBlueprintComponent extends SmartComponent {\n\n\tstructure: Structure;\n\n\tsearchEnabled: boolean = false;\n\n\ttopAggregationPanelEnabled: boolean = false;\n\n\tbottomAggregationPanelEnabled: boolean = false;\n\n\tquickFiltersEnabled: boolean = false;\n\n\tinfoPanelEnabled: boolean = false;\n\n\treadonly contentCssClass: string;\n\n\treadonly headerCssClass: string;\n\n\tprivate pagingReadModel: Paging;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureDefinition: StructureDefinition,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureQueryService: StructureReadModelService,\n\t\t\t\tprivate pagingQueryService: PagingReadModelService,\n\t\t\t\tprivate structureInfoPanelEnabledArchive: StructureInfoPanelEnabledArchive,\n\t\t\t\tprivate structureAggregationArchive: StructureAggregationArchive,\n\t\t\t\tprivate structureFilterReadModelRepository: StructureFilterReadModelRepository,\n\t\t\t\tprivate structureSearchReadModelRepository: StructureSearchReadModelRepository,\n\t\t\t\t@Inject(STRUCTURE_CSS_CLASS_NAME) private className: string) {\n\t\tsuper();\n\n\t\tthis.headerCssClass = `gui-${this.className}-header`;\n\t\tthis.contentCssClass = `gui-${this.className}-content`;\n\t}\n\n\tngOnInit() {\n\t\tthis.structureQueryService\n\t\t\t.onStructure()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((structure: Structure) => {\n\t\t\t\tthis.structure = structure;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.pagingQueryService\n\t\t\t.onPaging()\n\t\t\t.pipe(this.takeUntil())\n\t\t\t.subscribe((paging: Paging) => {\n\t\t\t\tthis.pagingReadModel = paging;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureSearchReadModelRepository\n\t\t\t.onSearchEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.searchEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\n\t\tthis.structureFilterReadModelRepository\n\t\t\t.onQuickFiltersEnabled(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.quickFiltersEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureAggregationArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((config: StructureAggregationPanelConfig) => {\n\t\t\t\tthis.topAggregationPanelEnabled = config.itTopEnabled();\n\t\t\t\tthis.bottomAggregationPanelEnabled = config.itBottomEnabled();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t\tthis.structureInfoPanelEnabledArchive\n\t\t\t.onValue()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((enabled: boolean) => {\n\t\t\t\tthis.infoPanelEnabled = enabled;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tgetHeaderTopClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-top';\n\t}\n\n\tgetHeaderBottomClasses(): string {\n\t\treturn this.headerCssClass + ' gui-header-bottom';\n\t}\n\n\tisColumnHeaderTopEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isTopHeaderEnabled();\n\t}\n\n\tisColumnHeaderBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.isHeaderEnabled() && this.structure && this.structure.isBottomHeaderEnabled();\n\t}\n\n\tisPagingTopEnabled(): boolean {\n\t\treturn this.structureDefinition.getTopPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerTop();\n\t}\n\n\tisPagingBottomEnabled(): boolean {\n\t\treturn this.structureDefinition.getBottomPaging().isEnabled() && this.pagingReadModel && this.pagingReadModel.isPagerBottom();\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedEvent extends DomainEvent {\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly values: Map<string, AggregatedValues>) {\n\t\tsuper(structureId, 'StructureAggregationsChangedEvent');\n\t}\n\n\tgetAggregations() {\n\t\treturn this.values;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DomainEvent, DomainEventBus } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\n\n\n@Injectable()\nexport class StructureAggregationUiEventsRepository {\n\n\tconstructor(private readonly domainEventBus: DomainEventBus) {\n\t}\n\n\tonAggregationsChanged(structureId: StructureId): Observable<DomainEvent> {\n\n\t\treturn this.domainEventBus\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((event: DomainEvent) => event instanceof StructureAggregationsChangedEvent),\n\t\t\t\t\t   filter((event: DomainEvent) => event.aggregateId.toString() === structureId.toString())\n\t\t\t\t   );\n\t}\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { CellTemplateWithContext } from '../../../domain/composition/read/definition/cell-template-with-context';\nimport { StructureId } from '../../../domain/structure-id';\nimport { StructureAggregationUiEventsRepository } from '../../../ui-api/structure/aggregation/structure.aggregation.ui-events-repository';\nimport { CompositionReadModelService } from '../../../ui-api/composition/composition-read-model.service';\nimport { StructureAggregationsChangedEvent } from '../../../domain/structure/command/aggregation/structure.aggregations-changed.event';\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\n\n@Component({\n\tselector: 'gui-structure-aggregation-panel',\n\ttemplate: `\n\n\t\t<ng-container *ngIf=\"enabled && aggregations\">\n\n\t\t\t<div *ngFor=\"let column of headerColumns\"\n\t\t\t\t [style.width.px]=\"column.width\"\n\t\t\t\t class=\"gui-header-cell gui-structure-aggregation-cell\">\n\n\t\t\t\t<ng-container *ngIf=\"aggregations && !!aggregations.get(column.getFieldId().getId())\">\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).count)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tCount: <span>{{ aggregations.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).distinct)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tDistinct: <span>{{ aggregations.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).sum)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&sum;</span> Sum</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).sum }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).average)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-mean\"><span>_</span><span>X Average</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).average }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).min)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&and;</span> Min</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).min }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\" isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).max)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div><span class=\"gui-math-symbol\">&or;</span> Max</div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).max }}</span></div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).median)\" class=\"gui-structure-aggregation-value\">\n\n\t\t\t\t\t\t<div class=\"gui-median\"><span>~</span><span>X Median</span></div>\n\t\t\t\t\t\t<span>{{ aggregations.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).truthy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tTruthy: <span>{{ aggregations.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div *ngIf=\"isAggregateTypePresent(aggregations.get(column.getFieldId().getId()).falsy)\" class=\"gui-structure-aggregation-value\">\n\t\t\t\t\t\tFalsy: <span>{{ aggregations.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\n\t\t</ng-container>\n\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureAggregationPanelComponent extends SmartComponent {\n\n\t@Input()\n\tenabled: boolean;\n\n\theaderColumns: Array<CellTemplateWithContext>;\n\n\taggregations: Map<string, any>;\n\n\tconstructor(private changeDetectorRef: ChangeDetectorRef,\n\t\t\t\tprivate structureId: StructureId,\n\t\t\t\tprivate structureAggregationUiEventsRepository: StructureAggregationUiEventsRepository,\n\t\t\t\tprivate readonly compositionQueryService: CompositionReadModelService) {\n\t\tsuper();\n\n\t\tthis.structureAggregationUiEventsRepository\n\t\t\t.onAggregationsChanged(this.structureId)\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((event: StructureAggregationsChangedEvent) => {\n\n\t\t\t\tthis.aggregations = event.getAggregations();\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\t}\n\n\tngOnInit() {\n\n\t\tthis.compositionQueryService\n\t\t\t.onHeaderColumns()\n\t\t\t.pipe(\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((columns: Array<CellTemplateWithContext>) => {\n\t\t\t\tthis.headerColumns = columns;\n\t\t\t\tthis.changeDetectorRef.detectChanges();\n\t\t\t});\n\n\t}\n\n\tisAggregateTypePresent(aggregation: number): boolean {\n\t\treturn aggregation !== undefined && aggregation !== null;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryStore } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../domain/structure/command/structure.aggregate';\n\n\n@Injectable()\nexport class InMemoryStructureStore extends InMemoryStore<StructureAggregate> {\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryAggregateStore } from '@generic-ui/hermes';\nimport { AggregateStoreRegister } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateStore extends InMemoryAggregateStore<StructureAggregate> {\n\n\tconstructor(inMemoryStructureStore: InMemoryStructureStore,\n\t\t\t\taggregateStoreRegister: AggregateStoreRegister) {\n\t\tsuper(inMemoryStructureStore, aggregateStoreRegister);\n\t}\n}\n","import { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregate } from './structure.aggregate';\n\nexport abstract class StructureAggregateRepository {\n\n\tabstract getById(aggregateId: AggregateId): StructureAggregate;\n\n\tabstract save(aggregate: StructureAggregate): void;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateId } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../domain/structure/command/structure-aggregate.repository';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\n\nimport { InMemoryStructureAggregateStore } from './in-memory.structure.aggregate-store';\n\n\n@Injectable()\nexport class InMemoryStructureAggregateRepository extends StructureAggregateRepository {\n\n\tconstructor(private inMemoryStructureAggregateStore: InMemoryStructureAggregateStore) {\n\t\tsuper();\n\t}\n\n\tgetById(aggregateId: AggregateId): StructureAggregate {\n\t\tconst structure = this.inMemoryStructureAggregateStore.getById(aggregateId);\n\n\t\tstructure.clearEvents();\n\n\t\treturn structure;\n\t}\n\n\tsave(aggregate: StructureAggregate): void {\n\t\tthis.inMemoryStructureAggregateStore.save(aggregate);\n\t}\n\n}\n","import { ItemEntity } from '../../../source/item.entity';\n\nexport class SelectedRowsList {\n\n\tconstructor(private readonly rowIds: Array<string>) {\n\t}\n\n\tisRowSelected(entity: ItemEntity): boolean {\n\t\treturn !!(this.rowIds.find((id) => entity.equalsById(id)));\n\t}\n\n\tgetIds(): Array<string> {\n\t\treturn this.rowIds;\n\t}\n}\n","import { SelectedRowsList } from './selected-rows/selected-rows-list';\n\nexport class Formation {\n\n\tprivate readonly selectedRowsList: SelectedRowsList;\n\n\tconstructor(selectedRows: Array<string>) {\n\t\tthis.selectedRowsList = new SelectedRowsList(selectedRows);\n\t}\n\n\tgetSelectedRows(): SelectedRowsList {\n\t\treturn this.selectedRowsList;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationAggregate } from './command/formation-aggregate';\nimport { Formation } from './read/formation';\n\n\n@Injectable()\nexport class FormationConverter {\n\n\tconvert(aggregate: FormationAggregate): Formation {\n\n\t\tconst rows = aggregate.getSelectedRows();\n\n\t\treturn new Formation(rows);\n\t}\n}\n","import { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaCssClass {\n\n\tconstructor(public readonly verticalGrid: boolean,\n\t\t\t\tpublic readonly horizontalGrid: boolean,\n\t\t\t\tpublic readonly theme: SchemaTheme,\n\t\t\t\tpublic readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n}\n","import { SchemaRowColoring } from '../schema-row-coloring';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaColumnHeader } from './schema-column-header';\nimport { SchemaCssClass } from './schema-css-class';\n\nexport class Schema {\n\n\tconstructor(private readonly width: number,\n\t\t\t\tprivate readonly height: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly verticalGridEnabled: boolean,\n\t\t\t\tprivate readonly horizontalGridEnabled: boolean,\n\t\t\t\tprivate readonly theme: SchemaTheme,\n\t\t\t\tprivate readonly columnHeader: SchemaColumnHeader,\n\t\t\t\tprivate readonly rowColoring: SchemaRowColoring) {\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGridEnabled;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGridEnabled;\n\t}\n\n\tgetColumnHeader(): SchemaColumnHeader {\n\t\treturn this.columnHeader;\n\t}\n\n\tgetCssClasses(): SchemaCssClass {\n\t\treturn new SchemaCssClass(\n\t\t\tthis.isVerticalGridEnabled(),\n\t\t\tthis.isHorizontalGridEnabled(),\n\t\t\tthis.getTheme(),\n\t\t\tthis.getRowColoring()\n\t\t);\n\t}\n\n}\n","export class SchemaColumnHeader {\n\n\tconstructor(private readonly top: boolean,\n\t\t\t\tprivate readonly bottom: boolean) {\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SchemaAggregate } from './command/schema-aggregate';\nimport { Schema } from './read/schema';\nimport { ColumnHeaderEntity } from './command/column-header/column-header.entity';\nimport { SchemaColumnHeader } from './read/schema-column-header';\n\n\n@Injectable()\nexport class SchemaConverter {\n\n\tconvert(aggregate: SchemaAggregate): Schema {\n\n\t\tconst columnHeader = aggregate.getColumnHeader();\n\n\t\treturn new Schema(\n\t\t\taggregate.getWidth(),\n\t\t\taggregate.getHeight(),\n\t\t\taggregate.getContainerHeight(),\n\t\t\taggregate.isVerticalGridEnabled(),\n\t\t\taggregate.isHorizontalGridEnabled(),\n\t\t\taggregate.getTheme(),\n\t\t\tthis.convertColumnHeader(columnHeader),\n\t\t\taggregate.getRowColoring()\n\t\t);\n\t}\n\n\tprivate convertColumnHeader(columnHeader: ColumnHeaderEntity): SchemaColumnHeader {\n\t\treturn new SchemaColumnHeader(columnHeader.isHeaderOnTop(), columnHeader.isHeaderOnBottom());\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregate } from './command/paging.aggregate';\nimport { Paging } from './read/paging';\n\n\n@Injectable()\nexport class PagingConverter {\n\n\tconvert(aggregate: PagingAggregate): Paging {\n\t\treturn new Paging(\n\t\t\taggregate.isEnabled(),\n\t\t\taggregate.getPage(),\n\t\t\taggregate.getPageSize(),\n\t\t\taggregate.getPageSizes(),\n\t\t\taggregate.isPagerTop(),\n\t\t\taggregate.isPagerBottom(),\n\t\t\taggregate.isNextPageDisabled(),\n\t\t\taggregate.isPrevPageDisabled(),\n\t\t\taggregate.calculateStart(),\n\t\t\taggregate.calculateEnd(),\n\t\t\taggregate.getSourceSize()\n\t\t);\n\t}\n\n}\n","export class Source {\n\n\tconstructor(private readonly loading: boolean) {}\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Source } from './read/source';\nimport { SourceManager } from './command/source.manager';\n\n@Injectable()\nexport class SourceConverter {\n\n\tconvert(aggregate: SourceManager): Source {\n\t\treturn new Source(aggregate.isLoading());\n\t}\n\n}\n","export class VerticalFormationReadModel {\n\n\tconstructor(private readonly enabled: boolean,\n\t\t\t\tprivate readonly topMargin: number,\n\t\t\t\tprivate readonly containerHeight: number,\n\t\t\t\tprivate readonly viewportHeight: number) {\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.topMargin;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.containerHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { VerticalFormation } from '../../command/vertical-formation/vertical-formation';\nimport { VerticalFormationReadModel } from './vertical-formation.read-model';\n\n\n@Injectable()\nexport class VerticalFormationConverter {\n\n\tconvert(verticalFormation: VerticalFormation): VerticalFormationReadModel {\n\n\t\tconst enabled = verticalFormation.isEnabled(),\n\t\t\ttopMargin = verticalFormation.getTopMargin(),\n\t\t\tcontainerHeight = verticalFormation.calcFullHeight(),\n\t\t\tviewportHeight = verticalFormation.getViewPortHeight();\n\n\t\treturn new VerticalFormationReadModel(enabled, topMargin, containerHeight, viewportHeight);\n\t}\n\n}\n","import { AggregateId, ReadModel } from '@generic-ui/hermes';\n\nimport { Formation } from '../../formation/read/formation';\nimport { Schema } from '../../schema/read/schema';\nimport { Paging } from '../../paging/read/paging';\nimport { Source } from '../../source/read/source';\nimport { ItemEntity } from '../../source/item.entity';\nimport { VerticalFormationReadModel } from './vertical-formation/vertical-formation.read-model';\n\n\n\nexport class Structure extends ReadModel {\n\n\tprivate readonly formation: Formation;\n\n\tprivate readonly schema: Schema;\n\n\tprivate readonly paging: Paging;\n\n\tprivate readonly entities: Array<ItemEntity>;\n\n\tprivate readonly source: Source;\n\n\tprivate readonly verticalFormation: VerticalFormationReadModel;\n\n\tconstructor(uid: AggregateId,\n\t\t\t\tformation: Formation,\n\t\t\t\tschema: Schema,\n\t\t\t\tpaging: Paging,\n\t\t\t\tentities: Array<ItemEntity>,\n\t\t\t\tsource: Source,\n\t\t\t\tverticalFormation: VerticalFormationReadModel) {\n\t\tsuper(uid);\n\t\tthis.formation = formation;\n\t\tthis.schema = schema;\n\t\tthis.paging = paging;\n\t\tthis.entities = entities;\n\t\tthis.source = source;\n\t\tthis.verticalFormation = verticalFormation;\n\t}\n\n\tgetFormation(): Formation {\n\t\treturn this.formation;\n\t}\n\n\tgetSchema(): Schema {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): Paging {\n\t\treturn this.paging;\n\t}\n\n\tgetEntities(): Array<ItemEntity> {\n\t\treturn this.entities;\n\t}\n\n\tgetSource(): Source {\n\t\treturn this.source;\n\t}\n\n\tgetSelectedEntities(): Array<ItemEntity> {\n\n\t\tconst selectedIds = this.formation.getSelectedRows().getIds();\n\n\t\treturn this.entities.filter((entity: ItemEntity) => {\n\t\t\treturn selectedIds.some((id: string) => entity.equalsById(id));\n\t\t});\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.verticalFormation.getTopMargin();\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.verticalFormation.getContainerHeight();\n\t}\n\n\tisLoaderVisible(): boolean {\n\t\tif (this.getSchema().getHeight() > 150) {\n\t\t\treturn this.getSource().isLoading();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tisTopHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isTopHeaderEnabled();\n\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.topHeader to presentation\n\t}\n\n\tisBottomHeaderEnabled(): boolean {\n\t\treturn this.schema.getColumnHeader().isBottomHeaderEnabled();\n\t\t\t// && this.presentation.getColumns().length > 0; // TODO Move schema.bottomHeader to presentation\n\t}\n\n\tisReadyToDisplay(): boolean {\n\t\treturn this.entities.length > 0;\n\t\t// this.presentation.getColumns().length > 0; // TODO presentation getColumns\n\t}\n\n\tisVerticalScrollEnabled(): boolean {\n\t\treturn this.verticalFormation.isEnabled();\n\t}\n\n}\n\n","import { Injectable } from '@angular/core';\n\nimport { FormationConverter } from '../formation/formation.converter';\nimport { SchemaConverter } from '../schema/schema.converter';\nimport { PagingConverter } from '../paging/paging.converter';\nimport { SourceConverter } from '../source/source.converter';\nimport { VerticalFormationConverter } from './read/vertical-formation/vertical-formation.converter';\nimport { StructureAggregate } from './command/structure.aggregate';\nimport { Structure } from './read/structure';\nimport { OriginItemEntity } from '../source/command/origin/origin-item-entity';\nimport { ItemEntity } from '../source/item.entity';\n\n\n@Injectable()\nexport class StructureConverter {\n\n\tconstructor(private formationConverter: FormationConverter,\n\t\t\t\tprivate schemaConverter: SchemaConverter,\n\t\t\t\tprivate pagingConverter: PagingConverter,\n\t\t\t\tprivate sourceConverter: SourceConverter,\n\t\t\t\tprivate verticalFormationConverter: VerticalFormationConverter) {}\n\n\tconvert(aggregate: StructureAggregate): Structure {\n\n\t\tconst formationAggregate = aggregate.getFormation(),\n\t\t\tschemaAggregate = aggregate.getSchema(),\n\t\t\tpagingAggregate = aggregate.getPaging(),\n\t\t\tsourceQuery = aggregate.getEntities(),\n\t\t\tsourceCoordinator = aggregate.getSource(),\n\t\t\tverticalFormation = aggregate.getVerticalFormation();\n\n\t\treturn new Structure(\n\t\t\taggregate.getId(),\n\t\t\tthis.formationConverter.convert(formationAggregate),\n\t\t\tthis.schemaConverter.convert(schemaAggregate),\n\t\t\tthis.pagingConverter.convert(pagingAggregate),\n\t\t\tthis.convertSource(sourceQuery),\n\t\t\tthis.sourceConverter.convert(sourceCoordinator),\n\t\t\tthis.verticalFormationConverter.convert(verticalFormation)\n\t\t);\n\t}\n\n\tprivate convertSource(source: Array<OriginItemEntity>): Array<ItemEntity> {\n\t\treturn source.map((originItem: OriginItemEntity) => new ItemEntity(originItem.rawData, originItem.id, originItem.getVersion()));\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { InMemoryReadModelStore } from '@generic-ui/hermes';\n\nimport { Structure } from '../../../../domain/structure/read/structure';\nimport { StructureAggregate } from '../../../../domain/structure/command/structure.aggregate';\nimport { InMemoryStructureStore } from '../in-memory.structure.store';\nimport { StructureConverter } from '../../../../domain/structure/structure.converter';\n\n\n@Injectable()\nexport class InMemoryStructureReadStore extends InMemoryReadModelStore<Structure, StructureAggregate> {\n\n\tconstructor(private inMemoryProjectStore: InMemoryStructureStore,\n\t\t\t\tprivate structureConverter: StructureConverter) {\n\t\tsuper(inMemoryProjectStore);\n\t}\n\n\ttoReadModel(aggregate: StructureAggregate): Structure {\n\t\treturn this.structureConverter.convert(aggregate);\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureInitedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureInitedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SetSourceLoadingEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SetSourceLoadingEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaThemeSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaThemeSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaHorizontalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaHorizontalGridSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaVerticalGridSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaVerticalGridSetEvent');\n\t}\n}\n","import { DomainEvent } from '@generic-ui/hermes';\nimport { AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaTopHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaTopHeaderChangedEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class SchemaBottomHeaderChangedEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SchemaBottomHeaderChangedEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class RowColoringSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'RowColoringSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class PagingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'PagingSetEvent');\n\t}\n}\n","import { DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nexport class FormationSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'FormationSetEvent');\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class VerticalScrollEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'VerticalScrollEnabledSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class ScrollPositionSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'ScrollPositionSetEvent');\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\n\nexport class OriginSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'OriginSetEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureFilterToggledEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureFilterToggledEvent');\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureSearchPhraseSetDomainEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'StructureSearchPhraseSetDomainEvent');\n\t}\n\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { filter, map, takeUntil } from 'rxjs/operators';\n\nimport { DomainEventBus, DomainEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { StructureRepository } from '../../../../domain/structure/read/structure.repository';\nimport { Structure } from '../../../../domain/structure/read/structure';\nimport { InMemoryStructureReadStore } from './in-memory-structure.read-store';\nimport { StructureInitedEvent } from '../../../../domain/structure/command/init/structure-inited.event';\nimport { SetSourceLoadingEvent } from '../../../../domain/source/command/loading/set-source-loading.event';\nimport { SchemaSetEvent } from '../../../../domain/schema/command/set/schema-set.event';\nimport { SchemaThemeSetEvent } from '../../../../domain/schema/command/theme/schema-theme-set.event';\nimport { SchemaHorizontalGridSetEvent } from '../../../../domain/schema/command/grid/horizontal/schema-horizontal-grid-set.event';\nimport { SchemaVerticalGridSetEvent } from '../../../../domain/schema/command/grid/vertical/schema-vertical-grid-set.event';\nimport { SchemaTopHeaderChangedEvent } from '../../../../domain/schema/command/column-header/top/schema-top-header-changed.event';\nimport { SchemaBottomHeaderChangedEvent } from '../../../../domain/schema/command/column-header/bottom/schema-bottom-header-changed.event';\nimport { RowColoringSetEvent } from '../../../../domain/schema/command/coloring/set/row-coloring-set.event';\nimport { PagingSetEvent } from '../../../../domain/paging/command/set/paging-set.event';\nimport { PrevPageEvent } from '../../../../domain/paging/command/prev-page/prev-page.event';\nimport { NextPageEvent } from '../../../../domain/paging/command/next-page/next-page.event';\nimport { PagesizeChangedEvent } from '../../../../domain/paging/command/change-pagesize/pagesize-changed.event';\nimport { FormationSetEvent } from '../../../../domain/formation/command/set/formation-set.event';\nimport { SelectedRowToggledEvent } from '../../../../domain/formation/command/toggle/selected-row-toggled.event';\nimport { VerticalScrollEnabledSetEvent } from '../../../../domain/structure/command/vertical-formation/set-enabled/vertical-scroll-enabled-set.event';\nimport { ScrollPositionSetEvent } from '../../../../domain/structure/command/vertical-formation/scroll-position/scroll-position-set.event';\nimport { SortToggledEvent } from '../../../../domain/structure/command/sort/toggle/sort-toggled.event';\nimport { OriginSetEvent } from '../../../../domain/source/command/origin/set-origin/origin-set.event';\nimport { StructureFilterToggledEvent } from '../../../../domain/structure/command/filter/toggle/structure.filter-toggled.event';\nimport { StructureSearchPhraseSetDomainEvent } from '../../../../domain/structure/command/search/set/structure.search-phrase-set.domain-event';\n\n\n@Injectable()\nexport class InMemoryStructureRepository extends StructureRepository implements OnDestroy {\n\n\tprivate readonly structureIdToStructure = new Map<string, Structure>();\n\n\tprivate readonly structure$ = new ReplaySubject<Map<string, Structure>>(1);\n\n\tprivate readonly unsubscribe$ = new Subject();\n\n\tconstructor(private domainEventBus: DomainEventBus,\n\t\t\t\tprivate inMemoryStructureQueryStore: InMemoryStructureReadStore) {\n\t\tsuper();\n\n\t\tthis.domainEventBus\n\t\t\t.ofEvent(\n\t\t\t\tStructureInitedEvent,\n\t\t\t\tSetSourceLoadingEvent,\n\t\t\t\tSchemaSetEvent,\n\t\t\t\tSchemaThemeSetEvent,\n\t\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\t\tSchemaVerticalGridSetEvent,\n\t\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\t\tRowColoringSetEvent,\n\t\t\t\tPagingSetEvent,\n\t\t\t\tPrevPageEvent,\n\t\t\t\tNextPageEvent,\n\t\t\t\tPagesizeChangedEvent,\n\t\t\t\tFormationSetEvent,\n\t\t\t\tSelectedRowToggledEvent,\n\t\t\t\tVerticalScrollEnabledSetEvent,\n\t\t\t\tScrollPositionSetEvent,\n\t\t\t\tSortToggledEvent as any,\n\t\t\t\tStructureFilterToggledEvent,\n\t\t\t\tStructureSearchPhraseSetDomainEvent,\n\t\t\t\tOriginSetEvent as any\n\t\t\t)\n\t\t\t.pipe(takeUntil(this.unsubscribe$))\n\t\t\t.subscribe((event: DomainEvent) => {\n\n\t\t\t\tconst aggregateId = event.aggregateId;\n\n\t\t\t\tconst structure = this.inMemoryStructureQueryStore.getById(aggregateId),\n\t\t\t\t\tkey = structure.getId().toString();\n\n\t\t\t\tthis.structureIdToStructure.set(key, structure);\n\n\t\t\t\tthis.structure$.next(this.structureIdToStructure);\n\t\t\t});\n\t}\n\n\tonStructure(aggregateId: AggregateId): Observable<Structure> {\n\n\t\treturn this.structure$\n\t\t\t\t   .asObservable()\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structureIdToStructure: Map<string, Structure>) => {\n\n\t\t\t\t\t\t   const key = aggregateId.getId();\n\n\t\t\t\t\t\t   return structureIdToStructure.has(key);\n\t\t\t\t\t   }),\n\t\t\t\t\t   map((structureIdToStructure: Map<string, Structure>) => structureIdToStructure.get(aggregateId.getId()))\n\t\t\t\t   );\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unsubscribe$.next();\n\t\tthis.unsubscribe$.complete();\n\t}\n\n}\n","import { InMemoryStructureAggregateStore } from './commad/in-memory.structure.aggregate-store';\n\nimport { InMemoryStructureAggregateRepository } from './commad/in-memory.structure-aggregate.repository';\nimport { StructureAggregateRepository } from '../../../domain/structure/command/structure-aggregate.repository';\nimport { InMemoryStructureReadStore } from './read/in-memory-structure.read-store';\nimport { StructureRepository } from '../../../domain/structure/read/structure.repository';\nimport { InMemoryStructureRepository } from './read/in-memory.structure.repository';\nimport { InMemoryStructureStore } from './in-memory.structure.store';\n\nexport const inMemoryStructureCommandProviders = [\n\tInMemoryStructureAggregateStore,\n\t{\n\t\tprovide: StructureAggregateRepository,\n\t\tuseClass: InMemoryStructureAggregateRepository\n\t},\n];\n\nexport const inMemoryStructureReadProviders = [\n\tInMemoryStructureReadStore,\n\t{\n\t\tprovide: StructureRepository,\n\t\tuseClass: InMemoryStructureRepository\n\t}\n];\n\nexport const inMemoryStructureProviders = [\n\tInMemoryStructureStore\n];\n","export class OriginItemEntity {\n\n\tid: string;\n\n\trawData: any;\n\n\tprivate version: number;\n\n\tconstructor(id: string,\n\t\t\t\trawData: any,\n\t\t\t\tversion: number = 0) {\n\t\tthis.id = id;\n\t\tthis.rawData = rawData;\n\t\tthis.version = version;\n\t}\n\n\tgetData(): any {\n\t\treturn this.rawData;\n\t}\n\n\tgetVersion(): number {\n\t\treturn this.version;\n\t}\n\n\tbumpVersion(): void {\n\t\tthis.version += 1;\n\t}\n\n\tclone(): OriginItemEntity {\n\n\t\tconst rawData = {...this.rawData};\n\n\t\treturn new OriginItemEntity(this.id, rawData, this.version);\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin-item-entity';\n\nexport class StructureSourceItemEditedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly beforeItem: OriginItemEntity,\n\t\t\t\tprivate readonly afterItem: OriginItemEntity) {\n\t\tsuper(aggregateId, 'StructureSourceItemEditedAggregateEvent');\n\t}\n\n\tgetBeforeItem(): OriginItemEntity {\n\t\treturn this.beforeItem;\n\t}\n\n\tgetAfterItem(): OriginItemEntity {\n\t\treturn this.afterItem;\n\t}\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin-item-entity';\n\nexport class StructureOriginChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly origin: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructureOriginChangedAggregateEvent');\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n}\n","import { AggregateEvent, RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from './origin/origin-item-entity';\nimport { StructureId } from '../../structure-id';\nimport { Field } from '../../structure/command/field/data-type/field';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\n\n\nexport class SourceManager {\n\n\tprivate loading: boolean = false;\n\n\tprivate fetched: boolean = false;\n\n\tprivate origin: Array<OriginItemEntity>;\n\n\tprivate entities: Array<OriginItemEntity> = [];\n\n\t// Entities after filtering, searching\n\tprivate preparedEntities: Array<OriginItemEntity> = [];\n\n\tprivate slicedEntities: Array<OriginItemEntity> = [];\n\n\tisLoading(): boolean {\n\t\treturn this.loading;\n\t}\n\n\tisFetched(): boolean {\n\t\treturn this.fetched;\n\t}\n\n\tsetLoading(enabled: boolean): void {\n\t\tthis.loading = enabled;\n\t}\n\n\tsetEntities(ent: Array<OriginItemEntity>): void {\n\t\tthis.entities = ent;\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.entities;\n\t}\n\n\tsetPreparedEntities(): void {\n\t\tthis.preparedEntities = [...this.entities];\n\t}\n\n\tgetPreparedEntities(): Array<OriginItemEntity> {\n\t\treturn this.preparedEntities;\n\t}\n\n\tsetSlicedEntities(ent: Array<OriginItemEntity>) {\n\t\tthis.slicedEntities = ent;\n\t}\n\n\tgetSlicedEntities(): Array<OriginItemEntity> {\n\t\treturn this.slicedEntities;\n\t}\n\n\tsetOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = this.convertItems(items);\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tsetConvertedOrigin(items: Array<any> = [], structureId: StructureId): AggregateEvent {\n\t\tthis.origin = items;\n\n\t\treturn this.createOriginChangedEvent(structureId);\n\t}\n\n\tgetOrigin(): Array<OriginItemEntity> {\n\t\treturn this.origin;\n\t}\n\n\tgetOriginSize(): number {\n\t\treturn this.origin.length;\n\t}\n\n\t// editOriginItemByProperty(byField, value: any, field: Field, structureId: StructureId): AggregateEvent {\n\t//\n\t// }\n\n\teditOriginItem(itemId: string, value: any, field: Field, structureId: StructureId): ReadonlyArray<AggregateEvent> {\n\n\t\tconst item: OriginItemEntity = this.findOriginItem(itemId),\n\t\t\titemBeforeChange = item.clone();\n\n\t\tif (item) {\n\t\t\titem.rawData[field.getAccessor()] = value;\n\t\t\titem.bumpVersion();\n\t\t}\n\n\t\treturn [\n\t\t\tnew StructureSourceItemEditedAggregateEvent(structureId, itemBeforeChange, item.clone()),\n\t\t\tthis.createOriginChangedEvent(structureId)\n\t\t];\n\t}\n\n\tremoveOriginItem(itemId: string, structureId: StructureId): Array<AggregateEvent> {\n\n\t\tconst index = this.findOriginItemIndex(itemId);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.origin.splice(index, 1);\n\n\t\t\treturn [this.createOriginChangedEvent(structureId)];\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate convertItems(items: Array<any>): Array<OriginItemEntity> {\n\t\treturn items.map((item: any) => new OriginItemEntity(RandomStringGenerator.generate(), item));\n\t}\n\n\tprivate createOriginChangedEvent(structureId: StructureId): AggregateEvent {\n\t\treturn new StructureOriginChangedAggregateEvent(structureId, this.origin);\n\t}\n\n\tprivate findOriginItem(itemId: string): OriginItemEntity {\n\t\treturn this.origin.find((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n\tprivate findOriginItemIndex(itemId: string): number {\n\t\treturn this.origin.findIndex((item: OriginItemEntity) => item.id === itemId);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { SourceManager } from './source.manager';\n\n\n@Injectable()\nexport class SourceManagerFactory {\n\n\tcreateDefault(): SourceManager {\n\t\treturn new SourceManager();\n\t}\n\n\tcreate(): SourceManager {\n\t\treturn new SourceManager();\n\t}\n\n}\n","export class VerticalRange {\n\n\tconstructor(private readonly start: number,\n\t\t\t\tprivate readonly end: number) {\n\t}\n\n\tgetStart(): number {\n\t\treturn this.start;\n\t}\n\n\tgetEnd(): number {\n\t\treturn this.end;\n\t}\n\n}\n","import { VerticalRange } from './vertical-range';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\n\nexport class VerticalFormation {\n\n\tprivate rowHeight: number = 30;\n\n\tprivate hiddenItemsTop = 0;\n\n\tprivate hiddenItemsBottom = 0;\n\n\tprivate viewportHeight: number;\n\n\tprivate scrollPosition: number;\n\n\tprivate range: VerticalRange;\n\n\tprivate sourceSize: number;\n\n\tprivate logger: Logger;\n\n\tconstructor(private enabled: boolean = false,\n\t\t\t\tviewportHeight: number = 0,\n\t\t\t\tsourceSize: number = 0,\n\t\t\t\tscrollPosition: number = 0,\n\t\t\t\trowHeight?: number,\n\t\t\t\thiddenItemsTop?: number,\n\t\t\t\thiddenItemsBottom?: number) {\n\t\tthis.viewportHeight = viewportHeight;\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.scrollPosition = scrollPosition;\n\n\t\tif (Number.isInteger(rowHeight)) {\n\t\t\tthis.rowHeight = rowHeight;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsTop)) {\n\t\t\tthis.hiddenItemsTop = hiddenItemsTop;\n\t\t}\n\n\t\tif (Number.isInteger(hiddenItemsBottom)) {\n\t\t\tthis.hiddenItemsBottom = hiddenItemsBottom;\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\n\tisEnabled(): boolean {\n\t\treturn this.enabled &&\n\t\t\tthis.viewportHeight > 0 &&\n\t\t\tthis.sourceSize > 0;\n\t}\n\n\tgetRange(): VerticalRange {\n\t\treturn this.range;\n\t}\n\n\tgetTopMargin(): number {\n\t\treturn this.range.getStart() * this.rowHeight;\n\t}\n\n\tcalculateRange(): any {\n\n\t\tif (this.calcFullHeight() <= this.viewportHeight) {\n\t\t\tthis.range = new VerticalRange(0, this.sourceSize);\n\t\t\treturn;\n\t\t}\n\n\t\tconst itemsInViewport = Math.floor(this.viewportHeight / this.rowHeight);\n\n\t\tconst hiddenElements = Math.floor(this.scrollPosition / this.rowHeight);\n\n\t\tconst topMargin = Math.abs(hiddenElements - this.hiddenItemsTop) * this.rowHeight;\n\n\t\tlet start = (hiddenElements - this.hiddenItemsTop);\n\n\t\tconst viewportElements = Math.ceil(this.viewportHeight / this.rowHeight);\n\n\t\tlet end = start + viewportElements + this.hiddenItemsBottom;\n\n\t\tif (end > this.sourceSize) {\n\t\t\tend = this.sourceSize;\n\t\t\tstart = end - itemsInViewport;\n\t\t}\n\n\t\tthis.range = new VerticalRange(start, end);\n\n\t\treturn {\n\t\t\tstart,\n\t\t\tend,\n\t\t\ttopMargin\n\t\t};\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\n\t\t// TODO dispatch aggregate event\n\t\tif (this.enabled && this.viewportHeight === 0) {\n\t\t\tthis.logger.warn('Height needs to be specified in order for virtual scroll to work.');\n\t\t}\n\n\t\tthis.calculateRange();\n\t}\n\n\tsetSourceSize(sourceSize: number = 0): void {\n\t\tthis.sourceSize = sourceSize;\n\t\tthis.calculateRange();\n\t}\n\n\tsetTopHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsTop = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetBottomHiddenItemsCount(count: number): void {\n\t\tthis.hiddenItemsBottom = count;\n\t\tthis.calculateRange();\n\t}\n\n\tsetScrollPosition(scrollPosition: number): void {\n\t\tthis.scrollPosition = scrollPosition;\n\t\tthis.calculateRange();\n\t}\n\n\tsetViewportHeight(height: number): void {\n\t\tthis.viewportHeight = height;\n\t\tthis.calculateRange();\n\t}\n\n\tsetRowHeight(height: number): void {\n\t\tthis.rowHeight = height;\n\t}\n\n\tsetLogger(logger: Logger): void {\n\t\tthis.logger = logger;\n\t}\n\n\tcalcFullHeight(): number {\n\t\treturn this.sourceSize * this.rowHeight;\n\t}\n\n\tgetViewPortHeight(): number {\n\t\treturn this.viewportHeight;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Logger } from '../../../../../../common/cdk/logger/logger';\nimport { VerticalFormation } from './vertical-formation';\n\n\n@Injectable()\nexport class VerticalFormationFactory {\n\n\tconstructor(private logger: Logger) {}\n\n\tcreate(enabled: boolean = false,\n\t\t   viewportHeight: number = 0,\n\t\t   sourceSize: number = 0,\n\t\t   scrollPosition: number = 0,\n\t\t   rowHeight?: number,\n\t\t   hiddenItemsTop?: number,\n\t\t   hiddenItemsBottom?: number): VerticalFormation {\n\n\t\tconst vf = new VerticalFormation(\n\t\t\tenabled,\n\t\t\tviewportHeight,\n\t\t\tsourceSize,\n\t\t\tscrollPosition,\n\t\t\trowHeight,\n\t\t\thiddenItemsTop,\n\t\t\thiddenItemsBottom\n\t\t);\n\n\t\tvf.setLogger(this.logger);\n\n\t\treturn vf;\n\t}\n\n}\n","export const AGGREGATION_CALCULATORS = 'GUI - Aggregation Calculators';\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\nimport { AggregatedValues } from './calculation/aggregated.values';\n\n\n\nexport class StructureAggregationsChangedAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly aggregatedValues: Map<string, AggregatedValues>) {\n\t\tsuper(aggregateId, 'StructureAggregationsChangedAggregateEvent');\n\t}\n\n\tgetAggregations(): Map<string, AggregatedValues> {\n\t\treturn this.aggregatedValues;\n\t}\n}\n","import { AggregateEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../structure-id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { StructureAggregationsChangedAggregateEvent } from './structure.aggregations-changed.aggregate-event';\n\n\nexport class AggregationManager {\n\n\tprivate readonly structureId: StructureId;\n\n\tprivate enabled: boolean = false;\n\n\tprivate readonly values = new Map<FieldId, any>();\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tprivate readonly calculators: Array<AggregationCalculator<any, any>>) {\n\t\tthis.structureId = structureId;\n\t}\n\n\tcalculate(fields: Array<Field>, entities: Array<OriginItemEntity>): Array<AggregateEvent> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst calculations = new Map();\n\n\t\tthis.calculators.forEach((calc: AggregationCalculator<any, any>) => {\n\n\t\t\tconst aggregatedValues = calc.calculate(fields, entities);\n\n\t\t\tif (aggregatedValues) {\n\t\t\t\tArray.from(aggregatedValues.keys())\n\t\t\t\t\t .forEach((key: any) => {\n\t\t\t\t\t\t calculations.set(key, aggregatedValues.get(key));\n\t\t\t\t\t });\n\t\t\t}\n\t\t});\n\n\t\tif (calculations.size > 0) {\n\t\t\treturn [\n\t\t\t\tnew StructureAggregationsChangedAggregateEvent(this.structureId, calculations)\n\t\t\t];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\n\t}\n\n\tsetEnabled(enabled: boolean): void {\n\t\tthis.enabled = enabled;\n\t}\n\n\tadd() {\n\t}\n\n\tremove() {\n\t}\n\n\tupdate() {\n\t}\n\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { AggregationCalculator } from './calculation/aggregation.calculator';\nimport { StructureId } from '../../../structure-id';\nimport { AggregationManager } from './aggregation.manager';\n\n\n\n@Injectable()\nexport class AggregationManagerFactory {\n\n\tconstructor(@Inject(AGGREGATION_CALCULATORS) private calculators: Array<AggregationCalculator<any, any>>) {}\n\n\tcreate(structureId: StructureId): AggregationManager {\n\t\treturn new AggregationManager(structureId, this.calculators);\n\t}\n\n}\n","import { FilterId } from './filter.id';\nimport { Field } from '../field/data-type/field';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureFilter {\n\n\tprivate readonly filterId: FilterId;\n\n\tprivate field: Field;\n\n\tprivate filterValue: any;\n\n\tconstructor(id: FilterId,\n\t\t\t\tfield: Field,\n\t\t\t\tfilterValue: any) {\n\t\tthis.filterId = id;\n\t\tthis.field = field;\n\t\tthis.filterValue = filterValue;\n\t}\n\n\tgetFieldId(): FieldId {\n\t\treturn this.field.getId();\n\t}\n\n\tgetFilterValue(): any {\n\t\treturn this.filterValue;\n\t}\n\n\tsetFilterValue(filterValue: any): void {\n\t\tthis.filterValue = filterValue;\n\t}\n\n\t// Move to container\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.filter((item: OriginItemEntity) => {\n\n\t\t\tif (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.filterString(item);\n\t\t\t} else if (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.filterNumber(item);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.filterBoolean(item);\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate filterString(item: OriginItemEntity): boolean {\n\t\tconst value = this.field.getValue(item);\n\n\t\tif (typeof value === 'string') {\n\t\t\treturn value.toLowerCase().indexOf(this.filterValue.toLowerCase()) > -1;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate filterNumber(item: OriginItemEntity): boolean {\n\t\tconst numberValue = this.field.getValue(item);\n\n\t\treturn numberValue > this.filterValue;\n\t}\n\n\tprivate filterBoolean(item: OriginItemEntity): boolean {\n\t\tconst booleanValue = this.field.getValue(item);\n\n\t\treturn booleanValue === this.filterValue;\n\t}\n\n}\n","import { Field } from '../field/data-type/field';\n\nexport class FilterId {\n\n\tprivate readonly id: string;\n\n\tconstructor(field: Field,\n\t\t\t\tfilterId: string) {\n\n\t\tconst fieldId = field.getId().toString();\n\n\t\tthis.id = fieldId + '@' + filterId;\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n}\n","import { FilterConfig } from '../../../../ui-api/structure/filter/filter-config';\nimport { SearchConfig } from '../../../../ui-api/structure/search/search-config';\nimport { QuickFiltersConfig } from '../../../../ui-api/structure/filter/quick-filters.config';\n\nexport class FilterSettings {\n\n\tprivate filteringEnabled: boolean = false;\n\n\tprivate searchEnabled: boolean = false;\n\n\tprivate quickFiltersEnabled: boolean = false;\n\n\tconstructor(filteringEnabled: boolean = false,\n\t\t\t\tsearchEnabled: boolean = false,\n\t\t\t\tquickFiltersEnabled: boolean = false) {\n\t\tthis.filteringEnabled = filteringEnabled;\n\t\tthis.searchEnabled = searchEnabled;\n\t\tthis.quickFiltersEnabled = quickFiltersEnabled;\n\t}\n\n\tisFilteringEnabled(): boolean {\n\t\treturn this.filteringEnabled;\n\t}\n\n\tisQuickFilteringEnabled(): boolean {\n\t\treturn this.quickFiltersEnabled;\n\t}\n\n\tisSearchingEnabled(): boolean {\n\t\treturn this.searchEnabled;\n\t}\n\n\tsetFilterConfig(config: FilterConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.filteringEnabled = config.enabled;\n\t\t}\n\t}\n\n\tsetSearchingConfig(config: SearchConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.searchEnabled = config.enabled;\n\t\t}\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig): void {\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.quickFiltersEnabled = config.enabled;\n\t\t}\n\t}\n\n}\n","import { StructureFilter } from './structure.filter';\nimport { Field } from '../field/data-type/field';\nimport { FilterId } from './filter.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { FilterSettings } from './filter.settings';\n\n\nexport class FilterManager {\n\n\tprivate readonly filterSettings = new FilterSettings();\n\n\tprivate readonly filters = new Map<string, StructureFilter>();\n\n\tgetAll(): Array<StructureFilter> {\n\t\treturn Array.from(this.filters)\n\t\t\t\t\t.map((arr) => arr[1]);\n\t}\n\n\tgetSettings(): FilterSettings {\n\t\treturn this.filterSettings;\n\t}\n\n\taddFilter(field: Field, externalFilterId: string, filterValue: string): void {\n\n\t\tconst filterId = new FilterId(field, externalFilterId),\n\t\t\tfilter = new StructureFilter(filterId, field, filterValue);\n\n\t\tif (filterValue === '') {\n\t\t\tthis.filters.delete(filterId.getId());\n\t\t} else {\n\t\t\tthis.filters.set(filterId.getId(), filter);\n\t\t}\n\t}\n\n\tfilter(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst filters = this.getAll();\n\n\t\tlet filteredEntities = [...entities];\n\n\t\tfor (let filter of filters) {\n\t\t\tfilteredEntities = filter.filter(filteredEntities);\n\t\t}\n\n\t\treturn filteredEntities;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FilterManager } from './filter.manager';\n\n\n@Injectable()\nexport class FilterManagerFactory {\n\n\tcreate(enabled: boolean = false): FilterManager {\n\t\treturn new FilterManager();\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { FieldId } from './data-type/field.id';\n\nexport class FieldIdGenerator {\n\n\tgenerateId(): FieldId {\n\n\t\tconst id = RandomStringGenerator.generate();\n\t\treturn new FieldId(id);\n\t}\n\n}\n","import { FieldId } from './field.id';\nimport { DataType } from './data-type';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../../aggregation/aggregation.type';\nimport { ColumnAggregationConfig } from '../../../../composition/column-aggregation.config';\n\nexport abstract class Field {\n\n\tprivate readonly id: FieldId;\n\n\t// TODO\n\tprivate readonly accessor: string | any; //(rawData: any) => any;\n\n\tprivate readonly dataType: DataType;\n\n\tprivate readonly accessorMethod: (entity: OriginItemEntity) => any;\n\n\tprivate aggregationEnabled: boolean = true;\n\n\tprivate aggregations: AggregationType;\n\n\tprivate readonly possibleAggregations: AggregationType;\n\n\tprotected constructor(id: FieldId,\n\t\t\t\t\t\t  accessor: any,\n\t\t\t\t\t\t  dataType: DataType,\n\t\t\t\t\t\t  aggregationConfig?: ColumnAggregationConfig) {\n\t\tthis.id = id;\n\t\tthis.accessor = accessor;\n\t\tthis.dataType = dataType;\n\n\t\tif (typeof accessor === 'string') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => entity.getData()[accessor];\n\t\t} else if (typeof accessor === 'function') {\n\t\t\tthis.accessorMethod = (entity: OriginItemEntity) => accessor(entity.getData());\n\t\t}\n\n\t\tthis.possibleAggregations = this.assignPossibleAggregations();\n\n\t\tthis.assignAggregations(aggregationConfig);\n\t}\n\n\tabstract assignDefaultAggregations(): AggregationType;\n\n\tabstract assignPossibleAggregations(): AggregationType;\n\n\tgetId(): FieldId {\n\t\treturn this.id;\n\t}\n\n\tgetKey(): string {\n\t\treturn this.getId().getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n\tgetAccessor(): string {\n\t\treturn this.accessor;\n\t}\n\n\tgetAccessorMethod(): (entity: OriginItemEntity) => any {\n\t\treturn this.accessorMethod;\n\t}\n\n\tgetValue(entity: OriginItemEntity): any {\n\t\treturn this.accessorMethod(entity);\n\t}\n\n\tisAggregation(type: AggregationType): boolean {\n\n\t\tif (!this.isAggregationEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(this.aggregations & type);\n\t}\n\n\tisAggregationEnabled(): boolean {\n\t\treturn this.aggregationEnabled;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): void {\n\t\tthis.aggregationEnabled = enabled;\n\t}\n\n\tprivate assignAggregations(aggregationConfig: ColumnAggregationConfig): void {\n\n\t\tif (!!aggregationConfig && Object.keys(aggregationConfig).length !== 0) {\n\n\t\t\tif (aggregationConfig.enabled) {\n\t\t\t\tthis.aggregationEnabled = !!aggregationConfig.enabled;\n\t\t\t}\n\n\t\t\tif (aggregationConfig.aggregationTypes) {\n\n\t\t\t\tthis.aggregations = 0;\n\n\t\t\t\taggregationConfig.aggregationTypes.forEach((t) => {\n\t\t\t\t\tthis.aggregations |= t;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.aggregations = this.assignDefaultAggregations();\n\t\t}\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class UnknownField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.UNKNOWN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class NumberField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.NUMBER,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.SUM |\n\t\t// \tAggregationType.MIN |\n\t\t// \tAggregationType.MAX |\n\t\t// \tAggregationType.AVERAGE |\n\t\t// \tAggregationType.MEDIAN;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.SUM |\n\t\t\tAggregationType.MIN |\n\t\t\tAggregationType.MAX |\n\t\t\tAggregationType.AVERAGE |\n\t\t\tAggregationType.MEDIAN;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class StringField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.STRING,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class BooleanField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.BOOLEAN,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT |\n\t\t// \tAggregationType.TRUTHY |\n\t\t// \tAggregationType.FALSY;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT |\n\t\t\tAggregationType.TRUTHY |\n\t\t\tAggregationType.FALSY;\n\t}\n\n}\n","import { Field } from '../field';\nimport { FieldId } from '../field.id';\nimport { ColumnAggregationConfig } from '../../../../../composition/column-aggregation.config';\nimport { DataType } from '../data-type';\nimport { AggregationType } from '../../../aggregation/aggregation.type';\n\n\nexport class DateField extends Field {\n\n\tconstructor(id: FieldId,\n\t\t\t\taccessor: any,\n\t\t\t\taggregationConfig?: ColumnAggregationConfig) {\n\t\tsuper(id,\n\t\t\taccessor,\n\t\t\tDataType.DATE,\n\t\t\taggregationConfig);\n\t}\n\n\tassignDefaultAggregations(): AggregationType {\n\t\treturn 0;\n\t\t// return AggregationType.COUNT |\n\t\t// \tAggregationType.DISTINCT;\n\t}\n\n\tassignPossibleAggregations(): AggregationType {\n\t\treturn AggregationType.COUNT |\n\t\t\tAggregationType.DISTINCT;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FieldIdGenerator } from '../field-id.generator';\nimport { ColumnConfig } from '../../../../composition/column.config';\nimport { Field } from './field';\nimport { DataType } from './data-type';\nimport { UnknownField } from './fields/unknown-field';\nimport { NumberField } from './fields/number-field';\nimport { StringField } from './fields/string-field';\nimport { BooleanField } from './fields/boolean-field';\nimport { DateField } from './fields/date-field';\n\n\n\n@Injectable()\nexport class FieldFactory {\n\n\tconstructor(private readonly fieldIdGenerator: FieldIdGenerator) {\n\t}\n\n\tcreate(column: ColumnConfig): Field {\n\n\t\tlet columnType = column.type;\n\n\t\tif (columnType === undefined) {\n\t\t\tcolumnType = DataType.STRING;\n\t\t}\n\n\t\tif (columnType === DataType.UNKNOWN) {\n\t\t\treturn new UnknownField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.NUMBER) {\n\t\t\treturn new NumberField(this.fieldIdGenerator.generateId(), column.field as string, column.aggregation);\n\t\t}\n\n\t\tif (columnType === DataType.STRING) {\n\t\t\treturn new StringField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.BOOLEAN) {\n\t\t\treturn new BooleanField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t\tif (columnType === DataType.DATE) {\n\t\t\treturn new DateField(this.fieldIdGenerator.generateId(), column.field as string);\n\t\t}\n\n\t}\n\n\n}\n","import { Field } from './data-type/field';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldId } from './data-type/field.id';\nimport { ColumnConfig } from '../../../composition/column.config';\n\n\nexport class FieldCollection {\n\n\tprivate readonly fields = new Map<string, Field>();\n\n\tconstructor(private readonly fieldFactory: FieldFactory) {}\n\n\tgetField(fieldId: FieldId): Field {\n\n\t\tif (fieldId === null) {\n\t\t\treturn this.getAllFields()[0];\n\t\t}\n\n\t\treturn this.fields.get(fieldId.getId());\n\t}\n\n\tgetAllFieldIds(): Array<string> {\n\t\treturn Array.from(this.fields.keys());\n\t}\n\n\tgetAllFields(): Array<Field> {\n\t\treturn Array.from(this.fields.values());\n\t}\n\n\tinitFields(columns: Array<ColumnConfig>): void {\n\n\t\tif (!columns) {\n\t\t\treturn;\n\t\t}\n\n\t\tcolumns.forEach((column: ColumnConfig) => {\n\n\t\t\tconst field = this.fieldFactory.create(column);\n\n\t\t\tthis.addField(field);\n\t\t});\n\t}\n\n\taddFields(fields: Array<Field>): void {\n\t\tfor (let field of fields) {\n\t\t\tthis.addField(field);\n\t\t}\n\t}\n\n\tprivate addField(field: Field): void {\n\t\tthis.fields.set(field.getId().toString(), field);\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { FieldFactory } from './data-type/field.factory';\nimport { FieldCollection } from './field.collection';\n\n\n\n@Injectable()\nexport class FieldCollectionFactory {\n\n\tconstructor(private fieldFactory: FieldFactory) {\n\t}\n\n\tcreate(): FieldCollection {\n\t\treturn new FieldCollection(this.fieldFactory);\n\t}\n\n}\n","import { SorterId } from './sorter.id';\nimport { Field } from '../field/data-type/field';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { DataType } from '../field/data-type/data-type';\n\nexport class StructureSorter {\n\n\tprivate readonly sorterId: SorterId;\n\n\tprivate columnId: string;\n\n\tprivate field: Field;\n\n\tprivate rank: number = 1;\n\n\tprivate direction: boolean;\n\n\tconstructor(id: SorterId,\n\t\t\t\tfield: Field,\n\t\t\t\tdirection: boolean = true) {\n\t\tthis.sorterId = id;\n\t\tthis.field = field;\n\t\tthis.direction = direction;\n\t}\n\n\tgetId(): SorterId {\n\t\treturn this.sorterId;\n\t}\n\n\tgetRank(): number {\n\t\treturn this.rank;\n\t}\n\n\tgetField(): Field {\n\t\treturn this.field;\n\t}\n\n\tgetDirection(): boolean {\n\t\treturn this.direction;\n\t}\n\n\tchangeDirection(): void {\n\t\tthis.direction = !this.direction;\n\t}\n\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\treturn entities.sort((entityOne: OriginItemEntity, entityTwo: OriginItemEntity) => {\n\n\t\t\tlet valueOne = this.direction ? this.field.getValue(entityOne) : this.field.getValue(entityTwo),\n\t\t\t\tvalueTwo = this.direction ? this.field.getValue(entityTwo) : this.field.getValue(entityOne);\n\n\t\t\tif (this.field.getDataType() === DataType.NUMBER) {\n\t\t\t\treturn this.sortNumber(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.BOOLEAN) {\n\t\t\t\treturn this.sortBoolean(valueOne, valueTwo);\n\t\t\t} else if (this.field.getDataType() === DataType.STRING) {\n\t\t\t\treturn this.sortString(valueOne, valueTwo);\n\t\t\t} else {\n\t\t\t\treturn this.sortUnknown(valueOne, valueTwo);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate sortString(strOne: string, strTwo: string): number {\n\n\t\tconst sureStrOne = '' + strOne,\n\t\t\tsureStrTwo = '' + strTwo;\n\n\t\treturn sureStrOne.localeCompare(sureStrTwo);\n\t}\n\n\tprivate sortNumber(numOne: number, numTwo: number): number {\n\n\t\tconst sureNumOne = +numOne,\n\t\t\tsureNumTwo = +numTwo;\n\n\t\treturn sureNumOne - sureNumTwo;\n\t}\n\n\tprivate sortBoolean(booleanOne: boolean, booleanTwo: boolean): number {\n\n\t\tconst sureBoolOne = !!booleanOne,\n\t\t\tsureBoolTwo = !!booleanTwo;\n\n\t\treturn (sureBoolOne === sureBoolTwo) ? 0 : sureBoolTwo ? -1 : 1;\n\t}\n\n\tprivate sortUnknown(a: any, b: any): number {\n\t\treturn 0;\n\t}\n\n}\n","export class SorterId {\n\n\tprivate readonly sorterId: string;\n\n\tconstructor(id: string) {\n\t\tthis.sorterId = id;\n\t}\n\n\tgetId(): string {\n\t\treturn this.sorterId;\n\t}\n}\n","import { RandomStringGenerator } from '@generic-ui/hermes';\n\nimport { StructureSorter } from './structure.sorter';\nimport { SortingConfig } from '../../../../ui-api/structure/sorting-config';\nimport { Field } from '../field/data-type/field';\nimport { SorterId } from './sorter.id';\nimport { FieldId } from '../field/data-type/field.id';\nimport { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\n\n\nexport class SorterCollection {\n\n\tprivate enabled: boolean;\n\n\tprivate multi: boolean;\n\n\tprivate readonly sorters = new Map<string, StructureSorter>();\n\n\tconstructor(enabled: boolean = false,\n\t\t\t\tmulti: boolean = false) {\n\t\tthis.enabled = enabled;\n\t\tthis.multi = multi;\n\t}\n\n\tsetConfig(config: SortingConfig): void {\n\n\t\tif (config && config.enabled !== undefined && config.enabled !== null) {\n\t\t\tthis.enabled = config.enabled;\n\t\t}\n\n\t\tif (config && config.multiSorting !== undefined && config.multiSorting !== null) {\n\t\t\tthis.multi = config.multiSorting;\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t}\n\n\ttoggle(field: Field): void {\n\n\t\tconst fieldId = field.getId(),\n\t\t\tsorter = this.sorters.get(fieldId.getId());\n\n\t\tif (sorter) {\n\t\t\tif (sorter.getDirection()) {\n\t\t\t\tsorter.changeDirection();\n\t\t\t} else {\n\t\t\t\tthis.delete(fieldId);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.add(field);\n\t\t}\n\n\t}\n\n\tadd(field: Field): void {\n\t\tthis.addSorter(field.getId(), new StructureSorter(new SorterId(RandomStringGenerator.generate()), field));\n\t}\n\n\taddSorter(fieldId: FieldId, sorter: StructureSorter): void {\n\n\t\tif (!this.multi) {\n\t\t\tthis.sorters.clear();\n\t\t}\n\n\t\tthis.sorters.set(fieldId.getId(), sorter);\n\t}\n\n\tdelete(fieldId: FieldId): void {\n\t\tthis.sorters.delete(fieldId.getId());\n\t}\n\n\tupdate(): void {\n\t}\n\n\t// TODO Remove the loop from sorter.sort\n\tsort(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\t\tconst sorters = this.getAll();\n\n\t\tlet sortedEntities = [...entities];\n\n\t\tfor (let sorter of sorters) {\n\t\t\tsortedEntities = sorter.sort(sortedEntities);\n\t\t}\n\n\t\treturn sortedEntities;\n\t}\n\n\tgetAll(): Array<StructureSorter> {\n\n\t\tif (!this.enabled) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn Array.from(this.sorters)\n\t\t\t\t\t.map((arr) => arr[1])\n\t\t\t\t\t.sort((sorterOne: StructureSorter, sorterTwo: StructureSorter) => {\n\t\t\t\t\t\treturn sorterOne.getRank() - sorterTwo.getRank();\n\t\t\t\t\t})\n\t\t\t\t\t.reverse();\n\t}\n}\n","export class FormationAggregate {\n\n\t/**\n\t * In the future this class can be responsible for managing:\n\t * - expanded / collapsed nodes\n\t * - sorting?\n\t * - filtering?\n\t */\n\n\tconstructor(private selectedRows: Array<string>) {\n\t}\n\n\tgetSelectedRows(): Array<string> {\n\t\treturn this.selectedRows;\n\t}\n\n\ttoggleRow(selectedRow: string): void {\n\n\t\tif (this.selectedRows.length > 0) {\n\n\t\t\tif (this.selectedRows[0] === selectedRow) {\n\t\t\t\tthis.selectedRows = [];\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.selectedRows = [selectedRow];\n\t}\n}\n","export class ColumnHeaderEntity {\n\n\tconstructor(private top: boolean,\n\t\t\t\tprivate bottom: boolean) {\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.top = enabled;\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.bottom = enabled;\n\t}\n\n\tisHeaderOnTop(): boolean {\n\t\treturn this.top;\n\t}\n\n\tisHeaderOnBottom(): boolean {\n\t\treturn this.bottom;\n\t}\n\n}\n","import { ColumnHeaderEntity } from './column-header/column-header.entity';\nimport { SchemaTheme } from '../schema-theme';\nimport { SchemaRowColoring } from '../schema-row-coloring';\n\nexport class SchemaAggregate {\n\n\tprivate headerHeight = 28;\n\n\tprivate pagerHeight = 35;\n\n\tprivate containerHeight: number;\n\n\tprivate active: boolean = false;\n\n\tprivate horizontalGrid: boolean = true;\n\n\tprivate verticalGrid: boolean = true;\n\n\tprivate columnHeader: ColumnHeaderEntity = new ColumnHeaderEntity(true, false);\n\n\tprivate theme: SchemaTheme = SchemaTheme.FABRIC;\n\n\tprivate rowColoring: SchemaRowColoring = SchemaRowColoring.EVEN;\n\n\tconstructor(private width?: number,\n\t\t\t\tprivate height?: number) {\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tgetRowColoring(): SchemaRowColoring {\n\t\treturn this.rowColoring;\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.height = height;\n\n\t\tthis.calculateContainerHeight();\n\t}\n\n\tsetTheme(theme: SchemaTheme): void {\n\t\tthis.theme = theme;\n\t}\n\n\tsetRowColoring(coloring: SchemaRowColoring): void {\n\t\tthis.rowColoring = coloring;\n\t}\n\n\tgetTheme(): SchemaTheme {\n\t\treturn this.theme;\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\tgetContainerHeight(): number {\n\t\treturn this.height;\n\t\t// return this.containerHeight;\n\t}\n\n\tgetColumnHeader(): ColumnHeaderEntity {\n\t\treturn this.columnHeader;\n\t}\n\n\tsetHeaderTop(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderTop(enabled);\n\t}\n\n\tsetHeaderBottom(enabled: boolean): void {\n\t\tthis.getColumnHeader().setHeaderBottom(enabled);\n\t}\n\n\tsetVerticalGrid(enabled: boolean): void {\n\t\tthis.verticalGrid = enabled;\n\t}\n\n\tsetHorizontalGrid(enabled: boolean): void {\n\t\tthis.horizontalGrid = enabled;\n\t}\n\n\tisVerticalGridEnabled(): boolean {\n\t\treturn this.verticalGrid;\n\t}\n\n\tisHorizontalGridEnabled(): boolean {\n\t\treturn this.horizontalGrid;\n\t}\n\n\tprivate getHeaderHeight(): number {\n\t\treturn this.headerHeight;\n\t}\n\n\tprivate getPagerHeight(): number {\n\t\treturn this.pagerHeight;\n\t}\n\n\tprivate calculateContainerHeight(): void {\n\n\t\tif (!this.height) {\n\t\t\tthis.active = false;\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.active = true;\n\t\t}\n\n\t\tthis.containerHeight = this.height - this.getHeaderHeight() - this.getPagerHeight();\n\t}\n\n}\n","import { OriginItemEntity } from '../../../source/command/origin/origin-item-entity';\nimport { Field } from '../field/data-type/field';\nimport { DataType } from '../field/data-type/data-type';\n\n\nexport class SearchManager {\n\n\tprivate searchFields: Array<Field> = [];\n\n\tprivate searchPhrase: string;\n\n\taddSearchPhrase(fields: Array<Field>, searchPhrase: string): void {\n\n\t\tif (!searchPhrase) {\n\t\t\tthis.searchFields = [];\n\t\t\treturn;\n\t\t}\n\n\t\tlet searchableFields =\n\t\t\tfields.filter((field: Field) => {\n\t\t\t\treturn field.getDataType() === DataType.STRING;\n\t\t\t});\n\n\t\tif (searchableFields.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchFields = searchableFields;\n\n\t\tthis.searchPhrase = searchPhrase;\n\t}\n\n\tremoveSearchFilters(): void {\n\t\tthis.searchFields = [];\n\t}\n\n\tsearch(entities: Array<OriginItemEntity>): Array<OriginItemEntity> {\n\n\t\tif (entities.length === 0 || this.searchFields.length === 0) {\n\t\t\treturn entities;\n\t\t}\n\n\t\tlet searchedItems = new Set<OriginItemEntity>();\n\n\t\tfor (let i = 0; i < entities.length; i += 1) {\n\n\t\t\tfor (let field of this.searchFields) {\n\n\t\t\t\tif (this.filterString(entities[i], field)) {\n\t\t\t\t\tsearchedItems.add(entities[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(searchedItems);\n\t}\n\n\tprivate filterString(item: OriginItemEntity, field: Field): boolean {\n\t\tconst value = field.getValue(item);\n\n\t\tif (typeof value === 'string') {\n\t\t\treturn value.toLowerCase().indexOf(this.searchPhrase.toLowerCase()) > -1;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate filterNumber(item: OriginItemEntity, field: Field): boolean {\n\t\tconst numberValue = field.getValue(item);\n\n\t\treturn numberValue > this.searchPhrase;\n\t}\n\n\tprivate filterBoolean(item: OriginItemEntity, field: Field): boolean {\n\t\tconst booleanValue = field.getValue(item);\n\n\t\treturn booleanValue === this.searchPhrase;\n\t}\n\n}\n","import { AggregateEvent, AggregateId } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin/origin-item-entity';\n\n\nexport class StructurePreparedEntitiesSetAggregateEvent extends AggregateEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly preparedItems: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructurePreparedEntitiesSetAggregateEvent');\n\t}\n\n\tgetPreparedItems(): Array<OriginItemEntity> {\n\t\treturn this.preparedItems;\n\t}\n\n}\n","import { Aggregate, AggregateEvent, RootAggregate } from '@generic-ui/hermes';\n\nimport { PagingAggregate } from '../../paging/command/paging.aggregate';\nimport { SourceManager } from '../../source/command/source.manager';\nimport { VerticalFormation } from './vertical-formation/vertical-formation';\nimport { AggregationManager } from './aggregation/aggregation.manager';\nimport { SorterCollection } from './sort/sorter.collection';\nimport { FilterManager } from './filter/filter.manager';\nimport { FieldCollection } from './field/field.collection';\nimport { FormationAggregate } from '../../formation/command/formation-aggregate';\nimport { SchemaAggregate } from '../../schema/command/schema-aggregate';\nimport { StructureId } from '../../structure-id';\nimport { StructureEditSourceItemParams } from '../../source/command/origin/edit/structure.edit-source-item.params';\nimport { PagingConfig } from '../../paging/paging-config';\nimport { OriginItemEntity } from '../../source/command/origin/origin-item-entity';\nimport { ColumnConfig } from '../../composition/column.config';\nimport { Field } from './field/data-type/field';\nimport { SortingConfig } from '../../../ui-api/structure/sorting-config';\nimport { FieldId } from './field/data-type/field.id';\nimport { StructureSorter } from './sort/structure.sorter';\nimport { FilterConfig } from '../../../ui-api/structure/filter/filter-config';\nimport { QuickFiltersConfig } from '../../../ui-api/structure/filter/quick-filters.config';\nimport { SearchConfig } from '../../../ui-api/structure/search/search-config';\nimport { SearchManager } from './search/search.manager';\nimport { StructurePreparedEntitiesSetAggregateEvent } from '../../source/command/prepared/structure.prepared-entities-set.aggregate-event';\n\n@RootAggregate\nexport class StructureAggregate extends Aggregate {\n\n\tprivate formationAggregate: FormationAggregate;\n\n\tprivate schema: SchemaAggregate;\n\n\tprivate pagingAggregate: PagingAggregate;\n\n\tprivate sourceManager: SourceManager;\n\n\tprivate sorterCollection: SorterCollection;\n\n\tprivate filterManager: FilterManager;\n\n\tprivate searchManager: SearchManager;\n\n\tprivate verticalFormation: VerticalFormation;\n\n\tprivate fieldCollection: FieldCollection;\n\n\tprivate aggregationManager: AggregationManager;\n\n\tconstructor(structureId: StructureId,\n\t\t\t\tpagingAggregate: PagingAggregate,\n\t\t\t\tformationAggregate: FormationAggregate,\n\t\t\t\tsourceManager: SourceManager,\n\t\t\t\tverticalFormation: VerticalFormation,\n\t\t\t\taggregationManager: AggregationManager,\n\t\t\t\tsorterCollection: SorterCollection,\n\t\t\t\tfilterCollection: FilterManager,\n\t\t\t\tsearchManager: SearchManager,\n\t\t\t\tfieldCollection: FieldCollection,\n\t\t\t\tschema: SchemaAggregate) {\n\t\tsuper(structureId);\n\t\tthis.pagingAggregate = pagingAggregate;\n\t\tthis.formationAggregate = formationAggregate;\n\t\tthis.sourceManager = sourceManager;\n\t\tthis.verticalFormation = verticalFormation;\n\t\tthis.aggregationManager = aggregationManager;\n\t\tthis.sorterCollection = sorterCollection;\n\t\tthis.filterManager = filterCollection;\n\t\tthis.searchManager = searchManager;\n\t\tthis.fieldCollection = fieldCollection;\n\t\tthis.schema = schema;\n\t}\n\n\tgetVerticalFormation(): VerticalFormation {\n\t\treturn this.verticalFormation;\n\t}\n\n\tsetAggregationEnabled(enabled: boolean): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.aggregationManager.setEnabled(enabled);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetOrigin(items: Array<any>): ReadonlyArray<AggregateEvent> {\n\n\t\tthis.addEvent(\n\t\t\tthis.sourceManager.setOrigin(items, this.getId())\n\t\t);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\teditItem(editParams: StructureEditSourceItemParams): ReadonlyArray<AggregateEvent> {\n\n\t\tconst itemId = editParams.getItemId(),\n\t\t\tfieldId = editParams.getColumnFieldId(),\n\t\t\tfield = this.fieldCollection.getField(fieldId as any), // as FieldId\n\t\t\tvalue = editParams.getValue();\n\n\t\tconst editItemEvents = this.sourceManager.editOriginItem(itemId, value, field, this.getId());\n\n\t\teditItemEvents.forEach((e) => this.addEvent(e));\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tsetHeight(height: number): void {\n\t\tthis.getSchema().setHeight(height);\n\n\t\tconst viewportHeight = this.getSchema().getContainerHeight();\n\n\t\tthis.verticalFormation.setViewportHeight(viewportHeight);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tsetFormation(formation: FormationAggregate): void {\n\t\tthis.formationAggregate = formation;\n\t}\n\n\tsetScrollPosition(position: number): void {\n\t\tthis.verticalFormation.setScrollPosition(position);\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tgetFormation(): FormationAggregate {\n\t\treturn this.formationAggregate;\n\t}\n\n\tsetSchema(schema: SchemaAggregate): void {\n\t\tthis.schema = schema;\n\t}\n\n\tgetSchema(): SchemaAggregate {\n\t\treturn this.schema;\n\t}\n\n\tgetPaging(): PagingAggregate {\n\t\treturn this.pagingAggregate;\n\t}\n\n\tchangePaging(config: PagingConfig) {\n\t\tthis.pagingAggregate.change(config);\n\t\tthis.calculateSource();\n\t}\n\n\tsetPaging(paging: PagingAggregate): void {\n\t\tthis.pagingAggregate = paging;\n\t\tthis.calculateSource();\n\t}\n\n\tnextPage(): void {\n\n\t\tthis.pagingAggregate.nextPage();\n\n\t\tthis.calculateSource();\n\t}\n\n\tprevPage(): void {\n\t\tthis.pagingAggregate.prevPage();\n\t\tthis.calculateSource();\n\t}\n\n\tchangePageSize(pageSize: number): ReadonlyArray<AggregateEvent> {\n\n\t\tconst pagingEvents = this.pagingAggregate.changePageSize(pageSize);\n\n\t\t// TODO\n\t\tpagingEvents.forEach((event) => {\n\t\t\tthis.addEvent(event);\n\t\t});\n\n\t\tthis.calculateSource();\n\n\t\treturn this.getEvents();\n\t}\n\n\tgetEntities(): Array<OriginItemEntity> {\n\t\treturn this.sourceManager.getSlicedEntities();\n\t}\n\n\tgetSource(): SourceManager {\n\t\treturn this.sourceManager;\n\t}\n\n\tcreateFields(columns: Array<ColumnConfig>): Array<Field> {\n\t\tthis.fieldCollection.initFields(columns);\n\n\t\t// TODO Should throw event fields created\n\t\treturn this.fieldCollection.getAllFields();\n\t}\n\n\tsetSortingConfig(config: SortingConfig): void {\n\t\tthis.sorterCollection.setConfig(config);\n\t}\n\n\ttoggleSort(fieldId: FieldId): Array<StructureSorter> {\n\n\t\tconst field = this.fieldCollection.getField(fieldId);\n\n\t\tthis.sorterCollection.toggle(field);\n\n\t\tthis.calculateSource();\n\n\t\treturn this.sorterCollection.getAll();\n\t}\n\n\tsetFilterConfig(config: FilterConfig): void {\n\t\tthis.filterManager.getSettings().setFilterConfig(config);\n\t}\n\n\tsetSearchingConfig(config: SearchConfig): void {\n\t\tthis.filterManager.getSettings().setSearchingConfig(config);\n\t}\n\n\tsetQuickFiltersConfig(config: QuickFiltersConfig): void {\n\t\tthis.filterManager.getSettings().setQuickFiltersConfig(config);\n\t}\n\n\ttoggleFilter(fieldId: FieldId, externalFilterId: string, filterValue: string): Array<AggregateEvent> {\n\n\t\tconst field = this.fieldCollection.getField(fieldId);\n\n\t\t// Field not found\n\t\t// TODO throw aggregate event\n\t\tif (field === undefined) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.filterManager.addFilter(field, externalFilterId, filterValue);\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\taddSearchPhrase(phrase: string): Array<AggregateEvent> {\n\n\t\tconst fields = this.fieldCollection.getAllFields();\n\n\t\tthis.searchManager.addSearchPhrase(fields, phrase);\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\tremoveSearchPhrase(): Array<AggregateEvent> {\n\n\t\tthis.searchManager.removeSearchFilters();\n\n\t\tthis.calculateSource();\n\n\t\treturn [];\n\t}\n\n\tprivate calculateSource(): void {\n\n\t\tif (!this.sourceManager.getOrigin() || !this.pagingAggregate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO Refactor\n\t\tthis.sourceManager.setEntities(this.sourceManager.getOrigin());\n\n\t\t// aggregations\n\t\tconst aggregationEvents = this.aggregationManager.calculate(\n\t\t\tthis.fieldCollection.getAllFields(),\n\t\t\tthis.sourceManager.getEntities()\n\t\t);\n\n\t\taggregationEvents.forEach((ae: AggregateEvent) => {\n\t\t\tthis.addEvent(ae);\n\t\t});\n\n\t\t// filtering\n\t\tthis.sourceManager.setEntities(this.filterManager.filter(this.sourceManager.getEntities()));\n\n\t\t// search\n\t\tconst searchedEntities = this.searchManager.search(this.sourceManager.getEntities());\n\t\tthis.sourceManager.setEntities(searchedEntities);\n\n\t\t// sorting\n\t\tconst ents = this.sorterCollection.sort(this.sourceManager.getEntities());\n\t\tthis.sourceManager.setEntities(ents);\n\n\t\t// calculate filteredEntities\n\t\tthis.sourceManager.setPreparedEntities();\n\n\t\tthis.pagingAggregate.setSourceSize(this.sourceManager.getPreparedEntities().length);\n\n\t\tthis.addEvent(new StructurePreparedEntitiesSetAggregateEvent(this.getId(), ents));\n\n\t\t// paging\n\t\tthis.sourceManager.setEntities(this.pagingAggregate.sample(this.sourceManager.getEntities()));\n\n\t\tthis.verticalFormation.setSourceSize(this.sourceManager.getEntities().length);\n\n\t\tthis.calculateSourceBasedOnVirtualScroll();\n\t}\n\n\tprivate calculateSourceBasedOnVirtualScroll(): void {\n\n\t\tif (this.verticalFormation.isEnabled()) {\n\n\t\t\tconst range = this.verticalFormation.getRange();\n\n\t\t\tthis.sourceManager.setSlicedEntities(\n\t\t\t\tthis.sourceManager.getEntities().slice(range.getStart(), range.getEnd())\n\t\t\t);\n\t\t} else {\n\t\t\tthis.sourceManager.setSlicedEntities(\n\t\t\t\tthis.sourceManager.getEntities()\n\t\t\t);\n\t\t}\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { SchemaAggregate } from './schema-aggregate';\n\n\n@Injectable()\nexport class SchemaAggregateFactory {\n\n\tcreate(): SchemaAggregate {\n\t\treturn new SchemaAggregate();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { FormationAggregate } from './formation-aggregate';\n\n\n@Injectable()\nexport class FormationAggregateFactory {\n\n\tcreate(): FormationAggregate {\n\t\treturn new FormationAggregate([]);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { SearchManager } from './search.manager';\n\n@Injectable()\nexport class SearchManagerFactory {\n\n\tcreate(): SearchManager {\n\t\treturn new SearchManager();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { PagingAggregateFactory } from '../../paging/command/paging.aggregate-factory';\nimport { SourceManagerFactory } from '../../source/command/source.manager-factory';\nimport { VerticalFormationFactory } from './vertical-formation/vertical-formation.factory';\nimport { AggregationManagerFactory } from './aggregation/aggregation.manager.factory';\nimport { FilterManagerFactory } from './filter/filter.manager-factory';\nimport { FieldCollectionFactory } from './field/field-collection.factory';\nimport { StructureId } from '../../structure-id';\nimport { StructureAggregate } from './structure.aggregate';\nimport { SorterCollection } from './sort/sorter.collection';\nimport { SchemaAggregateFactory } from '../../schema/command/schema.aggregate-factory';\nimport { FormationAggregateFactory } from '../../formation/command/formation.aggregate-factory';\nimport { SearchManagerFactory } from './search/search.manager-factory';\n\n\n@Injectable()\nexport class StructureAggregateFactory {\n\n\tconstructor(private readonly pagingAggregateFactory: PagingAggregateFactory,\n\t\t\t\tprivate readonly sourceManagerFactory: SourceManagerFactory,\n\t\t\t\tprivate readonly formationAggregateFactory: FormationAggregateFactory,\n\t\t\t\tprivate readonly verticalFormationFactory: VerticalFormationFactory,\n\t\t\t\tprivate readonly aggregationManagerFactory: AggregationManagerFactory,\n\t\t\t\tprivate readonly filterManagerFactory: FilterManagerFactory,\n\t\t\t\tprivate readonly searchManagerFactory: SearchManagerFactory,\n\t\t\t\tprivate readonly fieldCollectionFactory: FieldCollectionFactory,\n\t\t\t\tprivate readonly schemaAggregateFactory: SchemaAggregateFactory) {\n\t}\n\n\tcreate(structureId: StructureId): StructureAggregate {\n\n\t\tconst paging = this.pagingAggregateFactory.createDefault(),\n\t\t\tsource = this.sourceManagerFactory.createDefault(),\n\t\t\tverticalFormation = this.verticalFormationFactory.create(),\n\t\t\tformationAggregate = this.formationAggregateFactory.create();\n\n\t\tconst sorterContainer: SorterCollection = new SorterCollection(),\n\t\t\tfilterContainer = this.filterManagerFactory.create(false),\n\t\t\tfieldContainer = this.fieldCollectionFactory.create(),\n\t\t\taggregationManager = this.aggregationManagerFactory.create(structureId),\n\t\t\tschema = this.schemaAggregateFactory.create(),\n\t\t\tsearchManager = this.searchManagerFactory.create();\n\n\t\treturn new StructureAggregate(structureId,\n\t\t\tpaging,\n\t\t\tformationAggregate,\n\t\t\tsource,\n\t\t\tverticalFormation,\n\t\t\taggregationManager,\n\t\t\tsorterContainer,\n\t\t\tfilterContainer,\n\t\t\tsearchManager,\n\t\t\tfieldContainer,\n\t\t\tschema\n\t\t);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../structure.aggregate-factory';\nimport { InitStructureCommand } from './init-structure.command';\nimport { StructureInitedEvent } from './structure-inited.event';\n\n\n\n@Injectable()\nexport class InitStructureCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitStructureCommand,\n\t\t\tStructureInitedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: InitStructureCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId;\n\n\t\tconst structure = this.structureAggregateFactory.create(aggregateId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetVerticalScrollEnabledCommand } from './set-vertical-scroll-enabled.command';\nimport { VerticalScrollEnabledSetEvent } from './vertical-scroll-enabled-set.event';\n\n\n\n@Injectable()\nexport class SetVerticalScrollEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetVerticalScrollEnabledCommand);\n\t}\n\n\thandle(command: SetVerticalScrollEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst formation = structure.getVerticalFormation();\n\n\t\tformation.setEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new VerticalScrollEnabledSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetScrollPositionCommand } from './set-scroll-position.command';\nimport { ScrollPositionSetEvent } from './scroll-position-set.event';\n\n\n\n@Injectable()\nexport class SetScrollPositionCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetScrollPositionCommand);\n\t}\n\n\thandle(command: SetScrollPositionCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tposition = command.position;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setScrollPosition(position);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new ScrollPositionSetEvent(structureId));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { InitFieldsCommand } from './init-fields.command';\nimport { FieldsInitedEvent } from './fields-inited.event';\n\n\n\n@Injectable()\nexport class InitFieldsCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(InitFieldsCommand);\n\t}\n\n\thandle(command: InitFieldsCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tcompositionId = command.compositionId,\n\t\t\tcolumns = command.columns;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst fields = structure.createFields(columns); // tODO convert don't let dandruff into the domain\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new FieldsInitedEvent(structureId, compositionId, columns, fields));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { AggregateId, CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { ToggleSortCommand } from './toggle-sort.command';\nimport { CompositionId } from '../../../../composition/composition-id';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureSorter } from '../structure.sorter';\nimport { SortToggledEvent } from './sort-toggled.event';\n\n\n@Injectable()\nexport class ToggleSortCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSortCommand);\n\t}\n\n\thandle(command: ToggleSortCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst aggregateId = command.structureId,\n\t\t\tcompositionId = command.getCompositionId(),\n\t\t\tfieldId = command.getFieldId();\n\n\t\tconst structure = this.structureAggregateRepository.getById(aggregateId);\n\n\t\tconst sorters = structure.toggleSort(fieldId);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.publishSortEvent(aggregateId, compositionId, fieldId, sorters);\n\t}\n\n\tpublishSortEvent(aggregateId: AggregateId, compositionId: CompositionId, fieldId: FieldId, sorters: Array<StructureSorter>): void {\n\n\t\tconst directions = sorters.map((sorter: StructureSorter) => {\n\t\t\treturn {\n\t\t\t\tdirection: sorter.getDirection(),\n\t\t\t\tfieldId: sorter.getField().getId()\n\t\t\t};\n\t\t});\n\n\t\tthis.domainEventPublisher.publish(new SortToggledEvent(aggregateId, compositionId, directions));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class SortingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId) {\n\t\tsuper(aggregateId, 'SortingSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { SetSortingCommand } from './set-sorting.command';\nimport { SortingSetEvent } from './sorting-set.event';\n\n\n\n@Injectable()\nexport class SetSortingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSortingCommand);\n\t}\n\n\thandle(command: SetSortingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsortingConfig = command.getSortingConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSortingConfig(sortingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new SortingSetEvent(structureId));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigFilterCommand } from './structure.set-config-filter.command';\nimport { StructureConfigFilterSetEvent } from './structure.config-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfilterConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setFilterConfig(filterConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigFilterSetEvent(structureId, filterConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nexport class StructureConfigSearchingSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigSearchingSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigSearchingCommand } from './structure.set-config-searching.command';\nimport { StructureConfigSearchingSetEvent } from './structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigSearchingCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigSearchingCommand);\n\t}\n\n\thandle(command: StructureSetConfigSearchingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tsearchingConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setSearchingConfig(searchingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigSearchingSetEvent(structureId, searchingConfig.enabled));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\n\nexport class StructureConfigQuickFilterSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureConfigQuickFilterSetEvent');\n\t}\n\n\tgetEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetConfigQuickFilterCommand } from './structure.set-config-quick-filter.command';\nimport { StructureConfigQuickFilterSetEvent } from './structure.config-quick-filter-set.event';\n\n\n@Injectable()\nexport class StructureSetConfigQuickFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetConfigQuickFilterCommand);\n\t}\n\n\thandle(command: StructureSetConfigQuickFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tquickFiltersConfig = command.getConfig();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setQuickFiltersConfig(quickFiltersConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureConfigQuickFilterSetEvent(structureId, quickFiltersConfig.enabled));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureToggleFilterCommand } from './structure.toggle-filter.command';\nimport { FieldId } from '../../field/data-type/field.id';\nimport { StructureFilterToggledEvent } from './structure.filter-toggled.event';\n\n\n@Injectable()\nexport class StructureToggleFilterCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureToggleFilterCommand);\n\t}\n\n\thandle(command: StructureToggleFilterCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tfieldId: FieldId = command.fieldId,\n\t\t\texternalFieldId: string = command.externalFilterId,\n\t\t\tfilterValue = command.filterValue;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.toggleFilter(fieldId, externalFieldId, filterValue);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureFilterToggledEvent(structureId));\n\t}\n\n}\n","import { AggregateId, DomainEvent } from '@generic-ui/hermes';\n\nimport { OriginItemEntity } from '../origin/origin-item-entity';\n\nexport class StructurePreparedEntitiesSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: AggregateId,\n\t\t\t\tprivate readonly preparedItems: Array<OriginItemEntity>) {\n\t\tsuper(aggregateId, 'StructurePreparedEntitiesSetEvent');\n\t}\n\n\tgetPreparedItems(): Array<OriginItemEntity> {\n\t\treturn this.preparedItems;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregateEvent, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureOriginChangedAggregateEvent } from './origin/structure.origin-changed.aggregate-event';\nimport { OriginSetEvent } from './origin/set-origin/origin-set.event';\nimport { StructureSourceItemEditedAggregateEvent } from './origin/edit/structure.source-item-edited.aggregate-event';\nimport { StructureSourceItemEditedEvent } from './origin/edit/structure.source-item-edited.event';\nimport { StructureAggregationsChangedAggregateEvent } from '../../structure/command/aggregation/structure.aggregations-changed.aggregate-event';\nimport { StructureAggregationsChangedEvent } from '../../structure/command/aggregation/structure.aggregations-changed.event';\nimport { StructurePreparedEntitiesSetAggregateEvent } from './prepared/structure.prepared-entities-set.aggregate-event';\nimport { StructurePreparedEntitiesSetEvent } from './prepared/structure.prepared-entities-set.event';\n\n\n@Injectable()\nexport class StructureSourceDomainEventPublisher {\n\n\tconstructor(private domainEventPublisher: DomainEventPublisher) {\n\t}\n\n\tpublish(events: ReadonlyArray<AggregateEvent>): void {\n\n\t\tevents.forEach((event) => {\n\t\t\tthis.publishEvent(event);\n\t\t});\n\t}\n\n\tprivate publishEvent(event: AggregateEvent): void {\n\n\t\tif (event.getType() === 'StructureOriginChangedAggregateEvent') {\n\n\t\t\tconst structureOriginChangedAggregateEvent = (event as StructureOriginChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new OriginSetEvent(structureOriginChangedAggregateEvent.getAggregateId(), structureOriginChangedAggregateEvent.getOrigin());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureSourceItemEditedAggregateEvent') {\n\n\t\t\tconst structureSourceItemEditedAggregateEvent = (event as StructureSourceItemEditedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureSourceItemEditedEvent(\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAggregateId(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getBeforeItem(),\n\t\t\t\tstructureSourceItemEditedAggregateEvent.getAfterItem()\n\t\t\t);\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\n\t\tif (event.getType() === 'StructureAggregationsChangedAggregateEvent') {\n\n\t\t\tconst structureAggregationsChangedAggregateEvent = (event as StructureAggregationsChangedAggregateEvent);\n\n\t\t\tconst domainEvent = new StructureAggregationsChangedEvent(structureAggregationsChangedAggregateEvent.getAggregateId(), structureAggregationsChangedAggregateEvent.getAggregations());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\n\t\t}\n\n\t\tif (event.getType() === 'StructurePreparedEntitiesSetAggregateEvent') {\n\n\t\t\tconst structurePreparedEntitiesSetAggregateEvent = (event as StructurePreparedEntitiesSetAggregateEvent);\n\n\t\t\tconst domainEvent = new StructurePreparedEntitiesSetEvent(structurePreparedEntitiesSetAggregateEvent.getAggregateId(), structurePreparedEntitiesSetAggregateEvent.getPreparedItems());\n\n\t\t\tthis.domainEventPublisher.publish(domainEvent);\n\t\t}\n\t}\n\n}\n","import { DomainEvent } from '@generic-ui/hermes';\n\nimport { StructureId } from '../../../../structure-id';\n\n\nexport class StructureAggregationEnabledSetEvent extends DomainEvent {\n\n\tconstructor(aggregateId: StructureId,\n\t\t\t\tpublic readonly enabled: boolean) {\n\t\tsuper(aggregateId, 'StructureAggregationEnabledSetEvent');\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureAggregateFactory } from '../../structure.aggregate-factory';\nimport { StructureSourceDomainEventPublisher } from '../../../../source/command/structure.source.domain-event.publisher';\nimport { StructureSetAggregationEnabledCommand } from './structure.set-aggregation-enabled.command';\nimport { StructureAggregationEnabledSetEvent } from './structure.aggregation-enabled-set.event';\n\n\n@Injectable()\nexport class StructureSetAggregationEnabledCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate readonly structureAggregateFactory: StructureAggregateFactory,\n\t\t\t\tprivate readonly structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetAggregationEnabledCommand);\n\t}\n\n\thandle(command: StructureSetAggregationEnabledCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tenabled = command.enabled;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.setAggregationEnabled(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.domainEventPublisher.publish(new StructureAggregationEnabledSetEvent(structureId, enabled));\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { AggregatedValues } from './aggregated.values';\nimport { DataType } from '../../field/data-type/data-type';\nimport { Field } from '../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../source/command/origin/origin-item-entity';\nimport { AggregationType } from '../aggregation.type';\n\n\nexport abstract class AggregationCalculator<T, A extends AggregatedValues> {\n\n\tabstract forDataType(dataType: DataType): boolean;\n\n\tabstract prepare(field: Field): void;\n\n\tabstract postCalculate(field: Field, items: Array<OriginItemEntity>): void;\n\n\tabstract aggregate(field: Field, value: T): void;\n\n\tabstract generateAggregatedValues(field: Field): A;\n\n\tcalculate(fields: Array<Field>, items: Array<OriginItemEntity>): Map<string, A> {\n\n\t\tconst filteredFields = fields.filter((field: Field) => this.forDataType(field.getDataType()));\n\n\t\tif (!filteredFields || filteredFields.length === 0 || items.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet count = new Map<string, number>(),\n\t\t\tdistinct = new Map<string, Set<string>>();\n\n\t\t// init\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getKey();\n\n\t\t\tcount.set(key, 0);\n\t\t\tdistinct.set(key, new Set());\n\n\t\t\tthis.prepare(field);\n\t\t});\n\n\t\t// calculate\n\t\titems.forEach((item: OriginItemEntity) => {\n\n\t\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\t\tconst key = field.getKey(),\n\t\t\t\t\tvalue = field.getValue(item);\n\n\t\t\t\tif (value !== null || value !== undefined || value !== '') {\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\t\t\tconst countForField = count.get(key);\n\t\t\t\t\t\tcount.set(key, countForField + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\t\t\tconst distinctSet = distinct.get(key);\n\t\t\t\t\t\tdistinctSet.add(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.aggregate(field, value);\n\t\t\t});\n\t\t});\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tthis.postCalculate(field, items);\n\n\t\t});\n\n\t\tlet aggregations = new Map();\n\n\t\tfilteredFields.forEach((field: Field) => {\n\n\t\t\tconst key = field.getId().getId();\n\n\t\t\tlet aggregatedValues = this.generateAggregatedValues(field);\n\n\t\t\tif (field.isAggregation(AggregationType.COUNT)) {\n\t\t\t\taggregatedValues.setCount(count.get(key));\n\t\t\t}\n\n\t\t\tif (field.isAggregation(AggregationType.DISTINCT)) {\n\t\t\t\taggregatedValues.setDistinct((distinct.get(key)).size);\n\t\t\t}\n\n\t\t\taggregations.set(key, aggregatedValues);\n\t\t});\n\n\t\treturn aggregations;\n\t}\n\n}\n","export abstract class AggregatedValues {\n\n\tpublic count: number;\n\tpublic distinct: number;\n\n\tsetCount(value: number): void {\n\t\tthis.count = value;\n\t}\n\n\tsetDistinct(value: number): void {\n\t\tthis.distinct = value;\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class BooleanAggregatedValues extends AggregatedValues {\n\n\tpublic readonly truthy: number;\n\n\tpublic readonly falsy: number;\n\n\tconstructor(truthy: number,\n\t\t\t\tfalsy: number) {\n\t\tsuper();\n\t\tthis.truthy = truthy;\n\t\tthis.falsy = falsy;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { BooleanAggregatedValues } from './boolean-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class BooleanAggregationCalculator extends AggregationCalculator<boolean, BooleanAggregatedValues> {\n\n\tprivate readonly truthy = new Map<string, number>();\n\tprivate readonly falsy = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.BOOLEAN;\n\t}\n\n\taggregate(field: Field, value: boolean): void {\n\n\t\tconst booleanValue = value, // (value as any === 'true'),\n\t\t\tkey = field.getKey(),\n\t\t\ttruthyForField = this.truthy.get(key),\n\t\t\tfalsyForField = this.falsy.get(key);\n\n\t\tif (booleanValue) {\n\t\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\t\tthis.truthy.set(key, truthyForField + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\t\tthis.falsy.set(key, falsyForField + 1);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): BooleanAggregatedValues {\n\n\t\tconst key = field.getKey();\n\n\t\treturn new BooleanAggregatedValues(\n\t\t\tthis.truthy.get(key),\n\t\t\tthis.falsy.get(key)\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.TRUTHY)) {\n\t\t\tthis.truthy.set(key, 0);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.FALSY)) {\n\t\t\tthis.falsy.set(key, 0);\n\t\t}\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class DateAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { DateAggregatedValues } from './date-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class DateAggregationCalculator extends AggregationCalculator<Date, DateAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.DATE;\n\t}\n\n\taggregate(field: Field, value: Date): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): DateAggregatedValues {\n\t\treturn new DateAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class NumberAggregatedValues extends AggregatedValues{\n\n\tpublic readonly sum: number;\n\tpublic readonly min: number;\n\tpublic readonly max: number;\n\tpublic readonly average: number;\n\tpublic readonly median: number;\n\n\tconstructor(sum: number,\n\t\t\t\tmin: number,\n\t\t\t\tmax: number,\n\t\t\t\taverage: number,\n\t\t\t\tmedian: number) {\n\t\tsuper();\n\t\tthis.sum = this.setValueWithPrecision(sum);\n\t\tthis.min = this.setValueWithPrecision(min);\n\t\tthis.max = this.setValueWithPrecision(max);\n\t\tthis.average = this.setValueWithPrecision(average);\n\t\tthis.median = this.setValueWithPrecision(median);\n\t}\n\n\tprivate setValueWithPrecision(value: number): number {\n\t\tif (!value && value !== 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (value === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn +((value).toFixed(2));\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { NumberAggregatedValues } from './number-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { AggregationType } from '../../aggregation.type';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class NumberAggregationCalculator extends AggregationCalculator<number, NumberAggregatedValues> {\n\n\tprivate readonly sum = new Map<string, number>();\n\tprivate readonly min = new Map<string, number>();\n\tprivate readonly max = new Map<string, number>();\n\tprivate readonly average = new Map<string, number>();\n\tprivate readonly median = new Map<string, number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.NUMBER;\n\t}\n\n\taggregate(field: Field, value: number): void {\n\n\t\tconst numberValue = +value,\n\t\t\tkey = field.getKey(),\n\t\t\tsumForField = this.sum.get(key),\n\t\t\tminForField = this.min.get(key),\n\t\t\tmaxForField = this.max.get(key);\n\n\t\tif (field.isAggregation(AggregationType.SUM) || field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.sum.set(key, sumForField + numberValue);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MIN)) {\n\t\t\tif (minForField > numberValue) {\n\t\t\t\tthis.min.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MAX)) {\n\t\t\tif (maxForField < numberValue) {\n\t\t\t\tthis.max.set(key, numberValue);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tgenerateAggregatedValues(field: Field): NumberAggregatedValues {\n\n\t\tconst key = field.getKey(),\n\t\t\tsum = field.isAggregation(AggregationType.SUM) ? this.sum.get(key) : undefined,\n\t\t\tmin = field.isAggregation(AggregationType.MIN) ? this.min.get(key) : undefined,\n\t\t\tmax = field.isAggregation(AggregationType.MAX) ? this.max.get(key) : undefined,\n\t\t\taverage = field.isAggregation(AggregationType.AVERAGE) ? this.average.get(key) : undefined,\n\t\t\tmedian = field.isAggregation(AggregationType.MEDIAN) ? this.median.get(key) : undefined;\n\n\t\treturn new NumberAggregatedValues(\n\t\t\tsum,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\taverage,\n\t\t\tmedian\n\t\t);\n\t}\n\n\tprepare(field: Field): void {\n\n\t\tconst key = field.getKey();\n\n\t\tthis.sum.set(key, 0);\n\t\tthis.min.set(key, Number.MAX_SAFE_INTEGER);\n\t\tthis.max.set(key, 0);\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\n\t\tconst key = field.getKey();\n\n\t\tif (field.isAggregation(AggregationType.AVERAGE)) {\n\t\t\tthis.average.set(key, this.sum.get(key) / items.length);\n\t\t}\n\n\t\tif (field.isAggregation(AggregationType.MEDIAN)) {\n\t\t\tthis.median.set(key, field.getValue(items[Math.floor(items.length / 2)]));\n\t\t}\n\t}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class StringAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { StringAggregatedValues } from './string-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class StringAggregationCalculator extends AggregationCalculator<string, StringAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.STRING;\n\t}\n\n\taggregate(field: Field, value: string): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): StringAggregatedValues {\n\t\treturn new StringAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {}\n\n}\n","import { AggregatedValues } from '../aggregated.values';\n\nexport class UnknownAggregatedValues extends AggregatedValues {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { AggregationCalculator } from '../aggregation.calculator';\nimport { UnknownAggregatedValues } from './unknown-aggregated.values';\nimport { DataType } from '../../../field/data-type/data-type';\nimport { Field } from '../../../field/data-type/field';\nimport { OriginItemEntity } from '../../../../../source/command/origin/origin-item-entity';\n\n\n\n@Injectable()\nexport class UnknownAggregationCalculator extends AggregationCalculator<any, UnknownAggregatedValues> {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tforDataType(dataType: DataType): boolean {\n\t\treturn dataType === DataType.UNKNOWN;\n\t}\n\n\taggregate(field: Field, value: any): void {\n\t}\n\n\tgenerateAggregatedValues(field: Field): UnknownAggregatedValues {\n\t\treturn new UnknownAggregatedValues();\n\t}\n\n\tprepare(field: Field): void {\n\t}\n\n\tpostCalculate(field: Field, items: Array<OriginItemEntity>): void {\n\t}\n\n}\n","import { Type, Provider } from '@angular/core';\nimport { AGGREGATION_CALCULATORS } from './calculation/aggregation.calculators.token';\nimport { BooleanAggregationCalculator } from './calculation/boolean/boolean-aggregation.calculator';\nimport { DateAggregationCalculator } from './calculation/date/date-aggregation.calculator';\nimport { NumberAggregationCalculator } from './calculation/number/number-aggregation.calculator';\nimport { StringAggregationCalculator } from './calculation/string/string-aggregation.calculator';\nimport { UnknownAggregationCalculator } from './calculation/unknown/unknown-aggregation.calculator';\nimport { AggregationManagerFactory } from './aggregation.manager.factory';\n\n\n\nexport function provideAggregationCalculator(clazz: Type<any>): Provider {\n\treturn {\n\t\tprovide: AGGREGATION_CALCULATORS,\n\t\tuseClass: clazz,\n\t\tmulti: true\n\t};\n}\n\nexport const aggregationProviders = [\n\tprovideAggregationCalculator(BooleanAggregationCalculator),\n\tprovideAggregationCalculator(DateAggregationCalculator),\n\tprovideAggregationCalculator(NumberAggregationCalculator),\n\tprovideAggregationCalculator(StringAggregationCalculator),\n\tprovideAggregationCalculator(UnknownAggregationCalculator),\n\n\tAggregationManagerFactory\n];\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureFilterRepository } from './structure.filter.repository';\nimport { StructureConfigFilterSetEvent } from '../../command/filter/config/structure.config-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFilterRepository: StructureFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigFilterSetEvent) {\n\t\t\tthis.structureFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureSearchingRepository } from './structure.searching.repository';\n\nimport { StructureConfigSearchingSetEvent } from '../../command/search/config/structure.config-searching-set.event';\n\n\n@Injectable()\nexport class StructureConfigSearchingSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSearchingRepository: StructureSearchingRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigSearchingSetEvent): void {\n\n\t\tif (event instanceof StructureConfigSearchingSetEvent) {\n\t\t\tthis.structureSearchingRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureQuickFilterRepository } from './structure.quick-filter.repository';\nimport { StructureConfigQuickFilterSetEvent } from '../../command/filter/quick/structure.config-quick-filter-set.event';\n\n\n\n@Injectable()\nexport class StructureConfigQuickFilterSetEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureQuickFilterRepository: StructureQuickFilterRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructureConfigQuickFilterSetEvent): void {\n\n\t\tif (event instanceof StructureConfigQuickFilterSetEvent) {\n\t\t\tthis.structureQuickFilterRepository.setEnabled(event.getEnabled(), event.getAggregateId());\n\t\t}\n\n\t}\n\n}\n","import { FieldId } from '../../../domain/structure/command/field/data-type/field.id';\nimport { DataType } from '../../../domain/structure/command/field/data-type/data-type';\n\n\nexport class StructureFieldUiModel {\n\n\tconstructor(private readonly id: FieldId,\n\t\t\t\tprivate readonly dataType: DataType) {\n\t}\n\n\tgetId(): string {\n\t\treturn this.id.getId();\n\t}\n\n\tgetDataType(): DataType {\n\t\treturn this.dataType;\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Field } from '../../../domain/structure/command/field/data-type/field';\nimport { StructureFieldUiModel } from './structure.field.ui-model';\n\n\n@Injectable()\nexport class StructureFieldUiConverter {\n\n\tconvert(fields: Array<Field>): Array<StructureFieldUiModel> {\n\t\treturn fields.map((field: Field) => {\n\t\t\treturn this.convertOne(field);\n\t\t});\n\t}\n\n\tprivate convertOne(field: Field): StructureFieldUiModel {\n\n\t\treturn new StructureFieldUiModel(field.getId(), field.getDataType());\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructureFieldUiArchive } from './structure.field.ui-archive';\nimport { StructureFieldUiConverter } from './structure.field.ui-converter';\nimport { FieldsInitedEvent } from '../../../domain/structure/command/field/init/fields-inited.event';\n\n\n@Injectable()\nexport class StructureFieldsInitedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureFieldsRepository: StructureFieldUiArchive,\n\t\t\t\tprivate structureFieldUiConverter: StructureFieldUiConverter) {\n\t\tsuper();\n\t}\n\n\thandle(event: FieldsInitedEvent): void {\n\n\t\tif (event instanceof FieldsInitedEvent) {\n\n\t\t\tconst fields = this.structureFieldUiConverter.convert(event.getFields());\n\n\t\t\tthis.structureFieldsRepository.next(event.getAggregateId(), fields);\n\t\t}\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetPagingCommand } from './set-paging.command';\nimport { PagingSetEvent } from './paging-set.event';\nimport { PagingConfig } from '../../paging-config';\n\n\n@Injectable()\nexport class SetPagingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetPagingCommand,\n\t\t\tPagingSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetPagingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst pagingConfig = command.payload as PagingConfig,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.changePaging(pagingConfig);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { NextPageCommand } from './next-page.command';\nimport { NextPageEvent } from './next-page.event';\n\n\n@Injectable()\nexport class NextPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(NextPageCommand,\n\t\t\tNextPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: NextPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.nextPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { PrevPageCommand } from './prev-page.command';\nimport { PrevPageEvent } from './prev-page.event';\n\n\n@Injectable()\nexport class PrevPageCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(PrevPageCommand,\n\t\t\tPrevPageEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: PrevPageCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.prevPage();\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher, AggregateEvent } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ChangePagesizeCommand } from './change-pagesize.command';\nimport { PageChangedEvent } from '../page/page-changed.event';\nimport { PagesizeChangedEvent } from './pagesize-changed.event';\n\n\n@Injectable()\nexport class ChangePagesizeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprotected domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangePagesizeCommand);\n\t}\n\n\thandle(command: ChangePagesizeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst newPageSize = command.pageSize as number,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.changePageSize(newPageSize);\n\n\t\t// aggregateEvents => DomainEvents\n\n\t\t// DomainEvent\n\t\t// causationId -> aka commandId\n\t\t// correlationId -> actual or previous commandId\n\n\t\t// event publisher should take aggregate events\n\t\t// and convert them to domain events\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\t// TODO\n\t\t(aggregateEvents as any).forEach((event: AggregateEvent) => {\n\t\t\t(event as any).aggregateId = structureId;\n\t\t});\n\n\t\tthis.publishAggregateEvents(aggregateEvents, command);\n\t}\n\n\tprivate publishAggregateEvents(events: ReadonlyArray<AggregateEvent>, command: ChangePagesizeCommand): void {\n\n\t\tfor (let event of events) {\n\t\t\tthis.publishAggregateEvent(event, command);\n\t\t}\n\t}\n\n\tprivate publishAggregateEvent(event: AggregateEvent, command: ChangePagesizeCommand): void {\n\n\t\tswitch (event.getType()) {\n\t\t\tcase 'PageChangedAggregateEvent':\n\n\t\t\t\tconst pageChangedEvent = new PageChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pageChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PagesizeChangedAggregateEvent':\n\n\t\t\t\tconst pagesizeChangedEvent = new PagesizeChangedEvent(command.getAggregateId());\n\n\t\t\t\tthis.domainEventPublisher.publish(pagesizeChangedEvent);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';\nimport { SetPagingCommandHandler } from '../../domain/paging/command/set/set-paging.command-handler';\nimport { NextPageCommandHandler } from '../../domain/paging/command/next-page/next-page.command-handler';\nimport { PrevPageCommandHandler } from '../../domain/paging/command/prev-page/prev-page.command-handler';\nimport { ChangePagesizeCommandHandler } from '../../domain/paging/command/change-pagesize/change-pagesize.command-handler';\nimport { PagingRepository } from '../../domain/paging/read/paging.repository';\nimport { PagingAggregateFactory } from '../../domain/paging/command/paging.aggregate-factory';\nimport { PagingConverter } from '../../domain/paging/paging.converter';\nimport { PagingCommandService } from './paging-command.service';\nimport { PagingReadModelService } from './paging-read-model.service';\nimport { PagingEventService } from './paging-event.service';\n\n\nconst commandProviders = [\n\tPagingDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetPagingCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: NextPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: PrevPageCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangePagesizeCommandHandler,\n\t\tmulti: true\n\t}\n];\n\nconst readProviders = [\n\tPagingRepository\n];\n\nexport const pagingProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tPagingAggregateFactory,\n\tPagingConverter,\n\n\tPagingCommandService,\n\tPagingReadModelService,\n\tPagingEventService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaVerticalGridCommand } from './set-schema-vertical-grid.command';\nimport { SchemaVerticalGridSetEvent } from './schema-vertical-grid-set.event';\n\n\n@Injectable()\nexport class SetSchemaVerticalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaVerticalGridCommand,\n\t\t\tSchemaVerticalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaVerticalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setVerticalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetSchemaHorizontalGridCommand } from './set-schema-horizontal-grid.command';\nimport { SchemaHorizontalGridSetEvent } from './schema-horizontal-grid-set.event';\n\n@Injectable()\nexport class SetSchemaHorizontalGridCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaHorizontalGridCommand,\n\t\t\tSchemaHorizontalGridSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaHorizontalGridCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHorizontalGrid(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaThemeCommand } from './set-schema-theme.command';\nimport { SchemaThemeSetEvent } from './schema-theme-set.event';\n\n@Injectable()\nexport class SetSchemaThemeCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaThemeCommand,\n\t\t\tSchemaThemeSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaThemeCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst theme = command.theme,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setTheme(theme);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaBottomHeaderCommand } from './change-schema-bottom-header.command';\nimport { SchemaBottomHeaderChangedEvent } from './schema-bottom-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaBottomHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaBottomHeaderCommand,\n\t\t\tSchemaBottomHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaBottomHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderBottom(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n\nimport { CommandHandler } from '@generic-ui/hermes';\nimport { DomainEventPublisher } from '@generic-ui/hermes';\nimport { ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { ChangeSchemaTopHeaderCommand } from './change-schema-top-header.command';\nimport { SchemaTopHeaderChangedEvent } from './schema-top-header-changed.event';\n\n\n@Injectable()\nexport class ChangeSchemaTopHeaderCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ChangeSchemaTopHeaderCommand,\n\t\t\tSchemaTopHeaderChangedEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ChangeSchemaTopHeaderCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setHeaderTop(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\n\nimport { SetRowColoringCommand } from './set-row-coloring.command';\nimport { RowColoringSetEvent } from './row-coloring-set.event';\n\n\n@Injectable()\nexport class SetRowColoringCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetRowColoringCommand,\n\t\t\tRowColoringSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetRowColoringCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst coloring = command.coloring,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tschema = structure.getSchema();\n\n\t\tschema.setRowColoring(coloring);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSchemaCommand } from './set-schema.command';\nimport { SchemaSetEvent } from './schema-set.event';\n\n\n@Injectable()\nexport class SetSchemaCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetSchemaCommand,\n\t\t\tSchemaSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetSchemaCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst height = command.height,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.setHeight(height);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { SchemaDispatcher } from '../../domain/schema/command/schema.dispatcher';\nimport { SetSchemaVerticalGridCommandHandler } from '../../domain/schema/command/grid/vertical/set-schema-vertical-grid.command-handler';\nimport { SetSchemaHorizontalGridCommandHandler } from '../../domain/schema/command/grid/horizontal/set-schema-horizontal-grid.command-handler';\nimport { SetSchemaThemeCommandHandler } from '../../domain/schema/command/theme/set-schema-theme.command-handler';\nimport { ChangeSchemaBottomHeaderCommandHandler } from '../../domain/schema/command/column-header/bottom/change-schema-bottom-header.command-handler';\nimport { ChangeSchemaTopHeaderCommandHandler } from '../../domain/schema/command/column-header/top/change-schema-top-header.command-handler';\nimport { SetRowColoringCommandHandler } from '../../domain/schema/command/coloring/set/set-row-coloring.command-handler';\nimport { SetSchemaCommandHandler } from '../../domain/schema/command/set/set-schema.command-handler';\nimport { SchemaRepository } from '../../domain/schema/read/schema-repository';\nimport { SchemaConverter } from '../../domain/schema/schema.converter';\nimport { SchemaCommandService } from './schema-command.service';\nimport { SchemaReadModelService } from './schema-read-model.service';\nimport { SchemaAggregateFactory } from '../../domain/schema/command/schema.aggregate-factory';\n\n\nconst commandProviders = [\n\tSchemaDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaVerticalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaHorizontalGridCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSchemaThemeCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaBottomHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ChangeSchemaTopHeaderCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetRowColoringCommandHandler,\n\t\tmulti: true\n\t},\n\tSchemaAggregateFactory\n];\n\nconst readProviders = [\n\tSchemaRepository\n];\n\nexport const schemaProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tSchemaConverter,\n\n\tSchemaCommandService,\n\tSchemaReadModelService\n\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\n\nimport { SetFormationCommand } from './set-formation.command';\nimport { FormationSetEvent } from './formation-set.event';\n\n\n@Injectable()\nexport class SetFormationCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SetFormationCommand,\n\t\t\tFormationSetEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SetFormationCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst rawFormation = command.payload as any,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\t// missing implementation\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { ToggleSelectedRowCommand } from './toggle-selected-row.command';\nimport { SelectedRowToggledEvent } from './selected-row-toggled.event';\n\n\n@Injectable()\nexport class ToggleSelectedRowCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(ToggleSelectedRowCommand,\n\t\t\tSelectedRowToggledEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: ToggleSelectedRowCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst selectedRow = command.selectedRow,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst formation = structure.getFormation();\n\n\t\tformation.toggleRow(selectedRow);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { COMMAND_HANDLERS } from '@generic-ui/hermes';\n\nimport { FormationDispatcher } from '../../domain/formation/command/formation.dispatcher';\nimport { SetFormationCommandHandler } from '../../domain/formation/command/set/set-formation.command-handler';\nimport { ToggleSelectedRowCommandHandler } from '../../domain/formation/command/toggle/toggle-selected-row.command-handler';\nimport { FormationRepository } from '../../domain/formation/read/formation-repository';\nimport { FormationAggregateFactory } from '../../domain/formation/command/formation.aggregate-factory';\nimport { FormationConverter } from '../../domain/formation/formation.converter';\nimport { FormationEventService } from './formation-event.service';\nimport { FormationCommandService } from './formation-command.service';\nimport { FormationReadModelService } from './formation-read-model.service';\n\nconst commandProviders = [\n\tFormationDispatcher,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetFormationCommandHandler,\n\t\tmulti: true\n\t},\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSelectedRowCommandHandler,\n\t\tmulti: true\n\t},\n\tFormationAggregateFactory\n];\n\nconst readProviders = [\n\tFormationRepository\n];\n\nexport const formationProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tFormationEventService,\n\n\tFormationConverter,\n\n\tFormationCommandService,\n\tFormationReadModelService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\nimport { SetOriginCommand } from './set-origin.command';\n\n\n@Injectable()\nexport class SetOriginCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(SetOriginCommand);\n\t}\n\n\thandle(command: SetOriginCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\titems = command.items as Array<any>;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tif (!structure) {\n\t\t\tconsole.error(`There is no aggregate 'Structure' for aggregateId: ${structureId}`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst aggregateEvents = structure.setOrigin(items);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, ExecuteResponse, DomainEventPublisher } from '@generic-ui/hermes';\n\nimport { StructureEditSourceItemCommand } from './structure.edit-source-item.command';\nimport { StructureAggregateRepository } from '../../../../structure/command/structure-aggregate.repository';\nimport { StructureSourceDomainEventPublisher } from '../../structure.source.domain-event.publisher';\n\n\n@Injectable()\nexport class StructureEditSourceItemCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher) {\n\t\tsuper(StructureEditSourceItemCommand);\n\t}\n\n\thandle(command: StructureEditSourceItemCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.getAggregateId(),\n\t\t\tparams = command.getParams();\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId);\n\n\t\tconst aggregateEvents = structure.editItem(params);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\n\t\tthis.structureSourceDomainEventPublisher.publish(aggregateEvents);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { DomainEventHandler } from '@generic-ui/hermes';\nimport { StructureSourceOriginRepository } from './structure.source-origin.repository';\nimport { OriginSetEvent } from '../../command/origin/set-origin/origin-set.event';\n\n\n\n@Injectable()\nexport class StructureOriginChangedEventHandler extends DomainEventHandler {\n\n\tconstructor(private structureSourceOriginRepository: StructureSourceOriginRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: OriginSetEvent): void {\n\n\t\tif (event instanceof OriginSetEvent) {\n\t\t\tconst origin = event.getOrigin();\n\n\t\t\tthis.structureSourceOriginRepository.setOrigin(origin, event.getAggregateId());\n\t\t}\n\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { StructureRepository } from '../../structure/read/structure.repository';\nimport { StructureId } from '../../structure-id';\nimport { Schema } from '../../schema/read/schema';\nimport { Structure } from '../../structure/read/structure';\n\n\n@Injectable()\nexport class SourceRepository {\n\n\tconstructor(private structureRepository: StructureRepository) {\n\t}\n\n\tselect(structureId: StructureId): Observable<Schema> {\n\n\t\treturn this.structureRepository\n\t\t\t\t   .onStructure(structureId)\n\t\t\t\t   .pipe(\n\t\t\t\t\t   filter((structure: Structure) => structure.getId().toString() === structureId.toString()),\n\t\t\t\t\t   map((structure: Structure) => structure.getSchema())\n\t\t\t\t   );\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../../structure/command/structure-aggregate.repository';\nimport { SetSourceLoadingEvent } from './set-source-loading.event';\nimport { SourceSetLoadingCommand } from './source-set-loading.command';\n\n\n@Injectable()\nexport class SourceSetLoadingCommandHandler extends CommandHandler {\n\n\tconstructor(private structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tdomainEventPublisher: DomainEventPublisher) {\n\t\tsuper(SourceSetLoadingCommand,\n\t\t\tSetSourceLoadingEvent,\n\t\t\tdomainEventPublisher);\n\t}\n\n\thandle(command: SourceSetLoadingCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst enabled = command.enabled,\n\t\t\tstructureId = command.structureId;\n\n\t\tconst structure = this.structureAggregateRepository.getById(structureId),\n\t\t\tsource = structure.getSource();\n\n\t\tsource.setLoading(enabled);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t}\n\n}\n","import { Injectable } from '@angular/core';\nimport { DomainEventHandler } from '@generic-ui/hermes';\n\nimport { StructurePreparedEntitiesSetEvent } from '../../command/prepared/structure.prepared-entities-set.event';\nimport { StructurePreparedItemsRepository } from './structure.prepared-items.repository';\n\n\n@Injectable()\nexport class StructurePreparedItemsEventHandler extends DomainEventHandler {\n\n\tconstructor(private structurePreparedItemsRepository: StructurePreparedItemsRepository) {\n\t\tsuper();\n\t}\n\n\thandle(event: StructurePreparedEntitiesSetEvent): void {\n\n\t\tif (event instanceof StructurePreparedEntitiesSetEvent) {\n\t\t\tconst preparedItems = event.getPreparedItems();\n\n\t\t\tthis.structurePreparedItemsRepository.setItems(preparedItems, event.getAggregateId());\n\t\t}\n\n\t}\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport { SourceDispatcher } from '../../domain/source/command/source.dispatcher';\nimport { SourceManagerFactory } from '../../domain/source/command/source.manager-factory';\nimport { SetOriginCommandHandler } from '../../domain/source/command/origin/set-origin/set-origin.command-handler';\nimport { StructureEditSourceItemCommandHandler } from '../../domain/source/command/origin/edit/structure.edit-source-item.command-handler';\nimport { StructureSourceDomainEventPublisher } from '../../domain/source/command/structure.source.domain-event.publisher';\nimport { StructureOriginChangedEventHandler } from '../../domain/source/read/origin/structure.origin-changed.event-handler';\nimport { SourceConverter } from '../../domain/source/source.converter';\nimport { SourceCommandService } from './source-command.service';\nimport { SourceReadModelService } from './source-read-model.service';\nimport { SourceEventService } from './event/source-event.service';\nimport { SourceRepository } from '../../domain/source/read/source.repository';\nimport { StructureSourceOriginRepository } from '../../domain/source/read/origin/structure.source-origin.repository';\nimport { SourceSetLoadingCommandHandler } from '../../domain/source/command/loading/source-set-loading.command-handler';\nimport { StructurePreparedItemsRepository } from '../../domain/source/read/prepared/structure.prepared-items.repository';\nimport { StructurePreparedItemsEventHandler } from '../../domain/source/read/prepared/structure.prepared-items.event-handler';\n\n\nconst commandProviders = [\n\tSourceDispatcher,\n\tSourceManagerFactory,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SourceSetLoadingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetOriginCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureEditSourceItemCommandHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceDomainEventPublisher\n];\n\nconst readProviders = [\n\tSourceRepository,\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureOriginChangedEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructurePreparedItemsEventHandler,\n\t\tmulti: true\n\t},\n\tStructureSourceOriginRepository,\n\tStructurePreparedItemsRepository\n];\n\nexport const sourceProviders = [\n\t...commandProviders,\n\t...readProviders,\n\n\tSourceConverter,\n\n\tSourceCommandService,\n\tSourceReadModelService,\n\tSourceEventService\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CommandHandler, DomainEventPublisher, ExecuteResponse } from '@generic-ui/hermes';\n\nimport { StructureAggregateRepository } from '../../structure-aggregate.repository';\nimport { StructureSetSearchPhraseCommand } from './structure.set-search-phrase.command';\nimport { StructureSearchPhraseSetDomainEvent } from './structure.search-phrase-set.domain-event';\nimport { StructureSourceDomainEventPublisher } from '../../../../source/command/structure.source.domain-event.publisher';\n\n\n@Injectable()\nexport class StructureSetSearchPhraseCommandHandler extends CommandHandler {\n\n\tconstructor(private readonly structureAggregateRepository: StructureAggregateRepository,\n\t\t\t\tprivate structureSourceDomainEventPublisher: StructureSourceDomainEventPublisher,\n\t\t\t\tprivate domainEventPublisher: DomainEventPublisher) {\n\t\tsuper(StructureSetSearchPhraseCommand);\n\t}\n\n\thandle(command: StructureSetSearchPhraseCommand): ExecuteResponse | Observable<ExecuteResponse> {\n\n\t\tconst structureId = command.structureId,\n\t\t\tphrase = command.phrase,\n\t\t\tstructure = this.structureAggregateRepository.getById(structureId);\n\n\t\tstructure.addSearchPhrase(phrase);\n\n\t\tthis.structureAggregateRepository.save(structure);\n\t\tthis.domainEventPublisher.publish(new StructureSearchPhraseSetDomainEvent(structureId));\n\t\tthis.structureSourceDomainEventPublisher.publish(structure.getEvents());\n\t}\n\n}\n","import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';\nimport {\n\tinMemoryStructureCommandProviders,\n\tinMemoryStructureProviders,\n\tinMemoryStructureReadProviders\n} from '../../infrastructure/in-memory/structure/in-memory.structure.providers';\nimport { InitStructureCommandHandler } from '../../domain/structure/command/init/init-structure.command-handler';\nimport { SetVerticalScrollEnabledCommandHandler } from '../../domain/structure/command/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler';\nimport { SetScrollPositionCommandHandler } from '../../domain/structure/command/vertical-formation/scroll-position/set-scroll-position.command-handler';\nimport { InitFieldsCommandHandler } from '../../domain/structure/command/field/init/init-fields.command-handler';\nimport { ToggleSortCommandHandler } from '../../domain/structure/command/sort/toggle/toggle-sort.command-handler';\nimport { SetSortingCommandHandler } from '../../domain/structure/command/sort/set/set-sorting.command-handler';\nimport { StructureSetConfigFilterCommandHandler } from '../../domain/structure/command/filter/config/structure.set-config-filter.command-handler';\nimport { StructureSetConfigSearchingCommandHandler } from '../../domain/structure/command/search/config/structure.set-config-searching.command-handler';\nimport { StructureSetConfigQuickFilterCommandHandler } from '../../domain/structure/command/filter/quick/structure.set-config-quick-filter.command-handler';\nimport { StructureToggleFilterCommandHandler } from '../../domain/structure/command/filter/toggle/structure.toggle-filter.command-handler';\nimport { StructureSetAggregationEnabledCommandHandler } from '../../domain/structure/command/aggregation/set/structure.set-aggregation-enabled.command-handler';\nimport { VerticalFormationFactory } from '../../domain/structure/command/vertical-formation/vertical-formation.factory';\nimport { FieldCollectionFactory } from '../../domain/structure/command/field/field-collection.factory';\nimport { FilterManagerFactory } from '../../domain/structure/command/filter/filter.manager-factory';\nimport { FieldIdGenerator } from '../../domain/structure/command/field/field-id.generator';\nimport { StructureFilterCommandService } from './filter/structure.filter.command.service';\nimport { FieldFactory } from '../../domain/structure/command/field/data-type/field.factory';\nimport { aggregationProviders } from '../../domain/structure/command/aggregation/aggregation.providers';\nimport { StructureConfigFilterSetEventHandler } from '../../domain/structure/read/filter/structure.config-filter-set.event-handler';\nimport { StructureConfigSearchingSetEventHandler } from '../../domain/structure/read/searching/structure.config-searching-set.event-handler';\nimport { StructureConfigQuickFilterSetEventHandler } from '../../domain/structure/read/filter/structure.config-quick-filter-set.event-handler';\nimport { StructureFieldsInitedEventHandler } from './field/structure.fields-inited.event-handler';\nimport { VerticalFormationConverter } from '../../domain/structure/read/vertical-formation/vertical-formation.converter';\nimport { StructureFilterReadModelRepository } from './filter/structure.filter.read-model.repository';\nimport { StructureFilterRepository } from '../../domain/structure/read/filter/structure.filter.repository';\nimport { StructureQuickFilterRepository } from '../../domain/structure/read/filter/structure.quick-filter.repository';\nimport { StructureSearchingRepository } from '../../domain/structure/read/searching/structure.searching.repository';\nimport { StructureSearchReadModelRepository } from './search/structure-search.read-model.repository';\nimport { StructureFieldUiArchive } from './field/structure.field.ui-archive';\nimport { StructureFieldUiConverter } from './field/structure.field.ui-converter';\nimport { StructureFieldUiRepository } from './field/structure.field.ui-repository';\nimport { StructureAggregationCommandService } from './aggregation/structure.aggregation.command-service';\nimport { StructureAggregationUiEventsRepository } from './aggregation/structure.aggregation.ui-events-repository';\nimport { StructureCommandService } from './structure-command.service';\nimport { StructureConverter } from '../../domain/structure/structure.converter';\nimport { StructureAggregateFactory } from '../../domain/structure/command/structure.aggregate-factory';\nimport { StructureReadModelService } from './structure-read-model.service';\nimport { pagingProviders } from '../paging/paging.providers';\nimport { schemaProviders } from '../schema/schema.providers';\nimport { formationProviders } from '../formation/formation.providers';\nimport { sourceProviders } from '../source/source.providers';\nimport { StructureSetSearchPhraseCommandHandler } from '../../domain/structure/command/search/set/structure.set-search-phrase.command-handler';\nimport { SearchManagerFactory } from '../../domain/structure/command/search/search.manager-factory';\n\n\nconst commandProviders = [\n\t...inMemoryStructureCommandProviders,\n\t{\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitStructureCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetVerticalScrollEnabledCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetScrollPositionCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: InitFieldsCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: ToggleSortCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: SetSortingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigSearchingCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetConfigQuickFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureToggleFilterCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetAggregationEnabledCommandHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: COMMAND_HANDLERS,\n\t\tuseClass: StructureSetSearchPhraseCommandHandler,\n\t\tmulti: true\n\t},\n\tVerticalFormationFactory,\n\tFieldCollectionFactory,\n\tFilterManagerFactory,\n\tSearchManagerFactory,\n\tFieldIdGenerator,\n\tStructureFilterCommandService,\n\tFieldFactory,\n\n\t...aggregationProviders\n];\n\nconst readProviders = [\n\t{\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigSearchingSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureConfigQuickFilterSetEventHandler,\n\t\tmulti: true\n\t}, {\n\t\tprovide: DOMAIN_EVENT_HANDLERS,\n\t\tuseClass: StructureFieldsInitedEventHandler,\n\t\tmulti: true\n\t},\n\t...inMemoryStructureReadProviders,\n\tVerticalFormationConverter,\n\tStructureFilterReadModelRepository,\n\tStructureFilterRepository,\n\tStructureQuickFilterRepository,\n\tStructureSearchingRepository,\n\tStructureSearchReadModelRepository,\n\tStructureFieldUiArchive,\n\tStructureFieldUiConverter,\n\tStructureFieldUiRepository\n];\n\nexport const structureProviders = [\n\t...inMemoryStructureProviders,\n\n\t...commandProviders,\n\t...readProviders,\n\n\tStructureAggregationCommandService,\n\tStructureAggregationUiEventsRepository,\n\n\tStructureAggregateFactory,\n\tStructureConverter,\n\n\tStructureReadModelService,\n\tStructureCommandService,\n\n\t...pagingProviders,\n\t...schemaProviders,\n\t...formationProviders,\n\t...sourceProviders\n];\n","import { Logger } from './logger';\n\nexport class ConsoleLogger extends Logger {\n\n\twarn(text: string): void {\n\t\tconsole.warn(text);\n\t}\n\n\terror(text: string): void {\n\t\tconsole.error(text);\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { Logger } from './logger';\nimport { ConsoleLogger } from './console.logger';\n\n\n@NgModule({\n\tproviders: [{\n\t\tprovide: Logger,\n\t\tuseClass: ConsoleLogger\n\t}]\n})\nexport class LoggerModule {}\n","import { Injectable } from '@angular/core';\n\nimport { ItemEntity } from './item.entity';\nimport { OriginItemEntity } from './command/origin/origin-item-entity';\n\n@Injectable()\nexport class ItemEntityFactory {\n\n\tcreate(data: any): ItemEntity;\n\tcreate(data: Array<any>): Array<ItemEntity>;\n\tcreate(data: any): any {\n\n\t\tif (Array.isArray(data)) {\n\t\t\treturn this.createEntities(data);\n\t\t} else {\n\t\t\treturn this.createEntity(data);\n\t\t}\n\t}\n\n\tcreateEntities(data: Array<any>): Array<ItemEntity> {\n\t\treturn data.map((data: any) => this.createEntity(data));\n\t}\n\n\tprivate createEntity(item: OriginItemEntity | any): ItemEntity {\n\n\t\tif (item instanceof OriginItemEntity) {\n\t\t\treturn new ItemEntity(item.rawData, item.id, item.getVersion());\n\t\t} else {\n\t\t\treturn new ItemEntity(item);\n\t\t}\n\t}\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation, OnInit } from \"@angular/core\";\n\nimport { SmartComponent } from '../../../../../common/cdk/smart-component';\n\n@Component({\n\tselector: 'gui-structure-top-panel',\n\ttemplate: `\n\t\t\n\t\t<gui-structure-search-bar></gui-structure-search-bar>\n\t\t\n\t\t\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureTopPanelComponent extends SmartComponent {\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\n}\n","import { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { SmartComponent } from '../../../../../../common/cdk/smart-component';\n\nimport { StructureCommandService } from '../../../../ui-api/structure/structure-command.service';\n\n\n@Component({\n\tselector: 'gui-structure-search-bar',\n\ttemplate: `\n\t\t<form [formGroup]=\"searchForm\">\n\t\t\t<div class=\"gui-search-icon\"></div>\n\t\t\t<input formControlName=\"searchPhrase\" [placeholder]=\"'Search ...'\">\n\t\t</form>\n\t`,\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tencapsulation: ViewEncapsulation.None\n})\nexport class StructureSearchComponent extends SmartComponent implements OnInit {\n\n\tsearchForm: FormGroup;\n\n\tconstructor(private formBuilder: FormBuilder,\n\t\t\t\tprivate structureCommandService: StructureCommandService) {\n\t\tsuper();\n\t\tthis.searchForm = this.formBuilder.group({\n\t\t\t'searchPhrase': ''\n\t\t});\n\t}\n\n\tngOnInit() {\n\t\tthis.observeChanges();\n\t}\n\n\tprivate observeChanges(): void {\n\t\tthis.searchForm\n\t\t\t.controls['searchPhrase']\n\t\t\t.valueChanges\n\t\t\t.pipe(\n\t\t\t\tdebounceTime(200),\n\t\t\t\tthis.takeUntil()\n\t\t\t)\n\t\t\t.subscribe((phrase: string) => {\n\t\t\t\tthis.structureCommandService.search(phrase);\n\t\t\t});\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { StructureTopPanelComponent } from './structure.top-panel.component';\nimport { StructureSearchComponent } from './search/structure.search.component';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tReactiveFormsModule\n\t],\n\tdeclarations: [\n\t\tStructureTopPanelComponent,\n\t\tStructureSearchComponent\n\t],\n\texports: [\n\t\tStructureTopPanelComponent,\n\t\tStructureSearchComponent\n\t]\n})\nexport class StructureTopPanelModule {\n}\n","import { ModuleWithProviders, NgModule, PLATFORM_ID, Inject } from '@angular/core';\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { FabricModule } from '@generic-ui/fabric';\n\nimport { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, HermesModule } from '@generic-ui/hermes';\n\nimport { StructureColumnConfigService } from './header/config/structure.column-config.service';\nimport { fabricImports } from './structure-fabric.imports';\nimport { StructurePagingModule } from './paging/structure-paging.module';\nimport { StructureInfoPanelModule } from './panel/info/structure.info-panel.module';\nimport { CompositionModule } from '../ui-api/composition/composition.module';\nimport { StructureComponent } from './structure.component';\nimport { StructureHeaderComponent } from './header/structure-header.component';\nimport { StructureHeaderColumnsComponent } from './header/columns/structure-header-columns.component';\nimport { StructureHeaderFiltersComponent } from './header/filters/structure-header-filters.component';\nimport { StructureHeaderFilterComponent } from './header/filters/structure.header-filter.component';\nimport { StructureContentComponent } from './content/structure-content.component';\nimport { StructureRowComponent } from './content/row/structure-row.component';\nimport { StructureCellComponent } from './content/cell/structure.cell.component';\nimport { StructureContainerComponent } from './content/structure-container.component';\nimport { StructureQuickFiltersComponent } from './header/quick-filters/structure.quick-filters.component';\nimport { StructureBlueprintComponent } from './blueprint/structure.blueprint.component';\nimport { StructureAggregationPanelComponent } from './panel/aggregation/structure.aggregation-panel.component';\nimport { StructureColumnConfigComponent } from './header/config/structure.column-config.component';\nimport { STRUCTURE_CSS_CLASS_NAME } from '../ui-api/structure/structure-tokens';\nimport { StructureDefinition } from './structure-definition';\nimport { SourceReadModelService } from '../ui-api/source/source-read-model.service';\nimport { StructureIdGenerator } from './structure-id.generator';\nimport { StructureAggregationPanelConfigConverter } from './panel/aggregation/structure.aggregation-panel.config-converter';\nimport { structureProviders } from '../ui-api/structure/structure.providers';\nimport { StructureModuleConfig } from './structure-module-config';\nimport { LoggerModule } from '../../../common/cdk/logger/logger.module';\nimport { ItemEntityFactory } from '../domain/source/item.entity-factory';\nimport { StructureTopPanelModule } from './panel/top/structure.top-panel.module';\nimport { StructureSetSearchPhraseCommandHandler } from '../domain/structure/command/search/set/structure.set-search-phrase.command-handler';\n\nexport function createStructureDefinition() {\n\treturn new StructureDefinition.DefaultBuilder().build();\n}\n\n\nconst imports = [\n\tCommonModule,\n\tReactiveFormsModule,\n\tHermesModule,\n\t// .withConfig({\n\t// \tloggers: false\n\t// }),\n\t...fabricImports,\n\n\tStructurePagingModule,\n\tStructureInfoPanelModule,\n\tStructureTopPanelModule,\n\n\tCompositionModule,\n\n\tLoggerModule\n];\n\nconst declarations = [\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureHeaderColumnsComponent,\n\tStructureHeaderFiltersComponent,\n\tStructureHeaderFilterComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureCellComponent,\n\tStructureContainerComponent,\n\tStructureQuickFiltersComponent,\n\tStructureBlueprintComponent,\n\tStructureAggregationPanelComponent,\n\tStructureColumnConfigComponent\n];\n\nconst entryComponents = [\n\tStructureColumnConfigComponent\n];\n\nconst providers = [\n\t{\n\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\tuseValue: 'structure'\n\t},\n\t{\n\t\tprovide: StructureDefinition,\n\t\tuseFactory: createStructureDefinition\n\t},\n\tItemEntityFactory,\n\n\tSourceReadModelService,\n\n\tStructureIdGenerator,\n\n\tStructureAggregationPanelConfigConverter,\n\tStructureColumnConfigService,\n\n\t...structureProviders\n\n];\n\nconst exportDeclarations = [\n\tFabricModule,\n\tStructureComponent,\n\tStructureHeaderComponent,\n\tStructureContentComponent,\n\tStructureRowComponent,\n\tStructureContainerComponent,\n\n\t...fabricImports,\n\tStructurePagingModule\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class StructureModule {\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic withConfig(structureConfig: StructureModuleConfig = { cssClassName: '', hermesModuleConfig: { loggers: false } }): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: StructureModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: STRUCTURE_CSS_CLASS_NAME,\n\t\t\t\t\tuseValue: structureConfig.cssClassName\n\t\t\t\t},\n\t\t\t\t{ provide: COMMAND_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t{ provide: EVENT_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },\n\t\t\t\t...providers\n\t\t\t]\n\t\t};\n\t}\n\n\tconstructor(@Inject(PLATFORM_ID) private platformId: any) {\n\t\tif (isPlatformBrowser(this.platformId)) {\n\t\t\twindow['hermesApi'].loggers = false;\n\t\t}\n\t}\n\n}\n","import { NgModule, Provider } from '@angular/core';\n\nimport { GridComponent } from '../ui/grid/grid.component';\n\nimport { StructureModule } from '../../../lib/structure/ui/structure.module';\n\nimport { GridIdGenerator } from '../ui/grid/register/grid-id.generator';\nimport { GridRegister } from '../ui/grid/register/grid.register';\n\n\nconst imports = [\n\tStructureModule.withConfig({\n\t\t\tcssClassName: 'grid',\n\t\t\thermesModuleConfig: {\n\t\t\t\tloggers: true\n\t\t\t}\n\t\t})\n];\n\nconst declarations = [\n\tGridComponent\n];\n\nconst providers = [\n\tGridIdGenerator,\n\tGridRegister\n] as Array<Provider>;\n\nconst exportDeclarations = [\n\tGridComponent\n];\n\nconst entryComponents = [] as Array<any>;\n\nconst elementComponents = [\n\tGridComponent\n];\n\n@NgModule({\n\timports,\n\tdeclarations,\n\tproviders,\n\texports: exportDeclarations,\n\tentryComponents\n})\nexport class GridModule {\n\n\tstatic entryComponents = [...entryComponents];\n\n\tstatic exportDeclarations = [...exportDeclarations];\n\n\tstatic elementComponents = [...elementComponents];\n}\n"]}