import { Component, Inject, Input, PLATFORM_ID, ViewChild, ViewEncapsulation } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { GuiGridGateway } from './gui.grid-gateway';
import { structureParentComponent } from '../../../../feature-view/grid-view/structure-parent-component';
import { GuiGridApiProvider } from './api/gui.grid.api-provider';
import { GuiGridThemeCommandInvoker } from './theme/gui.grid.theme.command-invoker';
import { ClassModifier } from '../../../../feature/common/cdk/dom/class/class-modifier';
import { StyleModifier } from '../../../../feature/common/cdk/dom/style/style-modifier';
import { AttributeModifier } from '../../../../feature/common/cdk/dom/attribute/attribute-modifier';
import { StructureDefinition } from '../../../../feature-view/grid-view/structure-definition';
import { guiGridStructureDefinition } from './gui.grid-structure-definition';
import * as i0 from "@angular/core";
import * as i1 from "./register/gui.grid.register";
import * as i2 from "./register/gui.grid-id.generator";
import * as i3 from "../../../../feature-view/grid-view/structure-id.generator";
import * as i4 from "../../../../core/structure/formation/api/formation.publisher";
import * as i5 from "../../../../core/structure/formation/api/formation.warehouse";
import * as i6 from "../../../../core/composition/api/composition.publisher";
import * as i7 from "../../../../core/composition/api/composition.warehouse";
import * as i8 from "../../../../core/structure/filter/api-integration/filter.integration";
import * as i9 from "../../../../core/structure/source/api/source.publisher";
import * as i10 from "../../../../core/structure/search/api/search.publisher";
import * as i11 from "../../../../core/schema/api/schema.publisher";
import * as i12 from "../../../../core/structure/structure-core/api/structure.publisher";
import * as i13 from "../../../../core/structure/summaries/api/summaries.publisher";
import * as i14 from "../../../../core/structure/sorting/api/sorting.publisher";
import * as i15 from "../../../../core/structure/paging/api/paging.publisher";
import * as i16 from "../../../../feature-view/grid-view/structure.component";
import * as i17 from "../../../../feature-view/grid-view/gate/column/header/structure-column-header.gate";
import * as i18 from "../../../../feature-view/grid-view/gate/paging/structure-paging.gate";
import * as i19 from "../../../../feature-view/grid-view/gate/searching/structure-searching.gate";
import * as i20 from "../../../../feature-view/grid-view/gate/source/structure-selection.gate";
import * as i21 from "../../../../feature-view/grid-view/gate/l10n/structure-l10n.gate";
import * as i22 from "../../../../feature-view/grid-view/gate/panel/structure-panel.gate";
import * as i23 from "../../../../feature-view/grid-view/gate/row/detail/structure-row-detail.gate";
import * as i24 from "../../../../feature-view/grid-view/gate/column/menu/structure-column-menu.gate";
import * as i25 from "../../../../feature/structure/summaries/gate/structure-summaries.gate";
import * as i26 from "../../../../feature-view/grid-view/gate/panel/info/structure-info-panel.gate";
import * as i27 from "../../../../feature-view/grid-view/gate/row/class/structure-row-class.gate";
import * as i28 from "../../../../feature-view/grid-view/gate/row/style/structure-row-style.gate";
import * as i29 from "../../../../feature-view/grid-view/gate/row/coloring/structure-row-coloring.gate";
import * as i30 from "../../../../feature/schema/gate/grid/theme-grid.gate";
import * as i31 from "../../../../feature/structure/sorting/gate/structure-sorting.gate";
import * as i32 from "../../../../feature-view/grid-view/gate/source/source-loading.gate";
import * as i33 from "../../../../feature/structure/filter/gate/structure-filter.gate";
import * as i34 from "../../../../feature/structure/filter/gate/structure-quick-filters.gate";
import * as i35 from "../../../../feature/structure/vertical-formation/gate/vertical-formation.gate";
export class GuiGridComponent extends GuiGridGateway {
    constructor(platformId, elementRef, changeDetectorRef, gridRegister, gridIdGenerator, structureIdGenerator, 
    // delegate
    formationCommandDispatcher, formationWarehouse, compositionCommandInvoker, compositionWarehouse, filterIntegration, sourceCommandDispatcher, searchCommandInvoker, schemaCommandInvoker, structureCommandDispatcher, summariesCommandInvoker, sortingCommandInvoker, pagingCommandInvoker) {
        super();
        this.platformId = platformId;
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.gridRegister = gridRegister;
        this.gridIdGenerator = gridIdGenerator;
        this.structureIdGenerator = structureIdGenerator;
        this.formationCommandDispatcher = formationCommandDispatcher;
        this.formationWarehouse = formationWarehouse;
        this.compositionCommandInvoker = compositionCommandInvoker;
        this.compositionWarehouse = compositionWarehouse;
        this.filterIntegration = filterIntegration;
        this.sourceCommandDispatcher = sourceCommandDispatcher;
        this.searchCommandInvoker = searchCommandInvoker;
        this.schemaCommandInvoker = schemaCommandInvoker;
        this.structureCommandDispatcher = structureCommandDispatcher;
        this.summariesCommandInvoker = summariesCommandInvoker;
        this.sortingCommandInvoker = sortingCommandInvoker;
        this.pagingCommandInvoker = pagingCommandInvoker;
        this.gridThemeCommandInvoker = new GuiGridThemeCommandInvoker(this.schemaCommandInvoker, this.gridThemeConverter, this.gridRowColoringConverter);
        this.classModifier = new ClassModifier(this.elementRef.nativeElement);
        this.styleModifier = new StyleModifier(this.elementRef.nativeElement);
        this.attributeModifier = new AttributeModifier(this.elementRef.nativeElement);
    }
    ngOnInit() {
        this.classModifier.getHost().add('gui-grid');
        // this.styleModifier.getHost().setHeight(this.maxHeight);
        this.initApi();
        let gridId = this.gridId;
        if (gridId === undefined) {
            // gridId = this.gridIdGenerator.generateId();
            gridId = 'gui-grid-' + this.structureIdGenerator.generateId();
        }
        this.localGridId = gridId;
        this.exposeGridId();
        // register
        this.gridRegister.register(gridId, this, this.structureRef.getStructureId());
        if (isPlatformBrowser(this.platformId)) {
            window['getGuiGrid'] = (gridId) => {
                const gridConsoleConfig = this.gridRegister.getValues(gridId);
                if (gridConsoleConfig) {
                    return this.api;
                }
                else {
                    return undefined;
                }
            };
        }
    }
    ngOnDestroy() {
        this.gridRegister.unregister(this.localGridId);
    }
    getElementRef() {
        return this.elementRef;
    }
    getGridId() {
        return '';
    }
    detectChanges() {
        this.changeDetectorRef.detectChanges();
    }
    exposeGridId() {
        this.attributeModifier.getHost().setAttribute(GuiGridComponent.GUI_GRID_ID, this.localGridId);
    }
    initApi() {
        this.api = new GuiGridApiProvider(this.structureRef.structureId, this.structureRef.compositionId, this.structureRef.schemaReadModelRootId, this.formationCommandDispatcher, this.formationWarehouse, this.compositionCommandInvoker, this.compositionWarehouse, this.filterIntegration, this.sourceCommandDispatcher, this.searchCommandInvoker, this.gridThemeCommandInvoker, this.structureCommandDispatcher, this.summariesCommandInvoker, this.sortingCommandInvoker, this.pagingCommandInvoker).provide();
    }
}
GuiGridComponent.GUI_GRID_ID = 'gui-grid-id';
GuiGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: GuiGridComponent, deps: [{ token: PLATFORM_ID }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.GuiGridRegister }, { token: i2.GuiGridIdGenerator }, { token: i3.StructureIdGenerator }, { token: i4.FormationPublisher }, { token: i5.FormationWarehouse }, { token: i6.CompositionPublisher }, { token: i7.CompositionWarehouse }, { token: i8.FilterIntegration }, { token: i9.SourcePublisher }, { token: i10.SearchPublisher }, { token: i11.SchemaPublisher }, { token: i12.StructurePublisher }, { token: i13.SummariesPublisher }, { token: i14.SortingPublisher }, { token: i15.PagingPublisher }], target: i0.ɵɵFactoryTarget.Component });
GuiGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.3", type: GuiGridComponent, selector: "gui-grid", inputs: { gridId: "gridId" }, providers: [
        {
            provide: StructureDefinition,
            useValue: guiGridStructureDefinition
        },
        {
            provide: structureParentComponent,
            useExisting: GuiGridComponent
        }
    ], viewQueries: [{ propertyName: "structureRef", first: true, predicate: ["structure"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<gui-structure\n\t#structure\n\t(cellEditCanceled)=\"onCellEditCancel()\"\n\t(cellEditEntered)=\"onCellEditEnter()\"\n\t(cellEditSubmitted)=\"onCellEditSubmit()\"\n\t(columnsChanged)=\"onColumnsChange()\"\n\t(containerWidthChanged)=\"onContainerWidthChange($event)\"\n\t(horizontalGridChanged)=\"onHorizontalGrid($event)\"\n\t(itemsSelected)=\"onItemSelect($event)\"\n\t(pageChanged)=\"onPageChange($event)\"\n\t(pageSizeChanged)=\"onPageSizeChange($event)\"\n\t(rowColoringChanged)=\"onRowColoring($event)\"\n\t(searchPhraseChanged)=\"onSearchPhrase($event)\"\n\t(selectedRows)=\"onRowsSelect($event)\"\n\n\t(sourceEdited)=\"onSourceEdit($event)\"\n\t(themeChanged)=\"onTheme($event)\"\n\t(verticalGridChanged)=\"onVerticalGrid($event)\"\n\t[autoResizeWidth]=\"autoResizeWidth\"\n\t[cellEditing]=\"cellEditingConfig\"\n\t[columnHeaderBottom]=\"columnHeaderBottom\"\n\t[columnHeaderTop]=\"columnHeaderTop\"\n\t[columnMenu]=\"columnMenuConfig\"\n\t[columns]=\"columnsConfig\"\n\t[editMode]=\"editMode\"\n\t[filtering]=\"filtering\"\n\t[footerPanel]=\"footerPanel\"\n\t[horizontalGrid]=\"horizontalGrid\"\n\t[infoPanel]=\"infoPanel\"\n\t[loading]=\"loading\"\n\t[localization]=\"localization\"\n\t[maxHeight]=\"maxHeight\"\n\t[paging]=\"paging\"\n\t[quickFilters]=\"quickFilters\"\n\t[rowClass]=\"rowClass\"\n\t[rowColoring]=\"rowColoringConfig\"\n\t[rowDetail]=\"rowDetail\"\n\t[rowHeight]=\"rowHeight\"\n\t[rowSelection]=\"rowSelectionConfig\"\n\t[rowStyle]=\"rowStyle\"\n\t[searching]=\"searching\"\n\t[sorting]=\"sorting\"\n\t[source]=\"source\"\n\t[summaries]=\"summaries\"\n\t[theme]=\"themeConfig\"\n\t[titlePanel]=\"titlePanel\"\n\t[verticalGrid]=\"verticalGrid\"\n\t[virtualScroll]=\"virtualScroll\"\n\t[width]=\"width\"\n>\n</gui-structure>\n", styles: [".gui-grid{display:block;width:100%}\n"], dependencies: [{ kind: "component", type: i16.StructureComponent, selector: "gui-structure" }, { kind: "directive", type: i17.StructureColumnHeaderGate, selector: "gui-structure[columnHeaderTop][columnHeaderBottom], gui-structure[columnHeaderTop], gui-structure[columnHeaderBottom]", inputs: ["columnHeaderTop", "columnHeaderBottom"] }, { kind: "directive", type: i18.StructurePagingGate, selector: "gui-structure[paging]" }, { kind: "directive", type: i19.StructureSearchingGate, selector: "gui-structure[searching]" }, { kind: "directive", type: i20.StructureSelectionGate, selector: "gui-structure[rowSelection], gui-structure[selectionGate]", inputs: ["selectionGate"] }, { kind: "directive", type: i21.StructureL10nGate, selector: "gui-structure[localization]", inputs: ["localization"] }, { kind: "directive", type: i22.StructurePanelGate, selector: "gui-structure[titlePanel][footerPanel]", inputs: ["titlePanel", "footerPanel"] }, { kind: "directive", type: i23.StructureRowDetailGate, selector: "gui-structure[rowDetail]", inputs: ["rowDetail"] }, { kind: "directive", type: i24.StructureColumnMenuGate, selector: "gui-structure[columnMenu]", inputs: ["columnMenu"] }, { kind: "directive", type: i25.StructureSummariesGate, selector: "gui-structure[summaries]", inputs: ["summaries"] }, { kind: "directive", type: i26.StructureInfoPanelGate, selector: "gui-structure[infoPanel]", inputs: ["infoPanel"] }, { kind: "directive", type: i27.StructureRowClassGate, selector: "gui-structure[rowClass]", inputs: ["rowClass"] }, { kind: "directive", type: i28.StructureRowStyleGate, selector: "gui-structure[rowStyle]", inputs: ["rowStyle"] }, { kind: "directive", type: i29.StructureRowColoringGate, selector: "gui-structure[rowColoring]", inputs: ["rowColoring"], outputs: ["rowColoringChanged"] }, { kind: "directive", type: i30.ThemeGridGate, selector: "gui-structure[verticalGrid][horizontalGrid]", inputs: ["verticalGrid", "horizontalGrid"], outputs: ["horizontalGridChanged", "verticalGridChanged"] }, { kind: "directive", type: i31.StructureSortingGate, selector: "gui-structure[sorting]", inputs: ["sorting"] }, { kind: "directive", type: i32.SourceLoadingGate, selector: "gui-structure[loading]", inputs: ["loading"] }, { kind: "directive", type: i33.StructureFilterGate, selector: "gui-structure[filtering]", inputs: ["filtering"] }, { kind: "directive", type: i34.StructureQuickFiltersGate, selector: "gui-structure[quickFilters]", inputs: ["quickFilters"] }, { kind: "directive", type: i35.VerticalFormationGate, selector: "gui-structure[virtualScroll]", inputs: ["virtualScroll"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: GuiGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gui-grid', providers: [
                        {
                            provide: StructureDefinition,
                            useValue: guiGridStructureDefinition
                        },
                        {
                            provide: structureParentComponent,
                            useExisting: GuiGridComponent
                        }
                    ], encapsulation: ViewEncapsulation.None, template: "<gui-structure\n\t#structure\n\t(cellEditCanceled)=\"onCellEditCancel()\"\n\t(cellEditEntered)=\"onCellEditEnter()\"\n\t(cellEditSubmitted)=\"onCellEditSubmit()\"\n\t(columnsChanged)=\"onColumnsChange()\"\n\t(containerWidthChanged)=\"onContainerWidthChange($event)\"\n\t(horizontalGridChanged)=\"onHorizontalGrid($event)\"\n\t(itemsSelected)=\"onItemSelect($event)\"\n\t(pageChanged)=\"onPageChange($event)\"\n\t(pageSizeChanged)=\"onPageSizeChange($event)\"\n\t(rowColoringChanged)=\"onRowColoring($event)\"\n\t(searchPhraseChanged)=\"onSearchPhrase($event)\"\n\t(selectedRows)=\"onRowsSelect($event)\"\n\n\t(sourceEdited)=\"onSourceEdit($event)\"\n\t(themeChanged)=\"onTheme($event)\"\n\t(verticalGridChanged)=\"onVerticalGrid($event)\"\n\t[autoResizeWidth]=\"autoResizeWidth\"\n\t[cellEditing]=\"cellEditingConfig\"\n\t[columnHeaderBottom]=\"columnHeaderBottom\"\n\t[columnHeaderTop]=\"columnHeaderTop\"\n\t[columnMenu]=\"columnMenuConfig\"\n\t[columns]=\"columnsConfig\"\n\t[editMode]=\"editMode\"\n\t[filtering]=\"filtering\"\n\t[footerPanel]=\"footerPanel\"\n\t[horizontalGrid]=\"horizontalGrid\"\n\t[infoPanel]=\"infoPanel\"\n\t[loading]=\"loading\"\n\t[localization]=\"localization\"\n\t[maxHeight]=\"maxHeight\"\n\t[paging]=\"paging\"\n\t[quickFilters]=\"quickFilters\"\n\t[rowClass]=\"rowClass\"\n\t[rowColoring]=\"rowColoringConfig\"\n\t[rowDetail]=\"rowDetail\"\n\t[rowHeight]=\"rowHeight\"\n\t[rowSelection]=\"rowSelectionConfig\"\n\t[rowStyle]=\"rowStyle\"\n\t[searching]=\"searching\"\n\t[sorting]=\"sorting\"\n\t[source]=\"source\"\n\t[summaries]=\"summaries\"\n\t[theme]=\"themeConfig\"\n\t[titlePanel]=\"titlePanel\"\n\t[verticalGrid]=\"verticalGrid\"\n\t[virtualScroll]=\"virtualScroll\"\n\t[width]=\"width\"\n>\n</gui-structure>\n", styles: [".gui-grid{display:block;width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.GuiGridRegister }, { type: i2.GuiGridIdGenerator }, { type: i3.StructureIdGenerator }, { type: i4.FormationPublisher }, { type: i5.FormationWarehouse }, { type: i6.CompositionPublisher }, { type: i7.CompositionWarehouse }, { type: i8.FilterIntegration }, { type: i9.SourcePublisher }, { type: i10.SearchPublisher }, { type: i11.SchemaPublisher }, { type: i12.StructurePublisher }, { type: i13.SummariesPublisher }, { type: i14.SortingPublisher }, { type: i15.PagingPublisher }]; }, propDecorators: { structureRef: [{
                type: ViewChild,
                args: ['structure', { static: true }]
            }], gridId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,