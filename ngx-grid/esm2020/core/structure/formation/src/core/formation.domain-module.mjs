import { SetEnabledSelectionCommandHandler } from './set-enabled/set-enabled-selection.command-handler';
import { ToggleSelectedRowCommandHandler } from './toggle/toggle-selected-row.command-handler';
import { FormationManagerFactory } from '../domain/formation.manager-factory';
import { SelectedRowChangedEventHandler } from '../core-read/row-selected/selected-row-changed.event-handler';
import { SetSelectionModeCommandHandler } from './mode/set-selection-mode.command-handler';
import { SelectAllRowsCommandHandler } from './select-all/select-all-rows.command-handler';
import { UnselectAllRowsCommandHandler } from './unselect-all/unselect-all-rows.command-handler';
import { structureKey } from '../../../structure-core/src/api/global/structre.key';
import { SetSelectionTypeCommandHandler } from './type/set-selection-type.command-handler';
import { FormationTypeRepository } from '../core-read/type/formation.type.repository';
import { FormationModeRepository } from '../core-read/mode/formation.mode.repository';
import { FormationEnabledRepository } from '../core-read/enabled/formation.enabled.repository';
import { SetSelectedRowCommandHandler } from './set-selected/set-selected-row.command-handler';
import { SelectRowByIndexCommandHandler } from './select-by-index/select-row-by-index.command-handler';
import { SelectRowByIdCommandHandler } from './select-by-id/select-row-by-id.command-handler';
import { FormationSetMatcherCommandHandler } from './set-matcher/formation.set-matcher.command-handler';
import { FormationCustomRepository } from '../core-read/custom/formation.custom.repository';
export class FormationDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(FormationManagerFactory);
    }
    registerCommandHandlers() {
        return [
            SetEnabledSelectionCommandHandler,
            SetSelectionModeCommandHandler,
            SetSelectionTypeCommandHandler,
            SelectAllRowsCommandHandler,
            UnselectAllRowsCommandHandler,
            ToggleSelectedRowCommandHandler,
            SetSelectedRowCommandHandler,
            SelectRowByIndexCommandHandler,
            SelectRowByIdCommandHandler,
            FormationSetMatcherCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            SelectedRowChangedEventHandler,
            FormationTypeRepository,
            FormationModeRepository,
            FormationEnabledRepository,
            FormationCustomRepository
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0aW9uLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2Zvcm1hdGlvbi9zcmMvY29yZS9mb3JtYXRpb24uZG9tYWluLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUMvRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUM5RyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMzRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUMzRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDbkYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0YsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDL0YsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDL0YsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDdkcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDOUYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDeEcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFHNUYsTUFBTSxPQUFPLHFCQUFxQjtJQUVqQyxlQUFlO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsV0FBVztRQUNWLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxTQUFvQjtRQUNyQyxTQUFTLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELHVCQUF1QjtRQUN0QixPQUFPO1lBQ04saUNBQWlDO1lBQ2pDLDhCQUE4QjtZQUM5Qiw4QkFBOEI7WUFDOUIsMkJBQTJCO1lBQzNCLDZCQUE2QjtZQUM3QiwrQkFBK0I7WUFDL0IsNEJBQTRCO1lBQzVCLDhCQUE4QjtZQUM5QiwyQkFBMkI7WUFDM0IsaUNBQWlDO1NBQ2pDLENBQUM7SUFDSCxDQUFDO0lBRUQsMEJBQTBCO1FBQ3pCLE9BQU87WUFDTiw4QkFBOEI7WUFDOUIsdUJBQXVCO1lBQ3ZCLHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIseUJBQXlCO1NBQ3pCLENBQUM7SUFDSCxDQUFDO0lBRUQsK0JBQStCO1FBQzlCLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlRGVmaW5pdGlvbiwgQWdncmVnYXRlSWQsIEFnZ3JlZ2F0ZVJvb3QsIENvbW1hbmQsIENvbnRhaW5lciwgRG9tYWluRXZlbnQsIERvbWFpblByb3ZpZGVycyB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cblxuaW1wb3J0IHsgU2V0RW5hYmxlZFNlbGVjdGlvbkNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9zZXQtZW5hYmxlZC9zZXQtZW5hYmxlZC1zZWxlY3Rpb24uY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFRvZ2dsZVNlbGVjdGVkUm93Q29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3RvZ2dsZS90b2dnbGUtc2VsZWN0ZWQtcm93LmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBGb3JtYXRpb25NYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4uL2RvbWFpbi9mb3JtYXRpb24ubWFuYWdlci1mYWN0b3J5JztcbmltcG9ydCB7IFNlbGVjdGVkUm93Q2hhbmdlZEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2NvcmUtcmVhZC9yb3ctc2VsZWN0ZWQvc2VsZWN0ZWQtcm93LWNoYW5nZWQuZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZXRTZWxlY3Rpb25Nb2RlQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL21vZGUvc2V0LXNlbGVjdGlvbi1tb2RlLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZWxlY3RBbGxSb3dzQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3NlbGVjdC1hbGwvc2VsZWN0LWFsbC1yb3dzLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBVbnNlbGVjdEFsbFJvd3NDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5zZWxlY3QtYWxsL3Vuc2VsZWN0LWFsbC1yb3dzLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBzdHJ1Y3R1cmVLZXkgfSBmcm9tICcuLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL2dsb2JhbC9zdHJ1Y3RyZS5rZXknO1xuaW1wb3J0IHsgU2V0U2VsZWN0aW9uVHlwZUNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi90eXBlL3NldC1zZWxlY3Rpb24tdHlwZS5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgRm9ybWF0aW9uVHlwZVJlcG9zaXRvcnkgfSBmcm9tICcuLi9jb3JlLXJlYWQvdHlwZS9mb3JtYXRpb24udHlwZS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IEZvcm1hdGlvbk1vZGVSZXBvc2l0b3J5IH0gZnJvbSAnLi4vY29yZS1yZWFkL21vZGUvZm9ybWF0aW9uLm1vZGUucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBGb3JtYXRpb25FbmFibGVkUmVwb3NpdG9yeSB9IGZyb20gJy4uL2NvcmUtcmVhZC9lbmFibGVkL2Zvcm1hdGlvbi5lbmFibGVkLnJlcG9zaXRvcnknO1xuaW1wb3J0IHsgU2V0U2VsZWN0ZWRSb3dDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vc2V0LXNlbGVjdGVkL3NldC1zZWxlY3RlZC1yb3cuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdFJvd0J5SW5kZXhDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vc2VsZWN0LWJ5LWluZGV4L3NlbGVjdC1yb3ctYnktaW5kZXguY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdFJvd0J5SWRDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vc2VsZWN0LWJ5LWlkL3NlbGVjdC1yb3ctYnktaWQuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IEZvcm1hdGlvblNldE1hdGNoZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vc2V0LW1hdGNoZXIvZm9ybWF0aW9uLnNldC1tYXRjaGVyLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBGb3JtYXRpb25DdXN0b21SZXBvc2l0b3J5IH0gZnJvbSAnLi4vY29yZS1yZWFkL2N1c3RvbS9mb3JtYXRpb24uY3VzdG9tLnJlcG9zaXRvcnknO1xuXG5cbmV4cG9ydCBjbGFzcyBGb3JtYXRpb25Eb21haW5Nb2R1bGUgaW1wbGVtZW50cyBEb21haW5Qcm92aWRlcnMge1xuXG5cdGRlZmluZUFnZ3JlZ2F0ZSgpOiBBZ2dyZWdhdGVEZWZpbml0aW9uPGFueSwgYW55LCBhbnk+IHwgbnVsbCB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZWdpc3RlcktleSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBzdHJ1Y3R1cmVLZXk7XG5cdH1cblxuXHRyZWdpc3RlclByb3ZpZGVycyhjb250YWluZXI6IENvbnRhaW5lcik6IHZvaWQge1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEZvcm1hdGlvbk1hbmFnZXJGYWN0b3J5KTtcblx0fVxuXG5cdHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0U2V0RW5hYmxlZFNlbGVjdGlvbkNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0U2VsZWN0aW9uTW9kZUNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0U2VsZWN0aW9uVHlwZUNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2VsZWN0QWxsUm93c0NvbW1hbmRIYW5kbGVyLFxuXHRcdFx0VW5zZWxlY3RBbGxSb3dzQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRUb2dnbGVTZWxlY3RlZFJvd0NvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0U2VsZWN0ZWRSb3dDb21tYW5kSGFuZGxlcixcblx0XHRcdFNlbGVjdFJvd0J5SW5kZXhDb21tYW5kSGFuZGxlcixcblx0XHRcdFNlbGVjdFJvd0J5SWRDb21tYW5kSGFuZGxlcixcblx0XHRcdEZvcm1hdGlvblNldE1hdGNoZXJDb21tYW5kSGFuZGxlclxuXHRcdF07XG5cdH1cblxuXHRyZWdpc3RlckRvbWFpbkV2ZW50SGFuZGxlcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4oKTogQXJyYXk8YW55PiB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdFNlbGVjdGVkUm93Q2hhbmdlZEV2ZW50SGFuZGxlcixcblx0XHRcdEZvcm1hdGlvblR5cGVSZXBvc2l0b3J5LFxuXHRcdFx0Rm9ybWF0aW9uTW9kZVJlcG9zaXRvcnksXG5cdFx0XHRGb3JtYXRpb25FbmFibGVkUmVwb3NpdG9yeSxcblx0XHRcdEZvcm1hdGlvbkN1c3RvbVJlcG9zaXRvcnlcblx0XHRdO1xuXHR9XG5cblx0cmVnaXN0ZXJNdWx0aURvbWFpbkV2ZW50SGFuZGxlcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4oKTogQXJyYXk8YW55PiB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cbn1cbiJdfQ==