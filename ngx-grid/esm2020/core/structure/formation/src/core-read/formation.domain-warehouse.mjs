import { hermesMap, hermesOf, Optional } from '@generic-ui/hermes';
import { SourceWarehouse } from '../../../source/src/api/source.warehouse';
import { FormationWarehouse } from '../api/formation.warehouse';
import { RowSelectedArchive } from './row-selected/row-selected.archive';
import { SelectedRow } from '../api/row-selected/selected-row';
import { FormationTypeRepository } from './type/formation.type.repository';
import { FormationModeRepository } from './mode/formation.mode.repository';
import { FormationEnabledRepository } from './enabled/formation.enabled.repository';
import { FormationCustomSelection } from '../api/custom/formation.custom-selection';
import { FormationCustomRepository } from './custom/formation.custom.repository';
export class FormationDomainWarehouse extends FormationWarehouse {
    constructor(rowSelectedRepository, formationModeRepository, formationTypeRepository, formationEnabledRepository, formationCustomRepository, sourceWarehouse) {
        super();
        this.rowSelectedRepository = rowSelectedRepository;
        this.formationModeRepository = formationModeRepository;
        this.formationTypeRepository = formationTypeRepository;
        this.formationEnabledRepository = formationEnabledRepository;
        this.formationCustomRepository = formationCustomRepository;
        this.sourceWarehouse = sourceWarehouse;
    }
    findSelectedRows(structureId) {
        const items = this.sourceWarehouse.findPreparedItems(structureId), selectedItemIds = this.findSelectedItemIds(structureId).getValueOrNullOrThrowError();
        const selectedItems = [], length = items.length;
        for (let i = 0; i < length; i += 1) {
            const item = items[i];
            if (selectedItemIds.some((itemId) => itemId === item.getId().toString())) {
                selectedItems.push(new SelectedRow(item.getSourceItem(), i, item.getId()));
            }
        }
        return Optional.of(selectedItems);
    }
    onRowSelectedReadModel(structureId) {
        return this.rowSelectedRepository
            .on(structureId);
    }
    findSelectedItemIds(structureId) {
        return this.rowSelectedRepository
            .find(structureId)
            .map((r) => {
            return r.getAll();
        });
    }
    onSelectedRows(structureId) {
        return this.rowSelectedRepository
            .on(structureId)
            .pipe(hermesMap((rm) => {
            return rm.getAll();
        }));
    }
    onMode(structureId) {
        return this.formationModeRepository.on(structureId);
    }
    onType(structureId) {
        return this.formationTypeRepository.on(structureId);
    }
    onSelectionEnabled(structureId) {
        return this.formationEnabledRepository.on(structureId);
    }
    onCustomSelections(structureId) {
        return hermesOf(new FormationCustomSelection(true, [{
                key: 'asdf',
                text: 'Select all',
                functionId: 'sadf'
            }]));
        // return this.formationCustomRepository.on(structureId);
    }
}
FormationDomainWarehouse.services = [
    RowSelectedArchive,
    FormationModeRepository,
    FormationTypeRepository,
    FormationEnabledRepository,
    FormationCustomRepository,
    SourceWarehouse
];
//# sourceMappingURL=data:application/json;base64,