import { SetEnabledSelectionCommandHandler } from './set-enabled/set-enabled-selection.command-handler';
import { ToggleSelectedRowCommandHandler } from './toggle/toggle-selected-row.command-handler';
import { FormationDispatcher } from './formation.dispatcher';
import { FormationManagerFactory } from './core/formation.manager-factory';
import { SelectedRowChangedEventHandler } from '../api/row-selected/selected-row-changed.event-handler';
import { SetSelectionModeCommandHandler } from './mode/set-selection-mode.command-handler';
import { SelectAllRowsCommandHandler } from './select-all/select-all-rows.command-handler';
import { UnselectAllRowsCommandHandler } from './unselect-all/unselect-all-rows.command-handler';
import { SelectionModeSetEventHandler } from '../api/mode/selection-mode-set.event-handler';
import { structureKey } from '../../core/api/global/structre.key';
export class FormationDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(FormationDispatcher);
        container.provide(FormationManagerFactory);
    }
    registerCommandHandlers() {
        return [
            SetEnabledSelectionCommandHandler,
            SetSelectionModeCommandHandler,
            SelectAllRowsCommandHandler,
            UnselectAllRowsCommandHandler,
            ToggleSelectedRowCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            SelectedRowChangedEventHandler,
            SelectionModeSetEventHandler
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0aW9uLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2Zvcm1hdGlvbi9kb21haW4vZm9ybWF0aW9uLmRvbWFpbi1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDeEcsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDL0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDM0UsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDeEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDakcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDNUYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBR2xFLE1BQU0sT0FBTyxxQkFBcUI7SUFFakMsZUFBZTtRQUNkLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFdBQVc7UUFDVixPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0lBRUQsaUJBQWlCLENBQUMsU0FBb0I7UUFDckMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsdUJBQXVCO1FBQ3RCLE9BQU87WUFDTixpQ0FBaUM7WUFDakMsOEJBQThCO1lBQzlCLDJCQUEyQjtZQUMzQiw2QkFBNkI7WUFDN0IsK0JBQStCO1NBQy9CLENBQUM7SUFDSCxDQUFDO0lBRUQsMEJBQTBCO1FBQ3pCLE9BQU87WUFDTiw4QkFBOEI7WUFDOUIsNEJBQTRCO1NBQzVCLENBQUM7SUFDSCxDQUFDO0lBRUQsK0JBQStCO1FBQzlCLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlRGVmaW5pdGlvbiwgQWdncmVnYXRlSWQsIEFnZ3JlZ2F0ZVJvb3QsIENvbW1hbmQsIENvbnRhaW5lciwgRG9tYWluRXZlbnQsIERvbWFpblByb3ZpZGVycyB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cblxuaW1wb3J0IHsgU2V0RW5hYmxlZFNlbGVjdGlvbkNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9zZXQtZW5hYmxlZC9zZXQtZW5hYmxlZC1zZWxlY3Rpb24uY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFRvZ2dsZVNlbGVjdGVkUm93Q29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3RvZ2dsZS90b2dnbGUtc2VsZWN0ZWQtcm93LmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBGb3JtYXRpb25EaXNwYXRjaGVyIH0gZnJvbSAnLi9mb3JtYXRpb24uZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBGb3JtYXRpb25NYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4vY29yZS9mb3JtYXRpb24ubWFuYWdlci1mYWN0b3J5JztcbmltcG9ydCB7IFNlbGVjdGVkUm93Q2hhbmdlZEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2FwaS9yb3ctc2VsZWN0ZWQvc2VsZWN0ZWQtcm93LWNoYW5nZWQuZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZXRTZWxlY3Rpb25Nb2RlQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL21vZGUvc2V0LXNlbGVjdGlvbi1tb2RlLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZWxlY3RBbGxSb3dzQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3NlbGVjdC1hbGwvc2VsZWN0LWFsbC1yb3dzLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBVbnNlbGVjdEFsbFJvd3NDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5zZWxlY3QtYWxsL3Vuc2VsZWN0LWFsbC1yb3dzLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlU2V0RXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vYXBpL21vZGUvc2VsZWN0aW9uLW1vZGUtc2V0LmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgc3RydWN0dXJlS2V5IH0gZnJvbSAnLi4vLi4vY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHJlLmtleSc7XG5cblxuZXhwb3J0IGNsYXNzIEZvcm1hdGlvbkRvbWFpbk1vZHVsZSBpbXBsZW1lbnRzIERvbWFpblByb3ZpZGVycyB7XG5cblx0ZGVmaW5lQWdncmVnYXRlKCk6IEFnZ3JlZ2F0ZURlZmluaXRpb248YW55LCBhbnksIGFueT4gfCBudWxsIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJlZ2lzdGVyS2V5KCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHN0cnVjdHVyZUtleTtcblx0fVxuXG5cdHJlZ2lzdGVyUHJvdmlkZXJzKGNvbnRhaW5lcjogQ29udGFpbmVyKTogdm9pZCB7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRm9ybWF0aW9uRGlzcGF0Y2hlcik7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRm9ybWF0aW9uTWFuYWdlckZhY3RvcnkpO1xuXHR9XG5cblx0cmVnaXN0ZXJDb21tYW5kSGFuZGxlcnM8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBBIGV4dGVuZHMgQWdncmVnYXRlUm9vdDxJPiwgQyBleHRlbmRzIENvbW1hbmQ8ST4+KCk6IEFycmF5PGFueT4ge1xuXHRcdHJldHVybiBbXG5cdFx0XHRTZXRFbmFibGVkU2VsZWN0aW9uQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRTZXRTZWxlY3Rpb25Nb2RlQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRTZWxlY3RBbGxSb3dzQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRVbnNlbGVjdEFsbFJvd3NDb21tYW5kSGFuZGxlcixcblx0XHRcdFRvZ2dsZVNlbGVjdGVkUm93Q29tbWFuZEhhbmRsZXJcblx0XHRdO1xuXHR9XG5cblx0cmVnaXN0ZXJEb21haW5FdmVudEhhbmRsZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KCk6IEFycmF5PGFueT4ge1xuXHRcdHJldHVybiBbXG5cdFx0XHRTZWxlY3RlZFJvd0NoYW5nZWRFdmVudEhhbmRsZXIsXG5cdFx0XHRTZWxlY3Rpb25Nb2RlU2V0RXZlbnRIYW5kbGVyXG5cdFx0XTtcblx0fVxuXG5cdHJlZ2lzdGVyTXVsdGlEb21haW5FdmVudEhhbmRsZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KCk6IEFycmF5PGFueT4ge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG59XG4iXX0=