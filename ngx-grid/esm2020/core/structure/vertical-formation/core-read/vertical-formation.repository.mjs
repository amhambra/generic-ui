import { CoreContainer, DomainEventBus, hermesDistinctUntilChanged, hermesFilter, hermesMap, HermesReplaySubject, Reactive } from '@generic-ui/hermes';
import { StructureCreatedEvent } from '../../structure-core/core/create/structure-created.event';
import { VerticalScrollEnabledSetEvent } from '../core/set-enabled/vertical-scroll-enabled-set.event';
import { InMemoryStructureReadStore } from '../../structure-core/persist/api/in-memory-structure.read-store';
import { RowHeightSetEvent } from '../core/set-row-height/row-height-set.event';
import { SchemaThemeSetEvent } from '../../../schema/core/theme/schema-theme-set.event';
import { StructureHeightSetEvent } from '../core/container/set-height/structure-height-set.event';
import { OriginSetEvent } from '../../source/core/origin/set/origin-set.event';
import { ScrollPositionSetEvent } from '../core/scroll-position/scroll-position-set.event';
import { RowHeightSetBasedOnThemeEvent } from '../core/set-row-height-theme/row-height-set-based-on-theme.event';
import { SearchPhraseSetDomainEvent } from '../../search/core/phrase/set-phrase/search-phrase-set.domain-event';
import { PageChangedEvent } from '../../paging/core/page/page-changed.event';
import { PagingSetEvent } from '../../paging/core/set/paging-set.event';
import { UniqueFilterUnselectedEvent } from '../../filter/core/unique/unselect/unique-filter-unselected.event';
import { AllUniqueFilterUnselectedEvent } from '../../filter/core/unique/unselect-all/all-unique-filter-unselected.event';
import { AllUniqueFilterSelectedEvent } from '../../filter/core/unique/select-all/all-unique-filter-selected.event';
import { UniqueFilterSelectedEvent } from '../../filter/core/unique/select/unique-filter-selected.event';
import { ActiveFiltersSetEvent } from '../../filter/core/active-filters-set.event';
export class VerticalFormationRepository extends Reactive {
    constructor(inMemoryStructureReadStore) {
        super();
        this.inMemoryStructureReadStore = inMemoryStructureReadStore;
        this.verticalFormation = new Map();
        this.verticalFormation$ = new HermesReplaySubject(1);
        this.domainEventBus = CoreContainer.resolve(DomainEventBus);
        this.domainEventBus
            .ofEvents([
            StructureCreatedEvent,
            VerticalScrollEnabledSetEvent,
            OriginSetEvent,
            StructureHeightSetEvent,
            RowHeightSetEvent,
            SchemaThemeSetEvent,
            RowHeightSetBasedOnThemeEvent,
            ScrollPositionSetEvent,
            SearchPhraseSetDomainEvent,
            UniqueFilterUnselectedEvent,
            AllUniqueFilterUnselectedEvent,
            AllUniqueFilterSelectedEvent,
            UniqueFilterSelectedEvent,
            PageChangedEvent,
            PagingSetEvent,
            ActiveFiltersSetEvent
        ])
            .pipe(this.hermesTakeUntil())
            .subscribe((event) => {
            const aggregateId = event.getAggregateId();
            const optStructure = this.inMemoryStructureReadStore.getById(aggregateId);
            optStructure.ifPresent((structureReadModelRoot) => {
                const verticalFormation = structureReadModelRoot.getVerticalFormation();
                this.next(aggregateId, verticalFormation);
            });
        });
    }
    onVerticalScrollEnabled(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.isEnabled()), hermesDistinctUntilChanged());
    }
    onRowHeight(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getRowHeight()), hermesDistinctUntilChanged());
    }
    onContainerHeight(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getViewPortHeight()), hermesDistinctUntilChanged());
    }
    onTopMargin(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getTopMargin()), hermesDistinctUntilChanged());
    }
    onVerticalFormation(structureId) {
        return this.verticalFormation$
            .toObservable()
            .pipe(hermesFilter((idToVerticalFormation) => {
            const key = structureId.getId();
            return idToVerticalFormation.has(key);
        }), hermesMap((idToVerticalFormation) => idToVerticalFormation.get(structureId.getId())));
    }
    next(structureId, verticalFormation) {
        this.verticalFormation.set(structureId.toString(), verticalFormation);
        this.verticalFormation$.next(this.verticalFormation);
    }
}
VerticalFormationRepository.services = [InMemoryStructureReadStore];
//# sourceMappingURL=data:application/json;base64,