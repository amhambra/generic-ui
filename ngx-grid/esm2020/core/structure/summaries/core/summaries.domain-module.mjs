import { structureKey } from '../../structure-core/api/global/structre.key';
import { StructureSetSummariesEnabledCommandHandler } from './set/structure.set-summaries-enabled.command-handler';
import { StructureSummariesEnabledSetEventHandler } from '../core-read/enabled/structure.summaries-enabled-set.event-handler';
import { BooleanSummariesCalculator } from '../domain/calculation/boolean/boolean-summaries.calculator';
import { DateSummariesCalculator } from '../domain/calculation/date/date-summaries.calculator';
import { NumberSummariesCalculator } from '../domain/calculation/number/number-summaries.calculator';
import { StringSummariesCalculator } from '../domain/calculation/string/string-summaries.calculator';
import { UnknownSummariesCalculator } from '../domain/calculation/unknown/unknown-summaries.calculator';
import { SummariesManagerFactory } from '../domain/summaries.manager.factory';
import { SummariesDispatcher } from './summaries.dispatcher';
import { SUMMARIES_CALCULATORS } from '../domain/calculation/summaries.calculators.token';
import { StructureSummariesConfigArchive } from '../core-read/config/structure.summaries-config.archive';
import { StructureSummariesPanelConfigConverter } from '../core-read/config/structure.summaries-panel.config-converter';
export class SummariesDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(SummariesManagerFactory);
        container.provide(SummariesDispatcher);
        container.provide(StructureSummariesConfigArchive);
        container.provide(StructureSummariesPanelConfigConverter);
        container.provideCollection(SUMMARIES_CALCULATORS, BooleanSummariesCalculator);
        container.provideCollection(SUMMARIES_CALCULATORS, DateSummariesCalculator);
        container.provideCollection(SUMMARIES_CALCULATORS, NumberSummariesCalculator);
        container.provideCollection(SUMMARIES_CALCULATORS, StringSummariesCalculator);
        container.provideCollection(SUMMARIES_CALCULATORS, UnknownSummariesCalculator);
    }
    registerCommandHandlers() {
        return [
            StructureSetSummariesEnabledCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            StructureSummariesEnabledSetEventHandler
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyaWVzLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL3N1bW1hcmllcy9jb3JlL3N1bW1hcmllcy5kb21haW4tbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsMENBQTBDLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNuSCxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUM5SCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMvRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNyRyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN6RyxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUd4SCxNQUFNLE9BQU8scUJBQXFCO0lBRWpDLGVBQWU7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxXQUFXO1FBQ1YsT0FBTyxZQUFZLENBQUM7SUFDckIsQ0FBQztJQUVELGlCQUFpQixDQUFDLFNBQW9CO1FBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMzQyxTQUFTLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDdkMsU0FBUyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELFNBQVMsQ0FBQyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUMxRCxTQUFTLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUMvRSxTQUFTLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUM1RSxTQUFTLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUM5RSxTQUFTLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUM5RSxTQUFTLENBQUMsaUJBQWlCLENBQUMscUJBQXFCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRUQsdUJBQXVCO1FBQ3RCLE9BQU87WUFDTiwwQ0FBMEM7U0FDMUMsQ0FBQztJQUNILENBQUM7SUFFRCwwQkFBMEI7UUFDekIsT0FBTztZQUNOLHdDQUF3QztTQUN4QyxDQUFDO0lBQ0gsQ0FBQztJQUVELCtCQUErQjtRQUM5QixPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFnZ3JlZ2F0ZURlZmluaXRpb24sIEFnZ3JlZ2F0ZUlkLCBBZ2dyZWdhdGVSb290LCBDb21tYW5kLCBDb250YWluZXIsIERvbWFpbkV2ZW50LCBEb21haW5Qcm92aWRlcnMgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuXG5pbXBvcnQgeyBzdHJ1Y3R1cmVLZXkgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmUtY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHJlLmtleSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVTZXRTdW1tYXJpZXNFbmFibGVkQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3NldC9zdHJ1Y3R1cmUuc2V0LXN1bW1hcmllcy1lbmFibGVkLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVTdW1tYXJpZXNFbmFibGVkU2V0RXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vY29yZS1yZWFkL2VuYWJsZWQvc3RydWN0dXJlLnN1bW1hcmllcy1lbmFibGVkLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEJvb2xlYW5TdW1tYXJpZXNDYWxjdWxhdG9yIH0gZnJvbSAnLi4vZG9tYWluL2NhbGN1bGF0aW9uL2Jvb2xlYW4vYm9vbGVhbi1zdW1tYXJpZXMuY2FsY3VsYXRvcic7XG5pbXBvcnQgeyBEYXRlU3VtbWFyaWVzQ2FsY3VsYXRvciB9IGZyb20gJy4uL2RvbWFpbi9jYWxjdWxhdGlvbi9kYXRlL2RhdGUtc3VtbWFyaWVzLmNhbGN1bGF0b3InO1xuaW1wb3J0IHsgTnVtYmVyU3VtbWFyaWVzQ2FsY3VsYXRvciB9IGZyb20gJy4uL2RvbWFpbi9jYWxjdWxhdGlvbi9udW1iZXIvbnVtYmVyLXN1bW1hcmllcy5jYWxjdWxhdG9yJztcbmltcG9ydCB7IFN0cmluZ1N1bW1hcmllc0NhbGN1bGF0b3IgfSBmcm9tICcuLi9kb21haW4vY2FsY3VsYXRpb24vc3RyaW5nL3N0cmluZy1zdW1tYXJpZXMuY2FsY3VsYXRvcic7XG5pbXBvcnQgeyBVbmtub3duU3VtbWFyaWVzQ2FsY3VsYXRvciB9IGZyb20gJy4uL2RvbWFpbi9jYWxjdWxhdGlvbi91bmtub3duL3Vua25vd24tc3VtbWFyaWVzLmNhbGN1bGF0b3InO1xuaW1wb3J0IHsgU3VtbWFyaWVzTWFuYWdlckZhY3RvcnkgfSBmcm9tICcuLi9kb21haW4vc3VtbWFyaWVzLm1hbmFnZXIuZmFjdG9yeSc7XG5pbXBvcnQgeyBTdW1tYXJpZXNEaXNwYXRjaGVyIH0gZnJvbSAnLi9zdW1tYXJpZXMuZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBTVU1NQVJJRVNfQ0FMQ1VMQVRPUlMgfSBmcm9tICcuLi9kb21haW4vY2FsY3VsYXRpb24vc3VtbWFyaWVzLmNhbGN1bGF0b3JzLnRva2VuJztcbmltcG9ydCB7IFN0cnVjdHVyZVN1bW1hcmllc0NvbmZpZ0FyY2hpdmUgfSBmcm9tICcuLi9jb3JlLXJlYWQvY29uZmlnL3N0cnVjdHVyZS5zdW1tYXJpZXMtY29uZmlnLmFyY2hpdmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlU3VtbWFyaWVzUGFuZWxDb25maWdDb252ZXJ0ZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvY29uZmlnL3N0cnVjdHVyZS5zdW1tYXJpZXMtcGFuZWwuY29uZmlnLWNvbnZlcnRlcic7XG5cblxuZXhwb3J0IGNsYXNzIFN1bW1hcmllc0RvbWFpbk1vZHVsZSBpbXBsZW1lbnRzIERvbWFpblByb3ZpZGVycyB7XG5cblx0ZGVmaW5lQWdncmVnYXRlKCk6IEFnZ3JlZ2F0ZURlZmluaXRpb248YW55LCBhbnksIGFueT4gfCBudWxsIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJlZ2lzdGVyS2V5KCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHN0cnVjdHVyZUtleTtcblx0fVxuXG5cdHJlZ2lzdGVyUHJvdmlkZXJzKGNvbnRhaW5lcjogQ29udGFpbmVyKTogdm9pZCB7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU3VtbWFyaWVzTWFuYWdlckZhY3RvcnkpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN1bW1hcmllc0Rpc3BhdGNoZXIpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZVN1bW1hcmllc0NvbmZpZ0FyY2hpdmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZVN1bW1hcmllc1BhbmVsQ29uZmlnQ29udmVydGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZUNvbGxlY3Rpb24oU1VNTUFSSUVTX0NBTENVTEFUT1JTLCBCb29sZWFuU3VtbWFyaWVzQ2FsY3VsYXRvcik7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGVDb2xsZWN0aW9uKFNVTU1BUklFU19DQUxDVUxBVE9SUywgRGF0ZVN1bW1hcmllc0NhbGN1bGF0b3IpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlQ29sbGVjdGlvbihTVU1NQVJJRVNfQ0FMQ1VMQVRPUlMsIE51bWJlclN1bW1hcmllc0NhbGN1bGF0b3IpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlQ29sbGVjdGlvbihTVU1NQVJJRVNfQ0FMQ1VMQVRPUlMsIFN0cmluZ1N1bW1hcmllc0NhbGN1bGF0b3IpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlQ29sbGVjdGlvbihTVU1NQVJJRVNfQ0FMQ1VMQVRPUlMsIFVua25vd25TdW1tYXJpZXNDYWxjdWxhdG9yKTtcblx0fVxuXG5cdHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0U3RydWN0dXJlU2V0U3VtbWFyaWVzRW5hYmxlZENvbW1hbmRIYW5kbGVyXG5cdFx0XTtcblx0fVxuXG5cdHJlZ2lzdGVyRG9tYWluRXZlbnRIYW5kbGVyPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0U3RydWN0dXJlU3VtbWFyaWVzRW5hYmxlZFNldEV2ZW50SGFuZGxlclxuXHRcdF07XG5cdH1cblxuXHRyZWdpc3Rlck11bHRpRG9tYWluRXZlbnRIYW5kbGVyPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxufVxuIl19