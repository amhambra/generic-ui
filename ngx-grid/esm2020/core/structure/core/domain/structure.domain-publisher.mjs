import { CommandDispatcher, CoreContainer } from '@generic-ui/hermes';
import { FilterPublisher } from '../../filter/api/filter.publisher';
import { SourceDispatcher } from '../../source/domain/source.dispatcher';
import { CreateStructureCommand } from './create-structure/create-structure.command';
import { SetConfigQuickFilterCommand } from '../../filter/domain/quick/set-config-quick-filter.command';
import { SetRowHeightCommand } from '../../vertical-formation/domain/set-row-height/set-row-height.command';
import { StructureSetHeightCommand } from '../../vertical-formation/domain/container/set-height/structure-set-height.command';
import { SetRowHeightBasedOnThemeCommand } from '../../vertical-formation/domain/set-row-height-theme/set-row-height-based-on-theme.command';
import { StructurePublisher } from '../api/structure.publisher';
import { StructureCellEditArchive } from '../../../../feature-view/grid-view/edit/structure.cell-edit.archive';
import { CellEditorManager } from './edit/cell-editor.manager';
import { VerticalFormationPublisher } from '../../vertical-formation/api/vertical-formation.publisher';
export class StructureDomainPublisher extends StructurePublisher {
    constructor(filterCommandInvoker, sourceDispatcher, verticalFormationCommandInvoker, structureCellEditArchive) {
        super();
        this.filterCommandInvoker = filterCommandInvoker;
        this.sourceDispatcher = sourceDispatcher;
        this.verticalFormationCommandInvoker = verticalFormationCommandInvoker;
        this.structureCellEditArchive = structureCellEditArchive;
        this.commandDispatcher = CoreContainer.resolve(CommandDispatcher);
    }
    create(structureId) {
        this.commandDispatcher.dispatch(new CreateStructureCommand(structureId));
    }
    // REMOVE
    enableVirtualScroll(structureId) {
        this.verticalFormationCommandInvoker.enableVirtualScroll(structureId);
    }
    // REMOVE
    disableVirtualScroll(structureId) {
        this.verticalFormationCommandInvoker.disableVirtualScroll(structureId);
    }
    // REMOVE
    scrollToTop(structureId) {
        this.verticalFormationCommandInvoker.scrollToTop(structureId);
    }
    // REMOVE
    scrollToBottom(structureId) {
        this.verticalFormationCommandInvoker.scrollToBottom(structureId);
    }
    // REMOVE
    scrollToIndex(index, structureId) {
        this.verticalFormationCommandInvoker.scrollToIndex(index, structureId);
    }
    // REMOVE
    setScrollPosition(position, structureId) {
        this.verticalFormationCommandInvoker.setScrollPosition(position, structureId);
    }
    setOrigin(items, structureId) {
        this.sourceDispatcher.setOrigin(structureId, items);
    }
    setFilterConfig(config, structureId) {
        this.filterCommandInvoker.setConfig(config, structureId);
    }
    setQuickFiltersConfig(config, structureId) {
        this.commandDispatcher.dispatch(new SetConfigQuickFilterCommand(structureId, config));
    }
    setRowHeight(rowHeight, structureId) {
        this.commandDispatcher.dispatch(new SetRowHeightCommand(structureId, +rowHeight));
    }
    // REMOVE
    setContainerHeight(height, structureId) {
        this.commandDispatcher.dispatch(new StructureSetHeightCommand(structureId, +height));
    }
    // REMOVE
    setRowHeightBasedOnTheme(theme, structureId) {
        this.commandDispatcher.dispatch(new SetRowHeightBasedOnThemeCommand(structureId, theme));
    }
    setCellEdit(cellEdit, structureId) {
        this.structureCellEditArchive.next(structureId, new CellEditorManager(cellEdit));
    }
}
StructureDomainPublisher.services = [
    FilterPublisher,
    SourceDispatcher,
    VerticalFormationPublisher,
    StructureCellEditArchive
];
//# sourceMappingURL=data:application/json;base64,