import { FilterWarehouse } from '../api/filter.warehouse';
import { FilterEnabledArchive } from './config/filter-enabled.archive';
import { QuickFilterEnabledArchive } from './quick-filter/quick-filter-enabled.archive';
import { FilterTypeArchive } from './type/filter-type.archive';
import { UniqueValueCollectionArchive } from './unique/unique-value-collection.archive';
import { ActiveFilterArchive } from './active/active-filter.archive';
import { hermesMap, Optional, singleFromObservable } from '@generic-ui/hermes';
import { FilterDiContainer } from '../api/di/filter.di-container';
export class FilterDomainWarehouse extends FilterWarehouse {
    constructor(filterEnabledArchive, structureQuickFilterRepository, uniqueValuesArchive) {
        super();
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.uniqueValuesArchive = uniqueValuesArchive;
        this.activeFilterArchive = FilterDiContainer.resolve(ActiveFilterArchive);
        this.filterTypeArchive = FilterDiContainer.resolve(FilterTypeArchive);
    }
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    onFilterTypesForFieldId(fieldId, structureId) {
        return this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            return map.getFilterTypes(fieldId);
        }));
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    findFilters(structureId) {
        return this.activeFilterArchive.find(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
    onceFilterTypeId(fieldId, filterTypeName, structureId) {
        return singleFromObservable(this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            const filterTypes = map.getFilterTypes(fieldId);
            const filterType = filterTypes.find((fieldType) => fieldType.getName() === filterTypeName);
            if (filterType === undefined) {
                return Optional.empty();
            }
            else {
                return Optional.of(filterType.getId());
            }
        })));
    }
}
FilterDomainWarehouse.services = [FilterEnabledArchive, QuickFilterEnabledArchive, UniqueValueCollectionArchive];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi13YXJlaG91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9jb3JlLXJlYWQvZmlsdGVyLmRvbWFpbi13YXJlaG91c2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzFELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxTQUFTLEVBQWtDLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTy9HLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR2xFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxlQUFlO0lBTXpELFlBQTZCLG9CQUEwQyxFQUNuRCw4QkFBeUQsRUFDekQsbUJBQWlEO1FBQ3BFLEtBQUssRUFBRSxDQUFDO1FBSG9CLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDbkQsbUNBQThCLEdBQTlCLDhCQUE4QixDQUEyQjtRQUN6RCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQThCO1FBTnBELHdCQUFtQixHQUF3QixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUUxRixzQkFBaUIsR0FBc0IsaUJBQWlCLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFNckcsQ0FBQztJQUlELGtCQUFrQixDQUFDLFdBQXdCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQscUJBQXFCLENBQUMsV0FBd0I7UUFDN0MsT0FBTyxJQUFJLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxhQUFhLENBQUMsV0FBd0I7UUFDckMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxPQUFnQixFQUFFLFdBQXdCO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDaEMsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLEdBQThCLEVBQUUsRUFBRTtZQUM1QyxPQUFPLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQ0YsQ0FBQztJQUNSLENBQUM7SUFFRCxlQUFlLENBQUMsV0FBd0I7UUFDdkMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxXQUFXLENBQUMsV0FBd0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBd0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxPQUFnQixFQUFFLGNBQXNCLEVBQUUsV0FBd0I7UUFDbEYsT0FBTyxvQkFBb0IsQ0FDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDN0IsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLEdBQThCLEVBQUUsRUFBRTtZQUM1QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWhELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUUzRixJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLE9BQU8sUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNOLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUN2QztRQUNGLENBQUMsQ0FBQyxDQUNGLENBQ0YsQ0FBQztJQUVILENBQUM7O0FBckRlLDhCQUFRLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSx5QkFBeUIsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyV2FyZWhvdXNlIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci53YXJlaG91c2UnO1xuaW1wb3J0IHsgRmlsdGVyRW5hYmxlZEFyY2hpdmUgfSBmcm9tICcuL2NvbmZpZy9maWx0ZXItZW5hYmxlZC5hcmNoaXZlJztcbmltcG9ydCB7IFF1aWNrRmlsdGVyRW5hYmxlZEFyY2hpdmUgfSBmcm9tICcuL3F1aWNrLWZpbHRlci9xdWljay1maWx0ZXItZW5hYmxlZC5hcmNoaXZlJztcbmltcG9ydCB7IEZpbHRlclR5cGVBcmNoaXZlIH0gZnJvbSAnLi90eXBlL2ZpbHRlci10eXBlLmFyY2hpdmUnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVDb2xsZWN0aW9uQXJjaGl2ZSB9IGZyb20gJy4vdW5pcXVlL3VuaXF1ZS12YWx1ZS1jb2xsZWN0aW9uLmFyY2hpdmUnO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyQXJjaGl2ZSB9IGZyb20gJy4vYWN0aXZlL2FjdGl2ZS1maWx0ZXIuYXJjaGl2ZSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uL3N0cnVjdHVyZS1jb3JlL2FwaS9nbG9iYWwvc3RydWN0dXJlLmlkJztcbmltcG9ydCB7IGhlcm1lc01hcCwgSGVybWVzT2JzZXJ2YWJsZSwgSGVybWVzU2luZ2xlLCBPcHRpb25hbCwgc2luZ2xlRnJvbU9ic2VydmFibGUgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUNvbGxlY3Rpb25Nb2RlbCB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLWNvbGxlY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyTW9kZWwgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWwgfSBmcm9tICcuLi9hcGkvdW5pcXVlL3VuaXF1ZS12YWx1ZS1jb2xsZWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEZpZWxkSWQgfSBmcm9tICcuLi8uLi9maWVsZC9kb21haW4vZmllbGQvZmllbGQuaWQnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZU1vZGVsIH0gZnJvbSAnLi4vYXBpL3R5cGUvZmlsdGVyLXR5cGUubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUlkIH0gZnJvbSAnLi4vZG9tYWluL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmlsdGVyRGlDb250YWluZXIgfSBmcm9tICcuLi9hcGkvZGkvZmlsdGVyLmRpLWNvbnRhaW5lcic7XG5cblxuZXhwb3J0IGNsYXNzIEZpbHRlckRvbWFpbldhcmVob3VzZSBleHRlbmRzIEZpbHRlcldhcmVob3VzZSB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBhY3RpdmVGaWx0ZXJBcmNoaXZlOiBBY3RpdmVGaWx0ZXJBcmNoaXZlID0gRmlsdGVyRGlDb250YWluZXIucmVzb2x2ZShBY3RpdmVGaWx0ZXJBcmNoaXZlKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlclR5cGVBcmNoaXZlOiBGaWx0ZXJUeXBlQXJjaGl2ZSA9IEZpbHRlckRpQ29udGFpbmVyLnJlc29sdmUoRmlsdGVyVHlwZUFyY2hpdmUpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyRW5hYmxlZEFyY2hpdmU6IEZpbHRlckVuYWJsZWRBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHN0cnVjdHVyZVF1aWNrRmlsdGVyUmVwb3NpdG9yeTogUXVpY2tGaWx0ZXJFbmFibGVkQXJjaGl2ZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSB1bmlxdWVWYWx1ZXNBcmNoaXZlOiBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25BcmNoaXZlKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdHN0YXRpYyByZWFkb25seSBzZXJ2aWNlcyA9IFtGaWx0ZXJFbmFibGVkQXJjaGl2ZSwgUXVpY2tGaWx0ZXJFbmFibGVkQXJjaGl2ZSwgVW5pcXVlVmFsdWVDb2xsZWN0aW9uQXJjaGl2ZV07XG5cblx0b25GaWx0ZXJpbmdFbmFibGVkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlckVuYWJsZWRBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uUXVpY2tGaWx0ZXJzRW5hYmxlZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5zdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnkub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPEZpbHRlclR5cGVDb2xsZWN0aW9uTW9kZWw+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvbkZpbHRlclR5cGVzRm9yRmllbGRJZChmaWVsZElkOiBGaWVsZElkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPFJlYWRvbmx5QXJyYXk8RmlsdGVyVHlwZU1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLm9uRmlsdGVyVHlwZXMoc3RydWN0dXJlSWQpXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc01hcCgobWFwOiBGaWx0ZXJUeXBlQ29sbGVjdGlvbk1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0XHQgICByZXR1cm4gbWFwLmdldEZpbHRlclR5cGVzKGZpZWxkSWQpO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRvbkFjdGl2ZUZpbHRlcnMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSZWFkb25seUFycmF5PEFjdGl2ZUZpbHRlck1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZUZpbHRlckFyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0ZmluZEZpbHRlcnMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogT3B0aW9uYWw8UmVhZG9ubHlBcnJheTxBY3RpdmVGaWx0ZXJNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVGaWx0ZXJBcmNoaXZlLmZpbmQoc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25VbmlxdWVWYWx1ZXMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxVbmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLnVuaXF1ZVZhbHVlc0FyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25jZUZpbHRlclR5cGVJZChmaWVsZElkOiBGaWVsZElkLCBmaWx0ZXJUeXBlTmFtZTogc3RyaW5nLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNTaW5nbGU8T3B0aW9uYWw8RmlsdGVyVHlwZUlkPj4ge1xuXHRcdHJldHVybiBzaW5nbGVGcm9tT2JzZXJ2YWJsZShcblx0XHRcdHRoaXMub25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZClcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0aGVybWVzTWFwKChtYXA6IEZpbHRlclR5cGVDb2xsZWN0aW9uTW9kZWwpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGZpbHRlclR5cGVzID0gbWFwLmdldEZpbHRlclR5cGVzKGZpZWxkSWQpO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmaWx0ZXJUeXBlID0gZmlsdGVyVHlwZXMuZmluZCgoZmllbGRUeXBlKSA9PiBmaWVsZFR5cGUuZ2V0TmFtZSgpID09PSBmaWx0ZXJUeXBlTmFtZSk7XG5cblx0XHRcdFx0XHRcdGlmIChmaWx0ZXJUeXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIE9wdGlvbmFsLmVtcHR5KCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gT3B0aW9uYWwub2YoZmlsdGVyVHlwZS5nZXRJZCgpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQpXG5cdFx0KTtcblxuXHR9XG5cbn1cbiJdfQ==