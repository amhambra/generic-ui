import { DomainInitializer } from '@generic-ui/hermes';
import { StructureDomainModule } from '../core/structure.domain-module';
import { InMemoryStructureAggregateStore } from '../persist/domain/in-memory.structure.aggregate-store';
import { InMemoryStructureStore } from '../persist/in-memory.structure.store';
import { StructureAggregateRepository } from '../core/structure-aggregate.repository';
import { InMemoryStructureAggregateRepository } from '../persist/domain/in-memory.structure-aggregate.repository';
import { FabricModalThemeService } from '@generic-ui/fabric';
import { StructureCellEditArchive } from '../../../../feature-view/grid-view/edit/structure.cell-edit.archive';
import { InMemoryStructureReadStore } from '../persist/api/in-memory-structure.read-store';
import { StructureReadModelRepository } from './read/structure.read-model-repository';
import { InMemoryStructureRepository } from '../persist/api/in-memory.structure.repository';
import { StructureAggregateFactory } from '../core/structure.aggregate-factory';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureWarehouse } from './structure.warehouse';
import { StructurePublisher } from './structure.publisher';
import { StructureDomainPublisher } from '../core/structure.domain-publisher';
import { StructureInitialValuesReadyArchive } from './ready/structure.initial-values-ready.archive';
export class StructureApiModule {
    registerProviders(container) {
        container.provide(InMemoryStructureReadStore);
        container.provide(StructureReadModelRepository, InMemoryStructureRepository);
        container.provide(StructureAggregateFactory);
        container.provide(StructureReadModelRootConverter);
        container.provide(StructureWarehouse);
        container.provide(StructurePublisher, StructureDomainPublisher);
        container.provide(StructureInitialValuesReadyArchive);
        container.provide(InMemoryStructureAggregateStore);
        container.provide(InMemoryStructureStore);
        container.provide(StructureAggregateRepository, InMemoryStructureAggregateRepository);
        container.provide(FabricModalThemeService);
        container.provide(StructureCellEditArchive);
    }
}
export const structureInitializer = new DomainInitializer(new StructureApiModule(), new StructureDomainModule());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLmFwaS1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL3N0cnVjdHVyZS1jb3JlL2FwaS9zdHJ1Y3R1cmUuYXBpLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTJCLGlCQUFpQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDeEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDOUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDbEgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0QsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scUVBQXFFLENBQUM7QUFDL0csT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDaEYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDN0YsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDOUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFHcEcsTUFBTSxPQUFPLGtCQUFrQjtJQUU5QixpQkFBaUIsQ0FBQyxTQUFvQjtRQUVyQyxTQUFTLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDOUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO1FBQzdFLFNBQVMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUM3QyxTQUFTLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDbkQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RDLFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUNoRSxTQUFTLENBQUMsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFFdEQsU0FBUyxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELFNBQVMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMxQyxTQUFTLENBQUMsT0FBTyxDQUFDLDRCQUE0QixFQUFFLG9DQUFvQyxDQUFDLENBQUM7UUFDdEYsU0FBUyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRTNDLFNBQVMsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Q7QUFFRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksa0JBQWtCLEVBQUUsRUFBRSxJQUFJLHFCQUFxQixFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVByb3ZpZGVycywgQ29udGFpbmVyLCBEb21haW5Jbml0aWFsaXplciB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVEb21haW5Nb2R1bGUgfSBmcm9tICcuLi9jb3JlL3N0cnVjdHVyZS5kb21haW4tbW9kdWxlJztcbmltcG9ydCB7IEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlU3RvcmUgfSBmcm9tICcuLi9wZXJzaXN0L2RvbWFpbi9pbi1tZW1vcnkuc3RydWN0dXJlLmFnZ3JlZ2F0ZS1zdG9yZSc7XG5pbXBvcnQgeyBJbk1lbW9yeVN0cnVjdHVyZVN0b3JlIH0gZnJvbSAnLi4vcGVyc2lzdC9pbi1tZW1vcnkuc3RydWN0dXJlLnN0b3JlJztcbmltcG9ydCB7IFN0cnVjdHVyZUFnZ3JlZ2F0ZVJlcG9zaXRvcnkgfSBmcm9tICcuLi9jb3JlL3N0cnVjdHVyZS1hZ2dyZWdhdGUucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBJbk1lbW9yeVN0cnVjdHVyZUFnZ3JlZ2F0ZVJlcG9zaXRvcnkgfSBmcm9tICcuLi9wZXJzaXN0L2RvbWFpbi9pbi1tZW1vcnkuc3RydWN0dXJlLWFnZ3JlZ2F0ZS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IEZhYnJpY01vZGFsVGhlbWVTZXJ2aWNlIH0gZnJvbSAnQGdlbmVyaWMtdWkvZmFicmljJztcbmltcG9ydCB7IFN0cnVjdHVyZUNlbGxFZGl0QXJjaGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uL2ZlYXR1cmUtdmlldy9ncmlkLXZpZXcvZWRpdC9zdHJ1Y3R1cmUuY2VsbC1lZGl0LmFyY2hpdmUnO1xuaW1wb3J0IHsgSW5NZW1vcnlTdHJ1Y3R1cmVSZWFkU3RvcmUgfSBmcm9tICcuLi9wZXJzaXN0L2FwaS9pbi1tZW1vcnktc3RydWN0dXJlLnJlYWQtc3RvcmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUmVwb3NpdG9yeSB9IGZyb20gJy4vcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yZXBvc2l0b3J5JztcbmltcG9ydCB7IEluTWVtb3J5U3RydWN0dXJlUmVwb3NpdG9yeSB9IGZyb20gJy4uL3BlcnNpc3QvYXBpL2luLW1lbW9yeS5zdHJ1Y3R1cmUucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5IH0gZnJvbSAnLi4vY29yZS9zdHJ1Y3R1cmUuYWdncmVnYXRlLWZhY3RvcnknO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUm9vdENvbnZlcnRlciB9IGZyb20gJy4vcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yb290LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVXYXJlaG91c2UgfSBmcm9tICcuL3N0cnVjdHVyZS53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlUHVibGlzaGVyIH0gZnJvbSAnLi9zdHJ1Y3R1cmUucHVibGlzaGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZURvbWFpblB1Ymxpc2hlciB9IGZyb20gJy4uL2NvcmUvc3RydWN0dXJlLmRvbWFpbi1wdWJsaXNoZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlSW5pdGlhbFZhbHVlc1JlYWR5QXJjaGl2ZSB9IGZyb20gJy4vcmVhZHkvc3RydWN0dXJlLmluaXRpYWwtdmFsdWVzLXJlYWR5LmFyY2hpdmUnO1xuXG5cbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVBcGlNb2R1bGUgaW1wbGVtZW50cyBBcGlQcm92aWRlcnMge1xuXG5cdHJlZ2lzdGVyUHJvdmlkZXJzKGNvbnRhaW5lcjogQ29udGFpbmVyKTogdm9pZCB7XG5cblx0XHRjb250YWluZXIucHJvdmlkZShJbk1lbW9yeVN0cnVjdHVyZVJlYWRTdG9yZSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU3RydWN0dXJlUmVhZE1vZGVsUmVwb3NpdG9yeSwgSW5NZW1vcnlTdHJ1Y3R1cmVSZXBvc2l0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVSZWFkTW9kZWxSb290Q29udmVydGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVXYXJlaG91c2UpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZVB1Ymxpc2hlciwgU3RydWN0dXJlRG9tYWluUHVibGlzaGVyKTtcblx0XHRjb250YWluZXIucHJvdmlkZShTdHJ1Y3R1cmVJbml0aWFsVmFsdWVzUmVhZHlBcmNoaXZlKTtcblxuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5U3RydWN0dXJlU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFN0cnVjdHVyZUFnZ3JlZ2F0ZVJlcG9zaXRvcnksIEluTWVtb3J5U3RydWN0dXJlQWdncmVnYXRlUmVwb3NpdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRmFicmljTW9kYWxUaGVtZVNlcnZpY2UpO1xuXG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoU3RydWN0dXJlQ2VsbEVkaXRBcmNoaXZlKTtcblx0fVxufVxuXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlSW5pdGlhbGl6ZXIgPSBuZXcgRG9tYWluSW5pdGlhbGl6ZXIobmV3IFN0cnVjdHVyZUFwaU1vZHVsZSgpLCBuZXcgU3RydWN0dXJlRG9tYWluTW9kdWxlKCkpO1xuXG4iXX0=