import { DomainInitializer } from '@generic-ui/hermes';
import { CompositionDomainModule } from '../domain/composition.domain-module';
import { ColumnDefinitionFactory } from '../domain-read/definition/column-definition.factory';
import { ViewTemplateRepository } from '../domain-read/view/view-template.repository';
import { ViewTemplateFactory } from '../domain-read/view/view-template.factory';
import { EditTemplateFactory } from '../domain-read/edit/edit-template.factory';
import { EditTemplateRepository } from '../domain-read/edit/edit-template.repository';
import { CompositionReadModelRootConverter } from '../domain-read/composition.read-model-root-converter';
import { CompositionPublisher } from './composition.publisher';
import { CompositionWarehouse } from './composition.warehouse';
import { CompositionEventRepository } from './composition.event-repository';
import { CompositionGroupArchive } from '../domain-read/group/composition-group.archive';
import { ColumnAutoConfigurator } from './column/auto/column-auto.configurator';
import { InMemoryCompositionReadStore } from '../infrastructure/in-memory/api/in-memory.composition.read-store';
import { CompositionReadModelRootRepository } from '../domain-read/composition.read-model-root-repository';
import { InMemoryCompositionStore } from '../infrastructure/in-memory/in-memory.composition.store';
import { InMemoryCompositionRepository } from '../infrastructure/in-memory/api/in-memory.composition.repository';
import { CompositionDomainCommandPublisher } from '../domain/compositon.domain-publisher';
import { CompositionDomainWarehouse } from '../domain-read/composition.domain-warehouse';
import { CompositionDomainEventRepository } from '../domain/composition.domain-event-repository';
import { DomainColumnAutoConfigurator } from '../domain/column/auto/domain.column-auto.configurator';
export class CompositionApiModule {
    registerProviders(container) {
        container.provide(InMemoryCompositionReadStore);
        container.provide(CompositionReadModelRootRepository, InMemoryCompositionRepository);
        container.provide(ColumnDefinitionFactory);
        container.provide(ViewTemplateRepository);
        container.provide(ViewTemplateFactory);
        container.provide(EditTemplateFactory);
        container.provide(EditTemplateRepository);
        container.provide(InMemoryCompositionStore);
        container.provide(CompositionReadModelRootConverter);
        container.provide(CompositionGroupArchive);
        container.provide(CompositionPublisher, CompositionDomainCommandPublisher);
        container.provide(CompositionWarehouse, CompositionDomainWarehouse);
        container.provide(CompositionEventRepository, CompositionDomainEventRepository);
        container.provide(ColumnAutoConfigurator, DomainColumnAutoConfigurator);
    }
}
export const compositionInitializer = new DomainInitializer(new CompositionApiModule(), new CompositionDomainModule());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zaXRpb24uYXBpLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtZ3JpZC9zcmMvY29yZS9jb21wb3NpdGlvbi9hcGkvY29tcG9zaXRpb24uYXBpLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQTJCLGlCQUFpQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDaEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDOUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDOUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDaEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDekcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDekYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFDaEgsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDM0csT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDbkcsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFDakgsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDMUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDekYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDakcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFHckcsTUFBTSxPQUFPLG9CQUFvQjtJQUVoQyxpQkFBaUIsQ0FBQyxTQUFvQjtRQUNyQyxTQUFTLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDaEQsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQ0FBa0MsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3JGLFNBQVMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMzQyxTQUFTLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDMUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2QyxTQUFTLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDMUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQzVDLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUNyRCxTQUFTLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFM0MsU0FBUyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO1FBQzNFLFNBQVMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNwRSxTQUFTLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLGdDQUFnQyxDQUFDLENBQUM7UUFFaEYsU0FBUyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDRDtBQUVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLElBQUksdUJBQXVCLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvdmlkZXJzLCBDb250YWluZXIsIERvbWFpbkluaXRpYWxpemVyIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IENvbXBvc2l0aW9uRG9tYWluTW9kdWxlIH0gZnJvbSAnLi4vZG9tYWluL2NvbXBvc2l0aW9uLmRvbWFpbi1tb2R1bGUnO1xuaW1wb3J0IHsgQ29sdW1uRGVmaW5pdGlvbkZhY3RvcnkgfSBmcm9tICcuLi9kb21haW4tcmVhZC9kZWZpbml0aW9uL2NvbHVtbi1kZWZpbml0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgVmlld1RlbXBsYXRlUmVwb3NpdG9yeSB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL3ZpZXcvdmlldy10ZW1wbGF0ZS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IFZpZXdUZW1wbGF0ZUZhY3RvcnkgfSBmcm9tICcuLi9kb21haW4tcmVhZC92aWV3L3ZpZXctdGVtcGxhdGUuZmFjdG9yeSc7XG5pbXBvcnQgeyBFZGl0VGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi4vZG9tYWluLXJlYWQvZWRpdC9lZGl0LXRlbXBsYXRlLmZhY3RvcnknO1xuaW1wb3J0IHsgRWRpdFRlbXBsYXRlUmVwb3NpdG9yeSB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL2VkaXQvZWRpdC10ZW1wbGF0ZS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IENvbXBvc2l0aW9uUmVhZE1vZGVsUm9vdENvbnZlcnRlciB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL2NvbXBvc2l0aW9uLnJlYWQtbW9kZWwtcm9vdC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25QdWJsaXNoZXIgfSBmcm9tICcuL2NvbXBvc2l0aW9uLnB1Ymxpc2hlcic7XG5pbXBvcnQgeyBDb21wb3NpdGlvbldhcmVob3VzZSB9IGZyb20gJy4vY29tcG9zaXRpb24ud2FyZWhvdXNlJztcbmltcG9ydCB7IENvbXBvc2l0aW9uRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSAnLi9jb21wb3NpdGlvbi5ldmVudC1yZXBvc2l0b3J5JztcbmltcG9ydCB7IENvbXBvc2l0aW9uR3JvdXBBcmNoaXZlIH0gZnJvbSAnLi4vZG9tYWluLXJlYWQvZ3JvdXAvY29tcG9zaXRpb24tZ3JvdXAuYXJjaGl2ZSc7XG5pbXBvcnQgeyBDb2x1bW5BdXRvQ29uZmlndXJhdG9yIH0gZnJvbSAnLi9jb2x1bW4vYXV0by9jb2x1bW4tYXV0by5jb25maWd1cmF0b3InO1xuaW1wb3J0IHsgSW5NZW1vcnlDb21wb3NpdGlvblJlYWRTdG9yZSB9IGZyb20gJy4uL2luZnJhc3RydWN0dXJlL2luLW1lbW9yeS9hcGkvaW4tbWVtb3J5LmNvbXBvc2l0aW9uLnJlYWQtc3RvcmUnO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25SZWFkTW9kZWxSb290UmVwb3NpdG9yeSB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL2NvbXBvc2l0aW9uLnJlYWQtbW9kZWwtcm9vdC1yZXBvc2l0b3J5JztcbmltcG9ydCB7IEluTWVtb3J5Q29tcG9zaXRpb25TdG9yZSB9IGZyb20gJy4uL2luZnJhc3RydWN0dXJlL2luLW1lbW9yeS9pbi1tZW1vcnkuY29tcG9zaXRpb24uc3RvcmUnO1xuaW1wb3J0IHsgSW5NZW1vcnlDb21wb3NpdGlvblJlcG9zaXRvcnkgfSBmcm9tICcuLi9pbmZyYXN0cnVjdHVyZS9pbi1tZW1vcnkvYXBpL2luLW1lbW9yeS5jb21wb3NpdGlvbi5yZXBvc2l0b3J5JztcbmltcG9ydCB7IENvbXBvc2l0aW9uRG9tYWluQ29tbWFuZFB1Ymxpc2hlciB9IGZyb20gJy4uL2RvbWFpbi9jb21wb3NpdG9uLmRvbWFpbi1wdWJsaXNoZXInO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25Eb21haW5XYXJlaG91c2UgfSBmcm9tICcuLi9kb21haW4tcmVhZC9jb21wb3NpdGlvbi5kb21haW4td2FyZWhvdXNlJztcbmltcG9ydCB7IENvbXBvc2l0aW9uRG9tYWluRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSAnLi4vZG9tYWluL2NvbXBvc2l0aW9uLmRvbWFpbi1ldmVudC1yZXBvc2l0b3J5JztcbmltcG9ydCB7IERvbWFpbkNvbHVtbkF1dG9Db25maWd1cmF0b3IgfSBmcm9tICcuLi9kb21haW4vY29sdW1uL2F1dG8vZG9tYWluLmNvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvcic7XG5cblxuZXhwb3J0IGNsYXNzIENvbXBvc2l0aW9uQXBpTW9kdWxlIGltcGxlbWVudHMgQXBpUHJvdmlkZXJzIHtcblxuXHRyZWdpc3RlclByb3ZpZGVycyhjb250YWluZXI6IENvbnRhaW5lcik6IHZvaWQge1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEluTWVtb3J5Q29tcG9zaXRpb25SZWFkU3RvcmUpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKENvbXBvc2l0aW9uUmVhZE1vZGVsUm9vdFJlcG9zaXRvcnksIEluTWVtb3J5Q29tcG9zaXRpb25SZXBvc2l0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShDb2x1bW5EZWZpbml0aW9uRmFjdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoVmlld1RlbXBsYXRlUmVwb3NpdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoVmlld1RlbXBsYXRlRmFjdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRWRpdFRlbXBsYXRlRmFjdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRWRpdFRlbXBsYXRlUmVwb3NpdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoSW5NZW1vcnlDb21wb3NpdGlvblN0b3JlKTtcblx0XHRjb250YWluZXIucHJvdmlkZShDb21wb3NpdGlvblJlYWRNb2RlbFJvb3RDb252ZXJ0ZXIpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKENvbXBvc2l0aW9uR3JvdXBBcmNoaXZlKTtcblxuXHRcdGNvbnRhaW5lci5wcm92aWRlKENvbXBvc2l0aW9uUHVibGlzaGVyLCBDb21wb3NpdGlvbkRvbWFpbkNvbW1hbmRQdWJsaXNoZXIpO1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKENvbXBvc2l0aW9uV2FyZWhvdXNlLCBDb21wb3NpdGlvbkRvbWFpbldhcmVob3VzZSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoQ29tcG9zaXRpb25FdmVudFJlcG9zaXRvcnksIENvbXBvc2l0aW9uRG9tYWluRXZlbnRSZXBvc2l0b3J5KTtcblxuXHRcdGNvbnRhaW5lci5wcm92aWRlKENvbHVtbkF1dG9Db25maWd1cmF0b3IsIERvbWFpbkNvbHVtbkF1dG9Db25maWd1cmF0b3IpO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBjb21wb3NpdGlvbkluaXRpYWxpemVyID0gbmV3IERvbWFpbkluaXRpYWxpemVyKG5ldyBDb21wb3NpdGlvbkFwaU1vZHVsZSgpLCBuZXcgQ29tcG9zaXRpb25Eb21haW5Nb2R1bGUoKSk7XG4iXX0=