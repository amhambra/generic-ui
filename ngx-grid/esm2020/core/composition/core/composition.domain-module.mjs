import { SetColumnsCommandHandler } from './column/set-columns/set-columns.command-handler';
import { SetCompositionWidthCommandHandler } from './width/set-width/set-composition-width.command-handler';
import { SetCompositionResizeWidthCommandHandler } from './width/resize-width/set-composition-resize-width.command-handler';
import { SetCompositionContainerWidthCommandHandler } from './width/set-container-width/set-composition-container-width.command-handler';
import { CompositionSetColumnEnabledCommandHandler } from './column/set-enabled/composition.set-column-enabled.command-handler';
import { CompositionChangeSortStatusCommandHandler } from './column/sort/composition-change-sort-status.command-handler';
import { CompositionMoveLeftColumnCommandHandler } from './column/move/left/composition.move-left-column.command-handler';
import { CompositionMoveRightColumnCommandHandler } from './column/move/right/composition.move-right-column.command-handler';
import { CompositionChangeSortStatusEventHandler } from './column/sort/composition-change-sort-status.event-handler';
import { CompositionDispatcher } from './composition.dispatcher';
import { ColumnEntityFactory } from '../domain/column/column-entity.factory';
import { ColumnPresentationConverter } from '../domain/column/presentation/column.presentation.converter';
import { CompositionEventConverter } from './composition.event-converter';
import { ColumnFieldFactory } from '../domain/column/field/colum-field.factory';
import { CompositionGroupFactory } from './group/composition.group.factory';
import { SetGroupsCommandHandler } from './group/set-groups/set-groups.command-handler';
import { ColumnHighlightArchive } from '../domain/highlight/column-highlight.archive';
import { InMemoryCompositionAggregateStore } from '../persist/domain/in-memory.composition.aggregate-store';
import { CompositionAggregateRepository } from './composition.aggregate-repository';
import { InMemoryCompositionAggregateRepository } from '../persist/domain/in-memory.composition.aggregate-repository';
import { InMemoryCompositionStore } from '../persist/in-memory.composition.store';
import { InMemoryCompositionReadStore } from '../persist/api/in-memory.composition.read-store';
import { CompositionReadModelRootRepository } from '../core-read/composition.read-model-root-repository';
import { InMemoryCompositionRepository } from '../persist/api/in-memory.composition.repository';
import { CreateCompositionCommandHandler } from './create/create-composition.command-handler';
import { CompositionAggregateFactory } from './composition.aggregate-factory';
const compositionKey = 'CompositionAggregate';
export class CompositionDomainModule {
    defineAggregate() {
        return {
            aggregateKey: compositionKey,
            createCommandHandler: CreateCompositionCommandHandler,
            factory: CompositionAggregateFactory,
            repository: InMemoryCompositionAggregateRepository
        };
    }
    registerKey() {
        return compositionKey;
    }
    registerProviders(container) {
        container.provide(InMemoryCompositionAggregateStore);
        container.provide(CompositionAggregateRepository, InMemoryCompositionAggregateRepository);
        container.provide(CompositionDispatcher);
        container.provide(ColumnEntityFactory);
        container.provide(ColumnPresentationConverter);
        container.provide(CompositionEventConverter);
        container.provide(ColumnFieldFactory);
        container.provide(CompositionGroupFactory);
        container.provide(ColumnHighlightArchive);
        container.provide(InMemoryCompositionStore);
        container.provide(InMemoryCompositionReadStore);
        container.provide(CompositionReadModelRootRepository, InMemoryCompositionRepository);
    }
    registerCommandHandlers() {
        return [
            SetColumnsCommandHandler,
            SetCompositionWidthCommandHandler,
            SetCompositionResizeWidthCommandHandler,
            SetCompositionContainerWidthCommandHandler,
            CompositionSetColumnEnabledCommandHandler,
            CompositionChangeSortStatusCommandHandler,
            CompositionMoveLeftColumnCommandHandler,
            CompositionMoveRightColumnCommandHandler,
            SetGroupsCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [];
    }
    registerMultiDomainEventHandler() {
        return [
            CompositionChangeSortStatusEventHandler
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,