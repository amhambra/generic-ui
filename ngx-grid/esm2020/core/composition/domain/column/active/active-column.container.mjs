import { ColumnWidthCollection } from '../column-width/column-width-collection';
import { SortOrder } from '../sort/sort-order';
import { CompositionChangeSortStatusAggregateEvent } from '../../../core/column/sort/composition-change-sort-status.aggregate-event';
export class ActiveColumnContainer {
    constructor(compositionId, columns = [], gridWidth, columnConfigs) {
        this.compositionId = compositionId;
        this.MIN_COLUMN_WIDTH = 50;
        /**
         * Columns taken from user config.
         * This should not be modified and it should be used as a reference point.
         */
        this.columnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH);
        this.columns = columns;
        if (gridWidth && columnConfigs) {
            this.columnWidthCollection = new ColumnWidthCollection(this.MIN_COLUMN_WIDTH, columnConfigs, gridWidth);
        }
    }
    getColumnWidths() {
        return this.columnWidthCollection.getColumnWidths();
    }
    // REMOVE
    getColumns() {
        return this.columns;
    }
    setWidth(width) {
        this.columnWidthCollection.setWidth(width);
    }
    addColumn(column, index) {
        this.columns.splice(index, 0, column);
    }
    removeColumn(index) {
        this.columns.splice(index, 1);
    }
    setColumns(columns, columnConfigs) {
        this.columns = columns;
        this.columnWidthCollection.setColumns(columnConfigs);
        const updatedWidths = this.columnWidthCollection.getWidths();
        this.columns.forEach((column, index) => {
            column.setWidth(updatedWidths[index]);
        });
        // TODO
        // this.addEvent(new ColumnsSetAggregateEvent(this.getId(), columns));
    }
    changeSort(sortParams) {
        this.columns.forEach((column) => {
            column.setSortStatus(SortOrder.NONE);
        });
        for (const param of sortParams) {
            const fieldId = param.fieldId, direction = param.direction, sortStatus = direction ? SortOrder.ASC : SortOrder.DESC;
            const columns = this.columns.filter((column) => {
                return column.getField().getId().getId() === fieldId.getId();
            });
            if (columns.length > 0) {
                columns.forEach((column) => {
                    column.setSortStatus(sortStatus);
                });
            }
        }
        return new CompositionChangeSortStatusAggregateEvent(this.getCompositionId(), this.columns);
    }
    moveLeft(columnId) {
        const index = this.findColumnIndex(columnId);
        this.move(index, index - 1);
    }
    moveRight(columnId) {
        const index = this.findColumnIndex(columnId);
        this.move(index, index + 1);
    }
    getMinColumnWidth() {
        return this.MIN_COLUMN_WIDTH;
    }
    move(fromIndex, toIndex) {
        if (!this.validateMoveIndex(fromIndex) || !this.validateMoveIndex(toIndex)) {
            return;
        }
        const column = this.columns[fromIndex];
        this.columns[fromIndex] = this.columns[toIndex];
        this.columns[toIndex] = column;
    }
    validateMoveIndex(index) {
        return index >= 0;
    }
    getCompositionId() {
        return this.compositionId;
    }
    findColumnIndex(columnId) {
        return this.columns.findIndex(c => c.getId().equals(columnId));
    }
}
//# sourceMappingURL=data:application/json;base64,