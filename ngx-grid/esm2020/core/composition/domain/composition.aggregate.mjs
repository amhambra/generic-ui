import { AggregateRoot, KeyMap } from '@generic-ui/hermes';
import { CompositionContainerWidthCalculator } from './width/composition-container-width.calculator';
import { CompositionWidthSetAggregateEvent } from '../core/width/set-width/composition-width-set.aggregate-event';
import { CompositionContainerWidthSetAggregateEvent } from '../core/width/set-container-width/composition-container-width-set.aggregate-event';
import { CompositionResizeWidthSetAggregateEvent } from '../core/width/resize-width/composition-resize-width-set.aggregate-event';
import { CompositionColumnSetEnabledAggregateEvent } from '../core/column/set-enabled/composition.column-set-enabled.aggregate-event';
import { ActiveColumnContainer } from './column/active/active-column.container';
import { ActiveColumnEntityConverter } from './column/active/active-column.entity-converter';
import { CompositionColumnMovedLeftAggregateEvent } from '../core/column/move/left/composition.column-moved-left.aggregate-event';
import { CompositionColumnMovedRightAggregateEvent } from '../core/column/move/right/composition.column-moved-right.aggregate-event';
import { ColumnsSetAggregateEvent } from '../core/column/set-columns/columns-set.aggregate-event';
import { CompositionCreatedAggregateEvent } from '../core/create/composition-created.aggregate-event';
import { emptyGroup } from '../core/group/empty-group';
export class CompositionAggregate extends AggregateRoot {
    constructor(id, columnFactory, groupFactory, columnsParams = [], width, resizeWidth) {
        super(id, 'CompositionAggregate');
        this.allColumns = [];
        this.resizeWidthEnabled = true;
        this.activeColumnEntityConverter = new ActiveColumnEntityConverter();
        this.groups = new KeyMap();
        this.columnNameToGroupId = new Map();
        const columnConfigs = columnsParams.map((param) => param.getColumn());
        this.baseParams = columnsParams;
        this.baseColumns = columnConfigs;
        this.columnFactory = columnFactory;
        this.groupFactory = groupFactory;
        this.width = width;
        this.allColumns = this.columnFactory.create(columnsParams);
        const activeColumns = this.activeColumnEntityConverter.convertMany(this.getEnabledColumns());
        this.activeColumnContainer = new ActiveColumnContainer(this.getId(), activeColumns, width, columnConfigs);
        if (resizeWidth !== undefined && resizeWidth !== null) {
            this.resizeWidthEnabled = resizeWidth;
        }
    }
    createEvent() {
        return CompositionCreatedAggregateEvent;
    }
    // REMOVE
    getColumns() {
        return this.allColumns;
    }
    // REMOVE
    getActiveColumns() {
        return this.activeColumnContainer.getColumns();
    }
    // make private
    getWidth() {
        if (this.resizeWidthEnabled) {
            return this.containerInDOMWidth;
        }
        else {
            return this.width;
        }
    }
    // REMOVE
    isResizeEnabled() {
        return this.resizeWidthEnabled;
    }
    // REMOVE
    isReady() {
        return !!this.getWidth() && this.getActiveColumns().length > 0;
    }
    setGroups(configs) {
        for (let i = 0; i < configs.length; i += 1) {
            const config = configs[i];
            if (config.columns !== undefined) {
                const group = this.groupFactory.create(config);
                this.groups.set(group.id, group);
                config.columns.forEach((c, index) => {
                    this.columnNameToGroupId.set(c.header, group.id);
                });
            }
            else {
                this.columnNameToGroupId.set(config.header, emptyGroup.id);
            }
        }
    }
    setColumns(params) {
        this.allColumns = this.columnFactory.create(params);
        const columnConfigs = params.map((param) => param.getColumn());
        const activeColumns = this.activeColumnEntityConverter.convertMany(this.getEnabledColumns());
        this.activeColumnContainer.setColumns(activeColumns, columnConfigs);
        this.addEvent(new ColumnsSetAggregateEvent(this.getId()));
    }
    setContainerWidth(containerWidth) {
        this.setContainerWidthWithEvent(containerWidth);
        this.recalculateColumns();
    }
    setWidth(width) {
        this.setWidthWithEvent(width);
        this.setResizeWidthWithEvent(false);
        this.recalculateColumns();
    }
    setResizeWidth(enabled) {
        this.setResizeWidthWithEvent(enabled);
    }
    changeSort(sortParams) {
        this.addEvent(this.activeColumnContainer.changeSort(sortParams));
    }
    // DELEGATE
    enableColumn(columnId, enabled) {
        let enabledIndex = -1;
        this.allColumns.forEach((column, index) => {
            if (column.getId().getId() === columnId.getId()) {
                const prevState = column.isEnabled();
                column.setEnabled(enabled);
                if (prevState !== enabled) {
                    enabledIndex = index;
                }
            }
        });
        if (enabledIndex > 0) {
            if (enabled) {
                // convert
                const columnToAdd = this.activeColumnEntityConverter.convert(this.allColumns[enabledIndex]);
                this.activeColumnContainer.addColumn(columnToAdd, enabledIndex);
            }
            else {
                this.activeColumnContainer.removeColumn(enabledIndex);
            }
        }
        this.recalculateColumns();
        this.addEvent(new CompositionColumnSetEnabledAggregateEvent(this.getId(), this.getActiveColumns()));
    }
    moveLeft(columnId) {
        const columnIndex = this.findColumnIndex(columnId);
        let nextLeft, nextLeftIndex = -1;
        for (let i = columnIndex - 1; i >= 0; i -= 1) {
            const leftColumn = this.allColumns[i];
            if (leftColumn.isEnabled()) {
                nextLeft = leftColumn;
                nextLeftIndex = i;
                break;
            }
        }
        if (nextLeft && nextLeftIndex >= 0 && columnIndex >= 0) {
            const column = this.allColumns[columnIndex];
            this.allColumns[columnIndex] = nextLeft;
            this.allColumns[nextLeftIndex] = column;
        }
        this.activeColumnContainer.moveLeft(columnId);
        this.addEvent(new CompositionColumnMovedLeftAggregateEvent(this.getId(), this.getActiveColumns()));
    }
    moveRight(columnId) {
        const columnIndex = this.findColumnIndex(columnId);
        let nextRight, nextRightIndex = -1;
        for (let i = columnIndex + 1; i < this.allColumns.length; i += 1) {
            const rightColumn = this.allColumns[i];
            if (rightColumn.isEnabled()) {
                nextRight = rightColumn;
                nextRightIndex = i;
                break;
            }
        }
        if (nextRight && nextRightIndex >= 0 && columnIndex >= 0) {
            const column = this.allColumns[columnIndex];
            this.allColumns[columnIndex] = nextRight;
            this.allColumns[nextRightIndex] = column;
        }
        this.activeColumnContainer.moveRight(columnId);
        this.addEvent(new CompositionColumnMovedRightAggregateEvent(this.getId(), this.getActiveColumns()));
    }
    recalculateColumns() {
        const activeColumns = this.activeColumnEntityConverter.convertMany(this.getEnabledColumns());
        this.activeColumnContainer.setColumns(activeColumns, activeColumns.map(c => c.getColumnConfig()));
    }
    // TODO Refactor
    setWidthWithEvent(width) {
        const calculator = new CompositionContainerWidthCalculator(this.getMinColumnWidth());
        const minWidth = calculator.calculateMinWidth(this.activeColumnContainer.getColumnWidths());
        if (minWidth > width) {
            this.width = minWidth;
        }
        else {
            this.width = width;
        }
        this.activeColumnContainer.setWidth(this.getWidth());
        this.addEvent(new CompositionWidthSetAggregateEvent(this.getId()));
    }
    // TODO Refactor
    setContainerWidthWithEvent(containerWidth) {
        const calculator = new CompositionContainerWidthCalculator(this.getMinColumnWidth());
        const minWidth = calculator.calculateMinWidth(this.activeColumnContainer.getColumnWidths());
        if (minWidth > containerWidth) {
            this.containerInDOMWidth = minWidth;
        }
        else {
            this.containerInDOMWidth = containerWidth;
        }
        this.activeColumnContainer.setWidth(this.getWidth());
        this.addEvent(new CompositionContainerWidthSetAggregateEvent(this.getId(), containerWidth));
    }
    setResizeWidthWithEvent(enabled) {
        this.resizeWidthEnabled = enabled;
        this.activeColumnContainer.setWidth(this.getWidth());
        this.addEvent(new CompositionResizeWidthSetAggregateEvent(this.getId()));
    }
    // REMOVE -> move to allColumnsContainer
    getEnabledColumns() {
        return this.allColumns.filter(c => c.isEnabled());
    }
    findColumnIndex(columnId) {
        return this.allColumns.findIndex((column) => column.getId().equals(columnId));
    }
    getMinColumnWidth() {
        return this.activeColumnContainer.getMinColumnWidth();
    }
}
//# sourceMappingURL=data:application/json;base64,