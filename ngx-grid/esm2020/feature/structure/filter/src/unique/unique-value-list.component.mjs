import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { SmartComponent } from '../../../../common/component/src/smart-component';
import { GuiState } from '../../../../../feature/gui-angular/state/gui.state';
import { hermesMap, hermesSwitchMap } from '@generic-ui/hermes';
import * as i0 from "@angular/core";
import * as i1 from "../../../../../feature/gui-angular/state/gui.state";
import * as i2 from "../../../../../core/structure/structure-core/src/api/global/structure.id";
import * as i3 from "../../../../../core/structure/filter/src/api/filter.warehouse";
import * as i4 from "../../../../../core/structure/filter/src/api/filter.publisher";
import * as i5 from "@angular/common";
import * as i6 from "@generic-ui/fabric";
import * as i7 from "../../../../gui-angular/template/let/gui.let.directive";
export class UniqueValueListComponent extends SmartComponent {
    constructor(changeDetectorRef, elementRef, state, structureId, filterWarehouse, filterCommandInvoker) {
        super(changeDetectorRef, elementRef);
        this.state = state;
        this.structureId = structureId;
        this.filterWarehouse = filterWarehouse;
        this.filterCommandInvoker = filterCommandInvoker;
        this.state$ = this.state.select();
        this.state.connect('uniqueValues', this.selectUniqueValues());
        this.state.connect('selectAllChecked', this.isSelectAllChecked());
        this.state.connect('selectAllIndeterminate', this.isSelectAllIndeterminate());
    }
    set fieldId(fieldId) {
        this.state.setValue({
            fieldId
        });
    }
    ;
    toggleAllSelect() {
        event.stopPropagation();
        const fieldId = this.state.getValue('fieldId'), selectAllChecked = this.state.getValue('selectAllChecked');
        if (selectAllChecked) {
            this.filterCommandInvoker.unselectAllUniqueFilter(fieldId, this.structureId);
        }
        else {
            this.filterCommandInvoker.selectAllUniqueFilter(fieldId, this.structureId);
        }
    }
    toggleSelect(uniqueValueModel) {
        event.stopPropagation();
        const fieldId = this.state.getValue('fieldId');
        if (uniqueValueModel.isEnabled()) {
            this.filterCommandInvoker.unselectUniqueFilter(fieldId, uniqueValueModel.getId(), this.structureId);
        }
        else {
            this.filterCommandInvoker.selectUniqueFilter(fieldId, uniqueValueModel.getId(), this.structureId);
        }
    }
    clearFilters() {
        const fieldId = this.state.getValue('fieldId');
        this.filterCommandInvoker.selectAllUniqueFilter(fieldId, this.structureId);
    }
    getSelectorName() {
        return 'gui-unique-value-list';
    }
    selectUniqueValues() {
        return this.state
            .select('fieldId')
            .pipe(hermesSwitchMap((fieldId) => {
            return this.filterWarehouse
                .onUniqueValues(this.structureId)
                .pipe(hermesMap((uniqueValueCollectionModel) => {
                return uniqueValueCollectionModel.getValues(fieldId);
            }));
        }));
    }
    isSelectAllChecked() {
        return this.state
            .select('fieldId')
            .pipe(hermesSwitchMap((fieldId) => {
            return this.filterWarehouse
                .onUniqueValues(this.structureId)
                .pipe(hermesMap((uniqueValueCollectionModel) => {
                return uniqueValueCollectionModel.isSelectAllChecked(fieldId);
            }));
        }));
    }
    isSelectAllIndeterminate() {
        return this.state
            .select('fieldId')
            .pipe(hermesSwitchMap((fieldId) => {
            return this.filterWarehouse
                .onUniqueValues(this.structureId)
                .pipe(hermesMap((uniqueValueCollectionModel) => {
                return uniqueValueCollectionModel.isIndeterminate(fieldId);
            }));
        }));
    }
}
UniqueValueListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: UniqueValueListComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.GuiState }, { token: i2.StructureId }, { token: i3.FilterWarehouse }, { token: i4.FilterPublisher }], target: i0.ɵɵFactoryTarget.Component });
UniqueValueListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: UniqueValueListComponent, selector: "div[gui-unique-value-list][fieldId]", inputs: { fieldId: "fieldId" }, providers: [
        GuiState
    ], usesInheritance: true, ngImport: i0, template: "<ng-container *guiLet=\"state$; let state\">\n\t<gui-checkbox (changed)=\"toggleAllSelect()\"\n\t\t\t\t  [checked]=\"state.selectAllChecked\"\n\t\t\t\t  [indeterminate]=\"state.selectAllIndeterminate\">\n\t\tSelect all\n\t</gui-checkbox>\n\n\t<div class=\"gui-unique-value-list-container gui-overflow-y-auto gui-overflow-x-hidden\">\n\t\t<div *ngFor=\"let value of state.uniqueValues\">\n\t\t\t<gui-checkbox (changed)=\"toggleSelect(value)\"\n\t\t\t\t\t\t  [checked]=\"value.isEnabled()\">\n\t\t\t\t{{value.getValue()}}\n\t\t\t</gui-checkbox>\n\t\t</div>\n\t</div>\n\n\t<div class=\"gui-unique-value-list-actions gui-px-4 gui-pb-4 gui-pt-2 gui-flex gui-justify-end\">\n\t\t<button (click)=\"clearFilters()\"\n\t\t\t\t[outline]=\"true\"\n\t\t\t\t[primary]=\"true\"\n\t\t\t\tclass=\"gui-clear-unique-filters gui-px-4 gui-py-2\"\n\t\t\t\tgui-button>\n\t\t\tClear\n\t\t</button>\n\t</div>\n</ng-container>\n", styles: [".gui-unique-value-list-container{max-height:300px}\n"], dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i6.FabricButtonComponent, selector: "button[gui-button], a[gui-button]", inputs: ["link", "text"] }, { kind: "component", type: i6.FabricCheckboxComponent, selector: "gui-checkbox", inputs: ["name", "checked", "disabled", "readonly", "indeterminate"], outputs: ["changed"] }, { kind: "directive", type: i7.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: UniqueValueListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-unique-value-list][fieldId]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<ng-container *guiLet=\"state$; let state\">\n\t<gui-checkbox (changed)=\"toggleAllSelect()\"\n\t\t\t\t  [checked]=\"state.selectAllChecked\"\n\t\t\t\t  [indeterminate]=\"state.selectAllIndeterminate\">\n\t\tSelect all\n\t</gui-checkbox>\n\n\t<div class=\"gui-unique-value-list-container gui-overflow-y-auto gui-overflow-x-hidden\">\n\t\t<div *ngFor=\"let value of state.uniqueValues\">\n\t\t\t<gui-checkbox (changed)=\"toggleSelect(value)\"\n\t\t\t\t\t\t  [checked]=\"value.isEnabled()\">\n\t\t\t\t{{value.getValue()}}\n\t\t\t</gui-checkbox>\n\t\t</div>\n\t</div>\n\n\t<div class=\"gui-unique-value-list-actions gui-px-4 gui-pb-4 gui-pt-2 gui-flex gui-justify-end\">\n\t\t<button (click)=\"clearFilters()\"\n\t\t\t\t[outline]=\"true\"\n\t\t\t\t[primary]=\"true\"\n\t\t\t\tclass=\"gui-clear-unique-filters gui-px-4 gui-py-2\"\n\t\t\t\tgui-button>\n\t\t\tClear\n\t\t</button>\n\t</div>\n</ng-container>\n", styles: [".gui-unique-value-list-container{max-height:300px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.GuiState }, { type: i2.StructureId }, { type: i3.FilterWarehouse }, { type: i4.FilterPublisher }]; }, propDecorators: { fieldId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXZhbHVlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1ncmlkL3NyYy9mZWF0dXJlL3N0cnVjdHVyZS9maWx0ZXIvc3JjL3VuaXF1ZS91bmlxdWUtdmFsdWUtbGlzdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2ZlYXR1cmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvdW5pcXVlL3VuaXF1ZS12YWx1ZS1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUFjLEtBQUssRUFBVSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwSSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFPbEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQW9CLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7Ozs7Ozs7QUEwQmxGLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxjQUFjO0lBVzNELFlBQVksaUJBQW9DLEVBQzdDLFVBQXNCLEVBQ0wsS0FBcUMsRUFDckMsV0FBd0IsRUFDeEIsZUFBZ0MsRUFDaEMsb0JBQXFDO1FBQ3hELEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUpsQixVQUFLLEdBQUwsS0FBSyxDQUFnQztRQUNyQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFpQjtRQVBoRCxXQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQVVyQyxJ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QUFDLFdBQVcsQ0FBQztpQkFDaEMsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLDBCQUFzRCxFQUFFLEVBQUU7Z0JBQ3BFLE9BQU8sMEJBQTBCLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0QsQ0FBQyxDQUFDLENBQ0YsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDUixDQUFDO0lBRU8sd0JBQXdCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDWCxNQUFNLENBQUMsU0FBUyxDQUFDO2FBQ2pCLElBQUksQ0FDSixlQUFlLENBQUMsQ0FBQyxPQUFnQixFQUFFLEVBQUU7WUFDcEMsT0FBTyxJQUFJLENBQUMsZUFBZTtpQkFDeEIsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7aUJBQ2hDLElBQUksQ0FDSixTQUFTLENBQUMsQ0FBQywwQkFBc0QsRUFBRSxFQUFFO2dCQUNwRSxPQUFPLDBCQUEwQixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxDQUFDLENBQUMsQ0FDRixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQ0YsQ0FBQztJQUNSLENBQUM7O3NIQXhHVyx3QkFBd0I7MEdBQXhCLHdCQUF3Qiw4RkFKekI7UUFDVixRQUFRO0tBQ1IsaURDbENGLHk0QkEwQkE7NEZEVWEsd0JBQXdCO2tCQVpwQyxTQUFTOytCQUNDLHFDQUFxQyxtQkFLOUIsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSSxhQUMxQjt3QkFDVixRQUFRO3FCQUNSOzhPQUtHLE9BQU87c0JBRFYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTbWFydENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnQvc3JjL3NtYXJ0LWNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWVsZElkIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29yZS9zdHJ1Y3R1cmUvZmllbGQvc3JjL2RvbWFpbi9maWVsZC9maWVsZC5pZCc7XG5pbXBvcnQgeyBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvYXBpL3VuaXF1ZS91bmlxdWUtdmFsdWUtY29sbGVjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvcmUvc3RydWN0dXJlL3N0cnVjdHVyZS1jb3JlL3NyYy9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJXYXJlaG91c2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL3N0cnVjdHVyZS9maWx0ZXIvc3JjL2FwaS9maWx0ZXIud2FyZWhvdXNlJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlTW9kZWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL3N0cnVjdHVyZS9maWx0ZXIvc3JjL2FwaS91bmlxdWUvdW5pcXVlLXZhbHVlLm1vZGVsJztcbmltcG9ydCB7IEZpbHRlclB1Ymxpc2hlciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvYXBpL2ZpbHRlci5wdWJsaXNoZXInO1xuaW1wb3J0IHsgR3VpU3RhdGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9mZWF0dXJlL2d1aS1hbmd1bGFyL3N0YXRlL2d1aS5zdGF0ZSc7XG5pbXBvcnQgeyBoZXJtZXNNYXAsIEhlcm1lc09ic2VydmFibGUsIGhlcm1lc1N3aXRjaE1hcCB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5pcXVlVmFsdWVMaXN0U3RhdGUge1xuXG5cdGZpZWxkSWQ6IEZpZWxkSWQ7XG5cblx0dW5pcXVlVmFsdWVzOiBBcnJheTxVbmlxdWVWYWx1ZU1vZGVsPjtcblxuXHRzZWxlY3RBbGxDaGVja2VkOiBib29sZWFuO1xuXG5cdHNlbGVjdEFsbEluZGV0ZXJtaW5hdGU6IGJvb2xlYW47XG5cbn1cblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnZGl2W2d1aS11bmlxdWUtdmFsdWUtbGlzdF1bZmllbGRJZF0nLFxuXHR0ZW1wbGF0ZVVybDogJy4vdW5pcXVlLXZhbHVlLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFtcblx0XHQnLi4vc3R5bGUvdW5pcXVlLXZhbHVlLWxpc3QuY29tcG9uZW50LnNjc3MnXG5cdF0sXG5cdGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuXHRlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuXHRwcm92aWRlcnM6IFtcblx0XHRHdWlTdGF0ZVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFVuaXF1ZVZhbHVlTGlzdENvbXBvbmVudCBleHRlbmRzIFNtYXJ0Q29tcG9uZW50IHtcblxuXHRASW5wdXQoKVxuXHRzZXQgZmllbGRJZChmaWVsZElkOiBGaWVsZElkKSB7XG5cdFx0dGhpcy5zdGF0ZS5zZXRWYWx1ZSh7XG5cdFx0XHRmaWVsZElkXG5cdFx0fSk7XG5cdH07XG5cblx0cmVhZG9ubHkgc3RhdGUkID0gdGhpcy5zdGF0ZS5zZWxlY3QoKTtcblxuXHRjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG5cdFx0XHRcdGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgc3RhdGU6IEd1aVN0YXRlPFVuaXF1ZVZhbHVlTGlzdFN0YXRlPixcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyV2FyZWhvdXNlOiBGaWx0ZXJXYXJlaG91c2UsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyQ29tbWFuZEludm9rZXI6IEZpbHRlclB1Ymxpc2hlcikge1xuXHRcdHN1cGVyKGNoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50UmVmKTtcblxuXHRcdHRoaXMuc3RhdGUuY29ubmVjdCgndW5pcXVlVmFsdWVzJywgdGhpcy5zZWxlY3RVbmlxdWVWYWx1ZXMoKSk7XG5cdFx0dGhpcy5zdGF0ZS5jb25uZWN0KCdzZWxlY3RBbGxDaGVja2VkJywgdGhpcy5pc1NlbGVjdEFsbENoZWNrZWQoKSk7XG5cdFx0dGhpcy5zdGF0ZS5jb25uZWN0KCdzZWxlY3RBbGxJbmRldGVybWluYXRlJywgdGhpcy5pc1NlbGVjdEFsbEluZGV0ZXJtaW5hdGUoKSk7XG5cdH1cblxuXHR0b2dnbGVBbGxTZWxlY3QoKTogdm9pZCB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRjb25zdCBmaWVsZElkID0gdGhpcy5zdGF0ZS5nZXRWYWx1ZSgnZmllbGRJZCcpIGFzIEZpZWxkSWQsXG5cdFx0XHRzZWxlY3RBbGxDaGVja2VkID0gdGhpcy5zdGF0ZS5nZXRWYWx1ZSgnc2VsZWN0QWxsQ2hlY2tlZCcpO1xuXG5cdFx0aWYgKHNlbGVjdEFsbENoZWNrZWQpIHtcblx0XHRcdHRoaXMuZmlsdGVyQ29tbWFuZEludm9rZXIudW5zZWxlY3RBbGxVbmlxdWVGaWx0ZXIoZmllbGRJZCwgdGhpcy5zdHJ1Y3R1cmVJZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZmlsdGVyQ29tbWFuZEludm9rZXIuc2VsZWN0QWxsVW5pcXVlRmlsdGVyKGZpZWxkSWQsIHRoaXMuc3RydWN0dXJlSWQpO1xuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZVNlbGVjdCh1bmlxdWVWYWx1ZU1vZGVsOiBVbmlxdWVWYWx1ZU1vZGVsKTogdm9pZCB7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRjb25zdCBmaWVsZElkOiBGaWVsZElkID0gdGhpcy5zdGF0ZS5nZXRWYWx1ZSgnZmllbGRJZCcpIGFzIEZpZWxkSWQ7XG5cblx0XHRpZiAodW5pcXVlVmFsdWVNb2RlbC5pc0VuYWJsZWQoKSkge1xuXHRcdFx0dGhpcy5maWx0ZXJDb21tYW5kSW52b2tlci51bnNlbGVjdFVuaXF1ZUZpbHRlcihmaWVsZElkLCB1bmlxdWVWYWx1ZU1vZGVsLmdldElkKCksIHRoaXMuc3RydWN0dXJlSWQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZpbHRlckNvbW1hbmRJbnZva2VyLnNlbGVjdFVuaXF1ZUZpbHRlcihmaWVsZElkLCB1bmlxdWVWYWx1ZU1vZGVsLmdldElkKCksIHRoaXMuc3RydWN0dXJlSWQpO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyRmlsdGVycygpOiB2b2lkIHtcblx0XHRjb25zdCBmaWVsZElkID0gdGhpcy5zdGF0ZS5nZXRWYWx1ZSgnZmllbGRJZCcpIGFzIEZpZWxkSWQ7XG5cdFx0dGhpcy5maWx0ZXJDb21tYW5kSW52b2tlci5zZWxlY3RBbGxVbmlxdWVGaWx0ZXIoZmllbGRJZCwgdGhpcy5zdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgZ2V0U2VsZWN0b3JOYW1lKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuICdndWktdW5pcXVlLXZhbHVlLWxpc3QnO1xuXHR9XG5cblx0cHJpdmF0ZSBzZWxlY3RVbmlxdWVWYWx1ZXMoKTogSGVybWVzT2JzZXJ2YWJsZTxBcnJheTxVbmlxdWVWYWx1ZU1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLnN0YXRlXG5cdFx0XHRcdCAgIC5zZWxlY3QoJ2ZpZWxkSWQnKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNTd2l0Y2hNYXAoKGZpZWxkSWQ6IEZpZWxkSWQpID0+IHtcblx0XHRcdFx0XHRcdCAgIHJldHVybiB0aGlzLmZpbHRlcldhcmVob3VzZVxuXHRcdFx0XHRcdFx0XHRcdFx0ICAub25VbmlxdWVWYWx1ZXModGhpcy5zdHJ1Y3R1cmVJZClcblx0XHRcdFx0XHRcdFx0XHRcdCAgLnBpcGUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgaGVybWVzTWFwKCh1bmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbDogVW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWwpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgIHJldHVybiB1bmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbC5nZXRWYWx1ZXMoZmllbGRJZCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgfSlcblx0XHRcdFx0XHRcdFx0XHRcdCAgKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0cHJpdmF0ZSBpc1NlbGVjdEFsbENoZWNrZWQoKTogSGVybWVzT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cdFx0cmV0dXJuIHRoaXMuc3RhdGVcblx0XHRcdFx0ICAgLnNlbGVjdCgnZmllbGRJZCcpXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc1N3aXRjaE1hcCgoZmllbGRJZDogRmllbGRJZCkgPT4ge1xuXHRcdFx0XHRcdFx0ICAgcmV0dXJuIHRoaXMuZmlsdGVyV2FyZWhvdXNlXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5vblVuaXF1ZVZhbHVlcyh0aGlzLnN0cnVjdHVyZUlkKVxuXHRcdFx0XHRcdFx0XHRcdFx0ICAucGlwZShcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICBoZXJtZXNNYXAoKHVuaXF1ZVZhbHVlQ29sbGVjdGlvbk1vZGVsOiBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25Nb2RlbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAgcmV0dXJuIHVuaXF1ZVZhbHVlQ29sbGVjdGlvbk1vZGVsLmlzU2VsZWN0QWxsQ2hlY2tlZChmaWVsZElkKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICB9KVxuXHRcdFx0XHRcdFx0XHRcdFx0ICApO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRwcml2YXRlIGlzU2VsZWN0QWxsSW5kZXRlcm1pbmF0ZSgpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZVxuXHRcdFx0XHQgICAuc2VsZWN0KCdmaWVsZElkJylcblx0XHRcdFx0ICAgLnBpcGUoXG5cdFx0XHRcdFx0ICAgaGVybWVzU3dpdGNoTWFwKChmaWVsZElkOiBGaWVsZElkKSA9PiB7XG5cdFx0XHRcdFx0XHQgICByZXR1cm4gdGhpcy5maWx0ZXJXYXJlaG91c2Vcblx0XHRcdFx0XHRcdFx0XHRcdCAgLm9uVW5pcXVlVmFsdWVzKHRoaXMuc3RydWN0dXJlSWQpXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5waXBlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIGhlcm1lc01hcCgodW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWw6IFVuaXF1ZVZhbHVlQ29sbGVjdGlvbk1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICByZXR1cm4gdW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWwuaXNJbmRldGVybWluYXRlKGZpZWxkSWQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIH0pXG5cdFx0XHRcdFx0XHRcdFx0XHQgICk7XG5cdFx0XHRcdFx0ICAgfSlcblx0XHRcdFx0ICAgKTtcblx0fVxuXG59XG4iLCI8bmctY29udGFpbmVyICpndWlMZXQ9XCJzdGF0ZSQ7IGxldCBzdGF0ZVwiPlxuXHQ8Z3VpLWNoZWNrYm94IChjaGFuZ2VkKT1cInRvZ2dsZUFsbFNlbGVjdCgpXCJcblx0XHRcdFx0ICBbY2hlY2tlZF09XCJzdGF0ZS5zZWxlY3RBbGxDaGVja2VkXCJcblx0XHRcdFx0ICBbaW5kZXRlcm1pbmF0ZV09XCJzdGF0ZS5zZWxlY3RBbGxJbmRldGVybWluYXRlXCI+XG5cdFx0U2VsZWN0IGFsbFxuXHQ8L2d1aS1jaGVja2JveD5cblxuXHQ8ZGl2IGNsYXNzPVwiZ3VpLXVuaXF1ZS12YWx1ZS1saXN0LWNvbnRhaW5lciBndWktb3ZlcmZsb3cteS1hdXRvIGd1aS1vdmVyZmxvdy14LWhpZGRlblwiPlxuXHRcdDxkaXYgKm5nRm9yPVwibGV0IHZhbHVlIG9mIHN0YXRlLnVuaXF1ZVZhbHVlc1wiPlxuXHRcdFx0PGd1aS1jaGVja2JveCAoY2hhbmdlZCk9XCJ0b2dnbGVTZWxlY3QodmFsdWUpXCJcblx0XHRcdFx0XHRcdCAgW2NoZWNrZWRdPVwidmFsdWUuaXNFbmFibGVkKClcIj5cblx0XHRcdFx0e3t2YWx1ZS5nZXRWYWx1ZSgpfX1cblx0XHRcdDwvZ3VpLWNoZWNrYm94PlxuXHRcdDwvZGl2PlxuXHQ8L2Rpdj5cblxuXHQ8ZGl2IGNsYXNzPVwiZ3VpLXVuaXF1ZS12YWx1ZS1saXN0LWFjdGlvbnMgZ3VpLXB4LTQgZ3VpLXBiLTQgZ3VpLXB0LTIgZ3VpLWZsZXggZ3VpLWp1c3RpZnktZW5kXCI+XG5cdFx0PGJ1dHRvbiAoY2xpY2spPVwiY2xlYXJGaWx0ZXJzKClcIlxuXHRcdFx0XHRbb3V0bGluZV09XCJ0cnVlXCJcblx0XHRcdFx0W3ByaW1hcnldPVwidHJ1ZVwiXG5cdFx0XHRcdGNsYXNzPVwiZ3VpLWNsZWFyLXVuaXF1ZS1maWx0ZXJzIGd1aS1weC00IGd1aS1weS0yXCJcblx0XHRcdFx0Z3VpLWJ1dHRvbj5cblx0XHRcdENsZWFyXG5cdFx0PC9idXR0b24+XG5cdDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=