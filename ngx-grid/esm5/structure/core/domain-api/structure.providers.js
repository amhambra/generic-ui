/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HermesModule } from '@generic-ui/hermes';
import { inMemoryStructureCommandProviders, inMemoryStructureProviders, inMemoryStructureReadProviders } from '../infrastructure/in-memory/in-memory.structure.providers';
import { SetVerticalScrollEnabledCommandHandler } from '../domain/vertical-formation/set-enabled/set-vertical-scroll-enabled.command-handler';
import { SetScrollPositionCommandHandler } from '../domain/vertical-formation/scroll-position/set-scroll-position.command-handler';
import { StructureSetSummariesEnabledCommandHandler } from '../domain/summaries/set/structure.set-summaries-enabled.command-handler';
import { VerticalFormationFactory } from '../domain/vertical-formation/vertical-formation.factory';
import { summariesProviders } from '../domain/summaries/summaries.providers';
import { FieldsInitedEventHandler } from '../../field/domain-api/read/fields-inited.event-handler';
import { VerticalFormationConverter } from './vertical-formation/vertical-formation.converter';
import { StructureSummariesCommandDispatcher } from './summaries/structure-summaries.command-dispatcher';
import { StructureSummariesUiEventsRepository } from './summaries/structure-summaries.ui-events-repository';
import { StructureCommandDispatcher } from './structure.command-dispatcher';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureAggregateFactory } from '../domain/structure.aggregate-factory';
import { StructureWarehouse } from './structure.warehouse';
import { VerticalFormationRepository } from './vertical-formation/vertical-formation.repository';
import { SetRowHeightCommandHandler } from '../domain/vertical-formation/set-row-height/set-row-height.command-handler';
import { StructureSetHeightCommandHandler } from '../domain/vertical-formation/container/set-height/structure-set-height.command-handler';
import { SetRowHeightBasedOnThemeCommandHandler } from '../domain/vertical-formation/set-row-height-theme/set-row-height-based-on-theme.command-handler';
import { StructureVerticalFormationWarehouse } from './vertical-formation/structure-vertical-formation.warehouse';
import { StructureSummariesWarehouse } from './summaries/structure-summaries.warehouse';
import { StructureSummariesRepository } from './summaries/enabled/structure.summaries.repository';
import { StructureCreatedEventHandler } from '../domain/create-structure/structure-created.event-handler';
import { StructureSummariesEnabledSetEventHandler } from './summaries/enabled/structure.summaries-enabled-set.event-handler';
/** @type {?} */
var commandProviders = tslib_1.__spread(inMemoryStructureCommandProviders, [
    VerticalFormationFactory
], summariesProviders);
/** @type {?} */
var readProviders = tslib_1.__spread(inMemoryStructureReadProviders, [
    VerticalFormationConverter,
    VerticalFormationRepository,
    StructureSummariesRepository,
    StructureSummariesWarehouse
]);
/** @type {?} */
export var structureCommandHandlers = tslib_1.__spread(HermesModule.registerCommandHandler(SetVerticalScrollEnabledCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(SetRowHeightBasedOnThemeCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(SetScrollPositionCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(StructureSetSummariesEnabledCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(SetRowHeightCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(StructureSetHeightCommandHandler, 'StructureAggregate'));
/** @type {?} */
export var structureDomainEventHandlers = tslib_1.__spread(HermesModule.registerDomainEventHandler(StructureSummariesEnabledSetEventHandler), HermesModule.registerDomainEventHandler(StructureCreatedEventHandler), HermesModule.registerDomainEventHandler(FieldsInitedEventHandler));
/** @type {?} */
export var structureProviders = tslib_1.__spread(inMemoryStructureProviders, commandProviders, readProviders, [
    StructureSummariesCommandDispatcher,
    StructureSummariesUiEventsRepository,
    StructureAggregateFactory,
    StructureReadModelRootConverter,
    StructureVerticalFormationWarehouse,
    StructureWarehouse,
    StructureCommandDispatcher
]);
//# sourceMappingURL=data:application/json;base64,