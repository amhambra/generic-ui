/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HermesModule } from '@generic-ui/hermes';
import { PagingDispatcher } from '../../domain/paging/paging.dispatcher';
import { SetPagingCommandHandler } from '../../domain/paging/set/set-paging.command-handler';
import { NextPageCommandHandler } from '../../domain/paging/next-page/next-page.command-handler';
import { PrevPageCommandHandler } from '../../domain/paging/prev-page/prev-page.command-handler';
import { ChangePagesizeCommandHandler } from '../../domain/paging/change-pagesize/change-pagesize.command-handler';
import { PagingRepository } from './read/paging.repository';
import { PagingManagerFactory } from '../../domain/paging/paging.manager-factory';
import { PagingConverter } from './read/paging.converter';
import { StructurePagingCommandDispatcher } from './structure-paging.command-dispatcher';
import { StructurePagingWarehouse } from './structure-paging.warehouse';
import { StructurePagingEventRepository } from './structure-paging.event-repository';
/** @type {?} */
var commandProviders = [
    PagingDispatcher
];
/** @type {?} */
var readProviders = [
    PagingRepository
];
/** @type {?} */
export var pagingCommandHandlers = tslib_1.__spread(HermesModule.registerCommandHandler(SetPagingCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(NextPageCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(PrevPageCommandHandler, 'StructureAggregate'), HermesModule.registerCommandHandler(ChangePagesizeCommandHandler, 'StructureAggregate'));
/** @type {?} */
export var pagingProviders = tslib_1.__spread(commandProviders, readProviders, [
    PagingManagerFactory,
    PagingConverter,
    StructurePagingCommandDispatcher,
    StructurePagingWarehouse,
    StructurePagingEventRepository
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1ncmlkLyIsInNvdXJjZXMiOlsibGliL3N0cnVjdHVyZS9mZWF0dXJlLWFwaS9wYWdpbmcvcGFnaW5nLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxxRUFBcUUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDekYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7O0lBRy9FLGdCQUFnQixHQUFHO0lBQ3hCLGdCQUFnQjtDQUNoQjs7SUFFSyxhQUFhLEdBQUc7SUFDckIsZ0JBQWdCO0NBQ2hCOztBQUVELE1BQU0sS0FBTyxxQkFBcUIsb0JBQzlCLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyx1QkFBdUIsRUFBRSxvQkFBb0IsQ0FBQyxFQUNsRixZQUFZLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLEVBQUUsb0JBQW9CLENBQUMsRUFDakYsWUFBWSxDQUFDLHNCQUFzQixDQUFDLHNCQUFzQixFQUFFLG9CQUFvQixDQUFDLEVBQ2pGLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyw0QkFBNEIsRUFBRSxvQkFBb0IsQ0FBQyxDQUMxRjs7QUFFRCxNQUFNLEtBQU8sZUFBZSxvQkFDeEIsZ0JBQWdCLEVBQ2hCLGFBQWE7SUFFaEIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFFZixnQ0FBZ0M7SUFDaEMsd0JBQXdCO0lBQ3hCLDhCQUE4QjtFQUM5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhlcm1lc01vZHVsZSB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmltcG9ydCB7IFBhZ2luZ0Rpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL3BhZ2luZy5kaXNwYXRjaGVyJztcbmltcG9ydCB7IFNldFBhZ2luZ0NvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3BhZ2luZy9zZXQvc2V0LXBhZ2luZy5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgTmV4dFBhZ2VDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvbmV4dC1wYWdlL25leHQtcGFnZS5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgUHJldlBhZ2VDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvcHJldi1wYWdlL3ByZXYtcGFnZS5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgQ2hhbmdlUGFnZXNpemVDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvY2hhbmdlLXBhZ2VzaXplL2NoYW5nZS1wYWdlc2l6ZS5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgUGFnaW5nUmVwb3NpdG9yeSB9IGZyb20gJy4vcmVhZC9wYWdpbmcucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBQYWdpbmdNYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvcGFnaW5nLm1hbmFnZXItZmFjdG9yeSc7XG5pbXBvcnQgeyBQYWdpbmdDb252ZXJ0ZXIgfSBmcm9tICcuL3JlYWQvcGFnaW5nLmNvbnZlcnRlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVQYWdpbmdDb21tYW5kRGlzcGF0Y2hlciB9IGZyb20gJy4vc3RydWN0dXJlLXBhZ2luZy5jb21tYW5kLWRpc3BhdGNoZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlUGFnaW5nV2FyZWhvdXNlIH0gZnJvbSAnLi9zdHJ1Y3R1cmUtcGFnaW5nLndhcmVob3VzZSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVQYWdpbmdFdmVudFJlcG9zaXRvcnkgfSBmcm9tICcuL3N0cnVjdHVyZS1wYWdpbmcuZXZlbnQtcmVwb3NpdG9yeSc7XG5cblxuY29uc3QgY29tbWFuZFByb3ZpZGVycyA9IFtcblx0UGFnaW5nRGlzcGF0Y2hlclxuXTtcblxuY29uc3QgcmVhZFByb3ZpZGVycyA9IFtcblx0UGFnaW5nUmVwb3NpdG9yeVxuXTtcblxuZXhwb3J0IGNvbnN0IHBhZ2luZ0NvbW1hbmRIYW5kbGVycyA9IFtcblx0Li4uSGVybWVzTW9kdWxlLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoU2V0UGFnaW5nQ29tbWFuZEhhbmRsZXIsICdTdHJ1Y3R1cmVBZ2dyZWdhdGUnKSxcblx0Li4uSGVybWVzTW9kdWxlLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoTmV4dFBhZ2VDb21tYW5kSGFuZGxlciwgJ1N0cnVjdHVyZUFnZ3JlZ2F0ZScpLFxuXHQuLi5IZXJtZXNNb2R1bGUucmVnaXN0ZXJDb21tYW5kSGFuZGxlcihQcmV2UGFnZUNvbW1hbmRIYW5kbGVyLCAnU3RydWN0dXJlQWdncmVnYXRlJyksXG5cdC4uLkhlcm1lc01vZHVsZS5yZWdpc3RlckNvbW1hbmRIYW5kbGVyKENoYW5nZVBhZ2VzaXplQ29tbWFuZEhhbmRsZXIsICdTdHJ1Y3R1cmVBZ2dyZWdhdGUnKVxuXTtcblxuZXhwb3J0IGNvbnN0IHBhZ2luZ1Byb3ZpZGVycyA9IFtcblx0Li4uY29tbWFuZFByb3ZpZGVycyxcblx0Li4ucmVhZFByb3ZpZGVycyxcblxuXHRQYWdpbmdNYW5hZ2VyRmFjdG9yeSxcblx0UGFnaW5nQ29udmVydGVyLFxuXG5cdFN0cnVjdHVyZVBhZ2luZ0NvbW1hbmREaXNwYXRjaGVyLFxuXHRTdHJ1Y3R1cmVQYWdpbmdXYXJlaG91c2UsXG5cdFN0cnVjdHVyZVBhZ2luZ0V2ZW50UmVwb3NpdG9yeVxuXTtcbiJdfQ==