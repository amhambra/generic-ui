/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { COMMAND_HANDLERS, DOMAIN_EVENT_HANDLERS } from '@generic-ui/hermes';
import { SourceDispatcher } from '../../domain/source/command/source.dispatcher';
import { SourceCoordinatorFactory } from '../../domain/source/command/source-coordinator.factory';
import { SetOriginCommandHandler } from '../../domain/source/command/origin/set-origin/set-origin.command-handler';
import { StructureEditSourceItemCommandHandler } from '../../domain/source/command/origin/edit/structure.edit-source-item.command-handler';
import { StructureSourceDomainEventPublisher } from '../../domain/source/command/structure.source.domain-event.publisher';
import { StructureOriginChangedEventHandler } from '../../domain/source/query/origin/structure.origin-changed.event-handler';
import { SourceConverter } from '../../domain/source/source.converter';
import { SourceCommandService } from './source-command.service';
import { SourceQueryService } from './source-query.service';
import { SourceEventService } from './event/source-event.service';
import { SourceRepository } from '../../domain/source/query/source.repository';
import { StructureSourceOriginRepository } from '../../domain/source/query/origin/structure.source-origin.repository';
import { SourceSetLoadingCommandHandler } from '../../domain/source/command/loading/source-set-loading.command-handler';
/** @type {?} */
var commandProviders = [
    SourceDispatcher,
    SourceCoordinatorFactory,
    {
        provide: COMMAND_HANDLERS,
        useClass: SourceSetLoadingCommandHandler,
        multi: true
    }, {
        provide: COMMAND_HANDLERS,
        useClass: SetOriginCommandHandler,
        multi: true
    }, {
        provide: COMMAND_HANDLERS,
        useClass: StructureEditSourceItemCommandHandler,
        multi: true
    },
    StructureSourceDomainEventPublisher
];
/** @type {?} */
var queryProviders = [
    SourceRepository,
    {
        provide: DOMAIN_EVENT_HANDLERS,
        useClass: StructureOriginChangedEventHandler,
        multi: true
    },
    StructureSourceOriginRepository
];
/** @type {?} */
export var sourceProviders = tslib_1.__spread(commandProviders, queryProviders, [
    SourceConverter,
    SourceCommandService,
    SourceQueryService,
    SourceEventService
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1ncmlkLyIsInNvdXJjZXMiOlsibGliL3N0cnVjdHVyZS9hcHAvc291cmNlL3NvdXJjZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNsRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUNuSCxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxvRkFBb0YsQ0FBQztBQUMzSSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxxRUFBcUUsQ0FBQztBQUMxSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx5RUFBeUUsQ0FBQztBQUM3SCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDL0UsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0scUVBQXFFLENBQUM7QUFDdEgsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sd0VBQXdFLENBQUM7O0lBR2xILGdCQUFnQixHQUFHO0lBQ3hCLGdCQUFnQjtJQUNoQix3QkFBd0I7SUFDeEI7UUFDQyxPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFFBQVEsRUFBRSw4QkFBOEI7UUFDeEMsS0FBSyxFQUFFLElBQUk7S0FDWCxFQUFFO1FBQ0YsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDLEtBQUssRUFBRSxJQUFJO0tBQ1gsRUFBRTtRQUNGLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsUUFBUSxFQUFFLHFDQUFxQztRQUMvQyxLQUFLLEVBQUUsSUFBSTtLQUNYO0lBQ0QsbUNBQW1DO0NBQ25DOztJQUVLLGNBQWMsR0FBRztJQUN0QixnQkFBZ0I7SUFDaEI7UUFDQyxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLFFBQVEsRUFBRSxrQ0FBa0M7UUFDNUMsS0FBSyxFQUFFLElBQUk7S0FDWDtJQUNELCtCQUErQjtDQUMvQjs7QUFFRCxNQUFNLEtBQU8sZUFBZSxvQkFDeEIsZ0JBQWdCLEVBQ2hCLGNBQWM7SUFFakIsZUFBZTtJQUVmLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsa0JBQWtCO0VBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09NTUFORF9IQU5ETEVSUywgRE9NQUlOX0VWRU5UX0hBTkRMRVJTIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IFNvdXJjZURpc3BhdGNoZXIgfSBmcm9tICcuLi8uLi9kb21haW4vc291cmNlL2NvbW1hbmQvc291cmNlLmRpc3BhdGNoZXInO1xuaW1wb3J0IHsgU291cmNlQ29vcmRpbmF0b3JGYWN0b3J5IH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9jb21tYW5kL3NvdXJjZS1jb29yZGluYXRvci5mYWN0b3J5JztcbmltcG9ydCB7IFNldE9yaWdpbkNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9jb21tYW5kL29yaWdpbi9zZXQtb3JpZ2luL3NldC1vcmlnaW4uY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZUVkaXRTb3VyY2VJdGVtQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vc291cmNlL2NvbW1hbmQvb3JpZ2luL2VkaXQvc3RydWN0dXJlLmVkaXQtc291cmNlLWl0ZW0uY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZVNvdXJjZURvbWFpbkV2ZW50UHVibGlzaGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9jb21tYW5kL3N0cnVjdHVyZS5zb3VyY2UuZG9tYWluLWV2ZW50LnB1Ymxpc2hlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVPcmlnaW5DaGFuZ2VkRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9xdWVyeS9vcmlnaW4vc3RydWN0dXJlLm9yaWdpbi1jaGFuZ2VkLmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgU291cmNlQ29udmVydGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9zb3VyY2UuY29udmVydGVyJztcbmltcG9ydCB7IFNvdXJjZUNvbW1hbmRTZXJ2aWNlIH0gZnJvbSAnLi9zb3VyY2UtY29tbWFuZC5zZXJ2aWNlJztcbmltcG9ydCB7IFNvdXJjZVF1ZXJ5U2VydmljZSB9IGZyb20gJy4vc291cmNlLXF1ZXJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgU291cmNlRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9ldmVudC9zb3VyY2UtZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBTb3VyY2VSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9xdWVyeS9zb3VyY2UucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVTb3VyY2VPcmlnaW5SZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vZG9tYWluL3NvdXJjZS9xdWVyeS9vcmlnaW4vc3RydWN0dXJlLnNvdXJjZS1vcmlnaW4ucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBTb3VyY2VTZXRMb2FkaW5nQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vc291cmNlL2NvbW1hbmQvbG9hZGluZy9zb3VyY2Utc2V0LWxvYWRpbmcuY29tbWFuZC1oYW5kbGVyJztcblxuXG5jb25zdCBjb21tYW5kUHJvdmlkZXJzID0gW1xuXHRTb3VyY2VEaXNwYXRjaGVyLFxuXHRTb3VyY2VDb29yZGluYXRvckZhY3RvcnksXG5cdHtcblx0XHRwcm92aWRlOiBDT01NQU5EX0hBTkRMRVJTLFxuXHRcdHVzZUNsYXNzOiBTb3VyY2VTZXRMb2FkaW5nQ29tbWFuZEhhbmRsZXIsXG5cdFx0bXVsdGk6IHRydWVcblx0fSwge1xuXHRcdHByb3ZpZGU6IENPTU1BTkRfSEFORExFUlMsXG5cdFx0dXNlQ2xhc3M6IFNldE9yaWdpbkNvbW1hbmRIYW5kbGVyLFxuXHRcdG11bHRpOiB0cnVlXG5cdH0sIHtcblx0XHRwcm92aWRlOiBDT01NQU5EX0hBTkRMRVJTLFxuXHRcdHVzZUNsYXNzOiBTdHJ1Y3R1cmVFZGl0U291cmNlSXRlbUNvbW1hbmRIYW5kbGVyLFxuXHRcdG11bHRpOiB0cnVlXG5cdH0sXG5cdFN0cnVjdHVyZVNvdXJjZURvbWFpbkV2ZW50UHVibGlzaGVyXG5dO1xuXG5jb25zdCBxdWVyeVByb3ZpZGVycyA9IFtcblx0U291cmNlUmVwb3NpdG9yeSxcblx0e1xuXHRcdHByb3ZpZGU6IERPTUFJTl9FVkVOVF9IQU5ETEVSUyxcblx0XHR1c2VDbGFzczogU3RydWN0dXJlT3JpZ2luQ2hhbmdlZEV2ZW50SGFuZGxlcixcblx0XHRtdWx0aTogdHJ1ZVxuXHR9LFxuXHRTdHJ1Y3R1cmVTb3VyY2VPcmlnaW5SZXBvc2l0b3J5XG5dO1xuXG5leHBvcnQgY29uc3Qgc291cmNlUHJvdmlkZXJzID0gW1xuXHQuLi5jb21tYW5kUHJvdmlkZXJzLFxuXHQuLi5xdWVyeVByb3ZpZGVycyxcblxuXHRTb3VyY2VDb252ZXJ0ZXIsXG5cblx0U291cmNlQ29tbWFuZFNlcnZpY2UsXG5cdFNvdXJjZVF1ZXJ5U2VydmljZSxcblx0U291cmNlRXZlbnRTZXJ2aWNlXG5dO1xuIl19