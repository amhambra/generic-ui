/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, NgModule, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FabricModule } from '@generic-ui/fabric';
import { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, HermesModule } from '@generic-ui/hermes';
import { fabricImports } from '../ui/structure-fabric.imports';
import { StructurePagingModule } from '../ui/paging/structure-paging.module';
import { StructureInfoPanelModule } from '../ui/panel/info/structure.info-panel.module';
import { CompositionModule } from '../../composition/ui-api/composition.module';
import { StructureComponent } from '../ui/structure.component';
import { StructureHeaderComponent } from '../ui/header/structure-header.component';
import { StructureHeaderColumnsComponent } from '../ui/header/columns/structure-header-columns.component';
import { StructureHeaderFiltersComponent } from '../ui/header/filters/structure-header-filters.component';
import { StructureHeaderFilterComponent } from '../ui/header/filters/structure.header-filter.component';
import { StructureContentComponent } from '../ui/content/structure-content.component';
import { StructureRowComponent } from '../ui/content/row/structure-row.component';
import { StructureCellComponent } from '../ui/content/cell/structure.cell.component';
import { StructureContainerComponent } from '../ui/content/structure-container.component';
import { StructureQuickFiltersComponent } from '../ui/header/quick-filters/structure.quick-filters.component';
import { StructureBlueprintComponent } from '../ui/blueprint/structure.blueprint.component';
import { StructureColumnConfigComponent } from '../ui/header/menu/structure.column-config.component';
import { STRUCTURE_CSS_CLASS_NAME } from './structure/structure-tokens';
import { StructureDefinition } from '../ui/structure-definition';
import { SourceReadModelService } from './source/source-read-model.service';
import { StructureIdGenerator } from '../ui/structure-id.generator';
import { structureCommandHandlers, structureProviders } from './structure/structure.providers';
import { LoggerModule } from '../../../common/cdk/logger/logger.module';
import { ItemEntityFactory } from '../domain/source/item.entity-factory';
import { StructureTopPanelModule } from '../ui/panel/top/structure.top-panel.module';
import { StructureEmptySourceComponent } from '../ui/content/empty-source/structure-empty-source.component';
import { StructureColumnMenuModule } from '../ui/header/menu/structure.column-menu.module';
import { StructureAggregationPanelModule } from '../ui/panel/aggregation/structure.aggregation-panel.module';
import { StructureColumnManagerModule } from '../ui/column-manager/structure.column-manager.module';
import { StructureAggregateFactory } from '../domain/structure/command/structure.aggregate-factory';
import { InMemoryStructureAggregateRepository } from '../infrastructure/in-memory/structure/commad/in-memory.structure-aggregate.repository';
import { CreateStructureCommandHandler } from '../domain/structure/command/create-structure/create-structure-command-handler.service';
import { formationCommandHandlers } from './formation/formation.providers';
import { pagingCommandHandlers } from './paging/paging.providers';
import { schemaCommandHandlers } from './schema/schema.providers';
import { sourceCommandHandlers } from './source/source.providers';
import { StructureCellEditComponent } from '../ui/content/cell/edit/structure.cell-edit.component';
/**
 * @return {?}
 */
export function createStructureDefinition() {
    return new StructureDefinition.DefaultBuilder().build();
}
/** @type {?} */
export var structureKey = 'StructureAggregate';
/** @type {?} */
var imports = tslib_1.__spread([
    CommonModule,
    ReactiveFormsModule,
    HermesModule,
    HermesModule.defineAggregate(structureKey, StructureAggregateFactory, InMemoryStructureAggregateRepository, CreateStructureCommandHandler, tslib_1.__spread(formationCommandHandlers, pagingCommandHandlers, schemaCommandHandlers, sourceCommandHandlers, structureCommandHandlers))
], fabricImports, [
    StructurePagingModule,
    StructureInfoPanelModule,
    StructureAggregationPanelModule,
    StructureTopPanelModule,
    StructureColumnMenuModule,
    StructureColumnManagerModule,
    CompositionModule,
    LoggerModule
]);
/** @type {?} */
var declarations = [
    StructureComponent,
    StructureHeaderComponent,
    StructureHeaderColumnsComponent,
    StructureHeaderFiltersComponent,
    StructureHeaderFilterComponent,
    StructureContentComponent,
    StructureRowComponent,
    StructureCellComponent,
    StructureCellEditComponent,
    StructureContainerComponent,
    StructureEmptySourceComponent,
    StructureQuickFiltersComponent,
    StructureBlueprintComponent
];
/** @type {?} */
var entryComponents = [
    StructureColumnConfigComponent
];
/** @type {?} */
var providers = tslib_1.__spread([
    {
        provide: STRUCTURE_CSS_CLASS_NAME,
        useValue: 'structure'
    },
    {
        provide: StructureDefinition,
        useFactory: createStructureDefinition
    },
    ItemEntityFactory,
    SourceReadModelService,
    StructureIdGenerator
], structureProviders);
/** @type {?} */
var exportDeclarations = tslib_1.__spread([
    FabricModule,
    StructureComponent,
    StructureHeaderComponent,
    StructureContentComponent,
    StructureRowComponent,
    StructureContainerComponent
], fabricImports, [
    StructurePagingModule
]);
var StructureModule = /** @class */ (function () {
    function StructureModule(platformId) {
        this.platformId = platformId;
        if (isPlatformBrowser(this.platformId)) {
            window['hermesApi'].loggers = false;
        }
    }
    /**
     * @param {?=} structureConfig
     * @return {?}
     */
    StructureModule.withConfig = /**
     * @param {?=} structureConfig
     * @return {?}
     */
    function (structureConfig) {
        if (structureConfig === void 0) { structureConfig = { cssClassName: '', hermesModuleConfig: { loggers: false } }; }
        return {
            ngModule: StructureModule,
            providers: tslib_1.__spread([
                {
                    provide: STRUCTURE_CSS_CLASS_NAME,
                    useValue: structureConfig.cssClassName
                },
                { provide: COMMAND_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },
                { provide: EVENT_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers }
            ], providers)
        };
    };
    StructureModule.exportDeclarations = tslib_1.__spread(exportDeclarations);
    StructureModule.decorators = [
        { type: NgModule, args: [{
                    imports: imports,
                    declarations: declarations,
                    exports: exportDeclarations,
                    entryComponents: entryComponents
                },] }
    ];
    /** @nocollapse */
    StructureModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return StructureModule;
}());
export { StructureModule };
if (false) {
    /** @type {?} */
    StructureModule.exportDeclarations;
    /**
     * @type {?}
     * @private
     */
    StructureModule.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,