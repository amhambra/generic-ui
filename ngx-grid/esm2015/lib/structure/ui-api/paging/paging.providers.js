/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HermesModule } from '@generic-ui/hermes';
import { PagingDispatcher } from '../../domain/paging/command/paging.dispatcher';
import { SetPagingCommandHandler } from '../../domain/paging/command/set/set-paging.command-handler';
import { NextPageCommandHandler } from '../../domain/paging/command/next-page/next-page.command-handler';
import { PrevPageCommandHandler } from '../../domain/paging/command/prev-page/prev-page.command-handler';
import { ChangePagesizeCommandHandler } from '../../domain/paging/command/change-pagesize/change-pagesize.command-handler';
import { PagingRepository } from '../../domain/paging/read/paging.repository';
import { PagingAggregateFactory } from '../../domain/paging/command/paging.aggregate-factory';
import { PagingConverter } from '../../domain/paging/paging.converter';
import { PagingCommandService } from './paging-command.service';
import { PagingReadModelService } from './paging-read-model.service';
import { PagingEventService } from './paging-event.service';
/** @type {?} */
const commandProviders = [
    PagingDispatcher
];
/** @type {?} */
const readProviders = [
    PagingRepository
];
/** @type {?} */
export const pagingCommandHandlers = [
    ...HermesModule.registerCommandHandler(SetPagingCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(NextPageCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(PrevPageCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(ChangePagesizeCommandHandler, 'StructureAggregate')
];
/** @type {?} */
export const pagingProviders = [
    ...commandProviders,
    ...readProviders,
    PagingAggregateFactory,
    PagingConverter,
    PagingCommandService,
    PagingReadModelService,
    PagingEventService
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1ncmlkLyIsInNvdXJjZXMiOlsibGliL3N0cnVjdHVyZS91aS1hcGkvcGFnaW5nL3BhZ2luZy5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw2RUFBNkUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O01BR3RELGdCQUFnQixHQUFHO0lBQ3hCLGdCQUFnQjtDQUNoQjs7TUFFSyxhQUFhLEdBQUc7SUFDckIsZ0JBQWdCO0NBQ2hCOztBQUVELE1BQU0sT0FBTyxxQkFBcUIsR0FBRztJQUNwQyxHQUFHLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyx1QkFBdUIsRUFBRSxvQkFBb0IsQ0FBQztJQUNyRixHQUFHLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxzQkFBc0IsRUFBRSxvQkFBb0IsQ0FBQztJQUNwRixHQUFHLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxzQkFBc0IsRUFBRSxvQkFBb0IsQ0FBQztJQUNwRixHQUFHLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyw0QkFBNEIsRUFBRSxvQkFBb0IsQ0FBQztDQUMxRjs7QUFFRCxNQUFNLE9BQU8sZUFBZSxHQUFHO0lBQzlCLEdBQUcsZ0JBQWdCO0lBQ25CLEdBQUcsYUFBYTtJQUVoQixzQkFBc0I7SUFDdEIsZUFBZTtJQUVmLG9CQUFvQjtJQUNwQixzQkFBc0I7SUFDdEIsa0JBQWtCO0NBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVybWVzTW9kdWxlIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcblxuaW1wb3J0IHsgUGFnaW5nRGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvY29tbWFuZC9wYWdpbmcuZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBTZXRQYWdpbmdDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvY29tbWFuZC9zZXQvc2V0LXBhZ2luZy5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgTmV4dFBhZ2VDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvY29tbWFuZC9uZXh0LXBhZ2UvbmV4dC1wYWdlLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBQcmV2UGFnZUNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3BhZ2luZy9jb21tYW5kL3ByZXYtcGFnZS9wcmV2LXBhZ2UuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IENoYW5nZVBhZ2VzaXplQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL2NvbW1hbmQvY2hhbmdlLXBhZ2VzaXplL2NoYW5nZS1wYWdlc2l6ZS5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgUGFnaW5nUmVwb3NpdG9yeSB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvcmVhZC9wYWdpbmcucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBQYWdpbmdBZ2dyZWdhdGVGYWN0b3J5IH0gZnJvbSAnLi4vLi4vZG9tYWluL3BhZ2luZy9jb21tYW5kL3BhZ2luZy5hZ2dyZWdhdGUtZmFjdG9yeSc7XG5pbXBvcnQgeyBQYWdpbmdDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL3BhZ2luZy5jb252ZXJ0ZXInO1xuaW1wb3J0IHsgUGFnaW5nQ29tbWFuZFNlcnZpY2UgfSBmcm9tICcuL3BhZ2luZy1jb21tYW5kLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnaW5nUmVhZE1vZGVsU2VydmljZSB9IGZyb20gJy4vcGFnaW5nLXJlYWQtbW9kZWwuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdpbmdFdmVudFNlcnZpY2UgfSBmcm9tICcuL3BhZ2luZy1ldmVudC5zZXJ2aWNlJztcblxuXG5jb25zdCBjb21tYW5kUHJvdmlkZXJzID0gW1xuXHRQYWdpbmdEaXNwYXRjaGVyXG5dO1xuXG5jb25zdCByZWFkUHJvdmlkZXJzID0gW1xuXHRQYWdpbmdSZXBvc2l0b3J5XG5dO1xuXG5leHBvcnQgY29uc3QgcGFnaW5nQ29tbWFuZEhhbmRsZXJzID0gW1xuXHQuLi5IZXJtZXNNb2R1bGUucmVnaXN0ZXJDb21tYW5kSGFuZGxlcihTZXRQYWdpbmdDb21tYW5kSGFuZGxlciwgJ1N0cnVjdHVyZUFnZ3JlZ2F0ZScpLFxuXHQuLi5IZXJtZXNNb2R1bGUucmVnaXN0ZXJDb21tYW5kSGFuZGxlcihOZXh0UGFnZUNvbW1hbmRIYW5kbGVyLCAnU3RydWN0dXJlQWdncmVnYXRlJyksXG5cdC4uLkhlcm1lc01vZHVsZS5yZWdpc3RlckNvbW1hbmRIYW5kbGVyKFByZXZQYWdlQ29tbWFuZEhhbmRsZXIsICdTdHJ1Y3R1cmVBZ2dyZWdhdGUnKSxcblx0Li4uSGVybWVzTW9kdWxlLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoQ2hhbmdlUGFnZXNpemVDb21tYW5kSGFuZGxlciwgJ1N0cnVjdHVyZUFnZ3JlZ2F0ZScpXG5dO1xuXG5leHBvcnQgY29uc3QgcGFnaW5nUHJvdmlkZXJzID0gW1xuXHQuLi5jb21tYW5kUHJvdmlkZXJzLFxuXHQuLi5yZWFkUHJvdmlkZXJzLFxuXG5cdFBhZ2luZ0FnZ3JlZ2F0ZUZhY3RvcnksXG5cdFBhZ2luZ0NvbnZlcnRlcixcblxuXHRQYWdpbmdDb21tYW5kU2VydmljZSxcblx0UGFnaW5nUmVhZE1vZGVsU2VydmljZSxcblx0UGFnaW5nRXZlbnRTZXJ2aWNlXG5dO1xuIl19