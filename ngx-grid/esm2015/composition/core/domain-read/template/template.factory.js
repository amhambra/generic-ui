import { Injector } from '@angular/core';
export class TemplateFactory {
    constructor(templatesComponentDefinition, componentFactoryResolver) {
        this.templatesComponentDefinition = templatesComponentDefinition;
        this.componentFactoryResolver = componentFactoryResolver;
        this.templates = new Map();
        this.templatesComponent = null;
        this.createTemplatesComponent();
    }
    getTemplates() {
        return this.templates;
    }
    destroy() {
        if (this.templatesComponent) {
            this.templatesComponent.destroy();
            this.templatesComponent = null;
        }
    }
    createTemplatesComponent() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.templatesComponentDefinition);
        const injector = Injector.create({ providers: [] });
        this.templatesComponent = componentFactory.create(injector);
        this.generateMap();
    }
    generateMap() {
        this.generateMapKeys()
            .forEach((type) => {
            this.findAndSetTemplate(type);
        });
    }
    ;
    findAndSetTemplate(dt) {
        const template = this.templatesComponent.instance.getTemplate(dt);
        this.templates.set(dt, template);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtZ3JpZC9zcmMvY29tcG9zaXRpb24vY29yZS9kb21haW4tcmVhZC90ZW1wbGF0ZS90ZW1wbGF0ZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBMEMsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQU1wRyxNQUFNLE9BQWdCLGVBQWU7SUFNcEMsWUFBdUMsNEJBQXFDLEVBQ3BELHdCQUFrRDtRQURuQyxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQVM7UUFDcEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUxsRSxjQUFTLEdBQStDLElBQUksR0FBRyxFQUF5QyxDQUFDO1FBRXpHLHVCQUFrQixHQUFvQixJQUFJLENBQUM7UUFJbEQsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUlELFlBQVk7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU87UUFDTixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFFTyx3QkFBd0I7UUFFL0IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFbEgsTUFBTSxRQUFRLEdBQWEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTyxXQUFXO1FBQ2xCLElBQUksQ0FBQyxlQUFlLEVBQUU7YUFDcEIsT0FBTyxDQUFDLENBQUMsSUFBeUIsRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0lBRU0sa0JBQWtCLENBQUMsRUFBdUI7UUFFakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBJbmplY3RvciwgVGVtcGxhdGVSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbXBsYXRlc0NvbXBvbmVudCB9IGZyb20gJy4vdGVtcGxhdGVzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL3N0cnVjdHVyZS9maWVsZC9jb3JlL2RvbWFpbi9maWVsZC9kYXRhL2RhdGEtdHlwZSc7XG5pbXBvcnQgeyBDZWxsVmlldyB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb2x1bW4vY2VsbC12aWV3JztcblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGVtcGxhdGVGYWN0b3J5PFQgZXh0ZW5kcyBUZW1wbGF0ZXNDb21wb25lbnQ+IHtcblxuXHRwcml2YXRlIHRlbXBsYXRlczogTWFwPERhdGFUeXBlIHwgQ2VsbFZpZXcsIFRlbXBsYXRlUmVmPGFueT4+ID0gbmV3IE1hcDxEYXRhVHlwZSB8IENlbGxWaWV3LCBUZW1wbGF0ZVJlZjxhbnk+PigpO1xuXG5cdHByaXZhdGUgdGVtcGxhdGVzQ29tcG9uZW50OiBDb21wb25lbnRSZWY8VD4gPSBudWxsO1xuXG5cdHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHRlbXBsYXRlc0NvbXBvbmVudERlZmluaXRpb246IFR5cGU8VD4sXG5cdFx0XHRcdFx0XHQgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHtcblx0XHR0aGlzLmNyZWF0ZVRlbXBsYXRlc0NvbXBvbmVudCgpO1xuXHR9XG5cblx0YWJzdHJhY3QgZ2VuZXJhdGVNYXBLZXlzKCk6IEFycmF5PERhdGFUeXBlIHwgQ2VsbFZpZXc+O1xuXG5cdGdldFRlbXBsYXRlcygpOiBNYXA8RGF0YVR5cGUgfCBDZWxsVmlldywgVGVtcGxhdGVSZWY8YW55Pj4ge1xuXHRcdHJldHVybiB0aGlzLnRlbXBsYXRlcztcblx0fVxuXG5cdGRlc3Ryb3koKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMudGVtcGxhdGVzQ29tcG9uZW50KSB7XG5cdFx0XHR0aGlzLnRlbXBsYXRlc0NvbXBvbmVudC5kZXN0cm95KCk7XG5cdFx0XHR0aGlzLnRlbXBsYXRlc0NvbXBvbmVudCA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVUZW1wbGF0ZXNDb21wb25lbnQoKTogdm9pZCB7XG5cblx0XHRjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy50ZW1wbGF0ZXNDb21wb25lbnREZWZpbml0aW9uKTtcblxuXHRcdGNvbnN0IGluamVjdG9yOiBJbmplY3RvciA9IEluamVjdG9yLmNyZWF0ZSh7IHByb3ZpZGVyczogW10gfSk7XG5cblx0XHR0aGlzLnRlbXBsYXRlc0NvbXBvbmVudCA9IGNvbXBvbmVudEZhY3RvcnkuY3JlYXRlKGluamVjdG9yKTtcblxuXHRcdHRoaXMuZ2VuZXJhdGVNYXAoKTtcblx0fVxuXG5cdHByaXZhdGUgZ2VuZXJhdGVNYXAoKTogdm9pZCB7XG5cdFx0dGhpcy5nZW5lcmF0ZU1hcEtleXMoKVxuXHRcdFx0LmZvckVhY2goKHR5cGU6IERhdGFUeXBlIHwgQ2VsbFZpZXcpID0+IHtcblx0XHRcdFx0dGhpcy5maW5kQW5kU2V0VGVtcGxhdGUodHlwZSk7XG5cdFx0XHR9KTtcblx0fTtcblxuXHRwcml2YXRlIGZpbmRBbmRTZXRUZW1wbGF0ZShkdDogRGF0YVR5cGUgfCBDZWxsVmlldyk6IHZvaWQge1xuXG5cdFx0Y29uc3QgdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlc0NvbXBvbmVudC5pbnN0YW5jZS5nZXRUZW1wbGF0ZShkdCk7XG5cblx0XHR0aGlzLnRlbXBsYXRlcy5zZXQoZHQsIHRlbXBsYXRlKTtcblx0fVxuXG59XG4iXX0=