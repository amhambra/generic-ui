import { StructureSetSummariesEnabledCommand } from './set/structure.set-summaries-enabled.command';
import { Injectable } from '@angular/core';
import { SummariesCommandInvoker } from '../api/summaries.command-invoker';
import * as i0 from "@angular/core";
import * as i1 from "@generic-ui/hermes";
import * as i2 from "./config/structure.summaries-panel.config-converter";
import * as i3 from "./config/structure.summaries-config.archive";
export class SummariesDomainCommandInvoker extends SummariesCommandInvoker {
    constructor(commandDispatcher, configConverter, structureSummariesConfigArchive) {
        super();
        this.commandDispatcher = commandDispatcher;
        this.configConverter = configConverter;
        this.structureSummariesConfigArchive = structureSummariesConfigArchive;
    }
    setSummariesEnabled(enabled, structureId) {
        this.commandDispatcher.dispatch(new StructureSetSummariesEnabledCommand(structureId, enabled));
    }
    setConfig(config, structureId) {
        const summariesPanelConfig = this.configConverter.convert(config);
        this.setSummariesEnabled(config.enabled, structureId);
        this.structureSummariesConfigArchive.next(structureId, summariesPanelConfig);
    }
}
SummariesDomainCommandInvoker.ɵfac = function SummariesDomainCommandInvoker_Factory(t) { return new (t || SummariesDomainCommandInvoker)(i0.ɵɵinject(i1.CommandDispatcher), i0.ɵɵinject(i2.StructureSummariesPanelConfigConverter), i0.ɵɵinject(i3.StructureSummariesConfigArchive)); };
SummariesDomainCommandInvoker.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SummariesDomainCommandInvoker, factory: SummariesDomainCommandInvoker.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SummariesDomainCommandInvoker, [{
        type: Injectable
    }], function () { return [{ type: i1.CommandDispatcher }, { type: i2.StructureSummariesPanelConfigConverter }, { type: i3.StructureSummariesConfigArchive }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyaWVzLmRvbWFpbi1jb21tYW5kLWludm9rZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL3N0cnVjdHVyZS9zdW1tYXJpZXMvY29yZS9kb21haW4vc3VtbWFyaWVzLmRvbWFpbi1jb21tYW5kLWludm9rZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDcEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7QUFNM0UsTUFBTSxPQUFPLDZCQUE4QixTQUFRLHVCQUF1QjtJQUV6RSxZQUE2QixpQkFBb0MsRUFDN0MsZUFBdUQsRUFDdkQsK0JBQWdFO1FBQ25GLEtBQUssRUFBRSxDQUFDO1FBSG9CLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDN0Msb0JBQWUsR0FBZixlQUFlLENBQXdDO1FBQ3ZELG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7SUFFcEYsQ0FBQztJQUVELG1CQUFtQixDQUFDLE9BQWdCLEVBQUUsV0FBd0I7UUFDN0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLG1DQUFtQyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBdUIsRUFBRSxXQUF3QjtRQUUxRCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDOUUsQ0FBQzs7MEdBbEJXLDZCQUE2QjttRkFBN0IsNkJBQTZCLFdBQTdCLDZCQUE2Qjt1RkFBN0IsNkJBQTZCO2NBRHpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kRGlzcGF0Y2hlciB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVTZXRTdW1tYXJpZXNFbmFibGVkQ29tbWFuZCB9IGZyb20gJy4vc2V0L3N0cnVjdHVyZS5zZXQtc3VtbWFyaWVzLWVuYWJsZWQuY29tbWFuZCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdW1tYXJpZXNDb21tYW5kSW52b2tlciB9IGZyb20gJy4uL2FwaS9zdW1tYXJpZXMuY29tbWFuZC1pbnZva2VyJztcbmltcG9ydCB7IFN1bW1hcmllc0NvbmZpZyB9IGZyb20gJy4uL2FwaS9zdW1tYXJpZXMtY29uZmlnJztcbmltcG9ydCB7IFN0cnVjdHVyZVN1bW1hcmllc1BhbmVsQ29uZmlnQ29udmVydGVyIH0gZnJvbSAnLi9jb25maWcvc3RydWN0dXJlLnN1bW1hcmllcy1wYW5lbC5jb25maWctY29udmVydGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZVN1bW1hcmllc0NvbmZpZ0FyY2hpdmUgfSBmcm9tICcuL2NvbmZpZy9zdHJ1Y3R1cmUuc3VtbWFyaWVzLWNvbmZpZy5hcmNoaXZlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN1bW1hcmllc0RvbWFpbkNvbW1hbmRJbnZva2VyIGV4dGVuZHMgU3VtbWFyaWVzQ29tbWFuZEludm9rZXIge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29tbWFuZERpc3BhdGNoZXI6IENvbW1hbmREaXNwYXRjaGVyLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ0NvbnZlcnRlcjogU3RydWN0dXJlU3VtbWFyaWVzUGFuZWxDb25maWdDb252ZXJ0ZXIsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgc3RydWN0dXJlU3VtbWFyaWVzQ29uZmlnQXJjaGl2ZTogU3RydWN0dXJlU3VtbWFyaWVzQ29uZmlnQXJjaGl2ZSkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRzZXRTdW1tYXJpZXNFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4sIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZERpc3BhdGNoZXIuZGlzcGF0Y2gobmV3IFN0cnVjdHVyZVNldFN1bW1hcmllc0VuYWJsZWRDb21tYW5kKHN0cnVjdHVyZUlkLCBlbmFibGVkKSk7XG5cdH1cblxuXHRzZXRDb25maWcoY29uZmlnOiBTdW1tYXJpZXNDb25maWcsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXG5cdFx0Y29uc3Qgc3VtbWFyaWVzUGFuZWxDb25maWcgPSB0aGlzLmNvbmZpZ0NvbnZlcnRlci5jb252ZXJ0KGNvbmZpZyk7XG5cblx0XHR0aGlzLnNldFN1bW1hcmllc0VuYWJsZWQoY29uZmlnLmVuYWJsZWQsIHN0cnVjdHVyZUlkKTtcblx0XHR0aGlzLnN0cnVjdHVyZVN1bW1hcmllc0NvbmZpZ0FyY2hpdmUubmV4dChzdHJ1Y3R1cmVJZCwgc3VtbWFyaWVzUGFuZWxDb25maWcpO1xuXHR9XG5cbn1cbiJdfQ==