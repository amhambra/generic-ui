import { RandomStringGenerator } from '@generic-ui/hermes';
import { OriginItemEntity } from '../origin/origin-item-entity';
import { StructureSourceItemEditedAggregateEvent } from '../origin/edit/structure.source-item-edited.aggregate-event';
import { StructureOriginChangedAggregateEvent } from '../origin/structure.origin-changed.aggregate-event';
import { OriginId } from '../origin/origin-id';
export class SourceManager {
    constructor(formationManager) {
        this.loading = false;
        this.fetched = false;
        this.entities = [];
        // Entities after filtering, searching
        this.preparedEntities = [];
        this.slicedEntities = [];
        this.formationManager = formationManager;
    }
    isLoading() {
        return this.loading;
    }
    isFetched() {
        return this.fetched;
    }
    setLoading(enabled) {
        this.loading = enabled;
    }
    setEntities(ent) {
        this.entities = ent;
        this.recalculatePositions();
    }
    getEntities() {
        return this.entities;
    }
    setPreparedEntities() {
        this.preparedEntities = Array.from(this.entities);
    }
    getPreparedEntities() {
        return this.preparedEntities;
    }
    setSlicedEntities(ent) {
        this.slicedEntities = ent;
    }
    getSlicedEntities() {
        return this.slicedEntities;
    }
    setOrigin(items = [], structureId) {
        this.origin = this.convertItems(items);
        return this.createOriginChangedEvent(structureId);
    }
    setConvertedOrigin(items = [], structureId) {
        this.origin = Array.from(items);
        return this.createOriginChangedEvent(structureId);
    }
    getOrigin() {
        return this.origin;
    }
    getOriginSize() {
        return this.origin.length;
    }
    // editOriginItemByProperty(byField, value: any, field: Field, structureId: StructureId): AggregateEvent {
    //
    // }
    editOriginItem(itemId, value, field, structureId) {
        const item = this.findOriginItem(itemId), itemBeforeChange = item.clone();
        if (item) {
            item.sourceItem[field.getAccessor()] = value;
            item.bumpVersion();
        }
        return [
            new StructureSourceItemEditedAggregateEvent(structureId, itemBeforeChange, item.clone()),
            this.createOriginChangedEvent(structureId)
        ];
    }
    deleteAllSelected(structureId) {
        let events = [];
        const rows = this.formationManager.getSelectedRows();
        rows.forEach((r) => {
            events = events.concat(this.deleteOriginItemByItemId(new OriginId(r), structureId));
        });
        return events;
    }
    deleteOriginItem(payload, structureId) {
        if (payload instanceof OriginId) {
            return this.deleteOriginItemByItemId(payload, structureId);
        }
        else if (Array.isArray(payload)) {
            let events = [];
            payload.forEach((item) => {
                events = events.concat(this.deleteOneOriginItem(item, structureId));
            });
            return events;
        }
        else if (Number.isInteger(payload)) {
            return this.deleteOriginItemByIndex(payload, structureId);
        }
        else {
            return [];
        }
    }
    addOriginItem(item, structureId) {
        this.origin.push(item);
        return [this.createOriginChangedEvent(structureId)];
    }
    selectAll() {
        this.formationManager.selectAll(this.getEntities().map(e => e.getId().toString()));
    }
    unselectAll() {
        this.formationManager.unselectAll();
    }
    toggleRow(itemId, type) {
        this.formationManager.toggleRow(itemId, type, this.getEntities().map(e => e.getId().toString()));
    }
    getFormation() {
        return this.formationManager;
    }
    convertItems(items) {
        return items.map((item, index) => {
            return new OriginItemEntity(new OriginId(RandomStringGenerator.generate()), item, index);
        });
    }
    createOriginChangedEvent(structureId) {
        return new StructureOriginChangedAggregateEvent(structureId, this.origin);
    }
    findOriginItem(itemId) {
        return this.origin.find((item) => item.getId().toString() === itemId);
    }
    findOriginItemIndex(itemId) {
        return this.origin.findIndex((item) => item.getId().toString() === itemId);
    }
    recalculatePositions() {
        this.entities.forEach((ent, index) => {
            ent.setPosition(index);
        });
    }
    deleteOneOriginItem(item, structureId) {
        if (item instanceof OriginId) {
            return this.deleteOriginItemByItemId(item, structureId);
        }
        else if (Number.isInteger(item)) {
            return this.deleteOriginItemByIndex(item, structureId);
        }
        else {
            return [];
        }
    }
    deleteOriginItemByItemId(itemId, structureId) {
        const index = this.findOriginItemIndex(itemId.toString());
        return this.deleteOriginItemByIndex(index, structureId);
    }
    deleteOriginItemByIndex(index, structureId) {
        if (index > -1) {
            const removedElements = this.origin.splice(index, 1);
            if (removedElements.length > 0) {
                for (const element of removedElements) {
                    this.formationManager.unselectRow(element.getId().toString());
                }
                this.formationManager.calculateAllSelected(removedElements.map((f) => f.getId().toString()));
                this.formationManager.calculateAllUnselected();
            }
            return [
                this.createOriginChangedEvent(structureId)
            ];
        }
        return [];
    }
    deleteManyOriginItemByIndex(indexes, structureId) {
        let events = [];
        indexes.forEach((index) => {
            events = events.concat(this.deleteOriginItemByIndex(index, structureId));
        });
        return events;
    }
    deleteManyOriginItemByItemID(itemIds, structureId) {
        let events = [];
        itemIds.forEach((itemId) => {
            events = events.concat(this.deleteOriginItemByItemId(itemId, structureId));
        });
        return events;
    }
}
//# sourceMappingURL=data:application/json;base64,