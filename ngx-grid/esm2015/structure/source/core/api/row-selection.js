import { GenericBuilder } from '../../../../common/cdk/generic-builder';
export var RowSelectionType;
(function (RowSelectionType) {
    RowSelectionType[RowSelectionType["ROW"] = 0] = "ROW";
    RowSelectionType[RowSelectionType["CHECKBOX"] = 1] = "CHECKBOX";
})(RowSelectionType || (RowSelectionType = {}));
export var RowSelectionMode;
(function (RowSelectionMode) {
    RowSelectionMode[RowSelectionMode["SINGLE"] = 0] = "SINGLE";
    RowSelectionMode[RowSelectionMode["MULTIPLE"] = 1] = "MULTIPLE";
})(RowSelectionMode || (RowSelectionMode = {}));
export class RowSelection {
    constructor(config) {
        if (config.enabled !== undefined) {
            this.enabled = config.enabled;
        }
        if (config.mode !== undefined) {
            this.mode = config.mode;
        }
        if (config.type !== undefined) {
            this.type = config.type;
        }
    }
    isModeDefined() {
        return this.mode !== undefined;
    }
    isTypeDefined() {
        return this.type !== undefined;
    }
    isEnabledDefined() {
        return this.enabled !== undefined;
    }
    isEnabled() {
        return this.enabled;
    }
    getMode() {
        return this.mode;
    }
    getType() {
        return this.type;
    }
}
// eslint-disable-next-line @typescript-eslint/member-ordering
RowSelection.Builder = class RowSelectionBuilder extends GenericBuilder {
    constructor() {
        super();
    }
    buildObject() {
        return new RowSelection({
            enabled: this.enabled,
            type: this.type,
            mode: this.mode
        });
    }
    withEnabled(enabled) {
        this.enabled = enabled;
        return this;
    }
    withType(type) {
        this.type = type;
        return this;
    }
    withMode(mode) {
        this.mode = mode;
        return this;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LXNlbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtZ3JpZC9zcmMvc3RydWN0dXJlL3NvdXJjZS9jb3JlL2FwaS9yb3ctc2VsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUV4RSxNQUFNLENBQU4sSUFBWSxnQkFHWDtBQUhELFdBQVksZ0JBQWdCO0lBQzNCLHFEQUFHLENBQUE7SUFDSCwrREFBUSxDQUFBO0FBQ1QsQ0FBQyxFQUhXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFHM0I7QUFFRCxNQUFNLENBQU4sSUFBWSxnQkFHWDtBQUhELFdBQVksZ0JBQWdCO0lBQzNCLDJEQUFNLENBQUE7SUFDTiwrREFBUSxDQUFBO0FBQ1QsQ0FBQyxFQUhXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFHM0I7QUFFRCxNQUFNLE9BQU8sWUFBWTtJQVF4QixZQUFvQixNQUluQjtRQUNBLElBQUksTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQzlCO1FBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDeEI7UUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztTQUN4QjtJQUNGLENBQUM7SUFFRCxhQUFhO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsYUFBYTtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVELGdCQUFnQjtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7SUFDbkMsQ0FBQztJQUVELFNBQVM7UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQzs7QUFFRCw4REFBOEQ7QUFDdkQsb0JBQU8sR0FBRyxNQUFNLG1CQUFvQixTQUFRLGNBQTRCO0lBUTlFO1FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRUQsV0FBVztRQUNWLE9BQU8sSUFBSSxZQUFZLENBQUM7WUFDdkIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNmLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBZ0I7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsUUFBUSxDQUFDLElBQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FFRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VuZXJpY0J1aWxkZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21tb24vY2RrL2dlbmVyaWMtYnVpbGRlcic7XG5cbmV4cG9ydCBlbnVtIFJvd1NlbGVjdGlvblR5cGUge1xuXHRST1csXG5cdENIRUNLQk9YXG59XG5cbmV4cG9ydCBlbnVtIFJvd1NlbGVjdGlvbk1vZGUge1xuXHRTSU5HTEUsXG5cdE1VTFRJUExFXG59XG5cbmV4cG9ydCBjbGFzcyBSb3dTZWxlY3Rpb24ge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZW5hYmxlZDogYm9vbGVhbjtcblxuXHRwcml2YXRlIHJlYWRvbmx5IHR5cGU6IFJvd1NlbGVjdGlvblR5cGU7XG5cblx0cHJpdmF0ZSByZWFkb25seSBtb2RlOiBSb3dTZWxlY3Rpb25Nb2RlO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoY29uZmlnOiB7XG5cdFx0ZW5hYmxlZD86IGJvb2xlYW4sXG5cdFx0bW9kZT86IFJvd1NlbGVjdGlvbk1vZGUsXG5cdFx0dHlwZT86IFJvd1NlbGVjdGlvblR5cGVcblx0fSkge1xuXHRcdGlmIChjb25maWcuZW5hYmxlZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLmVuYWJsZWQgPSBjb25maWcuZW5hYmxlZDtcblx0XHR9XG5cblx0XHRpZiAoY29uZmlnLm1vZGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5tb2RlID0gY29uZmlnLm1vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKGNvbmZpZy50eXBlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMudHlwZSA9IGNvbmZpZy50eXBlO1xuXHRcdH1cblx0fVxuXG5cdGlzTW9kZURlZmluZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZSAhPT0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aXNUeXBlRGVmaW5lZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy50eXBlICE9PSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpc0VuYWJsZWREZWZpbmVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmVuYWJsZWQgIT09IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlzRW5hYmxlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5lbmFibGVkO1xuXHR9XG5cblx0Z2V0TW9kZSgpOiBSb3dTZWxlY3Rpb25Nb2RlIHtcblx0XHRyZXR1cm4gdGhpcy5tb2RlO1xuXHR9XG5cblx0Z2V0VHlwZSgpOiBSb3dTZWxlY3Rpb25UeXBlIHtcblx0XHRyZXR1cm4gdGhpcy50eXBlO1xuXHR9XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9tZW1iZXItb3JkZXJpbmdcblx0c3RhdGljIEJ1aWxkZXIgPSBjbGFzcyBSb3dTZWxlY3Rpb25CdWlsZGVyIGV4dGVuZHMgR2VuZXJpY0J1aWxkZXI8Um93U2VsZWN0aW9uPiB7XG5cblx0XHRlbmFibGVkOiBib29sZWFuO1xuXG5cdFx0dHlwZTogUm93U2VsZWN0aW9uVHlwZTtcblxuXHRcdG1vZGU6IFJvd1NlbGVjdGlvbk1vZGU7XG5cblx0XHRjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHN1cGVyKCk7XG5cdFx0fVxuXG5cdFx0YnVpbGRPYmplY3QoKTogUm93U2VsZWN0aW9uIHtcblx0XHRcdHJldHVybiBuZXcgUm93U2VsZWN0aW9uKHtcblx0XHRcdFx0ZW5hYmxlZDogdGhpcy5lbmFibGVkLFxuXHRcdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRcdG1vZGU6IHRoaXMubW9kZVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0d2l0aEVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IFJvd1NlbGVjdGlvbkJ1aWxkZXIge1xuXHRcdFx0dGhpcy5lbmFibGVkID0gZW5hYmxlZDtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdHdpdGhUeXBlKHR5cGU6IFJvd1NlbGVjdGlvblR5cGUpOiBSb3dTZWxlY3Rpb25CdWlsZGVyIHtcblx0XHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHR3aXRoTW9kZShtb2RlOiBSb3dTZWxlY3Rpb25Nb2RlKTogUm93U2VsZWN0aW9uQnVpbGRlciB7XG5cdFx0XHR0aGlzLm1vZGUgPSBtb2RlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdH07XG5cbn1cbiJdfQ==