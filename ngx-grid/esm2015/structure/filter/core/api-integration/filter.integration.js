import { Injectable } from '@angular/core';
import { CompositionWarehouse } from '../../../../composition/core/api/composition.warehouse';
import { hermesFilter, hermesMap, hermesSwitchMap, hermesTake } from '@generic-ui/hermes';
import { FilterWarehouse } from '../api/filter.warehouse';
import { FieldId } from '../../../field/core/domain/field/field.id';
import { FilterCommandInvoker } from '../api/filter.command-invoker';
export class FilterIntegration {
    constructor(compositionWarehouse, filterCommandInvoker, filterWarehouse) {
        this.compositionWarehouse = compositionWarehouse;
        this.filterCommandInvoker = filterCommandInvoker;
        this.filterWarehouse = filterWarehouse;
    }
    findFilterTypes(columnName, compositionId, structureId) {
        let filterTypes = [];
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onFilterTypesForFieldId(new FieldId(col.columnFieldId.getId()), structureId);
        }))
            .subscribe((types) => {
            filterTypes = types.map((type) => type.getName());
        });
        return filterTypes;
    }
    findFilters(compositionId, structureId) {
        const filters = this.filterWarehouse.findFilters(structureId).getValueOrNullOrThrowError();
        const columnNames = this.compositionWarehouse.findColumnNames(compositionId);
        const obj = {};
        for (let i = 0; i < columnNames.length; i += 1) {
            obj[columnNames[i]] = filters.filter((filter) => {
                return filter.getFieldName() === columnNames[i];
            })
                .map((filter) => {
                return {
                    columnName: filter.getFieldName(),
                    filterId: filter.getFilterId().toString(),
                    type: filter.getFilterTypeName(),
                    value: filter.getValue()
                };
            });
        }
        return obj;
    }
    filter(columnName, filterType, value, compositionId, structureId) {
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onceFilterTypeId(new FieldId(col.columnFieldId.getId()), filterType, structureId)
                .pipe(hermesMap((filterTypeId) => {
                return {
                    fieldId: new FieldId(col.columnFieldId.getId()),
                    filterTypeId: filterTypeId
                };
            }));
        }))
            .subscribe((params) => {
            const { fieldId, filterTypeId } = params;
            filterTypeId.ifPresent((ftId) => {
                this.filterCommandInvoker.add(fieldId, ftId, value, structureId);
            });
        });
    }
}
FilterIntegration.decorators = [
    { type: Injectable }
];
FilterIntegration.ctorParameters = () => [
    { type: CompositionWarehouse },
    { type: FilterCommandInvoker },
    { type: FilterWarehouse }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmludGVncmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1ncmlkL3NyYy9zdHJ1Y3R1cmUvZmlsdGVyL2NvcmUvYXBpLWludGVncmF0aW9uL2ZpbHRlci5pbnRlZ3JhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBRzlGLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUNwRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBRXBFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBT3JFLE1BQU0sT0FBTyxpQkFBaUI7SUFFN0IsWUFBNkIsb0JBQTBDLEVBQ25ELG9CQUEwQyxFQUMxQyxlQUFnQztRQUZ2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQ25ELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQ3BELENBQUM7SUFFRCxlQUFlLENBQUMsVUFBa0IsRUFBRSxhQUE0QixFQUFFLFdBQXdCO1FBRXpGLElBQUksV0FBVyxHQUFrQixFQUFFLENBQUM7UUFFcEMsSUFBSSxDQUFDLG9CQUFvQjthQUN2QixpQkFBaUIsQ0FBQyxhQUFhLENBQUM7YUFDaEMsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLElBQTZDLEVBQUUsRUFBRTtZQUMzRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUE2QixFQUFFLEVBQUU7Z0JBQ2xELE9B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LEtBQUssRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQztpQkFDakYsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLFlBQW9DLEVBQUUsRUFBRTtnQkFDbEQsT0FBTztvQkFDTixPQUFPLEVBQUUsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDL0MsWUFBWSxFQUFFLFlBQVk7aUJBQzFCLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FDRixDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQ0Y7YUFDQSxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUVyQixNQUFNLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sQ0FBQztZQUV6QyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBa0IsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUM1QixPQUFPLEVBQ1AsSUFBSSxFQUNKLEtBQUssRUFDTCxXQUFXLENBQ1gsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUE1R0QsVUFBVTs7O1lBZEYsb0JBQW9CO1lBUXBCLG9CQUFvQjtZQUpwQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25XYXJlaG91c2UgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb3NpdGlvbi9jb3JlL2FwaS9jb21wb3NpdGlvbi53YXJlaG91c2UnO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25JZCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvc2l0aW9uL2NvcmUvYXBpL2NvbXBvc2l0aW9uLmlkJztcbmltcG9ydCB7IENlbGxUZW1wbGF0ZVdpdGhBY2Nlc3NvciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvc2l0aW9uL2NvcmUvZG9tYWluLXJlYWQvZGVmaW5pdGlvbi9jZWxsLXRlbXBsYXRlLXdpdGgtYWNjZXNzb3InO1xuaW1wb3J0IHsgaGVybWVzRmlsdGVyLCBoZXJtZXNNYXAsIGhlcm1lc1N3aXRjaE1hcCwgaGVybWVzVGFrZSwgT3B0aW9uYWwgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuaW1wb3J0IHsgRmlsdGVyV2FyZWhvdXNlIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2FwaS9zdHJ1Y3R1cmUuaWQnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL2NvcmUvZG9tYWluL2ZpZWxkL2ZpZWxkLmlkJztcbmltcG9ydCB7IEZpbHRlclR5cGVNb2RlbCB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLm1vZGVsJztcbmltcG9ydCB7IEZpbHRlckNvbW1hbmRJbnZva2VyIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci5jb21tYW5kLWludm9rZXInO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUlkIH0gZnJvbSAnLi4vZG9tYWluL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyTW9kZWwgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyRm9yQ29sdW1uIH0gZnJvbSAnLi9maWx0ZXItaW50ZWdyYXRpb24uYXBpJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmlsdGVySW50ZWdyYXRpb24ge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29tcG9zaXRpb25XYXJlaG91c2U6IENvbXBvc2l0aW9uV2FyZWhvdXNlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlckNvbW1hbmRJbnZva2VyOiBGaWx0ZXJDb21tYW5kSW52b2tlcixcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBmaWx0ZXJXYXJlaG91c2U6IEZpbHRlcldhcmVob3VzZSkge1xuXHR9XG5cblx0ZmluZEZpbHRlclR5cGVzKGNvbHVtbk5hbWU6IHN0cmluZywgY29tcG9zaXRpb25JZDogQ29tcG9zaXRpb25JZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogQXJyYXk8c3RyaW5nPiB7XG5cblx0XHRsZXQgZmlsdGVyVHlwZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuXHRcdHRoaXMuY29tcG9zaXRpb25XYXJlaG91c2Vcblx0XHRcdC5vblRlbXBsYXRlQ29sdW1ucyhjb21wb3NpdGlvbklkKVxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdGhlcm1lc01hcCgoY29sczogUmVhZG9ubHlBcnJheTxDZWxsVGVtcGxhdGVXaXRoQWNjZXNzb3I+KSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbHMuZmluZCgoY29sOiBDZWxsVGVtcGxhdGVXaXRoQWNjZXNzb3IpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBjb2wuZ2V0TmFtZSgpID09PSBjb2x1bW5OYW1lO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0aGVybWVzRmlsdGVyKChjb2w6IENlbGxUZW1wbGF0ZVdpdGhBY2Nlc3NvcikgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBjb2wgIT09IHVuZGVmaW5lZDtcblx0XHRcdFx0fSksXG5cdFx0XHRcdGhlcm1lc1Rha2UoMSksXG5cdFx0XHRcdGhlcm1lc1N3aXRjaE1hcCgoY29sOiBDZWxsVGVtcGxhdGVXaXRoQWNjZXNzb3IpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXJXYXJlaG91c2Vcblx0XHRcdFx0XHRcdFx0ICAgLm9uRmlsdGVyVHlwZXNGb3JGaWVsZElkKG5ldyBGaWVsZElkKGNvbC5jb2x1bW5GaWVsZElkLmdldElkKCkpLCBzdHJ1Y3R1cmVJZCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKCh0eXBlczogQXJyYXk8RmlsdGVyVHlwZU1vZGVsPikgPT4ge1xuXHRcdFx0XHRmaWx0ZXJUeXBlcyA9IHR5cGVzLm1hcCgodHlwZSkgPT4gdHlwZS5nZXROYW1lKCkpO1xuXHRcdFx0fSk7XG5cblx0XHRyZXR1cm4gZmlsdGVyVHlwZXM7XG5cdH1cblxuXHRmaW5kRmlsdGVycyhjb21wb3NpdGlvbklkOiBDb21wb3NpdGlvbklkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB7IFtrZXk6IHN0cmluZ106IFJlYWRvbmx5QXJyYXk8RmlsdGVyRm9yQ29sdW1uPiB9IHtcblxuXHRcdGNvbnN0IGZpbHRlcnMgPSB0aGlzLmZpbHRlcldhcmVob3VzZS5maW5kRmlsdGVycyhzdHJ1Y3R1cmVJZCkuZ2V0VmFsdWVPck51bGxPclRocm93RXJyb3IoKTtcblxuXHRcdGNvbnN0IGNvbHVtbk5hbWVzID0gdGhpcy5jb21wb3NpdGlvbldhcmVob3VzZS5maW5kQ29sdW1uTmFtZXMoY29tcG9zaXRpb25JZCk7XG5cblx0XHRjb25zdCBvYmogPSB7fTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdG9ialtjb2x1bW5OYW1lc1tpXV0gPSBmaWx0ZXJzLmZpbHRlcigoZmlsdGVyOiBBY3RpdmVGaWx0ZXJNb2RlbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCByZXR1cm4gZmlsdGVyLmdldEZpZWxkTmFtZSgpID09PSBjb2x1bW5OYW1lc1tpXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0IH0pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAubWFwKChmaWx0ZXI6IEFjdGl2ZUZpbHRlck1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0IHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgY29sdW1uTmFtZTogZmlsdGVyLmdldEZpZWxkTmFtZSgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IGZpbHRlcklkOiBmaWx0ZXIuZ2V0RmlsdGVySWQoKS50b1N0cmluZygpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IHR5cGU6IGZpbHRlci5nZXRGaWx0ZXJUeXBlTmFtZSgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IHZhbHVlOiBmaWx0ZXIuZ2V0VmFsdWUoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCB9O1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fVxuXG5cdGZpbHRlcihcblx0XHRjb2x1bW5OYW1lOiBzdHJpbmcsXG5cdFx0ZmlsdGVyVHlwZTogc3RyaW5nLFxuXHRcdHZhbHVlOiBhbnksXG5cdFx0Y29tcG9zaXRpb25JZDogQ29tcG9zaXRpb25JZCxcblx0XHRzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWRcblx0KTogdm9pZCB7XG5cblx0XHR0aGlzLmNvbXBvc2l0aW9uV2FyZWhvdXNlXG5cdFx0XHQub25UZW1wbGF0ZUNvbHVtbnMoY29tcG9zaXRpb25JZClcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRoZXJtZXNNYXAoKGNvbHM6IFJlYWRvbmx5QXJyYXk8Q2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yPikgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBjb2xzLmZpbmQoKGNvbDogQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sLmdldE5hbWUoKSA9PT0gY29sdW1uTmFtZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdGhlcm1lc0ZpbHRlcigoY29sOiBDZWxsVGVtcGxhdGVXaXRoQWNjZXNzb3IpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gY29sICE9PSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRoZXJtZXNUYWtlKDEpLFxuXHRcdFx0XHRoZXJtZXNTd2l0Y2hNYXAoKGNvbDogQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yKSA9PiB7XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maWx0ZXJXYXJlaG91c2Vcblx0XHRcdFx0XHRcdFx0ICAgLm9uY2VGaWx0ZXJUeXBlSWQobmV3IEZpZWxkSWQoY29sLmNvbHVtbkZpZWxkSWQuZ2V0SWQoKSksIGZpbHRlclR5cGUsIHN0cnVjdHVyZUlkKVxuXHRcdFx0XHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKGZpbHRlclR5cGVJZDogT3B0aW9uYWw8RmlsdGVyVHlwZUlkPikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0ICAgcmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ICAgZmllbGRJZDogbmV3IEZpZWxkSWQoY29sLmNvbHVtbkZpZWxkSWQuZ2V0SWQoKSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgIGZpbHRlclR5cGVJZDogZmlsdGVyVHlwZUlkXG5cdFx0XHRcdFx0XHRcdFx0XHQgICB9O1xuXHRcdFx0XHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdFx0XHRcdCAgICk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKChwYXJhbXMpID0+IHtcblxuXHRcdFx0XHRjb25zdCB7IGZpZWxkSWQsIGZpbHRlclR5cGVJZCB9ID0gcGFyYW1zO1xuXG5cdFx0XHRcdGZpbHRlclR5cGVJZC5pZlByZXNlbnQoKGZ0SWQ6IEZpbHRlclR5cGVJZCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuZmlsdGVyQ29tbWFuZEludm9rZXIuYWRkKFxuXHRcdFx0XHRcdFx0ZmllbGRJZCxcblx0XHRcdFx0XHRcdGZ0SWQsXG5cdFx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHRcdHN0cnVjdHVyZUlkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0fVxuXG59XG4iXX0=