import { Injectable } from '@angular/core';
import { FilterCommandInvoker } from '../api/filter.command-invoker';
import { FilterDispatcher } from './filter.dispatcher';
export class FilterDomainCommandInvoker extends FilterCommandInvoker {
    constructor(filterDispatcher) {
        super();
        this.filterDispatcher = filterDispatcher;
    }
    setConfig(config, structureId) {
        this.filterDispatcher.setConfig(config, structureId);
    }
    add(fieldId, filterTypeId, value, structureId) {
        this.filterDispatcher.add(fieldId, filterTypeId, value, structureId);
    }
    removeAll(structureId) {
        this.filterDispatcher.removeAll(structureId);
    }
    remove(filterId, structureId) {
        this.filterDispatcher.remove(filterId, structureId);
    }
    selectAllUniqueFilter(fieldId, structureId) {
        this.filterDispatcher.selectAllUniqueFilter(fieldId, structureId);
    }
    unselectAllUniqueFilter(fieldId, structureId) {
        this.filterDispatcher.unselectAllUniqueFilter(fieldId, structureId);
    }
    selectUniqueFilter(fieldId, uniqueValueId, structureId) {
        this.filterDispatcher.selectUniqueFilter(fieldId, uniqueValueId, structureId);
    }
    unselectUniqueFilter(fieldId, uniqueValueId, structureId) {
        this.filterDispatcher.unselectUniqueFilter(fieldId, uniqueValueId, structureId);
    }
}
FilterDomainCommandInvoker.decorators = [
    { type: Injectable }
];
FilterDomainCommandInvoker.ctorParameters = () => [
    { type: FilterDispatcher }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi1jb21tYW5kLWludm9rZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL3N0cnVjdHVyZS9maWx0ZXIvY29yZS9kb21haW4vZmlsdGVyLmRvbWFpbi1jb21tYW5kLWludm9rZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQU9yRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUl2RCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsb0JBQW9CO0lBRW5FLFlBQTZCLGdCQUFrQztRQUM5RCxLQUFLLEVBQUUsQ0FBQztRQURvQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBRS9ELENBQUM7SUFFRCxTQUFTLENBQUMsTUFBb0IsRUFBRSxXQUF3QjtRQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsR0FBRyxDQUFDLE9BQWdCLEVBQUUsWUFBMEIsRUFBRSxLQUFVLEVBQUUsV0FBd0I7UUFDckYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsU0FBUyxDQUFDLFdBQXdCO1FBQ2pDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFrQixFQUFFLFdBQXdCO1FBQ2xELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxPQUFnQixFQUFFLFdBQXdCO1FBQy9ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELHVCQUF1QixDQUFDLE9BQWdCLEVBQUUsV0FBd0I7UUFDakUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsa0JBQWtCLENBQUMsT0FBZ0IsRUFBRSxhQUE0QixFQUFFLFdBQXdCO1FBQzFGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxPQUFnQixFQUFFLGFBQTRCLEVBQUUsV0FBd0I7UUFDNUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakYsQ0FBQzs7O1lBckNELFVBQVU7OztZQUhGLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlckNvbW1hbmRJbnZva2VyIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci5jb21tYW5kLWludm9rZXInO1xuaW1wb3J0IHsgRmlsdGVyQ29uZmlnIH0gZnJvbSAnLi4vYXBpL2NvbmZpZy9maWx0ZXIuY29uZmlnJztcbmltcG9ydCB7IFN0cnVjdHVyZUlkIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hcGkvc3RydWN0dXJlLmlkJztcbmltcG9ydCB7IEZpZWxkSWQgfSBmcm9tICcuLi8uLi8uLi9maWVsZC9jb3JlL2RvbWFpbi9maWVsZC9maWVsZC5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlSWQgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmlsdGVySWQgfSBmcm9tICcuLi9hcGkvZmlsdGVyLmlkJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlSWQgfSBmcm9tICcuL3VuaXF1ZS91bmlxdWUtdmFsdWUtaWQnO1xuaW1wb3J0IHsgRmlsdGVyRGlzcGF0Y2hlciB9IGZyb20gJy4vZmlsdGVyLmRpc3BhdGNoZXInO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaWx0ZXJEb21haW5Db21tYW5kSW52b2tlciBleHRlbmRzIEZpbHRlckNvbW1hbmRJbnZva2VyIHtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbHRlckRpc3BhdGNoZXI6IEZpbHRlckRpc3BhdGNoZXIpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0c2V0Q29uZmlnKGNvbmZpZzogRmlsdGVyQ29uZmlnLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIuc2V0Q29uZmlnKGNvbmZpZywgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0YWRkKGZpZWxkSWQ6IEZpZWxkSWQsIGZpbHRlclR5cGVJZDogRmlsdGVyVHlwZUlkLCB2YWx1ZTogYW55LCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIuYWRkKGZpZWxkSWQsIGZpbHRlclR5cGVJZCwgdmFsdWUsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHJlbW92ZUFsbChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIucmVtb3ZlQWxsKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHJlbW92ZShmaWx0ZXJJZDogRmlsdGVySWQsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXHRcdHRoaXMuZmlsdGVyRGlzcGF0Y2hlci5yZW1vdmUoZmlsdGVySWQsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHNlbGVjdEFsbFVuaXF1ZUZpbHRlcihmaWVsZElkOiBGaWVsZElkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIuc2VsZWN0QWxsVW5pcXVlRmlsdGVyKGZpZWxkSWQsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHVuc2VsZWN0QWxsVW5pcXVlRmlsdGVyKGZpZWxkSWQ6IEZpZWxkSWQsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXHRcdHRoaXMuZmlsdGVyRGlzcGF0Y2hlci51bnNlbGVjdEFsbFVuaXF1ZUZpbHRlcihmaWVsZElkLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRzZWxlY3RVbmlxdWVGaWx0ZXIoZmllbGRJZDogRmllbGRJZCwgdW5pcXVlVmFsdWVJZDogVW5pcXVlVmFsdWVJZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLnNlbGVjdFVuaXF1ZUZpbHRlcihmaWVsZElkLCB1bmlxdWVWYWx1ZUlkLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHR1bnNlbGVjdFVuaXF1ZUZpbHRlcihmaWVsZElkOiBGaWVsZElkLCB1bmlxdWVWYWx1ZUlkOiBVbmlxdWVWYWx1ZUlkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIudW5zZWxlY3RVbmlxdWVGaWx0ZXIoZmllbGRJZCwgdW5pcXVlVmFsdWVJZCwgc3RydWN0dXJlSWQpO1xuXHR9XG59XG4iXX0=