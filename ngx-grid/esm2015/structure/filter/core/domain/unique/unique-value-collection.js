import { UniqueValue } from './unique-value';
import { UniqueValueIdGenerator } from './unique-value.id-generator';
export class UniqueValueCollection {
    constructor(values, field) {
        this.values = [];
        for (const value of values) {
            this.values.push(new UniqueValue(UniqueValueIdGenerator.generate(), value, field.getDisplayValue(value), true));
        }
        this.calculateAllSelected();
        this.calculateAllDisabled();
    }
    getAll() {
        return this.values;
    }
    isAllSelected() {
        return this.allSelected;
    }
    isAllDisabled() {
        return this.allDisabled;
    }
    getNotSelected() {
        return this.values.filter((uv) => uv.isDisabled());
    }
    selectAll() {
        this.values.forEach((uv) => {
            uv.select();
        });
        this.allSelected = true;
        this.allDisabled = false;
    }
    select(uniqueValueId) {
        this.values
            .filter((uv) => uv.getId().equals(uniqueValueId))
            .forEach((uv) => {
            uv.select();
        });
        this.calculateAllSelected();
        this.calculateAllDisabled();
    }
    unselectAll() {
        this.values.forEach((uv) => {
            uv.unselect();
        });
        this.allSelected = false;
        this.allDisabled = true;
    }
    unselect(uniqueValueId) {
        this.values
            .filter((uv) => uv.getId().equals(uniqueValueId))
            .forEach((uv) => {
            uv.unselect();
        });
        this.calculateAllSelected();
        this.calculateAllDisabled();
    }
    calculateAllSelected() {
        this.allSelected = !this.values.some((f) => f.isDisabled());
    }
    calculateAllDisabled() {
        this.allDisabled = !this.values.some((f) => f.isEnabled());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLXZhbHVlLWNvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL3N0cnVjdHVyZS9maWx0ZXIvY29yZS9kb21haW4vdW5pcXVlL3VuaXF1ZS12YWx1ZS1jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUlyRSxNQUFNLE9BQU8scUJBQXFCO0lBUWpDLFlBQVksTUFBa0IsRUFDM0IsS0FBWTtRQVBFLFdBQU0sR0FBdUIsRUFBRSxDQUFDO1FBU2hELEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1lBRTNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNmLElBQUksV0FBVyxDQUNkLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxFQUNqQyxLQUFLLEVBQ0wsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFDNUIsSUFBSSxDQUNKLENBQ0QsQ0FBQztTQUNGO1FBRUQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU07UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEIsQ0FBQztJQUVELGFBQWE7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekIsQ0FBQztJQUVELGFBQWE7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekIsQ0FBQztJQUVELGNBQWM7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsU0FBUztRQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBZSxFQUFFLEVBQUU7WUFDdkMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQTRCO1FBRWxDLElBQUksQ0FBQyxNQUFNO2FBQ1QsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2hELE9BQU8sQ0FBQyxDQUFDLEVBQWUsRUFBRSxFQUFFO1lBQzVCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVc7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQWUsRUFBRSxFQUFFO1lBQ3ZDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELFFBQVEsQ0FBQyxhQUE0QjtRQUVwQyxJQUFJLENBQUMsTUFBTTthQUNULE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNoRCxPQUFPLENBQUMsQ0FBQyxFQUFlLEVBQUUsRUFBRTtZQUM1QixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTyxvQkFBb0I7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU8sb0JBQW9CO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5pcXVlVmFsdWUgfSBmcm9tICcuL3VuaXF1ZS12YWx1ZSc7XG5pbXBvcnQgeyBVbmlxdWVWYWx1ZUlkR2VuZXJhdG9yIH0gZnJvbSAnLi91bmlxdWUtdmFsdWUuaWQtZ2VuZXJhdG9yJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlSWQgfSBmcm9tICcuL3VuaXF1ZS12YWx1ZS1pZCc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uLy4uLy4uL2ZpZWxkL2NvcmUvZG9tYWluL2ZpZWxkL2ZpZWxkJztcblxuZXhwb3J0IGNsYXNzIFVuaXF1ZVZhbHVlQ29sbGVjdGlvbiB7XG5cblx0cHJpdmF0ZSByZWFkb25seSB2YWx1ZXM6IEFycmF5PFVuaXF1ZVZhbHVlPiA9IFtdO1xuXG5cdHByaXZhdGUgYWxsU2VsZWN0ZWQ6IGJvb2xlYW47XG5cblx0cHJpdmF0ZSBhbGxEaXNhYmxlZDogYm9vbGVhbjtcblxuXHRjb25zdHJ1Y3Rvcih2YWx1ZXM6IEFycmF5PGFueT4sXG5cdFx0XHRcdGZpZWxkOiBGaWVsZCkge1xuXG5cdFx0Zm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcblxuXHRcdFx0dGhpcy52YWx1ZXMucHVzaChcblx0XHRcdFx0bmV3IFVuaXF1ZVZhbHVlKFxuXHRcdFx0XHRcdFVuaXF1ZVZhbHVlSWRHZW5lcmF0b3IuZ2VuZXJhdGUoKSxcblx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHRmaWVsZC5nZXREaXNwbGF5VmFsdWUodmFsdWUpLFxuXHRcdFx0XHRcdHRydWVcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHR0aGlzLmNhbGN1bGF0ZUFsbFNlbGVjdGVkKCk7XG5cdFx0dGhpcy5jYWxjdWxhdGVBbGxEaXNhYmxlZCgpO1xuXHR9XG5cblx0Z2V0QWxsKCk6IEFycmF5PFVuaXF1ZVZhbHVlPiB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzO1xuXHR9XG5cblx0aXNBbGxTZWxlY3RlZCgpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5hbGxTZWxlY3RlZDtcblx0fVxuXG5cdGlzQWxsRGlzYWJsZWQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuYWxsRGlzYWJsZWQ7XG5cdH1cblxuXHRnZXROb3RTZWxlY3RlZCgpOiBBcnJheTxVbmlxdWVWYWx1ZT4ge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5maWx0ZXIoKHV2OiBVbmlxdWVWYWx1ZSkgPT4gdXYuaXNEaXNhYmxlZCgpKTtcblx0fVxuXG5cdHNlbGVjdEFsbCgpOiB2b2lkIHtcblx0XHR0aGlzLnZhbHVlcy5mb3JFYWNoKCh1djogVW5pcXVlVmFsdWUpID0+IHtcblx0XHRcdHV2LnNlbGVjdCgpO1xuXHRcdH0pO1xuXHRcdHRoaXMuYWxsU2VsZWN0ZWQgPSB0cnVlO1xuXHRcdHRoaXMuYWxsRGlzYWJsZWQgPSBmYWxzZTtcblx0fVxuXG5cdHNlbGVjdCh1bmlxdWVWYWx1ZUlkOiBVbmlxdWVWYWx1ZUlkKTogdm9pZCB7XG5cblx0XHR0aGlzLnZhbHVlc1xuXHRcdFx0LmZpbHRlcigodXYpID0+IHV2LmdldElkKCkuZXF1YWxzKHVuaXF1ZVZhbHVlSWQpKVxuXHRcdFx0LmZvckVhY2goKHV2OiBVbmlxdWVWYWx1ZSkgPT4ge1xuXHRcdFx0XHR1di5zZWxlY3QoKTtcblx0XHRcdH0pO1xuXG5cdFx0dGhpcy5jYWxjdWxhdGVBbGxTZWxlY3RlZCgpO1xuXHRcdHRoaXMuY2FsY3VsYXRlQWxsRGlzYWJsZWQoKTtcblx0fVxuXG5cdHVuc2VsZWN0QWxsKCk6IHZvaWQge1xuXHRcdHRoaXMudmFsdWVzLmZvckVhY2goKHV2OiBVbmlxdWVWYWx1ZSkgPT4ge1xuXHRcdFx0dXYudW5zZWxlY3QoKTtcblx0XHR9KTtcblx0XHR0aGlzLmFsbFNlbGVjdGVkID0gZmFsc2U7XG5cdFx0dGhpcy5hbGxEaXNhYmxlZCA9IHRydWU7XG5cdH1cblxuXHR1bnNlbGVjdCh1bmlxdWVWYWx1ZUlkOiBVbmlxdWVWYWx1ZUlkKTogdm9pZCB7XG5cblx0XHR0aGlzLnZhbHVlc1xuXHRcdFx0LmZpbHRlcigodXYpID0+IHV2LmdldElkKCkuZXF1YWxzKHVuaXF1ZVZhbHVlSWQpKVxuXHRcdFx0LmZvckVhY2goKHV2OiBVbmlxdWVWYWx1ZSkgPT4ge1xuXHRcdFx0XHR1di51bnNlbGVjdCgpO1xuXHRcdFx0fSk7XG5cblx0XHR0aGlzLmNhbGN1bGF0ZUFsbFNlbGVjdGVkKCk7XG5cdFx0dGhpcy5jYWxjdWxhdGVBbGxEaXNhYmxlZCgpO1xuXHR9XG5cblx0cHJpdmF0ZSBjYWxjdWxhdGVBbGxTZWxlY3RlZCgpOiB2b2lkIHtcblx0XHR0aGlzLmFsbFNlbGVjdGVkID0gIXRoaXMudmFsdWVzLnNvbWUoKGY6IFVuaXF1ZVZhbHVlKSA9PiBmLmlzRGlzYWJsZWQoKSk7XG5cdH1cblxuXHRwcml2YXRlIGNhbGN1bGF0ZUFsbERpc2FibGVkKCk6IHZvaWQge1xuXHRcdHRoaXMuYWxsRGlzYWJsZWQgPSAhdGhpcy52YWx1ZXMuc29tZSgoZjogVW5pcXVlVmFsdWUpID0+IGYuaXNFbmFibGVkKCkpO1xuXHR9XG5cbn1cbiJdfQ==