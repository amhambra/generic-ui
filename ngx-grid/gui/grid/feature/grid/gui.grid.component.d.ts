import { ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { GuiGridGateway } from './gui.grid-gateway';
import { GuiGridIdGenerator } from './register/gui.grid-id.generator';
import { GuiGridRegister } from './register/gui.grid.register';
import { GuiGridApi } from './api/gui.grid.api-provider';
import { FormationCommandInvoker } from '../../../../structure/formation/core/api/formation.command-invoker';
import { SourceCommandInvoker } from '../../../../structure/source/core/api/source.command-invoker';
import { FormationWarehouse } from '../../../../structure/formation/core/api/formation.warehouse';
import { SearchCommandInvoker } from '../../../../structure/search/core/api/search.command-invoker';
import { SchemaCommandInvoker } from '../../../../schema/core/api/schema.command-invoker';
import { StructureCommandInvoker } from '../../../../structure/core/api/structure.command-invoker';
import { PagingCommandInvoker } from '../../../../structure/paging/core/api/paging.command-invoker';
import { SummariesCommandInvoker } from '../../../../structure/summaries/core/api/summaries.command-invoker';
import { SortingCommandInvoker } from '../../../../structure/sorting/core/api/sorting.command-invoker';
import { CompositionCommandInvoker } from '../../../../composition/core/api/composition.command-invoker';
import { CompositionWarehouse } from '../../../../composition/core/api/composition.warehouse';
import { FilterIntegration } from '../../../../structure/filter/core/api-integration/filter.integration';
export declare class GuiGridComponent extends GuiGridGateway implements OnInit, OnDestroy {
    private readonly platformId;
    private readonly elementRef;
    private readonly changeDetectorRef;
    private readonly gridRegister;
    private readonly gridIdGenerator;
    private readonly formationCommandDispatcher;
    private readonly formationWarehouse;
    private readonly compositionCommandInvoker;
    private readonly compositionWarehouse;
    private readonly filterIntegration;
    private readonly sourceCommandDispatcher;
    private readonly searchCommandInvoker;
    private readonly schemaCommandInvoker;
    private readonly structureCommandDispatcher;
    private readonly summariesCommandInvoker;
    private readonly sortingCommandInvoker;
    private readonly pagingCommandInvoker;
    private static readonly GUI_GRID_ID;
    structureRef: any;
    gridId: string;
    api: GuiGridApi;
    private localGridId;
    private readonly gridThemeCommandInvoker;
    private readonly classModifier;
    private readonly styleModifier;
    private readonly attributeModifier;
    constructor(platformId: any, elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, gridRegister: GuiGridRegister, gridIdGenerator: GuiGridIdGenerator, formationCommandDispatcher: FormationCommandInvoker, formationWarehouse: FormationWarehouse, compositionCommandInvoker: CompositionCommandInvoker, compositionWarehouse: CompositionWarehouse, filterIntegration: FilterIntegration, sourceCommandDispatcher: SourceCommandInvoker, searchCommandInvoker: SearchCommandInvoker, schemaCommandInvoker: SchemaCommandInvoker, structureCommandDispatcher: StructureCommandInvoker, summariesCommandInvoker: SummariesCommandInvoker, sortingCommandInvoker: SortingCommandInvoker, pagingCommandInvoker: PagingCommandInvoker);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getElementRef(): ElementRef;
    getGridId(): string;
    detectChanges(): void;
    private exposeGridId;
    private initApi;
}
