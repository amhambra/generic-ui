import { ChangeDetectionStrategy, Component, inject, Input, ViewEncapsulation } from '@angular/core';
import { combineLatest } from 'rxjs';
import { SmartComponent } from '../../../../feature/common/component/src/smart-component';
import { RowSelectionType } from '../../../../core/structure/formation/src/api/row-selected/row-selection';
import { RowSelectToggleType } from '../../../../core/structure/formation/src/domain/row-select-toggle-type';
import { fromRxJsObservable, hermesMap, toRxJsObservable } from '@generic-ui/hermes';
import { GuiState } from '../../../../feature/gui-angular/state/gui.state';
import * as i0 from "@angular/core";
import * as i1 from "../../../../core/structure/formation/src/api/formation.publisher";
import * as i2 from "../edit/structure.edit-mode.archive";
import * as i3 from "../../../../core/structure/formation/src/api/formation.warehouse";
import * as i4 from "../../../../core/structure/structure-core/src/api/structure.warehouse";
import * as i5 from "../../../../core/structure/vertical-formation/src/api/vertical-formation.warehouse";
import * as i6 from "../../../../core/structure/structure-core/src/api/global/structure.id";
import * as i7 from "../../../../core/schema/src/api/global/schema.read-model-root-id";
import * as i8 from "../../../../core/structure/search/src/api/search.warehouse";
import * as i9 from "../../../../core/schema/src/api/schema.warehouse";
import * as i10 from "@angular/common";
import * as i11 from "../../../../feature/gui-angular/template/let/gui.let.directive";
import * as i12 from "./row/structure-row.component";
export class StructureContentComponent extends SmartComponent {
    formationPublisher;
    structureEditModeArchive;
    formationWarehouse;
    structureWarehouse;
    verticalFormationWarehouse;
    structureId;
    schemaReadModelRootId;
    searchWarehouse;
    schemaWarehouse;
    source;
    columns;
    state = inject((GuiState));
    state$ = this.state.select();
    constructor(elementRef, changeDetectorRef, formationPublisher, structureEditModeArchive, formationWarehouse, structureWarehouse, verticalFormationWarehouse, structureId, schemaReadModelRootId, searchWarehouse, schemaWarehouse) {
        super(changeDetectorRef, elementRef);
        this.formationPublisher = formationPublisher;
        this.structureEditModeArchive = structureEditModeArchive;
        this.formationWarehouse = formationWarehouse;
        this.structureWarehouse = structureWarehouse;
        this.verticalFormationWarehouse = verticalFormationWarehouse;
        this.structureId = structureId;
        this.schemaReadModelRootId = schemaReadModelRootId;
        this.searchWarehouse = searchWarehouse;
        this.schemaWarehouse = schemaWarehouse;
        this.state.setValue({
            checkboxSelection: false,
            radioSelection: false,
            searchPhrase: ''
        });
        this.state.connect('editMode', this.structureEditModeArchive.on());
        this.state.connect('selectionEnabled', this.formationWarehouse.onSelectionEnabled(this.structureId));
        this.state.connect('rowHeight', this.verticalFormationWarehouse.onRowHeight(this.structureId));
        this.state.connect('cellEditing', this.structureWarehouse.onEditManager(this.structureId));
        this.state.connect('schemaRowClass', this.schemaWarehouse.onRowClass(this.schemaReadModelRootId));
        this.state.connect('schemaRowStyle', this.schemaWarehouse.onRowStyle(this.schemaReadModelRootId));
        this.state.connect('checkboxSelection', this.selectCheckboxSelection());
        this.state.connect('radioSelection', this.selectRadioSelection());
        this.state.connect('searchPhrase', this.selectSearchPhrase());
    }
    trackByFn() {
        return 0;
    }
    translateY(index, rowHeight) {
        const height = index * rowHeight;
        return `translateY(${height}px)`;
    }
    toggleSelectedRow(entity, selectionEnabled, checkboxSelection, radioSelection) {
        if (!selectionEnabled) {
            return;
        }
        if (!checkboxSelection && !radioSelection) {
            this.formationPublisher.toggleSelectedRow(entity.getId(), RowSelectToggleType.NONE, this.structureId);
        }
    }
    getSelectorName() {
        return 'gui-structure-content';
    }
    selectCheckboxSelection() {
        return this.formationWarehouse
            .onType(this.structureId)
            .pipe(hermesMap((type) => {
            return type === RowSelectionType.CHECKBOX;
        }));
    }
    selectRadioSelection() {
        return this.formationWarehouse
            .onType(this.structureId)
            .pipe(hermesMap((type) => {
            return type === RowSelectionType.RADIO;
        }));
    }
    selectSearchPhrase() {
        return fromRxJsObservable(combineLatest(toRxJsObservable(this.searchWarehouse.onPhrase(this.structureId)), toRxJsObservable(this.searchWarehouse.onHighlight(this.structureId))))
            .pipe(hermesMap(([phrase, highlighting]) => {
            if (!highlighting) {
                return '';
            }
            else {
                return phrase;
            }
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FormationPublisher }, { token: i2.StructureEditModeArchive }, { token: i3.FormationWarehouse }, { token: i4.StructureWarehouse }, { token: i5.VerticalFormationWarehouse }, { token: i6.StructureId }, { token: i7.SchemaReadModelRootId }, { token: i8.SearchWarehouse }, { token: i9.SchemaWarehouse }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.2", type: StructureContentComponent, selector: "div[gui-structure-content]", inputs: { source: "source", columns: "columns" }, providers: [
            GuiState
        ], usesInheritance: true, ngImport: i0, template: "<div *guiLet=\"state$; let localState\"\n\t class=\"gui-content\">\n\n\t<div (click)=\"toggleSelectedRow(entity, localState.selectionEnabled, localState.checkboxSelection, localState.radioSelection)\"\n\t\t *ngFor=\"let entity of source; let index = index; trackBy: trackByFn\"\n\t\t [cellEditing]=\"localState.cellEditing\"\n\t\t [checkboxSelection]=\"localState.checkboxSelection\"\n\t\t [columns]=\"columns\"\n\t\t [editMode]=\"localState.editMode\"\n\t\t [entity]=\"entity\"\n\t\t [id]=\"entity.getUiId()\"\n\t\t [index]=\"entity.getPosition()\"\n\t\t [ngClass]=\"{'even': entity.isEven(), 'odd': entity.isOdd()}\"\n\t\t [ngStyle]=\"{'transform': translateY(index, localState.rowHeight)}\"\n\t\t [radioSelection]=\"localState.radioSelection\"\n\t\t [rowClass]=\"localState.schemaRowClass\"\n\t\t [rowStyle]=\"localState.schemaRowStyle\"\n\t\t [searchPhrase]=\"localState.searchPhrase\"\n\t\t [style.height.px]=\"localState.rowHeight\"\n\t\t class=\"gui-row\"\n\t\t gui-structure-row>\n\t</div>\n\n</div>\n", dependencies: [{ kind: "directive", type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i10.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i11.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }, { kind: "component", type: i12.StructureRowComponent, selector: "div[gui-structure-row]", inputs: ["entity", "columns", "editMode", "cellEditing", "searchPhrase", "index", "rowStyle", "rowClass", "checkboxSelection", "radioSelection"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-content]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<div *guiLet=\"state$; let localState\"\n\t class=\"gui-content\">\n\n\t<div (click)=\"toggleSelectedRow(entity, localState.selectionEnabled, localState.checkboxSelection, localState.radioSelection)\"\n\t\t *ngFor=\"let entity of source; let index = index; trackBy: trackByFn\"\n\t\t [cellEditing]=\"localState.cellEditing\"\n\t\t [checkboxSelection]=\"localState.checkboxSelection\"\n\t\t [columns]=\"columns\"\n\t\t [editMode]=\"localState.editMode\"\n\t\t [entity]=\"entity\"\n\t\t [id]=\"entity.getUiId()\"\n\t\t [index]=\"entity.getPosition()\"\n\t\t [ngClass]=\"{'even': entity.isEven(), 'odd': entity.isOdd()}\"\n\t\t [ngStyle]=\"{'transform': translateY(index, localState.rowHeight)}\"\n\t\t [radioSelection]=\"localState.radioSelection\"\n\t\t [rowClass]=\"localState.schemaRowClass\"\n\t\t [rowStyle]=\"localState.schemaRowStyle\"\n\t\t [searchPhrase]=\"localState.searchPhrase\"\n\t\t [style.height.px]=\"localState.rowHeight\"\n\t\t class=\"gui-row\"\n\t\t gui-structure-row>\n\t</div>\n\n</div>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FormationPublisher }, { type: i2.StructureEditModeArchive }, { type: i3.FormationWarehouse }, { type: i4.StructureWarehouse }, { type: i5.VerticalFormationWarehouse }, { type: i6.StructureId }, { type: i7.SchemaReadModelRootId }, { type: i8.SearchWarehouse }, { type: i9.SchemaWarehouse }], propDecorators: { source: [{
                type: Input
            }], columns: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,