import { ChangeDetectionStrategy, Component, ViewEncapsulation, inject } from '@angular/core';
import { StructureId } from '../../../../core/structure/structure-core/src/api/global/structure.id';
import { CompositionWarehouse } from '../../../../core/composition/src/api/composition.warehouse';
import { VerticalFormationWarehouse } from '../../../../core/structure/vertical-formation/src/api/vertical-formation.warehouse';
import { RowSelectionType } from '../../../../core/structure/formation/src/api/row-selected/row-selection';
import { CompositionId } from '../../../../core/composition/src/api/global/composition.id';
import { GuiState } from '../../../../feature/gui-angular/state/gui.state';
import { hermesMap } from '@generic-ui/hermes';
import { GuiComponent } from '../../../../feature/common/component';
import * as i0 from "@angular/core";
import * as i1 from "../../../../core/structure/filter/src/api/filter.warehouse";
import * as i2 from "../../../../core/structure/formation/src/api/formation.warehouse";
import * as i3 from "../../../../feature/composition/src/column/composition.template-warehouse";
import * as i4 from "@angular/common";
import * as i5 from "../../../../feature/gui-angular/template/let/gui.let.directive";
import * as i6 from "../../../../feature/gui-angular/template/style/gui.style.directive";
import * as i7 from "./column/structure-header-columns.component";
import * as i8 from "./group/structure-header-groups.component";
import * as i9 from "./filters/structure-header-filters.component";
export class StructureHeaderComponent extends GuiComponent {
    filterWarehouse;
    formationWarehouse;
    compositionTemplateWarehouse;
    state = inject((GuiState));
    compositionWarehouse = inject(CompositionWarehouse);
    structureId = inject(StructureId);
    compositionId = inject(CompositionId);
    verticalFormationWarehouse = inject(VerticalFormationWarehouse);
    state$ = this.state.select();
    width$ = this.compositionWarehouse.onContainerWidth(this.compositionId)
        .pipe(hermesMap(width => {
        return {
            width
        };
    }));
    filterHeaderHeight$ = this.verticalFormationWarehouse.onRowHeight(this.structureId)
        .pipe(hermesMap((rowHeight) => {
        const headerHeight = +(rowHeight) + 2;
        return {
            height: headerHeight
        };
    }));
    constructor(elementRef, filterWarehouse, formationWarehouse, compositionTemplateWarehouse) {
        super(elementRef);
        this.filterWarehouse = filterWarehouse;
        this.formationWarehouse = formationWarehouse;
        this.compositionTemplateWarehouse = compositionTemplateWarehouse;
        this.state.setValue({
            headerColumns: [],
            filterRowEnabled: false,
            showGroups: false
        });
        this.state.connect('showSelection', this.selectShowSelection());
        this.state.connect('headerColumns', this.compositionTemplateWarehouse.onHeaderCols(this.compositionId));
        this.state.connect('filterRowEnabled', this.filterWarehouse.onFilteringEnabled(this.structureId));
        this.state.connect('showGroups', this.selectShowGroups());
        this.state.connect('groups', this.selectGroups());
    }
    getSelectorName() {
        return 'gui-structure-header';
    }
    selectGroups() {
        return this.compositionWarehouse
            .onGroups(this.compositionId)
            .pipe(hermesMap((collection) => collection.getGroups()));
    }
    selectShowGroups() {
        return this.compositionWarehouse
            .onGroups(this.compositionId)
            .pipe(hermesMap((collection) => collection.isVisible()));
    }
    selectShowSelection() {
        return this.formationWarehouse
            .onType(this.structureId)
            .pipe(hermesMap((type) => {
            return type === RowSelectionType.CHECKBOX || type === RowSelectionType.RADIO;
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureHeaderComponent, deps: [{ token: i0.ElementRef }, { token: i1.FilterWarehouse }, { token: i2.FormationWarehouse }, { token: i3.CompositionTemplateWarehouse }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.2", type: StructureHeaderComponent, selector: "div[gui-structure-header]", providers: [
            GuiState
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *guiLet=\"state$; let localState\">\n\t<div *ngIf=\"localState.showGroups\"\n\t\t [checkboxSelection]=\"localState.showSelection\"\n\t\t [groups]=\"localState.groups\"\n\t\t class=\"gui-header\"\n\t\t gui-structure-header-groups>\n\t</div>\n</ng-container>\n\n<div *guiLet=\"state$; let localState\"\n\t [columns]=\"localState.headerColumns\"\n\t [guiStyle]=\"width$\"\n\t [showSelection]=\"localState.showSelection\"\n\t class=\"gui-header\"\n\t gui-structure-header-columns>\n</div>\n\n<ng-container *guiLet=\"state$; let localState\">\n\t<div *ngIf=\"localState.filterRowEnabled\"\n\t\t [columns]=\"localState.headerColumns\"\n\t\t [guiStyle]=\"filterHeaderHeight$\"\n\t\t class=\"gui-header\"\n\t\t gui-structure-header-filters>\n\t</div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }, { kind: "directive", type: i6.GuiStyleDirective, selector: "[guiStyle]", inputs: ["guiStyle"] }, { kind: "component", type: i7.StructureHeaderColumnsComponent, selector: "div[gui-structure-header-columns][columns]", inputs: ["columns", "showSelection"] }, { kind: "component", type: i8.StructureHeaderGroupsComponent, selector: "div[gui-structure-header-groups][groups][checkboxSelection]", inputs: ["groups", "showGroups", "checkboxSelection"] }, { kind: "component", type: i9.StructureHeaderFiltersComponent, selector: "div[gui-structure-header-filters][columns]", inputs: ["columns"], outputs: ["closed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-header]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<ng-container *guiLet=\"state$; let localState\">\n\t<div *ngIf=\"localState.showGroups\"\n\t\t [checkboxSelection]=\"localState.showSelection\"\n\t\t [groups]=\"localState.groups\"\n\t\t class=\"gui-header\"\n\t\t gui-structure-header-groups>\n\t</div>\n</ng-container>\n\n<div *guiLet=\"state$; let localState\"\n\t [columns]=\"localState.headerColumns\"\n\t [guiStyle]=\"width$\"\n\t [showSelection]=\"localState.showSelection\"\n\t class=\"gui-header\"\n\t gui-structure-header-columns>\n</div>\n\n<ng-container *guiLet=\"state$; let localState\">\n\t<div *ngIf=\"localState.filterRowEnabled\"\n\t\t [columns]=\"localState.headerColumns\"\n\t\t [guiStyle]=\"filterHeaderHeight$\"\n\t\t class=\"gui-header\"\n\t\t gui-structure-header-filters>\n\t</div>\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FilterWarehouse }, { type: i2.FormationWarehouse }, { type: i3.CompositionTemplateWarehouse }] });
//# sourceMappingURL=data:application/json;base64,