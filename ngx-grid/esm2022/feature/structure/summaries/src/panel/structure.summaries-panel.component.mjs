import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation, inject } from '@angular/core';
import { StructureId } from '../../../../../core/structure/structure-core/src/api/global/structure.id';
import { SmartComponent } from '../../../../common/component/src/smart-component';
import { SummariesTranslations } from '../structure.summaries-translations';
import { RowSelectionType } from '../../../../../core/structure/formation/src/api/row-selected/row-selection';
import { CompositionId } from '../../../../../core/composition/src/api/global/composition.id';
import { CompositionTemplateWarehouse } from '../../../../composition/src/column/composition.template-warehouse';
import { FormationWarehouse } from '../../../../../core/structure/formation/src/api/formation.warehouse';
import { hermesMap } from '@generic-ui/hermes';
import { GuiState } from '../../../../../feature/gui-angular/state/gui.state';
import * as i0 from "@angular/core";
import * as i1 from "../../../../../core/structure/summaries/src/api/summaries.event-repository";
import * as i2 from "../../../../../core/l10n/src/api/translation.facade";
import * as i3 from "../../../../../core/structure/source/src/api/source.warehouse";
import * as i4 from "@angular/common";
import * as i5 from "@generic-ui/fabric";
import * as i6 from "../../../../gui-angular/template/let/gui.let.directive";
import * as i7 from "../../../../l10n/src/translation.pipe";
import * as i8 from "../../../../gui-angular/template/push/gui.push.pipe";
export class StructureSummariesPanelComponent extends SmartComponent {
    structureSummariesEventRepository;
    translationService;
    sourceWarehouse;
    enabled;
    state = inject((GuiState));
    compositionId = inject(CompositionId);
    structureId = inject(StructureId);
    formationWarehouse = inject(FormationWarehouse);
    compositionTemplateWarehouse = inject(CompositionTemplateWarehouse);
    headerColumns$ = this.compositionTemplateWarehouse.onHeaderCols(this.compositionId);
    state$ = this.state.select();
    checkboxSelection$ = this.selectCheckboxSelection();
    constructor(changeDetectorRef, elementRef, structureSummariesEventRepository, translationService, sourceWarehouse) {
        super(changeDetectorRef, elementRef);
        this.structureSummariesEventRepository = structureSummariesEventRepository;
        this.translationService = translationService;
        this.sourceWarehouse = sourceWarehouse;
        this.addClassToHost('gui-flex');
        this.state.connect('summariesTranslations', this.selectSummariesTranslations());
        this.state.connect('sourceEmpty', this.selectSourceEmpty());
        this.state.connect('summaries', this.selectSummaries());
    }
    isSummariesTypePresent(summaries) {
        return summaries !== undefined && summaries !== null;
    }
    getSelectorName() {
        return 'gui-structure-summaries-panel';
    }
    selectCheckboxSelection() {
        return this.formationWarehouse
            .onType(this.structureId)
            .pipe(hermesMap((type) => {
            return type === RowSelectionType.CHECKBOX;
        }));
    }
    selectSourceEmpty() {
        return this.sourceWarehouse
            .onItemsSize(this.structureId)
            .pipe(hermesMap((size) => {
            return size === 0;
        }));
    }
    selectSummariesTranslations() {
        return this.translationService
            .onTranslation()
            .pipe(hermesMap((translation) => {
            return new SummariesTranslations(translation.summariesDistinctValuesTooltip, translation.summariesAverageTooltip, translation.summariesMinTooltip, translation.summariesMaxTooltip, translation.summariesMedTooltip, translation.summariesCountTooltip);
        }));
    }
    selectSummaries() {
        return this.structureSummariesEventRepository
            .onSummariesChanged(this.structureId.toReadModelRootId())
            .pipe(hermesMap((event) => {
            return event.getSummaries();
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureSummariesPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.SummariesEventRepository }, { token: i2.TranslationFacade }, { token: i3.SourceWarehouse }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.2", type: StructureSummariesPanelComponent, selector: "div[gui-structure-summaries-panel][enabled]", inputs: { enabled: "enabled" }, providers: [
            GuiState
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *guiLet=\"state$; let localState\">\n\t<ng-container *ngIf=\"enabled && localState.summaries && !localState.sourceEmpty\">\n\n\t\t<div *ngIf=\"checkboxSelection$ | guiPush\"\n\t\t\t class=\"gui-structure-summaries-cell gui-row-checkbox gui-flex gui-justify-between\n\t gui-overflow-hidden gui-relative gui-py-0 gui-px-6 gui-box-border\n\t gui-leading-4 gui-whitespace-nowrap gui-overflow-ellipsis\">\n\t\t</div>\n\n\t\t<div *ngFor=\"let column of headerColumns$ | guiPush\"\n\t\t\t [style.width.px]=\"column.width\"\n\t\t\t class=\"gui-structure-summaries-cell\">\n\n\t\t\t<ng-container *ngIf=\"localState.summaries && !!localState.summaries.get(column.getFieldId().getId())\">\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).count)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.countTooltip\">{{'summariesCount' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).distinct)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.distinctTooltip\">{{'summariesDist' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).sum)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t<span [gui-tooltip]=\"'Sum'\" -->\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t\t  class=\"gui-math-symbol\">&sum;</span>-->\n\t\t\t\t\t\t\t{{'summariesSum' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).sum }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).average)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Average'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-mean\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>_</span><span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.averageTooltip\">{{'summariesAvg' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).average }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).min)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Min'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&and;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.minTooltip\">\n\t\t\t\t\t\t\t{{'summariesMin' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).min }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).max)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Max'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&or;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.maxTooltip\">\n\t\t\t\t\t\t\t{{'summariesMax' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).max }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).median)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Median'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-median\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>~</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.medTooltip\">{{'summariesMed' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).truthy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesTruthy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).falsy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesFalsy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t</div>\n\n\t\t\t</ng-container>\n\t\t</div>\n\n\t</ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.FabricTooltipDirective, selector: "[gui-tooltip]", inputs: ["gui-tooltip"], exportAs: ["guiTooltip"] }, { kind: "directive", type: i6.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }, { kind: "pipe", type: i7.TranslationPipe, name: "guiTranslate" }, { kind: "pipe", type: i8.GuiPushPipe, name: "guiPush" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureSummariesPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-summaries-panel][enabled]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<ng-container *guiLet=\"state$; let localState\">\n\t<ng-container *ngIf=\"enabled && localState.summaries && !localState.sourceEmpty\">\n\n\t\t<div *ngIf=\"checkboxSelection$ | guiPush\"\n\t\t\t class=\"gui-structure-summaries-cell gui-row-checkbox gui-flex gui-justify-between\n\t gui-overflow-hidden gui-relative gui-py-0 gui-px-6 gui-box-border\n\t gui-leading-4 gui-whitespace-nowrap gui-overflow-ellipsis\">\n\t\t</div>\n\n\t\t<div *ngFor=\"let column of headerColumns$ | guiPush\"\n\t\t\t [style.width.px]=\"column.width\"\n\t\t\t class=\"gui-structure-summaries-cell\">\n\n\t\t\t<ng-container *ngIf=\"localState.summaries && !!localState.summaries.get(column.getFieldId().getId())\">\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).count)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.countTooltip\">{{'summariesCount' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).distinct)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.distinctTooltip\">{{'summariesDist' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).sum)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t<span [gui-tooltip]=\"'Sum'\" -->\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t\t  class=\"gui-math-symbol\">&sum;</span>-->\n\t\t\t\t\t\t\t{{'summariesSum' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).sum }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).average)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Average'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-mean\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>_</span><span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.averageTooltip\">{{'summariesAvg' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).average }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).min)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Min'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&and;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.minTooltip\">\n\t\t\t\t\t\t\t{{'summariesMin' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).min }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).max)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Max'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&or;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.maxTooltip\">\n\t\t\t\t\t\t\t{{'summariesMax' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).max }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).median)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Median'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-median\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>~</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.medTooltip\">{{'summariesMed' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).truthy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesTruthy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).falsy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesFalsy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t</div>\n\n\t\t\t</ng-container>\n\t\t</div>\n\n\t</ng-container>\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.SummariesEventRepository }, { type: i2.TranslationFacade }, { type: i3.SourceWarehouse }], propDecorators: { enabled: [{
                type: Input,
                args: [{ required: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,