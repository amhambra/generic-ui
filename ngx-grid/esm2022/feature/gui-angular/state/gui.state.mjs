import { Injectable } from '@angular/core';
import { hermesDistinctUntilChanged, hermesMap, HermesReplaySubject, hermesTakeUntil } from '@generic-ui/hermes';
import * as i0 from "@angular/core";
export class GuiState {
    state = {};
    state$ = new HermesReplaySubject();
    destroy$ = new HermesReplaySubject();
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    setValue(state) {
        this.state = Object.assign({}, this.state, state);
        this.state$.next(this.state);
    }
    getValue(key) {
        if (key !== undefined) {
            return this.state[key];
        }
        else {
            return this.state;
        }
    }
    select(key) {
        let preparedState$ = this.state$;
        if (key !== undefined) {
            preparedState$ = this.state$.pipe(hermesMap((state) => {
                return state[key];
            }));
        }
        return preparedState$.pipe(hermesDistinctUntilChanged());
    }
    connect(arg, value$) {
        if (typeof arg === 'string') {
            value$
                .pipe(hermesTakeUntil(this.destroy$))
                .subscribe((value) => {
                this.setPartialState(arg, value);
            });
        }
        else {
            arg
                .pipe(hermesTakeUntil(this.destroy$))
                .subscribe((state) => {
                this.setValue(state);
            });
        }
    }
    setPartialState(key, value) {
        const newState = {};
        newState[key] = value;
        this.state = Object.assign({}, this.state, newState);
        this.state$.next(this.state);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GuiState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GuiState });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GuiState, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpLnN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1ncmlkL3NyYy9mZWF0dXJlL2d1aS1hbmd1bGFyL3N0YXRlL2d1aS5zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxTQUFTLEVBQW9CLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUduSSxNQUFNLE9BQU8sUUFBUTtJQUVaLEtBQUssR0FBZSxFQUFFLENBQUM7SUFFZCxNQUFNLEdBQUcsSUFBSSxtQkFBbUIsRUFBYyxDQUFDO0lBRS9DLFFBQVEsR0FBRyxJQUFJLG1CQUFtQixFQUFRLENBQUM7SUFFNUQsV0FBVztRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBSUQsUUFBUSxDQUFDLEtBQXFCO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUlELFFBQVEsQ0FHUCxHQUFPO1FBS1AsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ04sT0FBTyxJQUFJLENBQUMsS0FBcUIsQ0FBQztTQUNsQztJQUNGLENBQUM7SUFJRCxNQUFNLENBQW9CLEdBQU87UUFFaEMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVqQyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDdEIsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNoQyxTQUFTLENBQUMsQ0FBQyxLQUFRLEVBQUUsRUFBRTtnQkFDdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQ0YsQ0FBQztTQUNGO1FBRUQsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUN6QiwwQkFBMEIsRUFBRSxDQUM1QixDQUFDO0lBQ0gsQ0FBQztJQUlELE9BQU8sQ0FBQyxHQUFrQyxFQUFFLE1BQXFDO1FBRWhGLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzVCLE1BQU07aUJBQ0osSUFBSSxDQUNKLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzlCO2lCQUNBLFNBQVMsQ0FBQyxDQUFDLEtBQWlCLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsR0FBMkI7aUJBQzFCLElBQUksQ0FDSixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUM5QjtpQkFDQSxTQUFTLENBQUMsQ0FBQyxLQUFRLEVBQUUsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0YsQ0FBQztJQUVPLGVBQWUsQ0FBQyxHQUFZLEVBQUUsS0FBaUI7UUFDdEQsTUFBTSxRQUFRLEdBQWUsRUFBRSxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO3dHQXBGVyxRQUFROzRHQUFSLFFBQVE7OzRGQUFSLFFBQVE7a0JBRHBCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGhlcm1lc0Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBoZXJtZXNNYXAsIEhlcm1lc09ic2VydmFibGUsIEhlcm1lc1JlcGxheVN1YmplY3QsIGhlcm1lc1Rha2VVbnRpbCB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHdWlTdGF0ZTxUPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cblx0cHJpdmF0ZSBzdGF0ZTogUGFydGlhbDxUPiA9IHt9O1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgc3RhdGUkID0gbmV3IEhlcm1lc1JlcGxheVN1YmplY3Q8UGFydGlhbDxUPj4oKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3kkID0gbmV3IEhlcm1lc1JlcGxheVN1YmplY3Q8dm9pZD4oKTtcblxuXHRuZ09uRGVzdHJveSgpOiB2b2lkIHtcblx0XHR0aGlzLmRlc3Ryb3kkLm5leHQoKTtcblx0XHR0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XG5cdH1cblxuXHRzZXRWYWx1ZShzdGF0ZTogVCk6IHZvaWQ7XG5cdHNldFZhbHVlKHN0YXRlOiBQYXJ0aWFsPFQ+KTogdm9pZDtcblx0c2V0VmFsdWUoc3RhdGU6IFQgfCBQYXJ0aWFsPFQ+KTogdm9pZCB7XG5cdFx0dGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUsIHN0YXRlKTtcblx0XHR0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xuXHR9XG5cblx0Z2V0VmFsdWUoKTogVDtcblx0Z2V0VmFsdWU8SyBleHRlbmRzIGtleW9mIFQ+KGtleTogSyk6IFRbS107XG5cdGdldFZhbHVlPFxuXHRcdEsgZXh0ZW5kcyBrZXlvZiBUXG5cdD4oXG5cdFx0a2V5PzogS1xuXHQpOlxuXHRcdHwgVFxuXHRcdHwgVFtLXSB7XG5cblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnN0YXRlW2tleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnN0YXRlIGFzIHVua25vd24gYXMgVDtcblx0XHR9XG5cdH1cblxuXHRzZWxlY3QoKTogSGVybWVzT2JzZXJ2YWJsZTxUPjtcblx0c2VsZWN0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEspOiBIZXJtZXNPYnNlcnZhYmxlPFRbS10+O1xuXHRzZWxlY3Q8SyBleHRlbmRzIGtleW9mIFQ+KGtleT86IEspOiBIZXJtZXNPYnNlcnZhYmxlPFQ+IHwgSGVybWVzT2JzZXJ2YWJsZTxUW0tdPiB7XG5cblx0XHRsZXQgcHJlcGFyZWRTdGF0ZSQgPSB0aGlzLnN0YXRlJDtcblxuXHRcdGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cHJlcGFyZWRTdGF0ZSQgPSB0aGlzLnN0YXRlJC5waXBlKFxuXHRcdFx0XHRoZXJtZXNNYXAoKHN0YXRlOiBUKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlW2tleV07XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmVwYXJlZFN0YXRlJC5waXBlKFxuXHRcdFx0aGVybWVzRGlzdGluY3RVbnRpbENoYW5nZWQoKVxuXHRcdCk7XG5cdH1cblxuXHRjb25uZWN0KHN0YXRlJDogSGVybWVzT2JzZXJ2YWJsZTxUPik6IHZvaWQ7XG5cdGNvbm5lY3Qoa2V5OiBrZXlvZiBULCB2YWx1ZSQ6IEhlcm1lc09ic2VydmFibGU8VFtrZXlvZiBUXT4pOiB2b2lkO1xuXHRjb25uZWN0KGFyZzoga2V5b2YgVCB8IEhlcm1lc09ic2VydmFibGU8VD4sIHZhbHVlJD86IEhlcm1lc09ic2VydmFibGU8VFtrZXlvZiBUXT4pOiB2b2lkIHtcblxuXHRcdGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuXHRcdFx0dmFsdWUkXG5cdFx0XHRcdC5waXBlKFxuXHRcdFx0XHRcdGhlcm1lc1Rha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxuXHRcdFx0XHQpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKHZhbHVlOiBUW2tleW9mIFRdKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZXRQYXJ0aWFsU3RhdGUoYXJnLCB2YWx1ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQoYXJnIGFzIEhlcm1lc09ic2VydmFibGU8VD4pXG5cdFx0XHRcdC5waXBlKFxuXHRcdFx0XHRcdGhlcm1lc1Rha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxuXHRcdFx0XHQpXG5cdFx0XHRcdC5zdWJzY3JpYmUoKHN0YXRlOiBUKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZXRWYWx1ZShzdGF0ZSk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc2V0UGFydGlhbFN0YXRlKGtleToga2V5b2YgVCwgdmFsdWU6IFRba2V5b2YgVF0pOiB2b2lkIHtcblx0XHRjb25zdCBuZXdTdGF0ZTogUGFydGlhbDxUPiA9IHt9O1xuXHRcdG5ld1N0YXRlW2tleV0gPSB2YWx1ZTtcblx0XHR0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSwgbmV3U3RhdGUpO1xuXHRcdHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XG5cdH1cbn1cbiJdfQ==