import { RowSelectToggleType } from './row-select-toggle-type';
import { RowSelectionMode, RowSelectionType } from '../api/row-selected/row-selection';
import { FormationSelection } from './selection/formation.selection';
import { SelectionModeSetAggregateEvent } from '../core/mode/selection-mode-set.aggregate-event';
import { SelectionTypeSetAggregateEvent } from '../core/type/selection-type-set.aggregate-event';
import { SelectionEnabledSetAggregateEvent } from '../core/set-enabled/selection-enabled-set.aggregate-event';
import { ItemEntityId } from '../../../source/src/domain/item/item.entity-id';
import { FormationCustomSelectId } from '../api/custom/formation.custom-select.id';
import { FormationCustomManager } from './custom/formation.custom.manager';
import { FormationCustomSelectionChangeAggregateEvent } from '../core/custom/formation.custom-selection-change.aggregate-event';
import { FormationCustomSelection, FormationCustomSelectionFunctionModel } from '../api/custom/formation.custom-selection';
export class FormationManager {
    id;
    selectedItemIds;
    enabled;
    selection = new FormationSelection(RowSelectionMode.SINGLE, RowSelectionType.ROW);
    allSelected;
    allUnselected;
    customSelection;
    matcher = (item) => item.id;
    constructor(id, selectedItemIds) {
        this.id = id;
        this.selectedItemIds = selectedItemIds;
    }
    init(enabled, mode, type) {
        this.enabled = enabled;
        this.selection.setMode(mode);
        this.selection.setType(type);
        this.customSelection = new FormationCustomManager(false, [
            new FormationCustomSelectionFunctionModel('select_all', 'SELECT_ALL', new FormationCustomSelectId('SELECT_ALL'), true),
            new FormationCustomSelectionFunctionModel('UNSELECT_ALL', 'UNSELECT_ALL', new FormationCustomSelectId('UNSELECT_ALL'), true),
            new FormationCustomSelectionFunctionModel('', 'INVERT', new FormationCustomSelectId('INVERT'), true)
        ]);
        return [
            new SelectionEnabledSetAggregateEvent(this.getId(), this.enabled),
            new SelectionModeSetAggregateEvent(this.getId(), this.selection.getMode()),
            new SelectionTypeSetAggregateEvent(this.getId(), this.selection.getType()),
            new FormationCustomSelectionChangeAggregateEvent(this.getId(), new FormationCustomSelection(this.customSelection.isEnabled(), this.customSelection.getSelections()))
        ];
    }
    setSelection(enabled) {
        this.enabled = enabled;
        return [
            new SelectionEnabledSetAggregateEvent(this.getId(), this.enabled)
        ];
    }
    setMode(mode) {
        this.selection.setMode(mode);
        return [
            new SelectionModeSetAggregateEvent(this.getId(), this.selection.getMode()),
            new SelectionTypeSetAggregateEvent(this.getId(), this.selection.getType())
        ];
    }
    setType(type) {
        this.selection.setType(type);
        return [
            new SelectionModeSetAggregateEvent(this.getId(), this.selection.getMode()),
            new SelectionTypeSetAggregateEvent(this.getId(), this.selection.getType())
        ];
    }
    setMatcher(matcher) {
        this.matcher = matcher;
    }
    setCustomConfig(config) {
        if (config?.enabled) {
            this.customSelection.setEnabled(config.enabled);
        }
        if (config?.selections) {
            this.customSelection.setSelections(config.selections);
        }
        return [
            new FormationCustomSelectionChangeAggregateEvent(this.getId(), new FormationCustomSelection(this.customSelection.isEnabled(), this.customSelection.getSelections()))
        ];
    }
    isAllSelected() {
        return this.allSelected;
    }
    isAllUnselected() {
        return this.allUnselected;
    }
    getSelectedItemIds() {
        return Array.from(this.selectedItemIds).map(id => new ItemEntityId(id));
    }
    selectCustom(id, itemEntities) {
        this.customSelection
            .findSelection(id)
            .ifPresent((s) => {
            if (s.isBuiltIn()) {
                switch (s.getCustomSelectId().toString()) {
                    case 'SELECT_ALL':
                        this.selectAll(itemEntities.map(i => i.getId()));
                        break;
                    case 'UNSELECT_ALL':
                        this.unselectAll();
                        break;
                    case 'INVERT':
                        this.invertSelected(itemEntities.map(i => i.getId()));
                        break;
                    default:
                        break;
                }
            }
            else {
                const selectedItems = s.customSelect(itemEntities);
                this.selectedItemIds = new Set(selectedItems.map(item => item.getId().toString()));
            }
        });
    }
    selectAll(allEntityIds) {
        this.selectedItemIds = new Set(allEntityIds.map(id => id.toString()));
        this.allSelected = true;
        this.allUnselected = false;
    }
    unselectAll() {
        this.selectedItemIds.clear();
        this.allSelected = false;
        this.allUnselected = true;
    }
    invertSelected(allEntityIds) {
        const selectedItemIds = this.getSelectedItemIds();
        const a = allEntityIds.filter((id) => {
            return !selectedItemIds.some((selId) => selId.equals(id));
        });
        this.selectedItemIds = new Set(a.map(id => id.toString()));
        this.calculateAllSelected(allEntityIds);
        this.calculateAllUnselected();
    }
    reSelectByIds(itemEntities) {
        this.selectByIds(this.getSelectedItemIds().map(i => i.getId()), itemEntities);
        this.calculateAllSelected(itemEntities.map(i => i.getId()));
        this.calculateAllUnselected();
    }
    selectByIds(ids, itemEntities) {
        if (!this.enabled) {
            return;
        }
        const itemIds = [];
        for (let i = 0; i < ids.length; i++) {
            const items = itemEntities
                .filter((item) => {
                return this.matcher(item.getSourceItem()) === ids[i];
            })
                .map((item) => item.getId().toString());
            itemIds.push(...items);
        }
        let type = RowSelectToggleType.ADD;
        if (this.selection.isSingle()) {
            type = RowSelectToggleType.NONE;
        }
        itemIds.forEach((id) => {
            this.toggleRowByType(type, id);
        });
        this.calculateAllSelected(itemEntities.map(i => i.getId()));
        this.calculateAllUnselected();
    }
    selectByIndex(indexes, allEntityIds) {
        if (!this.enabled) {
            return;
        }
        const itemIds = indexes.map((i) => {
            if (!allEntityIds[i]) {
                console.error('Item not found');
            }
            return allEntityIds[i].toString();
        });
        let type = RowSelectToggleType.ADD;
        if (this.selection.isSingle()) {
            type = RowSelectToggleType.NONE;
        }
        itemIds.forEach((id) => {
            this.toggleRowByType(type, id);
        });
        this.calculateAllSelected(allEntityIds);
        this.calculateAllUnselected();
    }
    selectRows(itemIds, itemEntityIds) {
    }
    toggleRow(itemId, type, itemEntityIds) {
        if (!this.enabled) {
            return;
        }
        if (type === RowSelectToggleType.ADD && this.selection.isSingle()) {
            type = RowSelectToggleType.NONE;
        }
        this.toggleRowByType(type, itemId);
        this.calculateAllSelected(itemEntityIds);
        this.calculateAllUnselected();
    }
    calculateAllSelected(itemEntityIds) {
        if (itemEntityIds.length !== this.selectedItemIds.size) {
            this.allSelected = false;
        }
        else {
            const rows = Array.from(this.selectedItemIds);
            let equal = true;
            rows.sort();
            itemEntityIds.sort();
            for (let i = 0; i < rows.length; i += 1) {
                if (rows[i] !== itemEntityIds[i].toString()) {
                    equal = false;
                    break;
                }
            }
            this.allSelected = equal;
        }
    }
    calculateAllUnselected() {
        this.allUnselected = this.selectedItemIds.size === 0;
    }
    unselectRow(itemEntityId) {
        if (this.selectedItemIds.has(itemEntityId.toString())) {
            this.selectedItemIds.delete(itemEntityId.toString());
        }
    }
    getId() {
        return this.id;
    }
    getType() {
        return this.selection.getType();
    }
    toggleRowByType(type, itemId) {
        switch (type) {
            case RowSelectToggleType.NONE:
                if (this.selectedItemIds.has(itemId)) {
                    this.selectedItemIds.delete(itemId);
                }
                else {
                    this.selectedItemIds.clear();
                    this.selectedItemIds.add(itemId);
                }
                break;
            case RowSelectToggleType.ADD:
                if (this.selectedItemIds.has(itemId)) {
                    this.selectedItemIds.delete(itemId);
                }
                else {
                    this.selectedItemIds.add(itemId);
                }
                break;
            case RowSelectToggleType.RANGE:
                break;
            default:
                break;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,