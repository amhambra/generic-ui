import { GenericBuilder } from '../../../../../common/src/cdk/generic-builder';
export var RowSelectionType;
(function (RowSelectionType) {
    RowSelectionType["ROW"] = "ROW";
    RowSelectionType["CHECKBOX"] = "CHECKBOX";
    RowSelectionType["RADIO"] = "RADIO";
})(RowSelectionType || (RowSelectionType = {}));
export var RowSelectionMode;
(function (RowSelectionMode) {
    RowSelectionMode["SINGLE"] = "SINGLE";
    RowSelectionMode["MULTIPLE"] = "MULTIPLE";
})(RowSelectionMode || (RowSelectionMode = {}));
export class RowSelection {
    enabled;
    selectedRowIndexes;
    selectedRowIds;
    type;
    mode;
    matcher;
    customConfig;
    constructor(config) {
        if (config.enabled !== undefined) {
            this.enabled = config.enabled;
        }
        if (config?.selectedRowIndexes) {
            this.selectedRowIndexes = config.selectedRowIndexes;
        }
        if (config?.selectedRowIds) {
            this.selectedRowIds = config.selectedRowIds;
        }
        if (config?.mode) {
            this.mode = config.mode;
        }
        if (config?.type) {
            this.type = config.type;
        }
        if (config?.matcher) {
            this.matcher = config.matcher;
        }
        if (config?.config) {
            this.customConfig = config.config;
        }
    }
    isModeDefined() {
        return this.mode !== undefined;
    }
    isTypeDefined() {
        return this.type !== undefined;
    }
    isSelectedRowIndexesDefined() {
        return this.selectedRowIndexes !== undefined;
    }
    isSelectedRowIdsDefined() {
        return this.selectedRowIds !== undefined;
    }
    isEnabledDefined() {
        return this.enabled !== undefined;
    }
    isMatcherDefined() {
        return this.matcher !== undefined;
    }
    isEnabled() {
        return this.enabled;
    }
    isCustomSelectConfig() {
        return this.customConfig !== undefined;
    }
    getSelectedRowIndexes() {
        return this.selectedRowIndexes;
    }
    getSelectedRowIds() {
        return this.selectedRowIds;
    }
    getMode() {
        return this.mode;
    }
    getType() {
        return this.type;
    }
    getMatcher() {
        return this.matcher;
    }
    getCustomSelectConfig() {
        return this.customConfig;
    }
    // eslint-disable-next-line @typescript-eslint/member-ordering
    static Builder = class RowSelectionBuilder extends GenericBuilder {
        enabled;
        selectedRowIndexes;
        selectedRowIds;
        type;
        mode;
        config;
        matcher;
        constructor() {
            super();
        }
        buildObject() {
            return new RowSelection({
                enabled: this.enabled,
                selectedRowIndexes: this.selectedRowIndexes,
                selectedRowIds: this.selectedRowIds,
                type: this.type,
                mode: this.mode,
                matcher: this.matcher,
                config: this.config
            });
        }
        withEnabled(enabled) {
            this.enabled = enabled;
            return this;
        }
        withSelectedRowIndexes(indexes) {
            this.selectedRowIndexes = indexes;
            return this;
        }
        withSelectedRowIds(ids) {
            this.selectedRowIds = ids;
            return this;
        }
        withType(type) {
            this.type = type;
            return this;
        }
        withMode(mode) {
            this.mode = mode;
            return this;
        }
        withMatcher(matcher) {
            this.matcher = matcher;
            return this;
        }
        witCustomSelection(config) {
            this.config = config;
            return this;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,