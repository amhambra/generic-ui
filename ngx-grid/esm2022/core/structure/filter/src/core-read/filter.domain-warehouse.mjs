import { FilterWarehouse } from '../api/filter.warehouse';
import { FilterEnabledArchive } from './config/filter-enabled.archive';
import { QuickFilterEnabledArchive } from './quick-filter/quick-filter-enabled.archive';
import { FilterTypeArchive } from './type/filter-type.archive';
import { UniqueValueCollectionArchive } from './unique/unique-value-collection.archive';
import { ActiveFilterArchive } from './active/active-filter.archive';
import { hermesMap, Optional, singleFromObservable } from '@generic-ui/hermes';
import { FilterDiContainer } from '../api/di/filter.di-container';
export class FilterDomainWarehouse extends FilterWarehouse {
    filterEnabledArchive;
    structureQuickFilterRepository;
    uniqueValuesArchive;
    activeFilterArchive = FilterDiContainer.resolve(ActiveFilterArchive);
    filterTypeArchive = FilterDiContainer.resolve(FilterTypeArchive);
    constructor(filterEnabledArchive, structureQuickFilterRepository, uniqueValuesArchive) {
        super();
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.uniqueValuesArchive = uniqueValuesArchive;
    }
    static services = [FilterEnabledArchive, QuickFilterEnabledArchive, UniqueValueCollectionArchive];
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    findFilterTypes(structureId) {
        return this.filterTypeArchive.find(structureId);
    }
    onFilterTypesForFieldId(fieldId, structureId) {
        return this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            return map.getFilterTypes(fieldId);
        }));
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    findFilters(structureId) {
        return this.activeFilterArchive.find(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
    onceFilterTypeId(fieldId, filterTypeName, structureId) {
        return singleFromObservable(this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            const filterTypes = map.getFilterTypes(fieldId);
            const filterType = filterTypes.find((fieldType) => fieldType.getName() === filterTypeName);
            if (filterType === undefined) {
                return Optional.empty();
            }
            else {
                return Optional.of(filterType.getId());
            }
        })));
    }
}
//# sourceMappingURL=data:application/json;base64,