import { DataType } from '../../../../field/src/domain/field/data/data-type';
import { ContainsFilterType } from './filter-types/contains-filter-type';
import { FilterTypeIdGenerator } from './filter-type.id-generator';
import { FilterTypeModel } from '../../api/type/filter-type.model';
export class FilterTypeManager {
    fieldIds = [];
    map = new WeakMap();
    filterTypeMap = new WeakMap();
    dataTypeToFilterType = new Map();
    filterTypeIdGenerator = new FilterTypeIdGenerator();
    constructor(fields) {
        this.assignFilterTypes();
        this.addFields(fields);
    }
    getFilterType(filterTypeId) {
        return this.filterTypeMap.get(filterTypeId);
    }
    getFieldIdsToFilterTypes() {
        const map = new Map();
        for (const fieldId of this.fieldIds) {
            const filterTypes = this.map.get(fieldId), readModels = filterTypes.map(f => {
                return new FilterTypeModel(f.getId(), f.getName());
            });
            map.set(fieldId.toString(), readModels);
        }
        return map;
    }
    addFields(fields) {
        for (const field of fields) {
            this.addField(field);
        }
    }
    addField(field) {
        const fieldId = field.getId(), dataType = field.getDataType();
        const filterTypesFromDataType = this.dataTypeToFilterType.get(dataType);
        this.fieldIds.push(fieldId);
        this.map.set(fieldId, Array.from(filterTypesFromDataType));
    }
    assignFilterTypes() {
        this.assignFilterTypesForDataTypeUnknown();
        this.assignFilterTypesForDataTypeNumber();
        this.assignFilterTypesForDataTypeString();
        this.assignFilterTypesForDataTypeBoolean();
        this.assignFilterTypesForDataTypeDate();
        this.assignFilterTypesForDataTypeCustom();
    }
    assignFilterTypesForDataTypeUnknown() {
        this.dataTypeToFilterType.set(DataType.UNKNOWN, []);
    }
    assignFilterTypesForDataTypeNumber() {
        this.dataTypeToFilterType.set(DataType.NUMBER, []);
    }
    assignFilterTypesForDataTypeString() {
        const filterTypes = [
            new ContainsFilterType(this.generateId())
        ];
        this.dataTypeToFilterType.set(DataType.STRING, filterTypes);
        this.addFilterTypes(filterTypes);
    }
    assignFilterTypesForDataTypeBoolean() {
        this.dataTypeToFilterType.set(DataType.BOOLEAN, []);
    }
    assignFilterTypesForDataTypeDate() {
        this.dataTypeToFilterType.set(DataType.DATE, []);
    }
    assignFilterTypesForDataTypeCustom() {
        this.dataTypeToFilterType.set(DataType.CUSTOM, []);
    }
    generateId() {
        return this.filterTypeIdGenerator.generate();
    }
    addFilterTypes(filterTypes) {
        for (const filterType of filterTypes) {
            this.filterTypeMap.set(filterType.getId(), filterType);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXR5cGUubWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtZ3JpZC9zcmMvY29yZS9zdHJ1Y3R1cmUvZmlsdGVyL3NyYy9kb21haW4vdHlwZS9maWx0ZXItdHlwZS5tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUM3RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFHbkUsTUFBTSxPQUFPLGlCQUFpQjtJQUVaLFFBQVEsR0FBbUIsRUFBRSxDQUFDO0lBRTlCLEdBQUcsR0FBRyxJQUFJLE9BQU8sRUFBdUMsQ0FBQztJQUV6RCxhQUFhLEdBQUcsSUFBSSxPQUFPLEVBQXFDLENBQUM7SUFFakUsb0JBQW9CLEdBQUcsSUFBSSxHQUFHLEVBQXdDLENBQUM7SUFFdkUscUJBQXFCLEdBQTBCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztJQUU1RixZQUFZLE1BQTBCO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxZQUEwQjtRQUN2QyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCx3QkFBd0I7UUFDdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUV0QixLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDcEMsTUFBTSxXQUFXLEdB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QUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDdkQ7SUFDRixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWVsZElkIH0gZnJvbSAnLi4vLi4vLi4vLi4vZmllbGQvc3JjL2RvbWFpbi9maWVsZC9maWVsZC5pZCc7XG5pbXBvcnQgeyBGaWVsZEVudGl0eSB9IGZyb20gJy4uLy4uLy4uLy4uL2ZpZWxkL3NyYy9kb21haW4vZmllbGQvZmllbGQuZW50aXR5JztcbmltcG9ydCB7IEZpbHRlclR5cGVJZCB9IGZyb20gJy4vZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9maWVsZC9zcmMvZG9tYWluL2ZpZWxkL2RhdGEvZGF0YS10eXBlJztcbmltcG9ydCB7IENvbnRhaW5zRmlsdGVyVHlwZSB9IGZyb20gJy4vZmlsdGVyLXR5cGVzL2NvbnRhaW5zLWZpbHRlci10eXBlJztcbmltcG9ydCB7IEZpbHRlclR5cGVJZEdlbmVyYXRvciB9IGZyb20gJy4vZmlsdGVyLXR5cGUuaWQtZ2VuZXJhdG9yJztcbmltcG9ydCB7IEJhc2VGaWx0ZXJUeXBlIH0gZnJvbSAnLi9iYXNlLWZpbHRlci10eXBlJztcbmltcG9ydCB7IEZpbHRlclR5cGVNb2RlbCB9IGZyb20gJy4uLy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLm1vZGVsJztcblxuXG5leHBvcnQgY2xhc3MgRmlsdGVyVHlwZU1hbmFnZXIge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZmllbGRJZHM6IEFycmF5PEZpZWxkSWQ+ID0gW107XG5cblx0cHJpdmF0ZSByZWFkb25seSBtYXAgPSBuZXcgV2Vha01hcDxGaWVsZElkLCBBcnJheTxCYXNlRmlsdGVyVHlwZTxhbnk+Pj4oKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlclR5cGVNYXAgPSBuZXcgV2Vha01hcDxGaWx0ZXJUeXBlSWQsIEJhc2VGaWx0ZXJUeXBlPGFueT4+KCk7XG5cblx0cHJpdmF0ZSByZWFkb25seSBkYXRhVHlwZVRvRmlsdGVyVHlwZSA9IG5ldyBNYXA8RGF0YVR5cGUsIEFycmF5PEJhc2VGaWx0ZXJUeXBlPGFueT4+PigpO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyVHlwZUlkR2VuZXJhdG9yOiBGaWx0ZXJUeXBlSWRHZW5lcmF0b3IgPSBuZXcgRmlsdGVyVHlwZUlkR2VuZXJhdG9yKCk7XG5cblx0Y29uc3RydWN0b3IoZmllbGRzOiBBcnJheTxGaWVsZEVudGl0eT4pIHtcblx0XHR0aGlzLmFzc2lnbkZpbHRlclR5cGVzKCk7XG5cblx0XHR0aGlzLmFkZEZpZWxkcyhmaWVsZHMpO1xuXHR9XG5cblx0Z2V0RmlsdGVyVHlwZShmaWx0ZXJUeXBlSWQ6IEZpbHRlclR5cGVJZCk6IEJhc2VGaWx0ZXJUeXBlPGFueT4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlclR5cGVNYXAuZ2V0KGZpbHRlclR5cGVJZCk7XG5cdH1cblxuXHRnZXRGaWVsZElkc1RvRmlsdGVyVHlwZXMoKTogTWFwPHN0cmluZywgQXJyYXk8RmlsdGVyVHlwZU1vZGVsPj4ge1xuXHRcdGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcblxuXHRcdGZvciAoY29uc3QgZmllbGRJZCBvZiB0aGlzLmZpZWxkSWRzKSB7XG5cdFx0XHRjb25zdCBmaWx0ZXJUeXBlcyA9IHRoaXMubWFwLmdldChmaWVsZElkKSxcblx0XHRcdFx0cmVhZE1vZGVscyA9IGZpbHRlclR5cGVzLm1hcChmID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gbmV3IEZpbHRlclR5cGVNb2RlbChmLmdldElkKCksIGYuZ2V0TmFtZSgpKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdG1hcC5zZXQoZmllbGRJZC50b1N0cmluZygpLCByZWFkTW9kZWxzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRGaWVsZHMoZmllbGRzOiBBcnJheTxGaWVsZEVudGl0eT4pOiB2b2lkIHtcblx0XHRmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuXHRcdFx0dGhpcy5hZGRGaWVsZChmaWVsZCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhZGRGaWVsZChmaWVsZDogRmllbGRFbnRpdHkpOiB2b2lkIHtcblxuXHRcdGNvbnN0IGZpZWxkSWQgPSBmaWVsZC5nZXRJZCgpLFxuXHRcdFx0ZGF0YVR5cGUgPSBmaWVsZC5nZXREYXRhVHlwZSgpO1xuXG5cdFx0Y29uc3QgZmlsdGVyVHlwZXNGcm9tRGF0YVR5cGUgPSB0aGlzLmRhdGFUeXBlVG9GaWx0ZXJUeXBlLmdldChkYXRhVHlwZSk7XG5cblx0XHR0aGlzLmZpZWxkSWRzLnB1c2goZmllbGRJZCk7XG5cdFx0dGhpcy5tYXAuc2V0KGZpZWxkSWQsIEFycmF5LmZyb20oZmlsdGVyVHlwZXNGcm9tRGF0YVR5cGUpKTtcblx0fVxuXG5cdHByaXZhdGUgYXNzaWduRmlsdGVyVHlwZXMoKTogdm9pZCB7XG5cdFx0dGhpcy5hc3NpZ25GaWx0ZXJUeXBlc0ZvckRhdGFUeXBlVW5rbm93bigpO1xuXHRcdHRoaXMuYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZU51bWJlcigpO1xuXHRcdHRoaXMuYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZVN0cmluZygpO1xuXHRcdHRoaXMuYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZUJvb2xlYW4oKTtcblx0XHR0aGlzLmFzc2lnbkZpbHRlclR5cGVzRm9yRGF0YVR5cGVEYXRlKCk7XG5cdFx0dGhpcy5hc3NpZ25GaWx0ZXJUeXBlc0ZvckRhdGFUeXBlQ3VzdG9tKCk7XG5cdH1cblxuXHRwcml2YXRlIGFzc2lnbkZpbHRlclR5cGVzRm9yRGF0YVR5cGVVbmtub3duKCk6IHZvaWQge1xuXHRcdHRoaXMuZGF0YVR5cGVUb0ZpbHRlclR5cGUuc2V0KERhdGFUeXBlLlVOS05PV04sIFtdKTtcblx0fVxuXG5cdHByaXZhdGUgYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZU51bWJlcigpOiB2b2lkIHtcblx0XHR0aGlzLmRhdGFUeXBlVG9GaWx0ZXJUeXBlLnNldChEYXRhVHlwZS5OVU1CRVIsIFtdKTtcblx0fVxuXG5cdHByaXZhdGUgYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZVN0cmluZygpOiB2b2lkIHtcblxuXHRcdGNvbnN0IGZpbHRlclR5cGVzID0gW1xuXHRcdFx0bmV3IENvbnRhaW5zRmlsdGVyVHlwZSh0aGlzLmdlbmVyYXRlSWQoKSlcblx0XHRdO1xuXG5cdFx0dGhpcy5kYXRhVHlwZVRvRmlsdGVyVHlwZS5zZXQoRGF0YVR5cGUuU1RSSU5HLCBmaWx0ZXJUeXBlcyk7XG5cblx0XHR0aGlzLmFkZEZpbHRlclR5cGVzKGZpbHRlclR5cGVzKTtcblx0fVxuXG5cdHByaXZhdGUgYXNzaWduRmlsdGVyVHlwZXNGb3JEYXRhVHlwZUJvb2xlYW4oKTogdm9pZCB7XG5cdFx0dGhpcy5kYXRhVHlwZVRvRmlsdGVyVHlwZS5zZXQoRGF0YVR5cGUuQk9PTEVBTiwgW10pO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3NpZ25GaWx0ZXJUeXBlc0ZvckRhdGFUeXBlRGF0ZSgpOiB2b2lkIHtcblx0XHR0aGlzLmRhdGFUeXBlVG9GaWx0ZXJUeXBlLnNldChEYXRhVHlwZS5EQVRFLCBbXSk7XG5cdH1cblxuXHRwcml2YXRlIGFzc2lnbkZpbHRlclR5cGVzRm9yRGF0YVR5cGVDdXN0b20oKTogdm9pZCB7XG5cdFx0dGhpcy5kYXRhVHlwZVRvRmlsdGVyVHlwZS5zZXQoRGF0YVR5cGUuQ1VTVE9NLCBbXSk7XG5cdH1cblxuXHRwcml2YXRlIGdlbmVyYXRlSWQoKTogRmlsdGVyVHlwZUlkIHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlSWRHZW5lcmF0b3IuZ2VuZXJhdGUoKTtcblx0fVxuXG5cdHByaXZhdGUgYWRkRmlsdGVyVHlwZXMoZmlsdGVyVHlwZXM6IEFycmF5PEJhc2VGaWx0ZXJUeXBlPGFueT4+KTogdm9pZCB7XG5cdFx0Zm9yIChjb25zdCBmaWx0ZXJUeXBlIG9mIGZpbHRlclR5cGVzKSB7XG5cdFx0XHR0aGlzLmZpbHRlclR5cGVNYXAuc2V0KGZpbHRlclR5cGUuZ2V0SWQoKSwgZmlsdGVyVHlwZSk7XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==