import { StructureCommand } from '../../../../../structure-core/src/core/structure.command';
export var DeleteCommandPayloadType;
(function (DeleteCommandPayloadType) {
    DeleteCommandPayloadType[DeleteCommandPayloadType["INDEX"] = 0] = "INDEX";
    DeleteCommandPayloadType[DeleteCommandPayloadType["ITEM_ID"] = 1] = "ITEM_ID";
    DeleteCommandPayloadType[DeleteCommandPayloadType["MANY_INDEX"] = 2] = "MANY_INDEX";
    DeleteCommandPayloadType[DeleteCommandPayloadType["MANY_ITEM_ID"] = 3] = "MANY_ITEM_ID";
})(DeleteCommandPayloadType || (DeleteCommandPayloadType = {}));
export class DeleteOriginItemCommand extends StructureCommand {
    payload;
    type;
    constructor(structureId, payload, type) {
        super(structureId, 'DeleteOriginItemCommand');
        this.payload = payload;
        this.type = type;
    }
    static byIndex(structureId, index) {
        return new DeleteOriginItemCommand(structureId, index, DeleteCommandPayloadType.INDEX);
    }
    static byManyIndex(structureId, indexes) {
        return new DeleteOriginItemCommand(structureId, indexes, DeleteCommandPayloadType.MANY_INDEX);
    }
    static byItemId(structureId, itemId) {
        return new DeleteOriginItemCommand(structureId, itemId, DeleteCommandPayloadType.ITEM_ID);
    }
    static byManyItemId(structureId, itemIds) {
        return new DeleteOriginItemCommand(structureId, itemIds, DeleteCommandPayloadType.MANY_ITEM_ID);
    }
    getType() {
        return this.type;
    }
    getPayload() {
        return this.payload;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlLW9yaWdpbi1pdGVtLmNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWdyaWQvc3JjL2NvcmUvc3RydWN0dXJlL3NvdXJjZS9zcmMvY29yZS9vcmlnaW4vZGVsZXRlL2RlbGV0ZS1vcmlnaW4taXRlbS5jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBRTVGLE1BQU0sQ0FBTixJQUFZLHdCQUtYO0FBTEQsV0FBWSx3QkFBd0I7SUFDbkMseUVBQUssQ0FBQTtJQUNMLDZFQUFPLENBQUE7SUFDUCxtRkFBVSxDQUFBO0lBQ1YsdUZBQVksQ0FBQTtBQUNiLENBQUMsRUFMVyx3QkFBd0IsS0FBeEIsd0JBQXdCLFFBS25DO0FBVUQsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGdCQUFnQjtJQUd4QztJQUNBO0lBRnBCLFlBQVksV0FBd0IsRUFDaEIsT0FBb0UsRUFDcEUsSUFBOEI7UUFDakQsS0FBSyxDQUFDLFdBQVcsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1FBRjNCLFlBQU8sR0FBUCxPQUFPLENBQTZEO1FBQ3BFLFNBQUksR0FBSixJQUFJLENBQTBCO0lBRWxELENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQXdCLEVBQUUsS0FBYTtRQUNyRCxPQUFPLElBQUksdUJBQXVCLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUF3QixFQUFFLE9BQXNCO1FBQ2xFLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQXdCLEVBQUUsTUFBb0I7UUFDN0QsT0FBTyxJQUFJLHVCQUF1QixDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBd0IsRUFBRSxPQUE0QjtRQUN6RSxPQUFPLElBQUksdUJBQXVCLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsT0FBTztRQUNOLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDO0lBRUQsVUFBVTtRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N0cnVjdHVyZS1jb3JlL3NyYy9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBJdGVtRW50aXR5SWQgfSBmcm9tICcuLi8uLi8uLi9kb21haW4vaXRlbS9pdGVtLmVudGl0eS1pZCc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVDb21tYW5kIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3RydWN0dXJlLWNvcmUvc3JjL2NvcmUvc3RydWN0dXJlLmNvbW1hbmQnO1xuXG5leHBvcnQgZW51bSBEZWxldGVDb21tYW5kUGF5bG9hZFR5cGUge1xuXHRJTkRFWCxcblx0SVRFTV9JRCxcblx0TUFOWV9JTkRFWCxcblx0TUFOWV9JVEVNX0lEXG59XG5cbmV4cG9ydCB0eXBlIERlbGV0ZU9yaWdpbkl0ZW1QYXlsb2FkID0ge1xuXG5cdGluZGV4PzogbnVtYmVyO1xuXG5cdGl0ZW1JZD86IEl0ZW1FbnRpdHlJZDtcblxufTtcblxuZXhwb3J0IGNsYXNzIERlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kIGV4dGVuZHMgU3RydWN0dXJlQ29tbWFuZCB7XG5cblx0Y29uc3RydWN0b3Ioc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHBheWxvYWQ6IG51bWJlciB8IEl0ZW1FbnRpdHlJZCB8IEFycmF5PG51bWJlcj4gfCBBcnJheTxJdGVtRW50aXR5SWQ+LFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHR5cGU6IERlbGV0ZUNvbW1hbmRQYXlsb2FkVHlwZSkge1xuXHRcdHN1cGVyKHN0cnVjdHVyZUlkLCAnRGVsZXRlT3JpZ2luSXRlbUNvbW1hbmQnKTtcblx0fVxuXG5cdHN0YXRpYyBieUluZGV4KHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCwgaW5kZXg6IG51bWJlcik6IERlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kIHtcblx0XHRyZXR1cm4gbmV3IERlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kKHN0cnVjdHVyZUlkLCBpbmRleCwgRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlLklOREVYKTtcblx0fVxuXG5cdHN0YXRpYyBieU1hbnlJbmRleChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQsIGluZGV4ZXM6IEFycmF5PG51bWJlcj4pOiBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZCB7XG5cdFx0cmV0dXJuIG5ldyBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZChzdHJ1Y3R1cmVJZCwgaW5kZXhlcywgRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlLk1BTllfSU5ERVgpO1xuXHR9XG5cblx0c3RhdGljIGJ5SXRlbUlkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCwgaXRlbUlkOiBJdGVtRW50aXR5SWQpOiBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZCB7XG5cdFx0cmV0dXJuIG5ldyBEZWxldGVPcmlnaW5JdGVtQ29tbWFuZChzdHJ1Y3R1cmVJZCwgaXRlbUlkLCBEZWxldGVDb21tYW5kUGF5bG9hZFR5cGUuSVRFTV9JRCk7XG5cdH1cblxuXHRzdGF0aWMgYnlNYW55SXRlbUlkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCwgaXRlbUlkczogQXJyYXk8SXRlbUVudGl0eUlkPik6IERlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kIHtcblx0XHRyZXR1cm4gbmV3IERlbGV0ZU9yaWdpbkl0ZW1Db21tYW5kKHN0cnVjdHVyZUlkLCBpdGVtSWRzLCBEZWxldGVDb21tYW5kUGF5bG9hZFR5cGUuTUFOWV9JVEVNX0lEKTtcblx0fVxuXG5cdGdldFR5cGUoKTogRGVsZXRlQ29tbWFuZFBheWxvYWRUeXBlIHtcblx0XHRyZXR1cm4gdGhpcy50eXBlO1xuXHR9XG5cblx0Z2V0UGF5bG9hZCgpOiBudW1iZXIgfCBJdGVtRW50aXR5SWQgfCBBcnJheTxudW1iZXI+IHwgQXJyYXk8SXRlbUVudGl0eUlkPiB7XG5cdFx0cmV0dXJuIHRoaXMucGF5bG9hZDtcblx0fVxuXG59XG4iXX0=