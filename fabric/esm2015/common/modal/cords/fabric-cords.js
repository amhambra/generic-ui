import { FabricPlacement } from './fabric-placement';
import { FabricGeometry } from './fabric-geometry';
export class FabricCords extends FabricGeometry {
    constructor(window, invokerElementRef, invokedElementRef, containerClassName, placement, offset) {
        super(invokedElementRef, containerClassName);
        this.calculateCords(window, invokerElementRef, placement, offset);
    }
    getVerticalPosition() {
        return this.verticalPosition;
    }
    getHorizontalPosition() {
        return this.horizontalPosition;
    }
    calculateCords(window, invokerElementRef, placement, offset) {
        const elementRect = invokerElementRef.nativeElement.getBoundingClientRect(), elementBottom = window.pageYOffset + elementRect.bottom, elementLeft = window.pageXOffset + elementRect.left, elementRight = window.pageXOffset + elementRect.right, elementTop = window.pageYOffset + elementRect.top, topCords = elementTop + offset - this.getHeight();
        switch (placement) {
            case FabricPlacement.BOTTOM:
                this.horizontalPosition = elementLeft;
                this.verticalPosition = elementBottom + offset;
                break;
            case FabricPlacement.TOP:
                this.horizontalPosition = elementLeft;
                this.verticalPosition = topCords;
                break;
            case FabricPlacement.BEFORE:
                this.horizontalPosition = elementRight + offset - this.getWidth();
                this.verticalPosition = elementBottom;
                break;
            case FabricPlacement.AFTER:
                this.horizontalPosition = elementLeft + offset;
                this.verticalPosition = elementBottom;
                break;
            default:
                this.horizontalPosition = elementLeft;
                this.verticalPosition = elementBottom + offset;
        }
        this.calculateDirection(invokerElementRef, window, topCords);
    }
    calculateDirection(invokerElementRef, window, topCords) {
        const windowHeightWithOffset = window.innerHeight + window.pageYOffset, windowWidthWithOffset = window.innerWidth + window.pageXOffset, invokerElementWidth = invokerElementRef.nativeElement.offsetWidth, invokedElementHeight = this.getHeight(), invokedElementWidth = this.getWidth();
        const invokedElementDoesNotFitHorizontally = (windowWidthWithOffset - this.horizontalPosition - invokedElementWidth) < 0, invokedElementDoesNotFitVertically = (windowHeightWithOffset - this.verticalPosition - invokedElementHeight) < 0;
        if (invokedElementDoesNotFitHorizontally) {
            this.horizontalPosition -= invokedElementWidth - invokerElementWidth;
        }
        if (invokedElementDoesNotFitVertically) {
            this.verticalPosition = topCords;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWNvcmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL2d1aS1mYWJyaWMvc3JjL2NvbW1vbi9tb2RhbC9jb3Jkcy9mYWJyaWMtY29yZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRCxNQUFNLE9BQWdCLFdBQVksU0FBUSxjQUFjO0lBTXZELFlBQXNCLE1BQWMsRUFDN0IsaUJBQTZCLEVBQzdCLGlCQUE2QixFQUM3QixrQkFBMEIsRUFDMUIsU0FBMEIsRUFDMUIsTUFBZTtRQUNyQixLQUFLLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELG1CQUFtQjtRQUNsQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUM5QixDQUFDO0lBRUQscUJBQXFCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjLENBQUMsTUFBYyxFQUM3QixpQkFBNkIsRUFDN0IsU0FBMEIsRUFDMUIsTUFBYztRQUVyQixNQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsRUFDMUUsYUFBYSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFDdkQsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksRUFDbkQsWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFDckQsVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFDakQsUUFBUSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRW5ELFFBQVEsU0FBUyxFQUFFO1lBRWxCLEtBQUssZUFBZSxDQUFDLE1BQU07Z0JBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxXQUFXLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLEdBQUcsTUFBTSxDQUFDO2dCQUMvQyxNQUFNO1lBRVAsS0FBSyxlQUFlLENBQUMsR0FBRztnQkFDdkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFdBQVcsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztnQkFDakMsTUFBTTtZQUVQLEtBQUssZUFBZSxDQUFDLE1BQU07Z0JBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxZQUFZLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbEUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQztnQkFDdEMsTUFBTTtZQUVQLEtBQUssZUFBZSxDQUFDLEtBQUs7Z0JBQ3pCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxXQUFXLEdBQUcsTUFBTSxDQUFDO2dCQUMvQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO2dCQUN0QyxNQUFNO1lBRVA7Z0JBQ0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFdBQVcsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsR0FBRyxNQUFNLENBQUM7U0FDaEQ7UUFFRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxpQkFBNkIsRUFBRSxNQUFjLEVBQUUsUUFBZ0I7UUFDekYsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQ3JFLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFDOUQsbUJBQW1CLEdBQUcsaUJBQWlCLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFDakUsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUN2QyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFdkMsTUFBTSxvQ0FBb0MsR0FBRyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFDdkgsa0NBQWtDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEgsSUFBSSxvQ0FBb0MsRUFBRTtZQUN6QyxJQUFJLENBQUMsa0JBQWtCLElBQUksbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7U0FDckU7UUFFRCxJQUFJLGtDQUFrQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7U0FDakM7SUFDRixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGYWJyaWNQbGFjZW1lbnQgfSBmcm9tICcuL2ZhYnJpYy1wbGFjZW1lbnQnO1xuaW1wb3J0IHsgRmFicmljR2VvbWV0cnkgfSBmcm9tICcuL2ZhYnJpYy1nZW9tZXRyeSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGYWJyaWNDb3JkcyBleHRlbmRzIEZhYnJpY0dlb21ldHJ5IHtcblxuXHRwcml2YXRlIHZlcnRpY2FsUG9zaXRpb246IG51bWJlcjtcblxuXHRwcml2YXRlIGhvcml6b250YWxQb3NpdGlvbjogbnVtYmVyO1xuXG5cdHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih3aW5kb3c6IFdpbmRvdyxcblx0XHRcdFx0XHRcdCAgaW52b2tlckVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG5cdFx0XHRcdFx0XHQgIGludm9rZWRFbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuXHRcdFx0XHRcdFx0ICBjb250YWluZXJDbGFzc05hbWU6IHN0cmluZyxcblx0XHRcdFx0XHRcdCAgcGxhY2VtZW50OiBGYWJyaWNQbGFjZW1lbnQsXG5cdFx0XHRcdFx0XHQgIG9mZnNldD86IG51bWJlcikge1xuXHRcdHN1cGVyKGludm9rZWRFbGVtZW50UmVmLCBjb250YWluZXJDbGFzc05hbWUpO1xuXHRcdHRoaXMuY2FsY3VsYXRlQ29yZHMod2luZG93LCBpbnZva2VyRWxlbWVudFJlZiwgcGxhY2VtZW50LCBvZmZzZXQpO1xuXHR9XG5cblx0Z2V0VmVydGljYWxQb3NpdGlvbigpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLnZlcnRpY2FsUG9zaXRpb247XG5cdH1cblxuXHRnZXRIb3Jpem9udGFsUG9zaXRpb24oKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGhpcy5ob3Jpem9udGFsUG9zaXRpb247XG5cdH1cblxuXHRwcml2YXRlIGNhbGN1bGF0ZUNvcmRzKHdpbmRvdzogV2luZG93LFxuXHRcdFx0XHRcdFx0ICAgaW52b2tlckVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG5cdFx0XHRcdFx0XHQgICBwbGFjZW1lbnQ6IEZhYnJpY1BsYWNlbWVudCxcblx0XHRcdFx0XHRcdCAgIG9mZnNldDogbnVtYmVyKTogdm9pZCB7XG5cblx0XHRjb25zdCBlbGVtZW50UmVjdCA9IGludm9rZXJFbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG5cdFx0XHRlbGVtZW50Qm90dG9tID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudFJlY3QuYm90dG9tLFxuXHRcdFx0ZWxlbWVudExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgKyBlbGVtZW50UmVjdC5sZWZ0LFxuXHRcdFx0ZWxlbWVudFJpZ2h0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICsgZWxlbWVudFJlY3QucmlnaHQsXG5cdFx0XHRlbGVtZW50VG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgZWxlbWVudFJlY3QudG9wLFxuXHRcdFx0dG9wQ29yZHMgPSBlbGVtZW50VG9wICsgb2Zmc2V0IC0gdGhpcy5nZXRIZWlnaHQoKTtcblxuXHRcdHN3aXRjaCAocGxhY2VtZW50KSB7XG5cblx0XHRcdGNhc2UgRmFicmljUGxhY2VtZW50LkJPVFRPTTpcblx0XHRcdFx0dGhpcy5ob3Jpem9udGFsUG9zaXRpb24gPSBlbGVtZW50TGVmdDtcblx0XHRcdFx0dGhpcy52ZXJ0aWNhbFBvc2l0aW9uID0gZWxlbWVudEJvdHRvbSArIG9mZnNldDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgRmFicmljUGxhY2VtZW50LlRPUDpcblx0XHRcdFx0dGhpcy5ob3Jpem9udGFsUG9zaXRpb24gPSBlbGVtZW50TGVmdDtcblx0XHRcdFx0dGhpcy52ZXJ0aWNhbFBvc2l0aW9uID0gdG9wQ29yZHM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEZhYnJpY1BsYWNlbWVudC5CRUZPUkU6XG5cdFx0XHRcdHRoaXMuaG9yaXpvbnRhbFBvc2l0aW9uID0gZWxlbWVudFJpZ2h0ICsgb2Zmc2V0IC0gdGhpcy5nZXRXaWR0aCgpO1xuXHRcdFx0XHR0aGlzLnZlcnRpY2FsUG9zaXRpb24gPSBlbGVtZW50Qm90dG9tO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBGYWJyaWNQbGFjZW1lbnQuQUZURVI6XG5cdFx0XHRcdHRoaXMuaG9yaXpvbnRhbFBvc2l0aW9uID0gZWxlbWVudExlZnQgKyBvZmZzZXQ7XG5cdFx0XHRcdHRoaXMudmVydGljYWxQb3NpdGlvbiA9IGVsZW1lbnRCb3R0b207XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0IDpcblx0XHRcdFx0dGhpcy5ob3Jpem9udGFsUG9zaXRpb24gPSBlbGVtZW50TGVmdDtcblx0XHRcdFx0dGhpcy52ZXJ0aWNhbFBvc2l0aW9uID0gZWxlbWVudEJvdHRvbSArIG9mZnNldDtcblx0XHR9XG5cblx0XHR0aGlzLmNhbGN1bGF0ZURpcmVjdGlvbihpbnZva2VyRWxlbWVudFJlZiwgd2luZG93LCB0b3BDb3Jkcyk7XG5cdH1cblxuXHRwcml2YXRlIGNhbGN1bGF0ZURpcmVjdGlvbihpbnZva2VyRWxlbWVudFJlZjogRWxlbWVudFJlZiwgd2luZG93OiBXaW5kb3csIHRvcENvcmRzOiBudW1iZXIpOiB2b2lkIHtcblx0XHRjb25zdCB3aW5kb3dIZWlnaHRXaXRoT2Zmc2V0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnBhZ2VZT2Zmc2V0LFxuXHRcdFx0d2luZG93V2lkdGhXaXRoT2Zmc2V0ID0gd2luZG93LmlubmVyV2lkdGggKyB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHRpbnZva2VyRWxlbWVudFdpZHRoID0gaW52b2tlckVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCxcblx0XHRcdGludm9rZWRFbGVtZW50SGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHQoKSxcblx0XHRcdGludm9rZWRFbGVtZW50V2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG5cblx0XHRjb25zdCBpbnZva2VkRWxlbWVudERvZXNOb3RGaXRIb3Jpem9udGFsbHkgPSAod2luZG93V2lkdGhXaXRoT2Zmc2V0IC0gdGhpcy5ob3Jpem9udGFsUG9zaXRpb24gLSBpbnZva2VkRWxlbWVudFdpZHRoKSA8IDAsXG5cdFx0XHRpbnZva2VkRWxlbWVudERvZXNOb3RGaXRWZXJ0aWNhbGx5ID0gKHdpbmRvd0hlaWdodFdpdGhPZmZzZXQgLSB0aGlzLnZlcnRpY2FsUG9zaXRpb24gLSBpbnZva2VkRWxlbWVudEhlaWdodCkgPCAwO1xuXG5cdFx0aWYgKGludm9rZWRFbGVtZW50RG9lc05vdEZpdEhvcml6b250YWxseSkge1xuXHRcdFx0dGhpcy5ob3Jpem9udGFsUG9zaXRpb24gLT0gaW52b2tlZEVsZW1lbnRXaWR0aCAtIGludm9rZXJFbGVtZW50V2lkdGg7XG5cdFx0fVxuXG5cdFx0aWYgKGludm9rZWRFbGVtZW50RG9lc05vdEZpdFZlcnRpY2FsbHkpIHtcblx0XHRcdHRoaXMudmVydGljYWxQb3NpdGlvbiA9IHRvcENvcmRzO1xuXHRcdH1cblx0fVxufVxuIl19