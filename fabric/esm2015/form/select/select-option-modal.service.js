import { ApplicationRef, ComponentFactoryResolver, Inject, Injectable, Injector } from '@angular/core';
import { FabricModal } from '../../common/modal/fabric-modal';
import { FabricSelectOptionsComponent } from './options/select-options.component';
import { SelectOptionsGeometryService } from './options/select-options-geometry.service';
import { DOCUMENT } from '@angular/common';
export class SelectOptionModalService extends FabricModal {
    constructor(selectOptionsGeometryService, componentFactoryResolver, applicationRef, injector, document) {
        super(componentFactoryResolver, applicationRef, injector, document);
        this.selectOptionsGeometryService = selectOptionsGeometryService;
    }
    getComponent() {
        return FabricSelectOptionsComponent;
    }
    open(options, width) {
        this.createAndAppend({
            afterCompCreation: () => this.afterCompCreation(options, width)
        });
    }
    closeOptions() {
        this.removeComponent();
    }
    afterCompCreation(options, width) {
        this.getComponentRef().instance.options = options;
        this.getComponentRef().instance.width = width;
        this.getComponentRef().instance.detectChanges();
        this.selectOptionsGeometryService.setGeometry(this.getComponentRef().instance.getElementRef());
        this.getComponentRef().instance.detectChanges();
    }
}
SelectOptionModalService.decorators = [
    { type: Injectable }
];
SelectOptionModalService.ctorParameters = () => [
    { type: SelectOptionsGeometryService },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi1tb2RhbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL2d1aS1mYWJyaWMvc3JjL2Zvcm0vc2VsZWN0L3NlbGVjdC1vcHRpb24tbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN6RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFJM0MsTUFBTSxPQUFPLHdCQUF5QixTQUFRLFdBQXlDO0lBRXRGLFlBQTZCLDRCQUEwRCxFQUNwRix3QkFBa0QsRUFDbEQsY0FBOEIsRUFDOUIsUUFBa0IsRUFDQSxRQUFhO1FBQ2pDLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBTHhDLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7SUFNdkYsQ0FBQztJQUVELFlBQVk7UUFDWCxPQUFPLDRCQUE0QixDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBK0IsRUFBRSxLQUFhO1FBQ2xELElBQUksQ0FBQyxlQUFlLENBQUM7WUFDcEIsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7U0FDL0QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVk7UUFDWCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLGlCQUFpQixDQUFDLE9BQStCLEVBQUUsS0FBYTtRQUN2RSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDbEQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQzlDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLDRCQUE0QixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNqRCxDQUFDOzs7WUEvQkQsVUFBVTs7O1lBSkYsNEJBQTRCO1lBSFosd0JBQXdCO1lBQXhDLGNBQWM7WUFBZ0QsUUFBUTs0Q0FjMUUsTUFBTSxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGYWJyaWNNb2RhbCB9IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RhbC9mYWJyaWMtbW9kYWwnO1xuaW1wb3J0IHsgRmFicmljU2VsZWN0T3B0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vb3B0aW9ucy9zZWxlY3Qtb3B0aW9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0T3B0aW9uc0dlb21ldHJ5U2VydmljZSB9IGZyb20gJy4vb3B0aW9ucy9zZWxlY3Qtb3B0aW9ucy1nZW9tZXRyeS5zZXJ2aWNlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEd1aVNlbGVjdE9wdGlvbiB9IGZyb20gJy4vc2VsZWN0LW9wdGlvbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZWxlY3RPcHRpb25Nb2RhbFNlcnZpY2UgZXh0ZW5kcyBGYWJyaWNNb2RhbDxGYWJyaWNTZWxlY3RPcHRpb25zQ29tcG9uZW50PiB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzZWxlY3RPcHRpb25zR2VvbWV0cnlTZXJ2aWNlOiBTZWxlY3RPcHRpb25zR2VvbWV0cnlTZXJ2aWNlLFxuXHRcdFx0XHRjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcblx0XHRcdFx0YXBwbGljYXRpb25SZWY6IEFwcGxpY2F0aW9uUmVmLFxuXHRcdFx0XHRpbmplY3RvcjogSW5qZWN0b3IsXG5cdFx0XHRcdEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnkpIHtcblx0XHRzdXBlcihjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGFwcGxpY2F0aW9uUmVmLCBpbmplY3RvciwgZG9jdW1lbnQpO1xuXHR9XG5cblx0Z2V0Q29tcG9uZW50KCk6IFR5cGU8RmFicmljU2VsZWN0T3B0aW9uc0NvbXBvbmVudD4ge1xuXHRcdHJldHVybiBGYWJyaWNTZWxlY3RPcHRpb25zQ29tcG9uZW50O1xuXHR9XG5cblx0b3BlbihvcHRpb25zOiBBcnJheTxHdWlTZWxlY3RPcHRpb24+LCB3aWR0aDogbnVtYmVyKTogdm9pZCB7XG5cdFx0dGhpcy5jcmVhdGVBbmRBcHBlbmQoe1xuXHRcdFx0YWZ0ZXJDb21wQ3JlYXRpb246ICgpID0+IHRoaXMuYWZ0ZXJDb21wQ3JlYXRpb24ob3B0aW9ucywgd2lkdGgpXG5cdFx0fSk7XG5cdH1cblxuXHRjbG9zZU9wdGlvbnMoKTogdm9pZCB7XG5cdFx0dGhpcy5yZW1vdmVDb21wb25lbnQoKTtcblx0fVxuXG5cdHByaXZhdGUgYWZ0ZXJDb21wQ3JlYXRpb24ob3B0aW9uczogQXJyYXk8R3VpU2VsZWN0T3B0aW9uPiwgd2lkdGg6IG51bWJlcik6IHZvaWQge1xuXHRcdHRoaXMuZ2V0Q29tcG9uZW50UmVmKCkuaW5zdGFuY2Uub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5nZXRDb21wb25lbnRSZWYoKS5pbnN0YW5jZS53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuZ2V0Q29tcG9uZW50UmVmKCkuaW5zdGFuY2UuZGV0ZWN0Q2hhbmdlcygpO1xuXHRcdHRoaXMuc2VsZWN0T3B0aW9uc0dlb21ldHJ5U2VydmljZS5zZXRHZW9tZXRyeSh0aGlzLmdldENvbXBvbmVudFJlZigpLmluc3RhbmNlLmdldEVsZW1lbnRSZWYoKSk7XG5cdFx0dGhpcy5nZXRDb21wb25lbnRSZWYoKS5pbnN0YW5jZS5kZXRlY3RDaGFuZ2VzKCk7XG5cdH1cbn1cbiJdfQ==