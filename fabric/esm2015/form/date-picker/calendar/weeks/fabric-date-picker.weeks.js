import { Injectable } from '@angular/core';
export class FabricDatePickerWeeks {
    getDaysInMonths(year, month) {
        this.resetWeeks();
        const numberOfDaysInMonth = (new Date(year, month + 1, 0)).getDate();
        for (let i = 1; i <= numberOfDaysInMonth; i++) {
            this.createWeeks(new Date(year, month, i));
        }
        return this.weeks;
    }
    createWeeks(date) {
        const day = date.getDate(), maxWeekNumber = 6;
        for (let i = 0; i < maxWeekNumber; i++) {
            if (day === 1) {
                this.addDaysToWeek(i, date);
            }
            else if (this.canAddDaysToWeek(i, day)) {
                this.addDaysToWeek(i, this.getLastDayDate(this.weeks[i - 1]));
            }
        }
        this.weeks = [this.weeks[0], this.weeks[1], this.weeks[2], this.weeks[3], this.weeks[4], this.weeks[5]];
    }
    addDaysToWeek(weekNumber, date) {
        const week = this.weeks[weekNumber];
        for (let i = 1; i <= 7; i++) {
            const isFirstDaySunday = date.getDay() === 0 && this.weeks[0].length === 0;
            let day;
            if (isFirstDaySunday) {
                day = date.getDate() - 6;
            }
            else {
                day = date.getDate() - date.getDay() + i;
            }
            const dayOfWeek = new Date(date.setDate(day));
            if (week.length < 7) {
                week.push(dayOfWeek);
            }
        }
    }
    getLastDayNumber(week) {
        if (week.length === 7) {
            return week[week.length - 1].getDate();
        }
        return 0;
    }
    getLastDayDate(week) {
        const lastDay = week[week.length - 1].getDate();
        return new Date(week[week.length - 1].setDate(lastDay));
    }
    canAddDaysToWeek(weekNumber, day) {
        return this.weeks[weekNumber].length === 0
            && this.weeks[weekNumber - 1].length === 7
            && day > this.getLastDayNumber(this.weeks[weekNumber - 1]);
    }
    resetWeeks() {
        this.weeks = [];
        this.weeks[0] = [];
        this.weeks[1] = [];
        this.weeks[2] = [];
        this.weeks[3] = [];
        this.weeks[4] = [];
        this.weeks[5] = [];
    }
}
FabricDatePickerWeeks.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWRhdGUtcGlja2VyLndlZWtzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL2d1aS1mYWJyaWMvc3JjL2Zvcm0vZGF0ZS1waWNrZXIvY2FsZW5kYXIvd2Vla3MvZmFicmljLWRhdGUtcGlja2VyLndlZWtzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsTUFBTSxPQUFPLHFCQUFxQjtJQUlqQyxlQUFlLENBQUMsSUFBWSxFQUFFLEtBQWE7UUFDMUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXJFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNuQixDQUFDO0lBRU8sV0FBVyxDQUFDLElBQVU7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUN6QixhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBRW5CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzVCO2lCQUFN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RyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7O1lBOUVELFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGYWJyaWNEYXRlUGlja2VyV2Vla3Mge1xuXG5cdHByaXZhdGUgd2Vla3M6IEFycmF5PEFycmF5PERhdGU+PjtcblxuXHRnZXREYXlzSW5Nb250aHMoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKTogQXJyYXk8QXJyYXk8RGF0ZT4+IHtcblx0XHR0aGlzLnJlc2V0V2Vla3MoKTtcblxuXHRcdGNvbnN0IG51bWJlck9mRGF5c0luTW9udGggPSAobmV3IERhdGUoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0RGF0ZSgpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gbnVtYmVyT2ZEYXlzSW5Nb250aDsgaSsrKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZVdlZWtzKG5ldyBEYXRlKHllYXIsIG1vbnRoLCBpKSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMud2Vla3M7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVdlZWtzKGRhdGU6IERhdGUpOiB2b2lkIHtcblx0XHRjb25zdCBkYXkgPSBkYXRlLmdldERhdGUoKSxcblx0XHRcdG1heFdlZWtOdW1iZXIgPSA2O1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYXhXZWVrTnVtYmVyOyBpKyspIHtcblx0XHRcdGlmIChkYXkgPT09IDEpIHtcblx0XHRcdFx0dGhpcy5hZGREYXlzVG9XZWVrKGksIGRhdGUpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmNhbkFkZERheXNUb1dlZWsoaSwgZGF5KSkge1xuXHRcdFx0XHR0aGlzLmFkZERheXNUb1dlZWsoaSwgdGhpcy5nZXRMYXN0RGF5RGF0ZSh0aGlzLndlZWtzW2kgLSAxXSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMud2Vla3MgPSBbdGhpcy53ZWVrc1swXSwgdGhpcy53ZWVrc1sxXSwgdGhpcy53ZWVrc1syXSwgdGhpcy53ZWVrc1szXSwgdGhpcy53ZWVrc1s0XSwgdGhpcy53ZWVrc1s1XV07XG5cdH1cblxuXHRwcml2YXRlIGFkZERheXNUb1dlZWsod2Vla051bWJlcjogbnVtYmVyLCBkYXRlOiBEYXRlKTogdm9pZCB7XG5cdFx0Y29uc3Qgd2VlayA9IHRoaXMud2Vla3Nbd2Vla051bWJlcl07XG5cblx0XHRmb3IgKGxldCBpID0gMTsgaSA8PSA3OyBpKyspIHtcblx0XHRcdGNvbnN0IGlzRmlyc3REYXlTdW5kYXkgPSBkYXRlLmdldERheSgpID09PSAwICYmIHRoaXMud2Vla3NbMF0ubGVuZ3RoID09PSAwO1xuXHRcdFx0bGV0IGRheTtcblxuXHRcdFx0aWYgKGlzRmlyc3REYXlTdW5kYXkpIHtcblx0XHRcdFx0ZGF5ID0gZGF0ZS5nZXREYXRlKCkgLSA2O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF5ID0gZGF0ZS5nZXREYXRlKCkgLSBkYXRlLmdldERheSgpICsgaTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGRheU9mV2VlayA9IG5ldyBEYXRlKGRhdGUuc2V0RGF0ZShkYXkpKTtcblxuXHRcdFx0aWYgKHdlZWsubGVuZ3RoIDwgNykge1xuXHRcdFx0XHR3ZWVrLnB1c2goZGF5T2ZXZWVrKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGdldExhc3REYXlOdW1iZXIod2VlazogQXJyYXk8RGF0ZT4pOiBudW1iZXIge1xuXHRcdGlmICh3ZWVrLmxlbmd0aCA9PT0gNykge1xuXHRcdFx0cmV0dXJuIHdlZWtbd2Vlay5sZW5ndGggLSAxXS5nZXREYXRlKCk7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRMYXN0RGF5RGF0ZSh3ZWVrOiBBcnJheTxEYXRlPik6IERhdGUge1xuXHRcdGNvbnN0IGxhc3REYXkgPSB3ZWVrW3dlZWsubGVuZ3RoIC0gMV0uZ2V0RGF0ZSgpO1xuXHRcdHJldHVybiBuZXcgRGF0ZSh3ZWVrW3dlZWsubGVuZ3RoIC0gMV0uc2V0RGF0ZShsYXN0RGF5KSk7XG5cdH1cblxuXHRwcml2YXRlIGNhbkFkZERheXNUb1dlZWsod2Vla051bWJlcjogbnVtYmVyLCBkYXk6IG51bWJlcik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLndlZWtzW3dlZWtOdW1iZXJdLmxlbmd0aCA9PT0gMFxuXHRcdFx0JiYgdGhpcy53ZWVrc1t3ZWVrTnVtYmVyIC0gMV0ubGVuZ3RoID09PSA3XG5cdFx0XHQmJiBkYXkgPiB0aGlzLmdldExhc3REYXlOdW1iZXIodGhpcy53ZWVrc1t3ZWVrTnVtYmVyIC0gMV0pO1xuXHR9XG5cblx0cHJpdmF0ZSByZXNldFdlZWtzKCk6IHZvaWQge1xuXHRcdHRoaXMud2Vla3MgPSBbXTtcblx0XHR0aGlzLndlZWtzWzBdID0gW107XG5cdFx0dGhpcy53ZWVrc1sxXSA9IFtdO1xuXHRcdHRoaXMud2Vla3NbMl0gPSBbXTtcblx0XHR0aGlzLndlZWtzWzNdID0gW107XG5cdFx0dGhpcy53ZWVrc1s0XSA9IFtdO1xuXHRcdHRoaXMud2Vla3NbNV0gPSBbXTtcblx0fVxufVxuIl19