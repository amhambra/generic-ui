import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { daysOfTheWeek } from '../../../data/days-of-the-week';
import { FabricDateUtils } from '../../../../../common/date-utils/fabric-date-utils';
import { FabricDatePickerDefaultActiveMonth } from '../../fabric-date-picker-default-values';
import * as i0 from "@angular/core";
import * as i1 from "../../../fabric-date-picker.service";
import * as i2 from "@angular/common";
export class FabricDatePickerDaysViewComponent {
    datePickerService;
    selectedDate;
    activeMonth = FabricDatePickerDefaultActiveMonth;
    weeks = [];
    daysOfTheWeek = daysOfTheWeek;
    currentDay = new Date();
    constructor(datePickerService) {
        this.datePickerService = datePickerService;
    }
    selectDate(date) {
        this.datePickerService.dateSelected(date);
    }
    isDate(comparedDate, date) {
        return FabricDateUtils.areDatesSame(comparedDate, date);
    }
    displayMonthDays(month) {
        return month === this.activeMonth;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FabricDatePickerDaysViewComponent, deps: [{ token: i1.FabricDatePickerService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.2", type: FabricDatePickerDaysViewComponent, selector: "gui-date-picker-days-view", inputs: { selectedDate: "selectedDate", activeMonth: "activeMonth", weeks: "weeks" }, ngImport: i0, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: FabricDatePickerDaysViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gui-date-picker-days-view', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.FabricDatePickerService }], propDecorators: { selectedDate: [{
                type: Input
            }], activeMonth: [{
                type: Input
            }], weeks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7O0FBUTdGLE1BQU0sT0FBTyxpQ0FBaUM7SUFlaEI7SUFaN0IsWUFBWSxDQUFRO0lBR3BCLFdBQVcsR0FBVyxrQ0FBa0MsQ0FBQztJQUd6RCxLQUFLLEdBQXVCLEVBQUUsQ0FBQztJQUUvQixhQUFhLEdBQUcsYUFBYSxDQUFDO0lBRTlCLFVBQVUsR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRTlCLFlBQTZCLGlCQUEwQztRQUExQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXlCO0lBQ3ZFLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBVTtRQUNwQixJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBa0IsRUFBRSxJQUFVO1FBQ3BDLE9BQU8sZUFBZSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWE7UUFDN0IsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUNuQyxDQUFDO3VHQTVCVyxpQ0FBaUM7MkZBQWpDLGlDQUFpQyx1SkNiOUMsK3VCQW9CQTs7MkZEUGEsaUNBQWlDO2tCQU43QyxTQUFTOytCQUNDLDJCQUEyQixpQkFFdEIsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTTs0RkFLL0MsWUFBWTtzQkFEWCxLQUFLO2dCQUlOLFdBQVc7c0JBRFYsS0FBSztnQkFJTixLQUFLO3NCQURKLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZGF5c09mVGhlV2VlayB9IGZyb20gJy4uLy4uLy4uL2RhdGEvZGF5cy1vZi10aGUtd2Vlayc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlUGlja2VyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2ZhYnJpYy1kYXRlLXBpY2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IEZhYnJpY0RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbW1vbi9kYXRlLXV0aWxzL2ZhYnJpYy1kYXRlLXV0aWxzJztcbmltcG9ydCB7IEZhYnJpY0RhdGVQaWNrZXJEZWZhdWx0QWN0aXZlTW9udGggfSBmcm9tICcuLi8uLi9mYWJyaWMtZGF0ZS1waWNrZXItZGVmYXVsdC12YWx1ZXMnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdndWktZGF0ZS1waWNrZXItZGF5cy12aWV3Jyxcblx0dGVtcGxhdGVVcmw6ICcuL2ZhYnJpYy1kYXRlLXBpY2tlci1kYXlzLXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuXHRlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBGYWJyaWNEYXRlUGlja2VyRGF5c1ZpZXdDb21wb25lbnQge1xuXG5cdEBJbnB1dCgpXG5cdHNlbGVjdGVkRGF0ZT86IERhdGU7XG5cblx0QElucHV0KClcblx0YWN0aXZlTW9udGg6IG51bWJlciA9IEZhYnJpY0RhdGVQaWNrZXJEZWZhdWx0QWN0aXZlTW9udGg7XG5cblx0QElucHV0KClcblx0d2Vla3M6IEFycmF5PEFycmF5PERhdGU+PiA9IFtdO1xuXG5cdGRheXNPZlRoZVdlZWsgPSBkYXlzT2ZUaGVXZWVrO1xuXG5cdGN1cnJlbnREYXk6IERhdGUgPSBuZXcgRGF0ZSgpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGF0ZVBpY2tlclNlcnZpY2U6IEZhYnJpY0RhdGVQaWNrZXJTZXJ2aWNlKSB7XG5cdH1cblxuXHRzZWxlY3REYXRlKGRhdGU6IERhdGUpOiB2b2lkIHtcblx0XHR0aGlzLmRhdGVQaWNrZXJTZXJ2aWNlLmRhdGVTZWxlY3RlZChkYXRlKTtcblx0fVxuXG5cdGlzRGF0ZShjb21wYXJlZERhdGU6IERhdGUsIGRhdGU6IERhdGUpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gRmFicmljRGF0ZVV0aWxzLmFyZURhdGVzU2FtZShjb21wYXJlZERhdGUsIGRhdGUpO1xuXHR9XG5cblx0ZGlzcGxheU1vbnRoRGF5cyhtb250aDogbnVtYmVyKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIG1vbnRoID09PSB0aGlzLmFjdGl2ZU1vbnRoO1xuXHR9XG59XG4iLCI8ZGl2IGNsYXNzPVwiZ3VpLWRpc3BsYXktZ3JpZCBndWktZ3JpZC1yb3dzLWdhcC04IGd1aS1weS02XCI+XG5cblx0PGRpdiBjbGFzcz1cImd1aS1kaXNwbGF5LWdyaWQgZ3VpLWdyaWQtY29scy03IGd1aS1weS00IGd1aS1kYXRlLXBpY2tlci1oZWFkZXJcIj5cblx0XHQ8ZGl2ICpuZ0Zvcj1cImxldCBkYXlPZlRoZVdlZWsgb2YgZGF5c09mVGhlV2Vla1wiPnt7ZGF5T2ZUaGVXZWVrfX08L2Rpdj5cblx0PC9kaXY+XG5cblx0PGRpdiAqbmdGb3I9XCJsZXQgd2VlayBvZiB3ZWVrc1wiXG5cdFx0IGNsYXNzPVwiZ3VpLWRpc3BsYXktZ3JpZCBndWktZ3JpZC1jb2xzLTdcIj5cblxuXHRcdDxkaXYgKGNsaWNrKT1cInNlbGVjdERhdGUoZGF5KVwiXG5cdFx0XHQgKm5nRm9yPVwibGV0IGRheSBvZiB3ZWVrXCJcblx0XHRcdCBbY2xhc3MuZ3VpLWRhdGUtcGlja2VyLWN1cnJlbnQtZGF5XT1cImlzRGF0ZShjdXJyZW50RGF5LCBkYXkpXCJcblx0XHRcdCBbY2xhc3MuZ3VpLWRhdGUtcGlja2VyLXNlbGVjdGVkLWRheV09XCJpc0RhdGUoc2VsZWN0ZWREYXRlLCBkYXkpXCJcblx0XHRcdCBbY2xhc3MuZ3VpLWRhdGUtcGlja2VyLXNlbGVjdGVkLW1vbnRoXT1cImRpc3BsYXlNb250aERheXMoZGF5LmdldE1vbnRoKCkpXCJcblx0XHRcdCBjbGFzcz1cImd1aS1kYXRlLXBpY2tlci1jZWxsIGd1aS1kYXRlLXBpY2tlci1kYXlcIj5cblx0XHRcdHt7ZGF5LmdldERhdGUoKX19XG5cdFx0PC9kaXY+XG5cblx0PC9kaXY+XG48L2Rpdj5cbiJdfQ==