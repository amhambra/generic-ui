import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FabricDatePickerComposition } from './models/fabric-date-picker-composition';
import * as i0 from "@angular/core";
export class FabricDatePickerCompositionService {
    datePickerFormat$ = new BehaviorSubject(FabricDatePickerComposition.DATE_PICKER);
    onComposition() {
        return this.datePickerFormat$.asObservable();
    }
    next(datePipeOptions) {
        this.datePickerFormat$.next(this.getComposition(datePipeOptions));
    }
    getComposition(datePipeOptions) {
        const removeDoubles = datePipeOptions.split(':').join(' '), removeDash = removeDoubles.split('/').join(' '), removeDot = removeDash.split('.').join(' '), removeComa = removeDot.split(',').join(' '), formatArray = removeComa.split(' ');
        let composition = FabricDatePickerComposition.NONE;
        formatArray.forEach((formatItem) => {
            const isDays = formatItem.toLowerCase().includes('d'), isMonths = formatItem.includes('M'), isYears = formatItem.toLowerCase().includes('y'), showHours = formatItem.toLowerCase().includes('h'), showMinutes = formatItem.includes('m'), showSeconds = formatItem.toLowerCase().includes('s'), isMeridian = formatItem.includes('h'), showDatePicker = isDays || isMonths || isYears, showTimePicker = showHours || showMinutes || showSeconds;
            if (showDatePicker) {
                composition = composition | FabricDatePickerComposition.DATE_PICKER;
            }
            if (showTimePicker) {
                composition = composition | FabricDatePickerComposition.TIME_PICKER;
            }
            if (isMeridian) {
                composition = composition | FabricDatePickerComposition.TIME_PICKER_MERIDIAN;
            }
            if (showHours) {
                composition = composition | FabricDatePickerComposition.TIME_PICKER_HOURS;
            }
            if (showMinutes) {
                composition = composition | FabricDatePickerComposition.TIME_PICKER_MINUTES;
            }
            if (showSeconds) {
                composition = composition | FabricDatePickerComposition.TIME_PICKER_SECONDS;
            }
        });
        return composition;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FabricDatePickerCompositionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FabricDatePickerCompositionService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FabricDatePickerCompositionService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWRhdGUtcGlja2VyLWNvbXBvc2l0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9mYWJyaWMtZGF0ZS1waWNrZXItY29tcG9zaXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUNBQXlDLENBQUM7O0FBR3RGLE1BQU0sT0FBTyxrQ0FBa0M7SUFFN0IsaUJBQWlCLEdBQUcsSUFBSSxlQUFlLENBQThCLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRS9ILGFBQWE7UUFDWixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxDQUFDLGVBQXVCO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFTyxjQUFjLENBQUMsZUFBdUI7UUFDN0MsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQ3pELFVBQVUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDL0MsU0FBUyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUMzQyxVQUFVLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQzNDLFdBQVcsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXJDLElBQUksV0FBVyxHQUFnQywyQkFBMkIsQ0FBQyxJQUFJLENBQUM7UUFFaEYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtZQUMxQyxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUNwRCxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFDbkMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQ2hELFNBQVMsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUNsRCxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFDdEMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQ3BELFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxjQUFjLEdBQUcsTUFBTSxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQzlDLGNBQWMsR0FBRyxTQUFTLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQztZQUUxRCxJQUFJLGNBQWMsRUFBRTtnQkFDbkIsV0FBVyxHQUFHLFdBQVcsR0FBRywyQkFBMkIsQ0FBQyxXQUFXLENBQUM7YUFDcEU7WUFFRCxJQUFJLGNBQWMsRUFBRTtnQkFDbkIsV0FBVyxHQUFHLFdBQVcsR0FBRywyQkFBMkIsQ0FBQyxXQUFXLENBQUM7YUFDcEU7WUFFRCxJQUFJLFVBQVUsRUFBRTtnQkFDZixXQUFXLEdBQUcsV0FBVyxHQUFHLDJCQUEyQixDQUFDLG9CQUFvQixDQUFDO2FBQzdFO1lBRUQsSUFBSSxTQUFTLEVBQUU7Z0JBQ2QsV0FBVyxHQUFHLFdBQVcsR0FBRywyQkFBMkIsQ0FBQyxpQkFBaUIsQ0FBQzthQUMxRTtZQUVELElBQUksV0FBVyxFQUFFO2dCQUNoQixXQUFXLEdBQUcsV0FBVyxHQUFHLDJCQUEyQixDQUFDLG1CQUFtQixDQUFDO2FBQzVFO1lBRUQsSUFBSSxXQUFXLEVBQUU7Z0JBQ2hCLFdBQVcsR0FBRyxXQUFXLEdBQUcsMkJBQTJCLENBQUMsbUJBQW1CLENBQUM7YUFDNUU7UUFFRixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sV0FBVyxDQUFDO0lBQ3BCLENBQUM7d0dBMURXLGtDQUFrQzs0R0FBbEMsa0NBQWtDOzs0RkFBbEMsa0NBQWtDO2tCQUQ5QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24gfSBmcm9tICcuL21vZGVscy9mYWJyaWMtZGF0ZS1waWNrZXItY29tcG9zaXRpb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uU2VydmljZSB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBkYXRlUGlja2VyRm9ybWF0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uPihGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24uREFURV9QSUNLRVIpO1xuXG5cdG9uQ29tcG9zaXRpb24oKTogT2JzZXJ2YWJsZTxGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24+IHtcblx0XHRyZXR1cm4gdGhpcy5kYXRlUGlja2VyRm9ybWF0JC5hc09ic2VydmFibGUoKTtcblx0fVxuXG5cdG5leHQoZGF0ZVBpcGVPcHRpb25zOiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLmRhdGVQaWNrZXJGb3JtYXQkLm5leHQodGhpcy5nZXRDb21wb3NpdGlvbihkYXRlUGlwZU9wdGlvbnMpKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0Q29tcG9zaXRpb24oZGF0ZVBpcGVPcHRpb25zOiBzdHJpbmcpOiBGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24ge1xuXHRcdGNvbnN0IHJlbW92ZURvdWJsZXMgPSBkYXRlUGlwZU9wdGlvbnMuc3BsaXQoJzonKS5qb2luKCcgJyksXG5cdFx0XHRyZW1vdmVEYXNoID0gcmVtb3ZlRG91Ymxlcy5zcGxpdCgnLycpLmpvaW4oJyAnKSxcblx0XHRcdHJlbW92ZURvdCA9IHJlbW92ZURhc2guc3BsaXQoJy4nKS5qb2luKCcgJyksXG5cdFx0XHRyZW1vdmVDb21hID0gcmVtb3ZlRG90LnNwbGl0KCcsJykuam9pbignICcpLFxuXHRcdFx0Zm9ybWF0QXJyYXkgPSByZW1vdmVDb21hLnNwbGl0KCcgJyk7XG5cblx0XHRsZXQgY29tcG9zaXRpb246IEZhYnJpY0RhdGVQaWNrZXJDb21wb3NpdGlvbiA9IEZhYnJpY0RhdGVQaWNrZXJDb21wb3NpdGlvbi5OT05FO1xuXG5cdFx0Zm9ybWF0QXJyYXkuZm9yRWFjaCgoZm9ybWF0SXRlbTogc3RyaW5nKSA9PiB7XG5cdFx0XHRjb25zdCBpc0RheXMgPSBmb3JtYXRJdGVtLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2QnKSxcblx0XHRcdFx0aXNNb250aHMgPSBmb3JtYXRJdGVtLmluY2x1ZGVzKCdNJyksXG5cdFx0XHRcdGlzWWVhcnMgPSBmb3JtYXRJdGVtLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3knKSxcblx0XHRcdFx0c2hvd0hvdXJzID0gZm9ybWF0SXRlbS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdoJyksXG5cdFx0XHRcdHNob3dNaW51dGVzID0gZm9ybWF0SXRlbS5pbmNsdWRlcygnbScpLFxuXHRcdFx0XHRzaG93U2Vjb25kcyA9IGZvcm1hdEl0ZW0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncycpLFxuXHRcdFx0XHRpc01lcmlkaWFuID0gZm9ybWF0SXRlbS5pbmNsdWRlcygnaCcpLFxuXHRcdFx0XHRzaG93RGF0ZVBpY2tlciA9IGlzRGF5cyB8fCBpc01vbnRocyB8fCBpc1llYXJzLFxuXHRcdFx0XHRzaG93VGltZVBpY2tlciA9IHNob3dIb3VycyB8fCBzaG93TWludXRlcyB8fCBzaG93U2Vjb25kcztcblxuXHRcdFx0aWYgKHNob3dEYXRlUGlja2VyKSB7XG5cdFx0XHRcdGNvbXBvc2l0aW9uID0gY29tcG9zaXRpb24gfCBGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24uREFURV9QSUNLRVI7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzaG93VGltZVBpY2tlcikge1xuXHRcdFx0XHRjb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uIHwgRmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uLlRJTUVfUElDS0VSO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNNZXJpZGlhbikge1xuXHRcdFx0XHRjb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uIHwgRmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uLlRJTUVfUElDS0VSX01FUklESUFOO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc2hvd0hvdXJzKSB7XG5cdFx0XHRcdGNvbXBvc2l0aW9uID0gY29tcG9zaXRpb24gfCBGYWJyaWNEYXRlUGlja2VyQ29tcG9zaXRpb24uVElNRV9QSUNLRVJfSE9VUlM7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzaG93TWludXRlcykge1xuXHRcdFx0XHRjb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uIHwgRmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uLlRJTUVfUElDS0VSX01JTlVURVM7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzaG93U2Vjb25kcykge1xuXHRcdFx0XHRjb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uIHwgRmFicmljRGF0ZVBpY2tlckNvbXBvc2l0aW9uLlRJTUVfUElDS0VSX1NFQ09ORFM7XG5cdFx0XHR9XG5cblx0XHR9KTtcblx0XHRyZXR1cm4gY29tcG9zaXRpb247XG5cdH1cbn1cbiJdfQ==