import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { daysOfTheWeek } from '../../../data/days-of-the-week';
import { FabricDateUtils } from '../../../../../common/date-utils/fabric-date-utils';
import { FabricDatePickerDefaultActiveMonth } from '../../fabric-date-picker-default-values';
import * as i0 from "@angular/core";
import * as i1 from "../../../fabric-date-picker.service";
import * as i2 from "@angular/common";
export class FabricDatePickerDaysViewComponent {
    constructor(datePickerService) {
        this.datePickerService = datePickerService;
        this.activeMonth = FabricDatePickerDefaultActiveMonth;
        this.weeks = [];
        this.daysOfTheWeek = daysOfTheWeek;
        this.currentDay = new Date();
    }
    selectDate(date) {
        this.datePickerService.dateSelected(date);
    }
    isDate(comparedDate, date) {
        return FabricDateUtils.areDatesSame(comparedDate, date);
    }
    displayMonthDays(month) {
        return month === this.activeMonth;
    }
}
FabricDatePickerDaysViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: FabricDatePickerDaysViewComponent, deps: [{ token: i1.FabricDatePickerService }], target: i0.ɵɵFactoryTarget.Component });
FabricDatePickerDaysViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.2", type: FabricDatePickerDaysViewComponent, selector: "gui-date-picker-days-view", inputs: { selectedDate: "selectedDate", activeMonth: "activeMonth", weeks: "weeks" }, ngImport: i0, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.2", ngImport: i0, type: FabricDatePickerDaysViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gui-date-picker-days-view', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FabricDatePickerService }]; }, propDecorators: { selectedDate: [{
                type: Input
            }], activeMonth: [{
                type: Input
            }], weeks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7O0FBUTdGLE1BQU0sT0FBTyxpQ0FBaUM7SUFlN0MsWUFBNkIsaUJBQTBDO1FBQTFDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBeUI7UUFUdkUsZ0JBQVcsR0FBVyxrQ0FBa0MsQ0FBQztRQUd6RCxVQUFLLEdBQXVCLEVBQUUsQ0FBQztRQUUvQixrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUU5QixlQUFVLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUc5QixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQVU7UUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQWtCLEVBQUUsSUFBVTtRQUNwQyxPQUFPLGVBQWUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzdCLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDbkMsQ0FBQzs7OEhBNUJXLGlDQUFpQztrSEFBakMsaUNBQWlDLHVKQ2I5QywrdUJBb0JBOzJGRFBhLGlDQUFpQztrQkFON0MsU0FBUzsrQkFDQywyQkFBMkIsaUJBRXRCLGlCQUFpQixDQUFDLElBQUksbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU07OEdBSy9DLFlBQVk7c0JBRFgsS0FBSztnQkFJTixXQUFXO3NCQURWLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGRheXNPZlRoZVdlZWsgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2RheXMtb2YtdGhlLXdlZWsnO1xuaW1wb3J0IHsgRmFicmljRGF0ZVBpY2tlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9mYWJyaWMtZGF0ZS1waWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vZGF0ZS11dGlscy9mYWJyaWMtZGF0ZS11dGlscyc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlUGlja2VyRGVmYXVsdEFjdGl2ZU1vbnRoIH0gZnJvbSAnLi4vLi4vZmFicmljLWRhdGUtcGlja2VyLWRlZmF1bHQtdmFsdWVzJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnZ3VpLWRhdGUtcGlja2VyLWRheXMtdmlldycsXG5cdHRlbXBsYXRlVXJsOiAnLi9mYWJyaWMtZGF0ZS1waWNrZXItZGF5cy12aWV3LmNvbXBvbmVudC5odG1sJyxcblx0ZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRmFicmljRGF0ZVBpY2tlckRheXNWaWV3Q29tcG9uZW50IHtcblxuXHRASW5wdXQoKVxuXHRzZWxlY3RlZERhdGU/OiBEYXRlO1xuXG5cdEBJbnB1dCgpXG5cdGFjdGl2ZU1vbnRoOiBudW1iZXIgPSBGYWJyaWNEYXRlUGlja2VyRGVmYXVsdEFjdGl2ZU1vbnRoO1xuXG5cdEBJbnB1dCgpXG5cdHdlZWtzOiBBcnJheTxBcnJheTxEYXRlPj4gPSBbXTtcblxuXHRkYXlzT2ZUaGVXZWVrID0gZGF5c09mVGhlV2VlaztcblxuXHRjdXJyZW50RGF5OiBEYXRlID0gbmV3IERhdGUoKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRhdGVQaWNrZXJTZXJ2aWNlOiBGYWJyaWNEYXRlUGlja2VyU2VydmljZSkge1xuXHR9XG5cblx0c2VsZWN0RGF0ZShkYXRlOiBEYXRlKTogdm9pZCB7XG5cdFx0dGhpcy5kYXRlUGlja2VyU2VydmljZS5kYXRlU2VsZWN0ZWQoZGF0ZSk7XG5cdH1cblxuXHRpc0RhdGUoY29tcGFyZWREYXRlOiBEYXRlLCBkYXRlOiBEYXRlKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIEZhYnJpY0RhdGVVdGlscy5hcmVEYXRlc1NhbWUoY29tcGFyZWREYXRlLCBkYXRlKTtcblx0fVxuXG5cdGRpc3BsYXlNb250aERheXMobW9udGg6IG51bWJlcik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBtb250aCA9PT0gdGhpcy5hY3RpdmVNb250aDtcblx0fVxufVxuIiwiPGRpdiBjbGFzcz1cImd1aS1kaXNwbGF5LWdyaWQgZ3VpLWdyaWQtcm93cy1nYXAtOCBndWktcHktNlwiPlxuXG5cdDxkaXYgY2xhc3M9XCJndWktZGlzcGxheS1ncmlkIGd1aS1ncmlkLWNvbHMtNyBndWktcHktNCBndWktZGF0ZS1waWNrZXItaGVhZGVyXCI+XG5cdFx0PGRpdiAqbmdGb3I9XCJsZXQgZGF5T2ZUaGVXZWVrIG9mIGRheXNPZlRoZVdlZWtcIj57e2RheU9mVGhlV2Vla319PC9kaXY+XG5cdDwvZGl2PlxuXG5cdDxkaXYgKm5nRm9yPVwibGV0IHdlZWsgb2Ygd2Vla3NcIlxuXHRcdCBjbGFzcz1cImd1aS1kaXNwbGF5LWdyaWQgZ3VpLWdyaWQtY29scy03XCI+XG5cblx0XHQ8ZGl2IChjbGljayk9XCJzZWxlY3REYXRlKGRheSlcIlxuXHRcdFx0ICpuZ0Zvcj1cImxldCBkYXkgb2Ygd2Vla1wiXG5cdFx0XHQgW2NsYXNzLmd1aS1kYXRlLXBpY2tlci1jdXJyZW50LWRheV09XCJpc0RhdGUoY3VycmVudERheSwgZGF5KVwiXG5cdFx0XHQgW2NsYXNzLmd1aS1kYXRlLXBpY2tlci1zZWxlY3RlZC1kYXldPVwiaXNEYXRlKHNlbGVjdGVkRGF0ZSwgZGF5KVwiXG5cdFx0XHQgW2NsYXNzLmd1aS1kYXRlLXBpY2tlci1zZWxlY3RlZC1tb250aF09XCJkaXNwbGF5TW9udGhEYXlzKGRheS5nZXRNb250aCgpKVwiXG5cdFx0XHQgY2xhc3M9XCJndWktZGF0ZS1waWNrZXItY2VsbCBndWktZGF0ZS1waWNrZXItZGF5XCI+XG5cdFx0XHR7e2RheS5nZXREYXRlKCl9fVxuXHRcdDwvZGl2PlxuXG5cdDwvZGl2PlxuPC9kaXY+XG4iXX0=