import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { daysOfTheWeek } from '../../../data/days-of-the-week';
import { FabricDateUtils } from '../../../../../common/date-utils/fabric-date-utils';
import { FabricDatePickerDefaultActiveMonth } from '../../fabric-date-picker-default-values';
import * as i0 from "@angular/core";
import * as i1 from "../../../fabric-date-picker.service";
import * as i2 from "@angular/common";
export class FabricDatePickerDaysViewComponent {
    constructor(datePickerService) {
        this.datePickerService = datePickerService;
        this.activeMonth = FabricDatePickerDefaultActiveMonth;
        this.weeks = [];
        this.daysOfTheWeek = daysOfTheWeek;
        this.currentDay = new Date();
    }
    selectDate(date) {
        this.datePickerService.dateSelected(date);
    }
    isDate(comparedDate, date) {
        return FabricDateUtils.areDatesSame(comparedDate, date);
    }
    displayMonthDays(month) {
        return month === this.activeMonth;
    }
}
FabricDatePickerDaysViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: FabricDatePickerDaysViewComponent, deps: [{ token: i1.FabricDatePickerService }], target: i0.ɵɵFactoryTarget.Component });
FabricDatePickerDaysViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.3", type: FabricDatePickerDaysViewComponent, selector: "gui-date-picker-days-view", inputs: { selectedDate: "selectedDate", activeMonth: "activeMonth", weeks: "weeks" }, ngImport: i0, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.3", ngImport: i0, type: FabricDatePickerDaysViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gui-date-picker-days-view', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"gui-display-grid gui-grid-rows-gap-8 gui-py-6\">\n\n\t<div class=\"gui-display-grid gui-grid-cols-7 gui-py-4 gui-date-picker-header\">\n\t\t<div *ngFor=\"let dayOfTheWeek of daysOfTheWeek\">{{dayOfTheWeek}}</div>\n\t</div>\n\n\t<div *ngFor=\"let week of weeks\"\n\t\t class=\"gui-display-grid gui-grid-cols-7\">\n\n\t\t<div (click)=\"selectDate(day)\"\n\t\t\t *ngFor=\"let day of week\"\n\t\t\t [class.gui-date-picker-current-day]=\"isDate(currentDay, day)\"\n\t\t\t [class.gui-date-picker-selected-day]=\"isDate(selectedDate, day)\"\n\t\t\t [class.gui-date-picker-selected-month]=\"displayMonthDays(day.getMonth())\"\n\t\t\t class=\"gui-date-picker-cell gui-date-picker-day\">\n\t\t\t{{day.getDate()}}\n\t\t</div>\n\n\t</div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.FabricDatePickerService }]; }, propDecorators: { selectedDate: [{
                type: Input
            }], activeMonth: [{
                type: Input
            }], weeks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvZ3VpLWZhYnJpYy9zcmMvZm9ybS9kYXRlLXBpY2tlci9jYWxlbmRhci92aWV3L2RheXMvZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7O0FBUTdGLE1BQU0sT0FBTyxpQ0FBaUM7SUFlN0MsWUFBNkIsaUJBQTBDO1FBQTFDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBeUI7UUFUdkUsZ0JBQVcsR0FBVyxrQ0FBa0MsQ0FBQztRQUd6RCxVQUFLLEdBQXVCLEVBQUUsQ0FBQztRQUUvQixrQkFBYSxHQUFHLGFBQWEsQ0FBQztRQUU5QixlQUFVLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUc5QixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQVU7UUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQWtCLEVBQUUsSUFBVTtRQUNwQyxPQUFPLGVBQWUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzdCLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDbkMsQ0FBQzs7OEhBNUJXLGlDQUFpQztrSEFBakMsaUNBQWlDLHVKQ2I5QywrdUJBb0JBOzJGRFBhLGlDQUFpQztrQkFON0MsU0FBUzsrQkFDQywyQkFBMkIsaUJBRXRCLGlCQUFpQixDQUFDLElBQUksbUJBQ3BCLHVCQUF1QixDQUFDLE1BQU07OEdBSy9DLFlBQVk7c0JBRFgsS0FBSztnQkFJTixXQUFXO3NCQURWLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGRheXNPZlRoZVdlZWsgfSBmcm9tICcuLi8uLi8uLi9kYXRhL2RheXMtb2YtdGhlLXdlZWsnO1xuaW1wb3J0IHsgRmFicmljRGF0ZVBpY2tlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9mYWJyaWMtZGF0ZS1waWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb21tb24vZGF0ZS11dGlscy9mYWJyaWMtZGF0ZS11dGlscyc7XG5pbXBvcnQgeyBGYWJyaWNEYXRlUGlja2VyRGVmYXVsdEFjdGl2ZU1vbnRoIH0gZnJvbSAnLi4vLi4vZmFicmljLWRhdGUtcGlja2VyLWRlZmF1bHQtdmFsdWVzJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnZ3VpLWRhdGUtcGlja2VyLWRheXMtdmlldycsXG5cdHRlbXBsYXRlVXJsOiAnZmFicmljLWRhdGUtcGlja2VyLWRheXMtdmlldy5jb21wb25lbnQuaHRtbCcsXG5cdGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG5cdGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEZhYnJpY0RhdGVQaWNrZXJEYXlzVmlld0NvbXBvbmVudCB7XG5cblx0QElucHV0KClcblx0c2VsZWN0ZWREYXRlPzogRGF0ZTtcblxuXHRASW5wdXQoKVxuXHRhY3RpdmVNb250aDogbnVtYmVyID0gRmFicmljRGF0ZVBpY2tlckRlZmF1bHRBY3RpdmVNb250aDtcblxuXHRASW5wdXQoKVxuXHR3ZWVrczogQXJyYXk8QXJyYXk8RGF0ZT4+ID0gW107XG5cblx0ZGF5c09mVGhlV2VlayA9IGRheXNPZlRoZVdlZWs7XG5cblx0Y3VycmVudERheTogRGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYXRlUGlja2VyU2VydmljZTogRmFicmljRGF0ZVBpY2tlclNlcnZpY2UpIHtcblx0fVxuXG5cdHNlbGVjdERhdGUoZGF0ZTogRGF0ZSk6IHZvaWQge1xuXHRcdHRoaXMuZGF0ZVBpY2tlclNlcnZpY2UuZGF0ZVNlbGVjdGVkKGRhdGUpO1xuXHR9XG5cblx0aXNEYXRlKGNvbXBhcmVkRGF0ZTogRGF0ZSwgZGF0ZTogRGF0ZSk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBGYWJyaWNEYXRlVXRpbHMuYXJlRGF0ZXNTYW1lKGNvbXBhcmVkRGF0ZSwgZGF0ZSk7XG5cdH1cblxuXHRkaXNwbGF5TW9udGhEYXlzKG1vbnRoOiBudW1iZXIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gbW9udGggPT09IHRoaXMuYWN0aXZlTW9udGg7XG5cdH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJndWktZGlzcGxheS1ncmlkIGd1aS1ncmlkLXJvd3MtZ2FwLTggZ3VpLXB5LTZcIj5cblxuXHQ8ZGl2IGNsYXNzPVwiZ3VpLWRpc3BsYXktZ3JpZCBndWktZ3JpZC1jb2xzLTcgZ3VpLXB5LTQgZ3VpLWRhdGUtcGlja2VyLWhlYWRlclwiPlxuXHRcdDxkaXYgKm5nRm9yPVwibGV0IGRheU9mVGhlV2VlayBvZiBkYXlzT2ZUaGVXZWVrXCI+e3tkYXlPZlRoZVdlZWt9fTwvZGl2PlxuXHQ8L2Rpdj5cblxuXHQ8ZGl2ICpuZ0Zvcj1cImxldCB3ZWVrIG9mIHdlZWtzXCJcblx0XHQgY2xhc3M9XCJndWktZGlzcGxheS1ncmlkIGd1aS1ncmlkLWNvbHMtN1wiPlxuXG5cdFx0PGRpdiAoY2xpY2spPVwic2VsZWN0RGF0ZShkYXkpXCJcblx0XHRcdCAqbmdGb3I9XCJsZXQgZGF5IG9mIHdlZWtcIlxuXHRcdFx0IFtjbGFzcy5ndWktZGF0ZS1waWNrZXItY3VycmVudC1kYXldPVwiaXNEYXRlKGN1cnJlbnREYXksIGRheSlcIlxuXHRcdFx0IFtjbGFzcy5ndWktZGF0ZS1waWNrZXItc2VsZWN0ZWQtZGF5XT1cImlzRGF0ZShzZWxlY3RlZERhdGUsIGRheSlcIlxuXHRcdFx0IFtjbGFzcy5ndWktZGF0ZS1waWNrZXItc2VsZWN0ZWQtbW9udGhdPVwiZGlzcGxheU1vbnRoRGF5cyhkYXkuZ2V0TW9udGgoKSlcIlxuXHRcdFx0IGNsYXNzPVwiZ3VpLWRhdGUtcGlja2VyLWNlbGwgZ3VpLWRhdGUtcGlja2VyLWRheVwiPlxuXHRcdFx0e3tkYXkuZ2V0RGF0ZSgpfX1cblx0XHQ8L2Rpdj5cblxuXHQ8L2Rpdj5cbjwvZGl2PlxuIl19