/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HermesModule } from '@generic-ui/hermes';
import { PagingDispatcher } from '../../domain/paging/paging.dispatcher';
import { SetPagingCommandHandler } from '../../domain/paging/set/set-paging.command-handler';
import { NextPageCommandHandler } from '../../domain/paging/next-page/next-page.command-handler';
import { PrevPageCommandHandler } from '../../domain/paging/prev-page/prev-page.command-handler';
import { ChangePagesizeCommandHandler } from '../../domain/paging/change-pagesize/change-pagesize.command-handler';
import { PagingRepository } from './read/paging.repository';
import { PagingManagerFactory } from '../../domain/paging/paging.manager-factory';
import { PagingConverter } from './read/paging.converter';
import { StructurePagingCommandDispatcher } from './structure-paging.command-dispatcher';
import { StructurePagingWarehouse } from './structure-paging.warehouse';
import { StructurePagingEventRepository } from './structure-paging.event-repository';
/** @type {?} */
const commandProviders = [
    PagingDispatcher
];
/** @type {?} */
const readProviders = [
    PagingRepository
];
/** @type {?} */
export const pagingCommandHandlers = [
    ...HermesModule.registerCommandHandler(SetPagingCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(NextPageCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(PrevPageCommandHandler, 'StructureAggregate'),
    ...HermesModule.registerCommandHandler(ChangePagesizeCommandHandler, 'StructureAggregate')
];
/** @type {?} */
export const pagingProviders = [
    ...commandProviders,
    ...readProviders,
    PagingManagerFactory,
    PagingConverter,
    StructurePagingCommandDispatcher,
    StructurePagingWarehouse,
    StructurePagingEventRepository
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5nLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1saXN0LyIsInNvdXJjZXMiOlsibGliL3N0cnVjdHVyZS9mZWF0dXJlLWFwaS9wYWdpbmcvcGFnaW5nLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFFQUFxRSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUN6RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7TUFHL0UsZ0JBQWdCLEdBQUc7SUFDeEIsZ0JBQWdCO0NBQ2hCOztNQUVLLGFBQWEsR0FBRztJQUNyQixnQkFBZ0I7Q0FDaEI7O0FBRUQsTUFBTSxPQUFPLHFCQUFxQixHQUFHO0lBQ3BDLEdBQUcsWUFBWSxDQUFDLHNCQUFzQixDQUFDLHVCQUF1QixFQUFFLG9CQUFvQixDQUFDO0lBQ3JGLEdBQUcsWUFBWSxDQUFDLHNCQUFzQixDQUFDLHNCQUFzQixFQUFFLG9CQUFvQixDQUFDO0lBQ3BGLEdBQUcsWUFBWSxDQUFDLHNCQUFzQixDQUFDLHNCQUFzQixFQUFFLG9CQUFvQixDQUFDO0lBQ3BGLEdBQUcsWUFBWSxDQUFDLHNCQUFzQixDQUFDLDRCQUE0QixFQUFFLG9CQUFvQixDQUFDO0NBQzFGOztBQUVELE1BQU0sT0FBTyxlQUFlLEdBQUc7SUFDOUIsR0FBRyxnQkFBZ0I7SUFDbkIsR0FBRyxhQUFhO0lBRWhCLG9CQUFvQjtJQUNwQixlQUFlO0lBRWYsZ0NBQWdDO0lBQ2hDLHdCQUF3QjtJQUN4Qiw4QkFBOEI7Q0FDOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIZXJtZXNNb2R1bGUgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuXG5pbXBvcnQgeyBQYWdpbmdEaXNwYXRjaGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3BhZ2luZy9wYWdpbmcuZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBTZXRQYWdpbmdDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9wYWdpbmcvc2V0L3NldC1wYWdpbmcuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IE5leHRQYWdlQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL25leHQtcGFnZS9uZXh0LXBhZ2UuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFByZXZQYWdlQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL3ByZXYtcGFnZS9wcmV2LXBhZ2UuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IENoYW5nZVBhZ2VzaXplQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL2NoYW5nZS1wYWdlc2l6ZS9jaGFuZ2UtcGFnZXNpemUuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFBhZ2luZ1JlcG9zaXRvcnkgfSBmcm9tICcuL3JlYWQvcGFnaW5nLnJlcG9zaXRvcnknO1xuaW1wb3J0IHsgUGFnaW5nTWFuYWdlckZhY3RvcnkgfSBmcm9tICcuLi8uLi9kb21haW4vcGFnaW5nL3BhZ2luZy5tYW5hZ2VyLWZhY3RvcnknO1xuaW1wb3J0IHsgUGFnaW5nQ29udmVydGVyIH0gZnJvbSAnLi9yZWFkL3BhZ2luZy5jb252ZXJ0ZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlUGFnaW5nQ29tbWFuZERpc3BhdGNoZXIgfSBmcm9tICcuL3N0cnVjdHVyZS1wYWdpbmcuY29tbWFuZC1kaXNwYXRjaGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZVBhZ2luZ1dhcmVob3VzZSB9IGZyb20gJy4vc3RydWN0dXJlLXBhZ2luZy53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlUGFnaW5nRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSAnLi9zdHJ1Y3R1cmUtcGFnaW5nLmV2ZW50LXJlcG9zaXRvcnknO1xuXG5cbmNvbnN0IGNvbW1hbmRQcm92aWRlcnMgPSBbXG5cdFBhZ2luZ0Rpc3BhdGNoZXJcbl07XG5cbmNvbnN0IHJlYWRQcm92aWRlcnMgPSBbXG5cdFBhZ2luZ1JlcG9zaXRvcnlcbl07XG5cbmV4cG9ydCBjb25zdCBwYWdpbmdDb21tYW5kSGFuZGxlcnMgPSBbXG5cdC4uLkhlcm1lc01vZHVsZS5yZWdpc3RlckNvbW1hbmRIYW5kbGVyKFNldFBhZ2luZ0NvbW1hbmRIYW5kbGVyLCAnU3RydWN0dXJlQWdncmVnYXRlJyksXG5cdC4uLkhlcm1lc01vZHVsZS5yZWdpc3RlckNvbW1hbmRIYW5kbGVyKE5leHRQYWdlQ29tbWFuZEhhbmRsZXIsICdTdHJ1Y3R1cmVBZ2dyZWdhdGUnKSxcblx0Li4uSGVybWVzTW9kdWxlLnJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIoUHJldlBhZ2VDb21tYW5kSGFuZGxlciwgJ1N0cnVjdHVyZUFnZ3JlZ2F0ZScpLFxuXHQuLi5IZXJtZXNNb2R1bGUucmVnaXN0ZXJDb21tYW5kSGFuZGxlcihDaGFuZ2VQYWdlc2l6ZUNvbW1hbmRIYW5kbGVyLCAnU3RydWN0dXJlQWdncmVnYXRlJylcbl07XG5cbmV4cG9ydCBjb25zdCBwYWdpbmdQcm92aWRlcnMgPSBbXG5cdC4uLmNvbW1hbmRQcm92aWRlcnMsXG5cdC4uLnJlYWRQcm92aWRlcnMsXG5cblx0UGFnaW5nTWFuYWdlckZhY3RvcnksXG5cdFBhZ2luZ0NvbnZlcnRlcixcblxuXHRTdHJ1Y3R1cmVQYWdpbmdDb21tYW5kRGlzcGF0Y2hlcixcblx0U3RydWN0dXJlUGFnaW5nV2FyZWhvdXNlLFxuXHRTdHJ1Y3R1cmVQYWdpbmdFdmVudFJlcG9zaXRvcnlcbl07XG4iXX0=