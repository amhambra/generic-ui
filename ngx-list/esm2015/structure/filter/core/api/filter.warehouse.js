import { Injectable } from '@angular/core';
import { FilterEnabledArchive } from './read/filter-enabled.archive';
import { QuickFilterEnabledArchive } from './read/quick-filter-enabled.archive';
import { FilterTypeArchive } from './type/filter-type.archive';
import { ActiveFilterArchive } from './active/active-filter.archive';
import { UniqueValuesArchive } from './unique/unique-values.archive';
export class FilterWarehouse {
    constructor(filterEnabledArchive, structureQuickFilterRepository, filterTypeArchive, uniqueValuesArchive, activeFilterArchive) {
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.filterTypeArchive = filterTypeArchive;
        this.uniqueValuesArchive = uniqueValuesArchive;
        this.activeFilterArchive = activeFilterArchive;
    }
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
}
FilterWarehouse.decorators = [
    { type: Injectable }
];
FilterWarehouse.ctorParameters = () => [
    { type: FilterEnabledArchive },
    { type: QuickFilterEnabledArchive },
    { type: FilterTypeArchive },
    { type: UniqueValuesArchive },
    { type: ActiveFilterArchive }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLndhcmVob3VzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtbGlzdC9zcmMvc3RydWN0dXJlL2ZpbHRlci9jb3JlL2FwaS9maWx0ZXIud2FyZWhvdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHL0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFckUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFJckUsTUFBTSxPQUFPLGVBQWU7SUFFM0IsWUFBNkIsb0JBQTBDLEVBQ25ELDhCQUF5RCxFQUN6RCxpQkFBb0MsRUFDcEMsbUJBQXdDLEVBQ3hDLG1CQUF3QztRQUovQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQ25ELG1DQUE4QixHQUE5Qiw4QkFBOEIsQ0FBMkI7UUFDekQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7SUFDNUQsQ0FBQztJQUVELGtCQUFrQixDQUFDLFdBQXdCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQscUJBQXFCLENBQUMsV0FBd0I7UUFDN0MsT0FBTyxJQUFJLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxhQUFhLENBQUMsV0FBd0I7UUFDckMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxlQUFlLENBQUMsV0FBd0I7UUFDdkMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBd0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OztZQTVCRCxVQUFVOzs7WUFYRixvQkFBb0I7WUFDcEIseUJBQXlCO1lBRXpCLGlCQUFpQjtZQUtqQixtQkFBbUI7WUFGbkIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBIZXJtZXNPYnNlcnZhYmxlLCBXYXJlaG91c2UgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuXG5pbXBvcnQgeyBGaWx0ZXJFbmFibGVkQXJjaGl2ZSB9IGZyb20gJy4vcmVhZC9maWx0ZXItZW5hYmxlZC5hcmNoaXZlJztcbmltcG9ydCB7IFF1aWNrRmlsdGVyRW5hYmxlZEFyY2hpdmUgfSBmcm9tICcuL3JlYWQvcXVpY2stZmlsdGVyLWVuYWJsZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlQXJjaGl2ZSB9IGZyb20gJy4vdHlwZS9maWx0ZXItdHlwZS5hcmNoaXZlJztcbmltcG9ydCB7IEZpbHRlclR5cGVNYXAgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUtbWFwJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlclJlYWRNb2RlbCB9IGZyb20gJy4vYWN0aXZlL2FjdGl2ZS1maWx0ZXIucmVhZC1tb2RlbCc7XG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJBcmNoaXZlIH0gZnJvbSAnLi9hY3RpdmUvYWN0aXZlLWZpbHRlci5hcmNoaXZlJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlc1JlYWRNb2RlbCB9IGZyb20gJy4vdW5pcXVlL3VuaXF1ZS12YWx1ZXMucmVhZC1tb2RlbCc7XG5pbXBvcnQgeyBVbmlxdWVWYWx1ZXNBcmNoaXZlIH0gZnJvbSAnLi91bmlxdWUvdW5pcXVlLXZhbHVlcy5hcmNoaXZlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmlsdGVyV2FyZWhvdXNlIGltcGxlbWVudHMgV2FyZWhvdXNlIHtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbHRlckVuYWJsZWRBcmNoaXZlOiBGaWx0ZXJFbmFibGVkQXJjaGl2ZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBzdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnk6IFF1aWNrRmlsdGVyRW5hYmxlZEFyY2hpdmUsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyVHlwZUFyY2hpdmU6IEZpbHRlclR5cGVBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHVuaXF1ZVZhbHVlc0FyY2hpdmU6IFVuaXF1ZVZhbHVlc0FyY2hpdmUsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlRmlsdGVyQXJjaGl2ZTogQWN0aXZlRmlsdGVyQXJjaGl2ZSkge1xuXHR9XG5cblx0b25GaWx0ZXJpbmdFbmFibGVkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlckVuYWJsZWRBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uUXVpY2tGaWx0ZXJzRW5hYmxlZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5zdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnkub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPEZpbHRlclR5cGVNYXA+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvbkFjdGl2ZUZpbHRlcnMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSZWFkb25seUFycmF5PEFjdGl2ZUZpbHRlclJlYWRNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVGaWx0ZXJBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uVW5pcXVlVmFsdWVzKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8VW5pcXVlVmFsdWVzUmVhZE1vZGVsPiB7XG5cdFx0cmV0dXJuIHRoaXMudW5pcXVlVmFsdWVzQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxufVxuIl19