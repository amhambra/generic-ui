import { Injectable } from '@angular/core';
import { CompositionWarehouse } from '../../../../composition/core/api/composition.warehouse';
import { hermesFilter, hermesMap, hermesSwitchMap, hermesTake } from '@generic-ui/hermes';
import { FilterWarehouse } from '../api/filter.warehouse';
import { FieldId } from '../../../field/core/domain/field/field.id';
import { FilterCommandInvoker } from '../api/filter.command-invoker';
export class FilterIntegration {
    constructor(compositionWarehouse, filterCommandInvoker, filterWarehouse) {
        this.compositionWarehouse = compositionWarehouse;
        this.filterCommandInvoker = filterCommandInvoker;
        this.filterWarehouse = filterWarehouse;
    }
    getFilterTypes(columnName, compositionId, structureId) {
        let fieldTypes = [];
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onFilterTypesForFieldId(new FieldId(col.columnFieldId.getId()), structureId);
        }))
            .subscribe((types) => {
            fieldTypes = types.map((type) => type.getName());
        });
        return fieldTypes;
    }
    filter(columnName, filterType, value, compositionId, structureId) {
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onceFilterTypeId(new FieldId(col.columnFieldId.getId()), filterType, structureId)
                .pipe(hermesMap((filterTypeId) => {
                return {
                    fieldId: new FieldId(col.columnFieldId.getId()),
                    filterTypeId: filterTypeId
                };
            }));
        }))
            .subscribe((params) => {
            const { fieldId, filterTypeId } = params;
            filterTypeId.ifPresent((ftId) => {
                this.filterCommandInvoker.add(fieldId, ftId, value, structureId);
            });
        });
    }
}
FilterIntegration.decorators = [
    { type: Injectable }
];
FilterIntegration.ctorParameters = () => [
    { type: CompositionWarehouse },
    { type: FilterCommandInvoker },
    { type: FilterWarehouse }
];
//# sourceMappingURL=data:application/json;base64,