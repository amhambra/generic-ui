import { Filter } from './filter';
import { FilterSettings } from './filter.settings';
import { FilterTypeManager } from './type/filter-type.manager';
import { FilterIdGenerator } from './filter.id-generator';
import { ActiveFilterReadModel } from '../api/active/active-filter.read-model';
export class FilterManager {
    constructor() {
        this.filterSettings = new FilterSettings();
        // string -> FilterId
        this.filters = new Map();
        this.activeFilters = [];
    }
    getSettings() {
        return this.filterSettings;
    }
    getAll() {
        return Array.from(this.filters)
            .map((arr) => arr[1]);
    }
    getAllActiveFilters(fields) {
        return this.activeFilters
            .map((af) => {
            return new ActiveFilterReadModel(af.getFilterId(), (fields.get(af.getFieldId().toString())).getName(), this.filterTypeManager.getFilterType(af.getFilterTypeId()).getName(), af.getFilterValue());
        });
    }
    getFilterTypes() {
        return this.filterTypeManager.getFieldIdsToFilterTypes();
    }
    assignFilterTypes(fields) {
        this.filterTypeManager = new FilterTypeManager(fields);
    }
    add(fieldId, filterTypeId, value) {
        const filter = new Filter(FilterIdGenerator.generateId(), fieldId, filterTypeId, value);
        this.activeFilters.push(filter);
    }
    filter(entities, fields) {
        let filteredEntities = Array.from(entities);
        for (const filter of this.activeFilters) {
            const filterTypeId = filter.getFilterTypeId(), filterType = this.getFilterType(filterTypeId), value = filter.getFilterValue();
            filteredEntities = filterType.filterMany(filteredEntities, fields.get(filter.getFieldId().toString()), value);
        }
        return filteredEntities;
    }
    removeAll() {
        this.activeFilters.length = 0;
    }
    remove(filterId) {
        this.activeFilters =
            this.activeFilters.filter((filter) => {
                return filter.getFilterId() !== filterId;
            });
    }
    getFilterType(filterTypeId) {
        return this.filterTypeManager.getFilterType(filterTypeId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLm1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL3N0cnVjdHVyZS9maWx0ZXIvY29yZS9kb21haW4vZmlsdGVyLm1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFJL0UsTUFBTSxPQUFPLGFBQWE7SUFXekI7UUFUaUIsbUJBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBRXZELHFCQUFxQjtRQUNKLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztRQUU3QyxrQkFBYSxHQUFrQixFQUFFLENBQUM7SUFLMUMsQ0FBQztJQUVELFdBQVc7UUFDVixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU07UUFDTCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUMzQixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxNQUEwQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxhQUFhO2FBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxxQkFBcUIsQ0FDL0IsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUNoQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFDbEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFDcEUsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUNuQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRUQsY0FBYztRQUNiLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELGlCQUFpQixDQUFDLE1BQW9CO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZ0IsRUFBRSxZQUEwQixFQUFFLEtBQVU7UUFFM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQWlDLEVBQUUsTUFBMEI7UUFFbkUsSUFBSSxnQkFBZ0IsR0FBNEIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVyRSxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFFeEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUM1QyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFDN0MsS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUVqQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUc7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQ3pCLENBQUM7SUFFRCxTQUFTO1FBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBa0I7UUFFeEIsSUFBSSxDQUFDLGFBQWE7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtnQkFDNUMsT0FBTyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGFBQWEsQ0FBQyxZQUEwQjtRQUMvQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHsgT3JpZ2luSXRlbUVudGl0eSB9IGZyb20gJy4uLy4uLy4uL3NvdXJjZS9jb3JlL2RvbWFpbi9vcmlnaW4vb3JpZ2luLWl0ZW0tZW50aXR5JztcbmltcG9ydCB7IEZpbHRlclNldHRpbmdzIH0gZnJvbSAnLi9maWx0ZXIuc2V0dGluZ3MnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi8uLi9maWVsZC9jb3JlL2RvbWFpbi9maWVsZC9maWVsZCc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlSWQgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL2NvcmUvZG9tYWluL2ZpZWxkL2ZpZWxkLmlkJztcbmltcG9ydCB7IEZpbHRlclR5cGVNYW5hZ2VyIH0gZnJvbSAnLi90eXBlL2ZpbHRlci10eXBlLm1hbmFnZXInO1xuaW1wb3J0IHsgRmlsdGVyVHlwZVJlYWRNb2RlbCB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLnJlYWQtbW9kZWwnO1xuaW1wb3J0IHsgQmFzZUZpbHRlclR5cGUgfSBmcm9tICcuL3R5cGUvYmFzZS1maWx0ZXItdHlwZSc7XG5pbXBvcnQgeyBGaWx0ZXJJZEdlbmVyYXRvciB9IGZyb20gJy4vZmlsdGVyLmlkLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJSZWFkTW9kZWwgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIucmVhZC1tb2RlbCc7XG5pbXBvcnQgeyBGaWx0ZXJJZCB9IGZyb20gJy4uL2FwaS9maWx0ZXIuaWQnO1xuXG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJNYW5hZ2VyIHtcblxuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlclNldHRpbmdzID0gbmV3IEZpbHRlclNldHRpbmdzKCk7XG5cblx0Ly8gc3RyaW5nIC0+IEZpbHRlcklkXG5cdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVycyA9IG5ldyBNYXA8c3RyaW5nLCBGaWx0ZXI+KCk7XG5cblx0cHJpdmF0ZSBhY3RpdmVGaWx0ZXJzOiBBcnJheTxGaWx0ZXI+ID0gW107XG5cblx0cHJpdmF0ZSBmaWx0ZXJUeXBlTWFuYWdlcjogRmlsdGVyVHlwZU1hbmFnZXI7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdH1cblxuXHRnZXRTZXR0aW5ncygpOiBGaWx0ZXJTZXR0aW5ncyB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyU2V0dGluZ3M7XG5cdH1cblxuXHRnZXRBbGwoKTogQXJyYXk8RmlsdGVyPiB7XG5cdFx0cmV0dXJuIEFycmF5LmZyb20odGhpcy5maWx0ZXJzKVxuXHRcdFx0XHRcdC5tYXAoKGFycikgPT4gYXJyWzFdKTtcblx0fVxuXG5cdGdldEFsbEFjdGl2ZUZpbHRlcnMoZmllbGRzOiBNYXA8c3RyaW5nLCBGaWVsZD4pOiBSZWFkb25seUFycmF5PEFjdGl2ZUZpbHRlclJlYWRNb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZUZpbHRlcnNcblx0XHRcdFx0ICAgLm1hcCgoYWY6IEZpbHRlcikgPT4ge1xuXHRcdFx0XHRcdCAgIHJldHVybiBuZXcgQWN0aXZlRmlsdGVyUmVhZE1vZGVsKFxuXHRcdFx0XHRcdFx0ICAgYWYuZ2V0RmlsdGVySWQoKSxcblx0XHRcdFx0XHRcdCAgIChmaWVsZHMuZ2V0KGFmLmdldEZpZWxkSWQoKS50b1N0cmluZygpKSkuZ2V0TmFtZSgpLFxuXHRcdFx0XHRcdFx0ICAgdGhpcy5maWx0ZXJUeXBlTWFuYWdlci5nZXRGaWx0ZXJUeXBlKGFmLmdldEZpbHRlclR5cGVJZCgpKS5nZXROYW1lKCksXG5cdFx0XHRcdFx0XHQgICBhZi5nZXRGaWx0ZXJWYWx1ZSgpXG5cdFx0XHRcdFx0ICAgKTtcblx0XHRcdFx0ICAgfSk7XG5cdH1cblxuXHRnZXRGaWx0ZXJUeXBlcygpOiBNYXA8c3RyaW5nLCBBcnJheTxGaWx0ZXJUeXBlUmVhZE1vZGVsPj4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlclR5cGVNYW5hZ2VyLmdldEZpZWxkSWRzVG9GaWx0ZXJUeXBlcygpO1xuXHR9XG5cblx0YXNzaWduRmlsdGVyVHlwZXMoZmllbGRzOiBBcnJheTxGaWVsZD4pIHtcblx0XHR0aGlzLmZpbHRlclR5cGVNYW5hZ2VyID0gbmV3IEZpbHRlclR5cGVNYW5hZ2VyKGZpZWxkcyk7XG5cdH1cblxuXHRhZGQoZmllbGRJZDogRmllbGRJZCwgZmlsdGVyVHlwZUlkOiBGaWx0ZXJUeXBlSWQsIHZhbHVlOiBhbnkpOiB2b2lkIHtcblxuXHRcdGNvbnN0IGZpbHRlciA9IG5ldyBGaWx0ZXIoRmlsdGVySWRHZW5lcmF0b3IuZ2VuZXJhdGVJZCgpLCBmaWVsZElkLCBmaWx0ZXJUeXBlSWQsIHZhbHVlKTtcblxuXHRcdHRoaXMuYWN0aXZlRmlsdGVycy5wdXNoKGZpbHRlcik7XG5cdH1cblxuXHRmaWx0ZXIoZW50aXRpZXM6IEFycmF5PE9yaWdpbkl0ZW1FbnRpdHk+LCBmaWVsZHM6IE1hcDxzdHJpbmcsIEZpZWxkPik6IEFycmF5PE9yaWdpbkl0ZW1FbnRpdHk+IHtcblxuXHRcdGxldCBmaWx0ZXJlZEVudGl0aWVzOiBBcnJheTxPcmlnaW5JdGVtRW50aXR5PiA9IEFycmF5LmZyb20oZW50aXRpZXMpO1xuXG5cdFx0Zm9yIChjb25zdCBmaWx0ZXIgb2YgdGhpcy5hY3RpdmVGaWx0ZXJzKSB7XG5cblx0XHRcdGNvbnN0IGZpbHRlclR5cGVJZCA9IGZpbHRlci5nZXRGaWx0ZXJUeXBlSWQoKSxcblx0XHRcdFx0ZmlsdGVyVHlwZSA9IHRoaXMuZ2V0RmlsdGVyVHlwZShmaWx0ZXJUeXBlSWQpLFxuXHRcdFx0XHR2YWx1ZSA9IGZpbHRlci5nZXRGaWx0ZXJWYWx1ZSgpO1xuXG5cdFx0XHRmaWx0ZXJlZEVudGl0aWVzID0gZmlsdGVyVHlwZS5maWx0ZXJNYW55KGZpbHRlcmVkRW50aXRpZXMsIGZpZWxkcy5nZXQoZmlsdGVyLmdldEZpZWxkSWQoKS50b1N0cmluZygpKSwgdmFsdWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWx0ZXJlZEVudGl0aWVzO1xuXHR9XG5cblx0cmVtb3ZlQWxsKCk6IHZvaWQge1xuXHRcdHRoaXMuYWN0aXZlRmlsdGVycy5sZW5ndGggPSAwO1xuXHR9XG5cblx0cmVtb3ZlKGZpbHRlcklkOiBGaWx0ZXJJZCk6IHZvaWQge1xuXG5cdFx0dGhpcy5hY3RpdmVGaWx0ZXJzID1cblx0XHRcdHRoaXMuYWN0aXZlRmlsdGVycy5maWx0ZXIoKGZpbHRlcjogRmlsdGVyKSA9PiB7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXIuZ2V0RmlsdGVySWQoKSAhPT0gZmlsdGVySWQ7XG5cdFx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0RmlsdGVyVHlwZShmaWx0ZXJUeXBlSWQ6IEZpbHRlclR5cGVJZCk6IEJhc2VGaWx0ZXJUeXBlPGFueT4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlclR5cGVNYW5hZ2VyLmdldEZpbHRlclR5cGUoZmlsdGVyVHlwZUlkKTtcblx0fVxuXG5cbn1cbiJdfQ==