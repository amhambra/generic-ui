import { Injectable } from '@angular/core';
import { FilterWarehouse } from '../api/filter.warehouse';
import { FilterEnabledArchive } from '../api/read/filter-enabled.archive';
import { QuickFilterEnabledArchive } from '../api/read/quick-filter-enabled.archive';
import { FilterTypeArchive } from '../api/type/filter-type.archive';
import { UniqueValuesArchive } from '../api/unique/unique-values.archive';
import { ActiveFilterArchive } from '../api/active/active-filter.archive';
import { hermesMap, Optional, singleFromObservable } from '@generic-ui/hermes';
export class DomainFilterWarehouse extends FilterWarehouse {
    constructor(filterEnabledArchive, structureQuickFilterRepository, filterTypeArchive, uniqueValuesArchive, activeFilterArchive) {
        super();
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.filterTypeArchive = filterTypeArchive;
        this.uniqueValuesArchive = uniqueValuesArchive;
        this.activeFilterArchive = activeFilterArchive;
    }
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    onFilterTypesForFieldId(fieldId, structureId) {
        return this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            return map.getFilterTypes(fieldId);
        }));
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
    onceFilterTypeId(fieldId, filterTypeName, structureId) {
        return singleFromObservable(this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            const filterTypes = map.getFilterTypes(fieldId);
            const filterType = filterTypes.find((fieldType) => fieldType.getName() === filterTypeName);
            return Optional.of(filterType.getId());
        })));
    }
}
DomainFilterWarehouse.decorators = [
    { type: Injectable }
];
DomainFilterWarehouse.ctorParameters = () => [
    { type: FilterEnabledArchive },
    { type: QuickFilterEnabledArchive },
    { type: FilterTypeArchive },
    { type: UniqueValuesArchive },
    { type: ActiveFilterArchive }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLWZpbHRlci53YXJlaG91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL3N0cnVjdHVyZS9maWx0ZXIvY29yZS9kb21haW4tcmVhZC9kb21haW4tZmlsdGVyLndhcmVob3VzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUUxRSxPQUFPLEVBQUUsU0FBUyxFQUFrQyxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVMvRyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsZUFBZTtJQUV6RCxZQUE2QixvQkFBMEMsRUFDbkQsOEJBQXlELEVBQ3pELGlCQUFvQyxFQUNwQyxtQkFBd0MsRUFDeEMsbUJBQXdDO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBTG9CLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDbkQsbUNBQThCLEdBQTlCLDhCQUE4QixDQUEyQjtRQUN6RCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUU1RCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsV0FBd0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxXQUF3QjtRQUM3QyxPQUFPLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGFBQWEsQ0FBQyxXQUF3QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELHVCQUF1QixDQUFDLE9BQWdCLEVBQUUsV0FBd0I7UUFDakUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUNoQyxJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsR0FBa0IsRUFBRSxFQUFFO1lBQ2hDLE9BQU8sR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ1IsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUF3QjtRQUN2QyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGNBQWMsQ0FBQyxXQUF3QjtRQUN0QyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQWdCLEVBQUUsY0FBc0IsRUFBRSxXQUF3QjtRQUNsRixPQUFPLG9CQUFvQixDQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUM3QixJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsR0FBa0IsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFaEQsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBRTNGLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FDRixDQUNGLENBQUM7SUFFSCxDQUFDOzs7WUF0REQsVUFBVTs7O1lBZEYsb0JBQW9CO1lBQ3BCLHlCQUF5QjtZQUN6QixpQkFBaUI7WUFDakIsbUJBQW1CO1lBQ25CLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlcldhcmVob3VzZSB9IGZyb20gJy4uL2FwaS9maWx0ZXIud2FyZWhvdXNlJztcbmltcG9ydCB7IEZpbHRlckVuYWJsZWRBcmNoaXZlIH0gZnJvbSAnLi4vYXBpL3JlYWQvZmlsdGVyLWVuYWJsZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBRdWlja0ZpbHRlckVuYWJsZWRBcmNoaXZlIH0gZnJvbSAnLi4vYXBpL3JlYWQvcXVpY2stZmlsdGVyLWVuYWJsZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlQXJjaGl2ZSB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLmFyY2hpdmUnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVzQXJjaGl2ZSB9IGZyb20gJy4uL2FwaS91bmlxdWUvdW5pcXVlLXZhbHVlcy5hcmNoaXZlJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlckFyY2hpdmUgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIuYXJjaGl2ZSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBoZXJtZXNNYXAsIEhlcm1lc09ic2VydmFibGUsIEhlcm1lc1NpbmdsZSwgT3B0aW9uYWwsIHNpbmdsZUZyb21PYnNlcnZhYmxlIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IEZpbHRlclR5cGVNYXAgfSBmcm9tICcuLi9hcGkvdHlwZS9maWx0ZXItdHlwZS1tYXAnO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyUmVhZE1vZGVsIH0gZnJvbSAnLi4vYXBpL2FjdGl2ZS9hY3RpdmUtZmlsdGVyLnJlYWQtbW9kZWwnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVzUmVhZE1vZGVsIH0gZnJvbSAnLi4vYXBpL3VuaXF1ZS91bmlxdWUtdmFsdWVzLnJlYWQtbW9kZWwnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL2NvcmUvZG9tYWluL2ZpZWxkL2ZpZWxkLmlkJztcbmltcG9ydCB7IEZpbHRlclR5cGVSZWFkTW9kZWwgfSBmcm9tICcuLi9hcGkvdHlwZS9maWx0ZXItdHlwZS5yZWFkLW1vZGVsJztcbmltcG9ydCB7IEZpbHRlclR5cGVJZCB9IGZyb20gJy4uL2RvbWFpbi90eXBlL2ZpbHRlci10eXBlLmlkJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvbWFpbkZpbHRlcldhcmVob3VzZSBleHRlbmRzIEZpbHRlcldhcmVob3VzZSB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBmaWx0ZXJFbmFibGVkQXJjaGl2ZTogRmlsdGVyRW5hYmxlZEFyY2hpdmUsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgc3RydWN0dXJlUXVpY2tGaWx0ZXJSZXBvc2l0b3J5OiBRdWlja0ZpbHRlckVuYWJsZWRBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlclR5cGVBcmNoaXZlOiBGaWx0ZXJUeXBlQXJjaGl2ZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSB1bmlxdWVWYWx1ZXNBcmNoaXZlOiBVbmlxdWVWYWx1ZXNBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGFjdGl2ZUZpbHRlckFyY2hpdmU6IEFjdGl2ZUZpbHRlckFyY2hpdmUpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0b25GaWx0ZXJpbmdFbmFibGVkKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlckVuYWJsZWRBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uUXVpY2tGaWx0ZXJzRW5hYmxlZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5zdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnkub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPEZpbHRlclR5cGVNYXA+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvbkZpbHRlclR5cGVzRm9yRmllbGRJZChmaWVsZElkOiBGaWVsZElkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPFJlYWRvbmx5QXJyYXk8RmlsdGVyVHlwZVJlYWRNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5vbkZpbHRlclR5cGVzKHN0cnVjdHVyZUlkKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKG1hcDogRmlsdGVyVHlwZU1hcCkgPT4ge1xuXHRcdFx0XHRcdFx0ICAgcmV0dXJuIG1hcC5nZXRGaWx0ZXJUeXBlcyhmaWVsZElkKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0b25BY3RpdmVGaWx0ZXJzKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8UmVhZG9ubHlBcnJheTxBY3RpdmVGaWx0ZXJSZWFkTW9kZWw+PiB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlRmlsdGVyQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvblVuaXF1ZVZhbHVlcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPFVuaXF1ZVZhbHVlc1JlYWRNb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLnVuaXF1ZVZhbHVlc0FyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25jZUZpbHRlclR5cGVJZChmaWVsZElkOiBGaWVsZElkLCBmaWx0ZXJUeXBlTmFtZTogc3RyaW5nLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNTaW5nbGU8T3B0aW9uYWw8RmlsdGVyVHlwZUlkPj4ge1xuXHRcdHJldHVybiBzaW5nbGVGcm9tT2JzZXJ2YWJsZShcblx0XHRcdHRoaXMub25GaWx0ZXJUeXBlcyhzdHJ1Y3R1cmVJZClcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0aGVybWVzTWFwKChtYXA6IEZpbHRlclR5cGVNYXApID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGZpbHRlclR5cGVzID0gbWFwLmdldEZpbHRlclR5cGVzKGZpZWxkSWQpO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmaWx0ZXJUeXBlID0gZmlsdGVyVHlwZXMuZmluZCgoZmllbGRUeXBlKSA9PiBmaWVsZFR5cGUuZ2V0TmFtZSgpID09PSBmaWx0ZXJUeXBlTmFtZSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBPcHRpb25hbC5vZihmaWx0ZXJUeXBlLmdldElkKCkpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdClcblx0XHQpO1xuXG5cdH1cblxufVxuIl19