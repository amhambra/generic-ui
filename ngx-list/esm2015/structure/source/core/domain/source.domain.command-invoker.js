import { Injectable } from '@angular/core';
import { zip } from 'rxjs';
import { StructureEditSourceItemParams } from '../domain/origin/edit/structure.edit-source-item.params';
import { fromRxJsObservable, hermesMap, hermesTake, toRxJsObservable } from '@generic-ui/hermes';
import { DeleteOriginItemCommand } from '../domain/origin/delete/delete-origin-item.command';
import { SourceCommandInvoker } from '../api/source.command-invoker';
import * as i0 from "@angular/core";
import * as i1 from "@generic-ui/hermes";
import * as i2 from "../domain/source.dispatcher";
import * as i3 from "../../../field/core/api/field.warehouse";
import * as i4 from "../api/source.warehouse";
export class SourceDomainCommandInvoker extends SourceCommandInvoker {
    constructor(commandDispatcher, sourceDispatcher, fieldWarehouse, sourceReadModelService) {
        super();
        this.commandDispatcher = commandDispatcher;
        this.sourceDispatcher = sourceDispatcher;
        this.fieldWarehouse = fieldWarehouse;
        this.sourceReadModelService = sourceReadModelService;
    }
    setOrigin(items, structureId) {
        this.sourceDispatcher.setOrigin(structureId, items);
    }
    setLoading(enabled, structureId) {
        this.sourceDispatcher.setLoading(structureId, enabled);
    }
    editItem(params, structureId) {
        this.sourceDispatcher.editItem(structureId, params);
    }
    editItemByIndex(itemIndex, fieldIndex, value, structureId) {
        const itemId$ = toRxJsObservable(this.sourceReadModelService
            .onceEntities(structureId)
            .pipe(hermesMap((entities) => {
            return entities[itemIndex].getId();
        })));
        const fieldId$ = toRxJsObservable(this.fieldWarehouse.onFields(structureId));
        fromRxJsObservable(zip(itemId$, fieldId$))
            .pipe(hermesTake(1))
            .subscribe((array) => {
            const itemId = array[0], fields = array[1];
            this.editItem(new StructureEditSourceItemParams(itemId, fields[fieldIndex], value), structureId);
        });
    }
    deleteRow(row, structureId) {
        if (row.getItemId() !== undefined) {
            this.deleteItemById(row.getItemId(), structureId);
        }
        else if (row.getIndex() !== undefined) {
            this.deleteItemByIndex(row.getIndex(), structureId);
        }
    }
    deleteRows(rows, structureId) {
        if (rows.length > 0) {
            if (rows[0].getItemId() !== undefined) {
                this.deleteManyItemsByItemIds(rows.map(r => r.getItemId()), structureId);
            }
            else if (rows[0].getIndex() !== undefined) {
                this.deleteManyItemsByIndex(rows.map(r => r.getIndex()), structureId);
            }
        }
    }
    deleteItemByIndex(index, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byIndex(structureId, index));
    }
    deleteItemById(itemId, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byItemId(structureId, itemId));
    }
    deleteManyItemsByIndex(indexes, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byManyIndex(structureId, indexes));
    }
    deleteManyItemsByItemIds(itemIds, structureId) {
        this.commandDispatcher.dispatch(DeleteOriginItemCommand.byManyItemId(structureId, itemIds));
    }
}
SourceDomainCommandInvoker.ɵfac = function SourceDomainCommandInvoker_Factory(t) { return new (t || SourceDomainCommandInvoker)(i0.ɵɵinject(i1.CommandDispatcher), i0.ɵɵinject(i2.SourceDispatcher), i0.ɵɵinject(i3.FieldWarehouse), i0.ɵɵinject(i4.SourceWarehouse)); };
SourceDomainCommandInvoker.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SourceDomainCommandInvoker, factory: SourceDomainCommandInvoker.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SourceDomainCommandInvoker, [{
        type: Injectable
    }], function () { return [{ type: i1.CommandDispatcher }, { type: i2.SourceDispatcher }, { type: i3.FieldWarehouse }, { type: i4.SourceWarehouse }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,