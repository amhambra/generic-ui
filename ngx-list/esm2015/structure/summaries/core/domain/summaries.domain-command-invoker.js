import { Injectable } from '@angular/core';
import { SummariesCommandInvoker } from '../api/summaries.command-invoker';
import { StructureSummariesPanelConfigConverter } from '../domain-read/config/structure.summaries-panel.config-converter';
import { StructureSummariesConfigArchive } from '../domain-read/config/structure.summaries-config.archive';
import { SummariesDispatcher } from './summaries.dispatcher';
export class SummariesDomainCommandInvoker extends SummariesCommandInvoker {
    constructor(summariesDispatcher, configConverter, structureSummariesConfigArchive) {
        super();
        this.summariesDispatcher = summariesDispatcher;
        this.configConverter = configConverter;
        this.structureSummariesConfigArchive = structureSummariesConfigArchive;
    }
    setSummariesEnabled(enabled, structureId) {
        this.summariesDispatcher.setSummariesEnabled(enabled, structureId);
    }
    setConfig(config, structureId) {
        const summariesPanelConfig = this.configConverter.convert(config);
        this.setSummariesEnabled(config.enabled, structureId);
        this.structureSummariesConfigArchive.next(structureId, summariesPanelConfig);
    }
}
SummariesDomainCommandInvoker.decorators = [
    { type: Injectable }
];
SummariesDomainCommandInvoker.ctorParameters = () => [
    { type: SummariesDispatcher },
    { type: StructureSummariesPanelConfigConverter },
    { type: StructureSummariesConfigArchive }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyaWVzLmRvbWFpbi1jb21tYW5kLWludm9rZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL3N0cnVjdHVyZS9zdW1tYXJpZXMvY29yZS9kb21haW4vc3VtbWFyaWVzLmRvbWFpbi1jb21tYW5kLWludm9rZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUUzRSxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSxrRUFBa0UsQ0FBQztBQUMxSCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUMzRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUk3RCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsdUJBQXVCO0lBRXpFLFlBQTZCLG1CQUF3QyxFQUNqRCxlQUF1RCxFQUN2RCwrQkFBZ0U7UUFDbkYsS0FBSyxFQUFFLENBQUM7UUFIb0Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNqRCxvQkFBZSxHQUFmLGVBQWUsQ0FBd0M7UUFDdkQsb0NBQStCLEdBQS9CLCtCQUErQixDQUFpQztJQUVwRixDQUFDO0lBRUQsbUJBQW1CLENBQUMsT0FBZ0IsRUFBRSxXQUF3QjtRQUM3RCxJQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBdUIsRUFBRSxXQUF3QjtRQUUxRCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDOUUsQ0FBQzs7O1lBbkJELFVBQVU7OztZQUhGLG1CQUFtQjtZQUZuQixzQ0FBc0M7WUFDdEMsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBTdW1tYXJpZXNDb21tYW5kSW52b2tlciB9IGZyb20gJy4uL2FwaS9zdW1tYXJpZXMuY29tbWFuZC1pbnZva2VyJztcbmltcG9ydCB7IFN1bW1hcmllc0NvbmZpZyB9IGZyb20gJy4uL2FwaS9zdW1tYXJpZXMtY29uZmlnJztcbmltcG9ydCB7IFN0cnVjdHVyZVN1bW1hcmllc1BhbmVsQ29uZmlnQ29udmVydGVyIH0gZnJvbSAnLi4vZG9tYWluLXJlYWQvY29uZmlnL3N0cnVjdHVyZS5zdW1tYXJpZXMtcGFuZWwuY29uZmlnLWNvbnZlcnRlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVTdW1tYXJpZXNDb25maWdBcmNoaXZlIH0gZnJvbSAnLi4vZG9tYWluLXJlYWQvY29uZmlnL3N0cnVjdHVyZS5zdW1tYXJpZXMtY29uZmlnLmFyY2hpdmUnO1xuaW1wb3J0IHsgU3VtbWFyaWVzRGlzcGF0Y2hlciB9IGZyb20gJy4vc3VtbWFyaWVzLmRpc3BhdGNoZXInO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdW1tYXJpZXNEb21haW5Db21tYW5kSW52b2tlciBleHRlbmRzIFN1bW1hcmllc0NvbW1hbmRJbnZva2VyIHtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHN1bW1hcmllc0Rpc3BhdGNoZXI6IFN1bW1hcmllc0Rpc3BhdGNoZXIsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgY29uZmlnQ29udmVydGVyOiBTdHJ1Y3R1cmVTdW1tYXJpZXNQYW5lbENvbmZpZ0NvbnZlcnRlcixcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBzdHJ1Y3R1cmVTdW1tYXJpZXNDb25maWdBcmNoaXZlOiBTdHJ1Y3R1cmVTdW1tYXJpZXNDb25maWdBcmNoaXZlKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdHNldFN1bW1hcmllc0VuYWJsZWQoZW5hYmxlZDogYm9vbGVhbiwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5zdW1tYXJpZXNEaXNwYXRjaGVyLnNldFN1bW1hcmllc0VuYWJsZWQoZW5hYmxlZCwgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0c2V0Q29uZmlnKGNvbmZpZzogU3VtbWFyaWVzQ29uZmlnLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblxuXHRcdGNvbnN0IHN1bW1hcmllc1BhbmVsQ29uZmlnID0gdGhpcy5jb25maWdDb252ZXJ0ZXIuY29udmVydChjb25maWcpO1xuXG5cdFx0dGhpcy5zZXRTdW1tYXJpZXNFbmFibGVkKGNvbmZpZy5lbmFibGVkLCBzdHJ1Y3R1cmVJZCk7XG5cdFx0dGhpcy5zdHJ1Y3R1cmVTdW1tYXJpZXNDb25maWdBcmNoaXZlLm5leHQoc3RydWN0dXJlSWQsIHN1bW1hcmllc1BhbmVsQ29uZmlnKTtcblx0fVxuXG59XG4iXX0=