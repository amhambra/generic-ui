import { Injectable } from '@angular/core';
import { VerticalFormationCommandInvoker } from '../api/vertical-formation.command-invoker';
import { VerticalFormationDispatcher } from './vertical-formation.dispatcher';
export class VerticalFormationDomainCommandInvoker extends VerticalFormationCommandInvoker {
    constructor(verticalFormationDispatcher) {
        super();
        this.verticalFormationDispatcher = verticalFormationDispatcher;
    }
    enableVirtualScroll(structureId) {
        this.verticalFormationDispatcher.setVirtualScrollEnabled(true, structureId);
    }
    disableVirtualScroll(structureId) {
        this.verticalFormationDispatcher.setVirtualScrollEnabled(false, structureId);
    }
    scrollToTop(structureId) {
        this.verticalFormationDispatcher.scrollTo(0, structureId);
    }
    scrollToBottom(structureId) {
        this.verticalFormationDispatcher.scrollTo(Number.MAX_SAFE_INTEGER, structureId);
    }
    scrollToIndex(index, structureId) {
        this.verticalFormationDispatcher.scrollTo(index, structureId);
    }
    setScrollPosition(position, structureId) {
        this.verticalFormationDispatcher.setScrollPosition(position, structureId);
    }
}
VerticalFormationDomainCommandInvoker.decorators = [
    { type: Injectable }
];
VerticalFormationDomainCommandInvoker.ctorParameters = () => [
    { type: VerticalFormationDispatcher }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVydGljYWwtZm9ybWF0aW9uLmRvbWFpbi1jb21tYW5kLWludm9rZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL3N0cnVjdHVyZS92ZXJ0aWNhbC1mb3JtYXRpb24vY29yZS9kb21haW4vdmVydGljYWwtZm9ybWF0aW9uLmRvbWFpbi1jb21tYW5kLWludm9rZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUU1RixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUk5RSxNQUFNLE9BQU8scUNBQXNDLFNBQVEsK0JBQStCO0lBRXpGLFlBQTZCLDJCQUF3RDtRQUNwRixLQUFLLEVBQUUsQ0FBQztRQURvQixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTZCO0lBRXJGLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxXQUF3QjtRQUMzQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxXQUF3QjtRQUM1QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsdUJBQXVCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxXQUFXLENBQUMsV0FBd0I7UUFDbkMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELGNBQWMsQ0FBQyxXQUF3QjtRQUN0QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWEsRUFBRSxXQUF3QjtRQUNwRCxJQUFJLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsUUFBZ0IsRUFBRSxXQUF3QjtRQUMzRCxJQUFJLENBQUMsMkJBQTJCLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzNFLENBQUM7OztZQTdCRCxVQUFVOzs7WUFIRiwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFZlcnRpY2FsRm9ybWF0aW9uQ29tbWFuZEludm9rZXIgfSBmcm9tICcuLi9hcGkvdmVydGljYWwtZm9ybWF0aW9uLmNvbW1hbmQtaW52b2tlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBWZXJ0aWNhbEZvcm1hdGlvbkRpc3BhdGNoZXIgfSBmcm9tICcuL3ZlcnRpY2FsLWZvcm1hdGlvbi5kaXNwYXRjaGVyJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVmVydGljYWxGb3JtYXRpb25Eb21haW5Db21tYW5kSW52b2tlciBleHRlbmRzIFZlcnRpY2FsRm9ybWF0aW9uQ29tbWFuZEludm9rZXIge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdmVydGljYWxGb3JtYXRpb25EaXNwYXRjaGVyOiBWZXJ0aWNhbEZvcm1hdGlvbkRpc3BhdGNoZXIpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0ZW5hYmxlVmlydHVhbFNjcm9sbChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLnZlcnRpY2FsRm9ybWF0aW9uRGlzcGF0Y2hlci5zZXRWaXJ0dWFsU2Nyb2xsRW5hYmxlZCh0cnVlLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRkaXNhYmxlVmlydHVhbFNjcm9sbChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLnZlcnRpY2FsRm9ybWF0aW9uRGlzcGF0Y2hlci5zZXRWaXJ0dWFsU2Nyb2xsRW5hYmxlZChmYWxzZSwgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0c2Nyb2xsVG9Ub3Aoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy52ZXJ0aWNhbEZvcm1hdGlvbkRpc3BhdGNoZXIuc2Nyb2xsVG8oMCwgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0c2Nyb2xsVG9Cb3R0b20oc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy52ZXJ0aWNhbEZvcm1hdGlvbkRpc3BhdGNoZXIuc2Nyb2xsVG8oTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHNjcm9sbFRvSW5kZXgoaW5kZXg6IG51bWJlciwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy52ZXJ0aWNhbEZvcm1hdGlvbkRpc3BhdGNoZXIuc2Nyb2xsVG8oaW5kZXgsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdHNldFNjcm9sbFBvc2l0aW9uKHBvc2l0aW9uOiBudW1iZXIsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXHRcdHRoaXMudmVydGljYWxGb3JtYXRpb25EaXNwYXRjaGVyLnNldFNjcm9sbFBvc2l0aW9uKHBvc2l0aW9uLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxufVxuIl19