import { Injectable } from '@angular/core';
import { hermesDistinctUntilChanged, hermesFilter, hermesMap, HermesReplaySubject, Reactive } from '@generic-ui/hermes';
import { StructureCreatedEvent } from '../../../core/domain/create-structure/structure-created.event';
import { VerticalScrollEnabledSetEvent } from '../domain/set-enabled/vertical-scroll-enabled-set.event';
import { RowHeightSetEvent } from '../domain/set-row-height/row-height-set.event';
import { SchemaThemeSetEvent } from '../../../../schema/core/domain/theme/schema-theme-set.event';
import { StructureHeightSetEvent } from '../domain/container/set-height/structure-height-set.event';
import { OriginSetEvent } from '../../../source/core/domain/origin/set-origin/origin-set.event';
import { ScrollPositionSetEvent } from '../domain/scroll-position/scroll-position-set.event';
import { RowHeightSetBasedOnThemeEvent } from '../domain/set-row-height-theme/row-height-set-based-on-theme.event';
import { SearchPhraseSetDomainEvent } from '../../../search/core/domain/phrase/set-phrase/search-phrase-set.domain-event';
import { PageChangedEvent } from '../../../paging/core/domain/page/page-changed.event';
import { PagingSetEvent } from '../../../paging/core/domain/set/paging-set.event';
import * as i0 from "@angular/core";
import * as i1 from "@generic-ui/hermes";
import * as i2 from "../../../core/infrastructure/in-memory/api/in-memory-structure.read-store";
export class VerticalFormationRepository extends Reactive {
    constructor(domainEventBus, inMemoryStructureReadStore) {
        super();
        this.domainEventBus = domainEventBus;
        this.inMemoryStructureReadStore = inMemoryStructureReadStore;
        this.verticalFormation = new Map();
        this.verticalFormation$ = new HermesReplaySubject(1);
        this.domainEventBus
            .ofEvents([
            StructureCreatedEvent,
            VerticalScrollEnabledSetEvent,
            OriginSetEvent,
            StructureHeightSetEvent,
            RowHeightSetEvent,
            SchemaThemeSetEvent,
            RowHeightSetBasedOnThemeEvent,
            ScrollPositionSetEvent,
            SearchPhraseSetDomainEvent,
            PageChangedEvent,
            PagingSetEvent
        ])
            .pipe(this.hermesTakeUntil())
            .subscribe((event) => {
            const aggregateId = event.getAggregateId();
            const optStructure = this.inMemoryStructureReadStore.getById(aggregateId);
            optStructure.ifPresent((structureReadModelRoot) => {
                const verticalFormation = structureReadModelRoot.getVerticalFormation();
                this.next(aggregateId, verticalFormation);
            });
        });
    }
    onVerticalScrollEnabled(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.isEnabled()), hermesDistinctUntilChanged());
    }
    onRowHeight(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getRowHeight()), hermesDistinctUntilChanged());
    }
    onContainerHeight(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getViewPortHeight()), hermesDistinctUntilChanged());
    }
    onTopMargin(structureId) {
        return this.onVerticalFormation(structureId)
            .pipe(hermesMap((v) => v.getTopMargin()), hermesDistinctUntilChanged());
    }
    onVerticalFormation(structureId) {
        return this.verticalFormation$
            .toObservable()
            .pipe(hermesFilter((idToVerticalFormation) => {
            const key = structureId.getId();
            return idToVerticalFormation.has(key);
        }), hermesMap((idToVerticalFormation) => idToVerticalFormation.get(structureId.getId())));
    }
    next(structureId, verticalFormation) {
        this.verticalFormation.set(structureId.toString(), verticalFormation);
        this.verticalFormation$.next(this.verticalFormation);
    }
}
VerticalFormationRepository.ɵfac = function VerticalFormationRepository_Factory(t) { return new (t || VerticalFormationRepository)(i0.ɵɵinject(i1.DomainEventBus), i0.ɵɵinject(i2.InMemoryStructureReadStore)); };
VerticalFormationRepository.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: VerticalFormationRepository, factory: VerticalFormationRepository.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(VerticalFormationRepository, [{
        type: Injectable
    }], function () { return [{ type: i1.DomainEventBus }, { type: i2.InMemoryStructureReadStore }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,