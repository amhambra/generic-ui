import { Inject, NgModule, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FabricModule } from '@generic-ui/fabric';
import { COMMAND_LOGGER_ENABLED, EVENT_LOGGER_ENABLED, HermesModule } from '@generic-ui/hermes';
import { fabricImports } from '../../feature/structure-fabric.imports';
import { PagingFeatureModule } from '../../../paging/feature/paging.feature-module';
import { StructureInfoPanelModule } from '../../feature/panel/info/structure.info-panel.module';
import { StructureComponent } from '../../feature/structure.component';
import { StructureHeaderComponent } from '../../feature/header/structure-header.component';
import { StructureHeaderColumnsComponent } from '../../feature/header/column/structure-header-columns.component';
import { StructureHeaderFiltersComponent } from '../../feature/header/filters/structure-header-filters.component';
import { StructureHeaderFilterComponent } from '../../feature/header/filters/structure.header-filter.component';
import { StructureContentComponent } from '../../feature/content/structure-content.component';
import { StructureRowComponent } from '../../feature/content/row/structure-row.component';
import { StructureCellComponent } from '../../feature/content/cell/structure.cell.component';
import { StructureContainerComponent } from '../../feature/content/structure-container.component';
import { StructureQuickFiltersComponent } from '../../feature/header/quick-filters/structure.quick-filters.component';
import { StructureBlueprintComponent } from '../../feature/blueprint/structure.blueprint.component';
import { StructureColumnConfigComponent } from '../../feature/header/menu/config/structure.column-config.component';
import { STRUCTURE_CSS_CLASS_NAME } from './structure-tokens';
import { StructureDefinition } from '../../feature/structure-definition';
import { StructureIdGenerator } from '../../feature/structure-id.generator';
import { structureCommandHandlers, structureDomainEventHandlers, structureProviders } from './structure.providers';
import { LoggerModule } from '../../../../common/cdk/logger/logger.module';
import { ItemEntityFactory } from '../../../source/core/domain/core/item/item.entity-factory';
import { StructureTopPanelModule } from '../../feature/panel/top/structure.top-panel.module';
import { StructureColumnMenuModule } from '../../feature/header/menu/structure.column-menu.module';
import { StructureColumnManagerModule } from '../../feature/column-manager/structure.column-manager.module';
import { StructureAggregateFactory } from '../../../core/domain/structure.aggregate-factory';
import { InMemoryStructureAggregateRepository } from '../../../core/infrastructure/in-memory/domain/in-memory.structure-aggregate.repository';
import { CreateStructureCommandHandler } from '../../../core/domain/create-structure/create-structure-command-handler.service';
import { StructureCellEditComponent } from '../../feature/content/cell/edit/structure.cell-edit.component';
import { StructureThemeConverter } from '../../feature/schema/structure.theme.converter';
import { StructureCellEditBooleanComponent } from '../../feature/content/cell/boolean/structure.cell-edit-boolean.component';
import { StructureRowDetailViewComponent } from '../../feature/row-detail/view/structure.row-detail-view.component';
import { StructureTitlePanelComponent } from '../../feature/panel/banner-panels/title-panel/structure.title-panel.component';
import { StructureFooterPanelComponent } from '../../feature/panel/banner-panels/footer-panel/structure.footer-panel.component';
import { PagingDomainModule } from '../../../paging/core/domain/paging.domain-module';
import { EmptySourceFeatureModule } from '../../../source/feature/empty/empty-source.feature-module';
import { SortingDomainModule } from '../../../sorting/core/domain/sorting.domain-module';
import { SortingFeatureModule } from '../../../sorting/feature/sorting.feature-module';
import { FieldFeatureModule } from '../../../field/feature/field.feature-module';
import { FieldDomainModule } from '../../../field/core/domain/field.domain-module';
import { SearchFeatureModule } from '../../../search/feature/search.feature-module';
import { SearchDomainModule } from '../../../search/core/domain/search.domain-module';
import { SchemaManagerModule } from '../../../../schema/feature/manager/schema-manager.module';
import { FilterDomainModule } from '../../../filter/core/domain/filter.domain-module';
import { SourceDomainModule } from '../../../source/core/domain/source.domain-module';
import { SelectAllComponent } from '../../feature/header/column/select-all/select-all.component';
import { structureKey } from '../../../core/api/structre.key';
import { SummariesDomainModule } from '../../../summaries/core/domain/summaries.domain-module';
import { SummariesFeatureModule } from '../../../summaries/feature/summaries.feature-module';
import { VerticalFormationFeatureModule } from '../../../vertical-formation/feature/vertical-formation.feature-module';
import { VerticalFormationDomainModule } from '../../../vertical-formation/core/domain/vertical-formation.domain-module';
import { SchemaFeatureModule } from '../../../../schema/feature/schema.feature-module';
import { CompositionFeatureModule } from '../../../../composition/feature/composition.feature-module';
import { TranslationFeatureModule } from '../../../../l10n/feature/translation.feature-module';
import { StructureHeaderGroupsComponent } from '../../feature/header/group/structure-header-groups.component';
import { structureGates } from '../../feature/gate/structure.gates';
import { FilterMenuFeatureModule } from '../../../filter/feature/menu/filter-menu.feature-module';
import { SourceFeatureModule } from '../../../source/feature/source.feature-module';
import { StructureSharedModule } from '../../../common/structure-shared.module';
import { SanitizeModule } from '../../../../common/cdk/sanitize/sanitize.module';
import { ResizeDetectorModule } from '../../../../common/cdk/resize-detector/resize-detector.module';
import { StructureCellEditArchive } from '../../feature/edit/structure.cell-edit.archive';
import { FormationFeatureModule } from '../../../formation/feature/formation.feature-module';
import { FormationDomainModule } from '../../../formation/core/domain/formation.domain-module';
export function createStructureDefinition() {
    return new StructureDefinition.DefaultBuilder().build();
}
const imports = [
    CommonModule,
    ReactiveFormsModule,
    TranslationFeatureModule,
    HermesModule,
    HermesModule.defineAggregate(structureKey, StructureAggregateFactory, InMemoryStructureAggregateRepository, CreateStructureCommandHandler, [
        PagingDomainModule.commandHandlers(),
        SortingDomainModule.commandHandlers(),
        FieldDomainModule.commandHandlers(),
        SearchDomainModule.commandHandlers(),
        FilterDomainModule.commandHandlers(),
        SourceDomainModule.commandHandlers(),
        FormationDomainModule.commandHandlers(),
        SummariesDomainModule.commandHandlers(),
        VerticalFormationDomainModule.commandHandlers(),
        structureCommandHandlers
    ], [
        structureDomainEventHandlers,
        SearchDomainModule.domainEventHandlers(),
        FilterDomainModule.domainEventHandlers(),
        SourceDomainModule.domainEventHandlers(),
        FormationDomainModule.domainEventHandlers(),
        SummariesDomainModule.domainEventHandlers(),
        FieldDomainModule.domainEventHandlers(),
        VerticalFormationDomainModule.domainEventHandlers()
    ]),
    // .withConfig({
    // 	loggers: false
    // }),
    fabricImports,
    ResizeDetectorModule,
    PagingFeatureModule,
    SortingFeatureModule,
    FieldFeatureModule,
    FormationFeatureModule,
    SearchFeatureModule,
    FilterMenuFeatureModule,
    SourceFeatureModule,
    SummariesFeatureModule,
    VerticalFormationFeatureModule,
    SchemaFeatureModule,
    StructureSharedModule,
    StructureInfoPanelModule,
    StructureTopPanelModule,
    StructureColumnMenuModule,
    StructureColumnManagerModule,
    SchemaManagerModule,
    EmptySourceFeatureModule,
    CompositionFeatureModule,
    LoggerModule,
    SanitizeModule
];
const declarations = [
    StructureComponent,
    StructureHeaderComponent,
    StructureHeaderColumnsComponent,
    StructureHeaderGroupsComponent,
    StructureHeaderFiltersComponent,
    StructureHeaderFilterComponent,
    SelectAllComponent,
    StructureContentComponent,
    StructureRowComponent,
    StructureCellComponent,
    StructureCellEditComponent,
    StructureCellEditBooleanComponent,
    StructureContainerComponent,
    StructureQuickFiltersComponent,
    StructureBlueprintComponent,
    StructureRowDetailViewComponent,
    StructureTitlePanelComponent,
    StructureFooterPanelComponent,
    structureGates
];
const entryComponents = [
    StructureColumnConfigComponent,
    StructureRowDetailViewComponent
];
const exportDeclarations = [
    FabricModule,
    StructureComponent,
    StructureHeaderComponent,
    StructureContentComponent,
    StructureRowComponent,
    StructureContainerComponent,
    fabricImports,
    PagingFeatureModule,
    structureGates
];
export class StructureModule {
    constructor(platformId) {
        this.platformId = platformId;
        if (isPlatformBrowser(this.platformId)) {
            window[StructureModule.HERMES_API].loggers = false;
        }
    }
    static withConfig(structureConfig = {
        cssClassName: '',
        hermesModuleConfig: { loggers: false }
    }) {
        return {
            ngModule: StructureModule,
            providers: [
                {
                    provide: STRUCTURE_CSS_CLASS_NAME,
                    useValue: structureConfig.cssClassName
                },
                { provide: COMMAND_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },
                { provide: EVENT_LOGGER_ENABLED, useValue: structureConfig.hermesModuleConfig.loggers },
                {
                    provide: STRUCTURE_CSS_CLASS_NAME,
                    useValue: 'structure'
                },
                {
                    provide: StructureDefinition,
                    useFactory: createStructureDefinition
                },
                ItemEntityFactory,
                StructureThemeConverter,
                StructureIdGenerator,
                StructureCellEditArchive,
                structureProviders
            ]
        };
    }
}
StructureModule.HERMES_API = 'hermesApi';
StructureModule.exportDeclarations = Array.from(exportDeclarations);
StructureModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    imports
                ],
                declarations,
                exports: exportDeclarations,
                entryComponents
            },] }
];
StructureModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,