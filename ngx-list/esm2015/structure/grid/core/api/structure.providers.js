import { HermesModule } from '@generic-ui/hermes';
import { inMemoryStructureCommandProviders, inMemoryStructureProviders, inMemoryStructureReadProviders } from '../../../core/infrastructure/in-memory/in-memory.structure.providers';
import { StructureCommandInvoker } from '../../../core/api/structure.command-invoker';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureAggregateFactory } from '../../../core/domain/structure.aggregate-factory';
import { StructureWarehouse } from './structure.warehouse';
import { StructureCreatedEventHandler } from '../../../core/domain/create-structure/structure-created.event-handler';
import { StructureDomainCommandInvoker } from '../../../core/domain/structure.domain-command-invoker';
import { StructureInitialValuesReadyArchive } from '../../../core/api/structure.initial-values-ready.archive';
const commandProviders = [
    inMemoryStructureCommandProviders
];
const readProviders = [
    inMemoryStructureReadProviders
];
export const structureCommandHandlers = [];
export const structureDomainEventHandlers = [
    HermesModule.registerDomainEventHandler(StructureCreatedEventHandler)
];
export const structureProviders = [
    inMemoryStructureProviders,
    commandProviders,
    readProviders,
    StructureAggregateFactory,
    StructureReadModelRootConverter,
    StructureWarehouse,
    {
        provide: StructureCommandInvoker,
        useClass: StructureDomainCommandInvoker
    },
    StructureInitialValuesReadyArchive
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtbGlzdC9zcmMvc3RydWN0dXJlL2dyaWQvY29yZS9hcGkvc3RydWN0dXJlLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUNOLGlDQUFpQyxFQUNqQywwQkFBMEIsRUFDMUIsOEJBQThCLEVBQzlCLE1BQU0sc0VBQXNFLENBQUM7QUFDOUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDN0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDN0YsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdUVBQXVFLENBQUM7QUFDckgsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDdEcsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sMERBQTBELENBQUM7QUFHOUcsTUFBTSxnQkFBZ0IsR0FBRztJQUN4QixpQ0FBaUM7Q0FDakMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHO0lBQ3JCLDhCQUE4QjtDQUM5QixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQW9CLEVBQUUsQ0FBQztBQUU1RCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRztJQUUzQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsNEJBQTRCLENBQUM7Q0FDckUsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHO0lBQ2pDLDBCQUEwQjtJQUUxQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUViLHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFFL0Isa0JBQWtCO0lBQ2xCO1FBQ0MsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxRQUFRLEVBQUUsNkJBQTZCO0tBQ3ZDO0lBRUQsa0NBQWtDO0NBRWxDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSGVybWVzTW9kdWxlIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7XG5cdGluTWVtb3J5U3RydWN0dXJlQ29tbWFuZFByb3ZpZGVycyxcblx0aW5NZW1vcnlTdHJ1Y3R1cmVQcm92aWRlcnMsXG5cdGluTWVtb3J5U3RydWN0dXJlUmVhZFByb3ZpZGVyc1xufSBmcm9tICcuLi8uLi8uLi9jb3JlL2luZnJhc3RydWN0dXJlL2luLW1lbW9yeS9pbi1tZW1vcnkuc3RydWN0dXJlLnByb3ZpZGVycyc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVDb21tYW5kSW52b2tlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5jb21tYW5kLWludm9rZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUm9vdENvbnZlcnRlciB9IGZyb20gJy4vcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yb290LWNvbnZlcnRlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5IH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kb21haW4vc3RydWN0dXJlLmFnZ3JlZ2F0ZS1mYWN0b3J5JztcbmltcG9ydCB7IFN0cnVjdHVyZVdhcmVob3VzZSB9IGZyb20gJy4vc3RydWN0dXJlLndhcmVob3VzZSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVDcmVhdGVkRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kb21haW4vY3JlYXRlLXN0cnVjdHVyZS9zdHJ1Y3R1cmUtY3JlYXRlZC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZURvbWFpbkNvbW1hbmRJbnZva2VyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kb21haW4vc3RydWN0dXJlLmRvbWFpbi1jb21tYW5kLWludm9rZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlSW5pdGlhbFZhbHVlc1JlYWR5QXJjaGl2ZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvYXBpL3N0cnVjdHVyZS5pbml0aWFsLXZhbHVlcy1yZWFkeS5hcmNoaXZlJztcblxuXG5jb25zdCBjb21tYW5kUHJvdmlkZXJzID0gW1xuXHRpbk1lbW9yeVN0cnVjdHVyZUNvbW1hbmRQcm92aWRlcnNcbl07XG5cbmNvbnN0IHJlYWRQcm92aWRlcnMgPSBbXG5cdGluTWVtb3J5U3RydWN0dXJlUmVhZFByb3ZpZGVyc1xuXTtcblxuZXhwb3J0IGNvbnN0IHN0cnVjdHVyZUNvbW1hbmRIYW5kbGVyczogQXJyYXk8UHJvdmlkZXI+ID0gW107XG5cbmV4cG9ydCBjb25zdCBzdHJ1Y3R1cmVEb21haW5FdmVudEhhbmRsZXJzID0gW1xuXG5cdEhlcm1lc01vZHVsZS5yZWdpc3RlckRvbWFpbkV2ZW50SGFuZGxlcihTdHJ1Y3R1cmVDcmVhdGVkRXZlbnRIYW5kbGVyKVxuXTtcblxuZXhwb3J0IGNvbnN0IHN0cnVjdHVyZVByb3ZpZGVycyA9IFtcblx0aW5NZW1vcnlTdHJ1Y3R1cmVQcm92aWRlcnMsXG5cblx0Y29tbWFuZFByb3ZpZGVycyxcblx0cmVhZFByb3ZpZGVycyxcblxuXHRTdHJ1Y3R1cmVBZ2dyZWdhdGVGYWN0b3J5LFxuXHRTdHJ1Y3R1cmVSZWFkTW9kZWxSb290Q29udmVydGVyLFxuXG5cdFN0cnVjdHVyZVdhcmVob3VzZSxcblx0e1xuXHRcdHByb3ZpZGU6IFN0cnVjdHVyZUNvbW1hbmRJbnZva2VyLFxuXHRcdHVzZUNsYXNzOiBTdHJ1Y3R1cmVEb21haW5Db21tYW5kSW52b2tlclxuXHR9LFxuXG5cdFN0cnVjdHVyZUluaXRpYWxWYWx1ZXNSZWFkeUFyY2hpdmVcblxuXTtcbiJdfQ==