/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HermesModule } from '@generic-ui/hermes';
import { inMemoryStructureCommandProviders, inMemoryStructureProviders, inMemoryStructureReadProviders } from '../../../core/infrastructure/in-memory/in-memory.structure.providers';
import { StructureCommandInvoker } from '../../../core/api/structure.command-invoker';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureAggregateFactory } from '../../../core/domain/structure.aggregate-factory';
import { StructureWarehouse } from './structure.warehouse';
import { StructureCreatedEventHandler } from '../../../core/domain/create-structure/structure-created.event-handler';
import { StructureDomainCommandInvoker } from '../../../core/domain/structure.domain-command-invoker';
import { StructureInitialValuesReadyArchive } from '../../../core/api/structure.initial-values-ready.archive';
/** @type {?} */
const commandProviders = [
    ...inMemoryStructureCommandProviders
];
/** @type {?} */
const readProviders = [
    ...inMemoryStructureReadProviders
];
/** @type {?} */
export const structureCommandHandlers = [];
/** @type {?} */
export const structureDomainEventHandlers = [
    ...HermesModule.registerDomainEventHandler(StructureCreatedEventHandler)
];
/** @type {?} */
export const structureProviders = [
    ...inMemoryStructureProviders,
    ...commandProviders,
    ...readProviders,
    StructureAggregateFactory,
    StructureReadModelRootConverter,
    StructureWarehouse,
    {
        provide: StructureCommandInvoker,
        useClass: StructureDomainCommandInvoker
    },
    StructureInitialValuesReadyArchive
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1saXN0LyIsInNvdXJjZXMiOlsic3RydWN0dXJlL2dyaWQvY29yZS9hcGkvc3RydWN0dXJlLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFDTixpQ0FBaUMsRUFDakMsMEJBQTBCLEVBQzFCLDhCQUE4QixFQUM5QixNQUFNLHNFQUFzRSxDQUFDO0FBQzlFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzdGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBQ3JILE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLDBEQUEwRCxDQUFDOztNQUd4RyxnQkFBZ0IsR0FBRztJQUN4QixHQUFHLGlDQUFpQztDQUNwQzs7TUFFSyxhQUFhLEdBQUc7SUFDckIsR0FBRyw4QkFBOEI7Q0FDakM7O0FBRUQsTUFBTSxPQUFPLHdCQUF3QixHQUFvQixFQUFFOztBQUUzRCxNQUFNLE9BQU8sNEJBQTRCLEdBQUc7SUFFM0MsR0FBRyxZQUFZLENBQUMsMEJBQTBCLENBQUMsNEJBQTRCLENBQUM7Q0FDeEU7O0FBRUQsTUFBTSxPQUFPLGtCQUFrQixHQUFHO0lBQ2pDLEdBQUcsMEJBQTBCO0lBRTdCLEdBQUcsZ0JBQWdCO0lBQ25CLEdBQUcsYUFBYTtJQUVoQix5QkFBeUI7SUFDekIsK0JBQStCO0lBRS9CLGtCQUFrQjtJQUNsQjtRQUNDLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsUUFBUSxFQUFFLDZCQUE2QjtLQUN2QztJQUVELGtDQUFrQztDQUVsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIZXJtZXNNb2R1bGUgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuaW1wb3J0IHtcblx0aW5NZW1vcnlTdHJ1Y3R1cmVDb21tYW5kUHJvdmlkZXJzLFxuXHRpbk1lbW9yeVN0cnVjdHVyZVByb3ZpZGVycyxcblx0aW5NZW1vcnlTdHJ1Y3R1cmVSZWFkUHJvdmlkZXJzXG59IGZyb20gJy4uLy4uLy4uL2NvcmUvaW5mcmFzdHJ1Y3R1cmUvaW4tbWVtb3J5L2luLW1lbW9yeS5zdHJ1Y3R1cmUucHJvdmlkZXJzJztcbmltcG9ydCB7IFN0cnVjdHVyZUNvbW1hbmRJbnZva2VyIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hcGkvc3RydWN0dXJlLmNvbW1hbmQtaW52b2tlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVSZWFkTW9kZWxSb290Q29udmVydGVyIH0gZnJvbSAnLi9yZWFkL3N0cnVjdHVyZS5yZWFkLW1vZGVsLXJvb3QtY29udmVydGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZUFnZ3JlZ2F0ZUZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2RvbWFpbi9zdHJ1Y3R1cmUuYWdncmVnYXRlLWZhY3RvcnknO1xuaW1wb3J0IHsgU3RydWN0dXJlV2FyZWhvdXNlIH0gZnJvbSAnLi9zdHJ1Y3R1cmUud2FyZWhvdXNlJztcbmltcG9ydCB7IFN0cnVjdHVyZUNyZWF0ZWRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2RvbWFpbi9jcmVhdGUtc3RydWN0dXJlL3N0cnVjdHVyZS1jcmVhdGVkLmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlRG9tYWluQ29tbWFuZEludm9rZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2RvbWFpbi9zdHJ1Y3R1cmUuZG9tYWluLWNvbW1hbmQtaW52b2tlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJbml0aWFsVmFsdWVzUmVhZHlBcmNoaXZlIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hcGkvc3RydWN0dXJlLmluaXRpYWwtdmFsdWVzLXJlYWR5LmFyY2hpdmUnO1xuXG5cbmNvbnN0IGNvbW1hbmRQcm92aWRlcnMgPSBbXG5cdC4uLmluTWVtb3J5U3RydWN0dXJlQ29tbWFuZFByb3ZpZGVyc1xuXTtcblxuY29uc3QgcmVhZFByb3ZpZGVycyA9IFtcblx0Li4uaW5NZW1vcnlTdHJ1Y3R1cmVSZWFkUHJvdmlkZXJzXG5dO1xuXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlQ29tbWFuZEhhbmRsZXJzOiBBcnJheTxQcm92aWRlcj4gPSBbXTtcblxuZXhwb3J0IGNvbnN0IHN0cnVjdHVyZURvbWFpbkV2ZW50SGFuZGxlcnMgPSBbXG5cblx0Li4uSGVybWVzTW9kdWxlLnJlZ2lzdGVyRG9tYWluRXZlbnRIYW5kbGVyKFN0cnVjdHVyZUNyZWF0ZWRFdmVudEhhbmRsZXIpXG5dO1xuXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlUHJvdmlkZXJzID0gW1xuXHQuLi5pbk1lbW9yeVN0cnVjdHVyZVByb3ZpZGVycyxcblxuXHQuLi5jb21tYW5kUHJvdmlkZXJzLFxuXHQuLi5yZWFkUHJvdmlkZXJzLFxuXG5cdFN0cnVjdHVyZUFnZ3JlZ2F0ZUZhY3RvcnksXG5cdFN0cnVjdHVyZVJlYWRNb2RlbFJvb3RDb252ZXJ0ZXIsXG5cblx0U3RydWN0dXJlV2FyZWhvdXNlLFxuXHR7XG5cdFx0cHJvdmlkZTogU3RydWN0dXJlQ29tbWFuZEludm9rZXIsXG5cdFx0dXNlQ2xhc3M6IFN0cnVjdHVyZURvbWFpbkNvbW1hbmRJbnZva2VyXG5cdH0sXG5cblx0U3RydWN0dXJlSW5pdGlhbFZhbHVlc1JlYWR5QXJjaGl2ZVxuXG5dO1xuIl19