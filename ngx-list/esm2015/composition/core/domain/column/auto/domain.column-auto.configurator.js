import { Injectable } from '@angular/core';
import { ColumnAutoConfigurator } from '../../../api/column/auto/column-auto.configurator';
import { DataType } from '../../../../../structure/field/core/domain/field/data/data-type';
export class DomainColumnAutoConfigurator extends ColumnAutoConfigurator {
    configure(source) {
        if (source !== undefined && source !== null && Array.isArray(source) && source.length === 0) {
            return [];
        }
        const rawItem = source[0];
        return Object.keys(rawItem)
            .map((key, index) => {
            return this.toColumnConfig(key, rawItem);
        });
    }
    toColumnConfig(key, rawItem) {
        return {
            field: this.getField(key),
            header: this.getHeader(key),
            type: this.getType(key, rawItem)
        };
    }
    getField(key) {
        return key;
    }
    getHeader(key) {
        return key[0].toUpperCase() + key.slice(1);
    }
    getType(key, rawItem) {
        if (typeof rawItem[key] === 'string') {
            return DataType.STRING;
        }
        else if (typeof rawItem[key] === 'number') {
            return DataType.NUMBER;
        }
        else if (rawItem[key] instanceof Date) {
            return DataType.DATE;
        }
        else if (typeof rawItem[key] === 'boolean') {
            return DataType.BOOLEAN;
        }
        else {
            return DataType.UNKNOWN;
        }
    }
}
DomainColumnAutoConfigurator.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tYWluLmNvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtbGlzdC9zcmMvY29tcG9zaXRpb24vY29yZS9kb21haW4vY29sdW1uL2F1dG8vZG9tYWluLmNvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBRTNGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUczRixNQUFNLE9BQU8sNEJBQTZCLFNBQVEsc0JBQXNCO0lBRXZFLFNBQVMsQ0FBQyxNQUEwQjtRQUVuQyxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVGLE9BQU8sRUFBRSxDQUFDO1NBQ1Y7UUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN0QixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFFbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7SUFFTyxjQUFjLENBQUMsR0FBVyxFQUFFLE9BQVk7UUFDL0MsT0FBTztZQUNOLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUN6QixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQztTQUNoQixDQUFDO0lBQ25CLENBQUM7SUFFTyxRQUFRLENBQUMsR0FBVztRQUMzQixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFTyxTQUFTLENBQUMsR0FBVztRQUM1QixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxPQUFPLENBQUMsR0FBVyxFQUFFLE9BQVk7UUFFeEMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDckMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDNUMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQ3ZCO2FBQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFO1lBQ3hDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztTQUNyQjthQUFNLElBQUksT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQzdDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUN4QjthQUFNO1lBQ04sT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQ3hCO0lBQ0YsQ0FBQzs7O1lBL0NELFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW5BdXRvQ29uZmlndXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2NvbHVtbi9hdXRvL2NvbHVtbi1hdXRvLmNvbmZpZ3VyYXRvcic7XG5pbXBvcnQgeyBDb2x1bW5Db25maWcsIE11bHRpQ29sdW1uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vYXBpL2NvbHVtbi9jb2x1bW4uY29uZmlnJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3RydWN0dXJlL2ZpZWxkL2NvcmUvZG9tYWluL2ZpZWxkL2RhdGEvZGF0YS10eXBlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERvbWFpbkNvbHVtbkF1dG9Db25maWd1cmF0b3IgZXh0ZW5kcyBDb2x1bW5BdXRvQ29uZmlndXJhdG9yIHtcblxuXHRjb25maWd1cmUoc291cmNlOiBSZWFkb25seUFycmF5PGFueT4pOiBSZWFkb25seUFycmF5PENvbHVtbkNvbmZpZyB8IE11bHRpQ29sdW1uQ29uZmlnPiB7XG5cblx0XHRpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkoc291cmNlKSAmJiBzb3VyY2UubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmF3SXRlbSA9IHNvdXJjZVswXTtcblxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhyYXdJdGVtKVxuXHRcdFx0XHRcdCAubWFwKChrZXksIGluZGV4KSA9PiB7XG5cblx0XHRcdFx0XHRcdCByZXR1cm4gdGhpcy50b0NvbHVtbkNvbmZpZyhrZXksIHJhd0l0ZW0pO1xuXHRcdFx0XHRcdCB9KTtcblx0fVxuXG5cdHByaXZhdGUgdG9Db2x1bW5Db25maWcoa2V5OiBzdHJpbmcsIHJhd0l0ZW06IGFueSk6IENvbHVtbkNvbmZpZyB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpZWxkOiB0aGlzLmdldEZpZWxkKGtleSksXG5cdFx0XHRoZWFkZXI6IHRoaXMuZ2V0SGVhZGVyKGtleSksXG5cdFx0XHR0eXBlOiB0aGlzLmdldFR5cGUoa2V5LCByYXdJdGVtKVxuXHRcdH0gYXMgQ29sdW1uQ29uZmlnO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRGaWVsZChrZXk6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGtleTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0SGVhZGVyKGtleTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRyZXR1cm4ga2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG5cdH1cblxuXHRwcml2YXRlIGdldFR5cGUoa2V5OiBzdHJpbmcsIHJhd0l0ZW06IGFueSk6IERhdGFUeXBlIHtcblxuXHRcdGlmICh0eXBlb2YgcmF3SXRlbVtrZXldID09PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIERhdGFUeXBlLlNUUklORztcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiByYXdJdGVtW2tleV0gPT09ICdudW1iZXInKSB7XG5cdFx0XHRyZXR1cm4gRGF0YVR5cGUuTlVNQkVSO1xuXHRcdH0gZWxzZSBpZiAocmF3SXRlbVtrZXldIGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdFx0cmV0dXJuIERhdGFUeXBlLkRBVEU7XG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgcmF3SXRlbVtrZXldID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHJldHVybiBEYXRhVHlwZS5CT09MRUFOO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gRGF0YVR5cGUuVU5LTk9XTjtcblx0XHR9XG5cdH1cblxufVxuIl19