import { CompositionWarehouse } from '../api/composition.warehouse';
import { Injectable } from '@angular/core';
import { hermesFilter, hermesMap } from '@generic-ui/hermes';
import * as i0 from "@angular/core";
import * as i1 from "./composition.read-model-root-repository";
import * as i2 from "./group/composition-group.archive";
import * as i3 from "../domain/highlight/column-highlight.archive";
export class CompositionDomainWarehouse extends CompositionWarehouse {
    constructor(compositionRepository, compositionGroupArchive, columnHighlightArchive) {
        super();
        this.compositionRepository = compositionRepository;
        this.compositionGroupArchive = compositionGroupArchive;
        this.columnHighlightArchive = columnHighlightArchive;
    }
    onWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getWidth()));
    }
    onContainerWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getContainerWidth()));
    }
    onWidthForEachColumn(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getAllColumns().map(c => c.width)));
    }
    onHeaderColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getActiveHeaderColumns()));
    }
    onAllColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getHeaderColumns()));
    }
    onSortOrder(fieldId, compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getActiveHeaderColumns()), hermesMap((columns) => {
            return columns.filter((c) => c.getFieldId().equals(fieldId));
        }), hermesFilter((columns) => {
            return columns.length > 0;
        }), hermesMap(columns => columns[0].getSortStatus()));
    }
    onTemplateColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getTemplateColumns()));
    }
    onResizeWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.isResizeWidthEnabled()));
    }
    onGroups(compositionId) {
        return this.compositionGroupArchive.on(compositionId);
    }
    onHighlightedColumn(columnId, compositionId) {
        return this.columnHighlightArchive
            .on(compositionId)
            .pipe(hermesMap((manager) => manager.isHighlighted(columnId)));
    }
}
CompositionDomainWarehouse.ɵfac = function CompositionDomainWarehouse_Factory(t) { return new (t || CompositionDomainWarehouse)(i0.ɵɵinject(i1.CompositionReadModelRootRepository), i0.ɵɵinject(i2.CompositionGroupArchive), i0.ɵɵinject(i3.ColumnHighlightArchive)); };
CompositionDomainWarehouse.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CompositionDomainWarehouse, factory: CompositionDomainWarehouse.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CompositionDomainWarehouse, [{
        type: Injectable
    }], function () { return [{ type: i1.CompositionReadModelRootRepository }, { type: i2.CompositionGroupArchive }, { type: i3.ColumnHighlightArchive }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,