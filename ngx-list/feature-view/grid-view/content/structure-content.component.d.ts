import { ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';
import { SmartComponent } from '../../../feature/common/cdk/component/smart-component';
import { CellTemplateWithAccessor } from '../../../core/composition/domain-read/definition/cell-template-with-accessor';
import { FormationPublisher } from '../../../core/structure/formation/api/formation.publisher';
import { StructureEditModeArchive } from '../edit/structure.edit-mode.archive';
import { FormationWarehouse } from '../../../core/structure/formation/api/formation.warehouse';
import { ItemEntity } from '../../../core/structure/source/domain/core/item/item.entity';
import { StructureWarehouse } from '../../../core/structure/core/api/structure.warehouse';
import { StructureId } from '../../../core/structure/core/api/global/structure.id';
import { VerticalFormationWarehouse } from '../../../core/structure/vertical-formation/api/vertical-formation.warehouse';
import { RowSelectionTypeArchive } from '../../../core/structure/formation/api/type/row-selection-type.archive';
import { SchemaRowClassArchive } from '../../../core/schema/api/styling/schema.row-class.archive';
import { SchemaRowStyleArchive } from '../../../core/schema/api/styling/schema.row-style.archive';
import { SchemaRowClass } from '../../../core/schema/api/styling/schema.row-class';
import { SchemaRowStyle } from '../../../core/schema/api/styling/schema.row-style';
import { SearchWarehouse } from '../../../core/structure/search/api/search.warehouse';
import { CellEditorManager } from '../../../core/structure/core/domain/edit/cell-editor.manager';
import * as i0 from "@angular/core";
export declare class StructureContentComponent extends SmartComponent implements OnInit {
    private readonly elementRef;
    private readonly changeDetectorRef;
    private readonly formationCommandInvoker;
    private readonly structureEditModeArchive;
    private readonly formationWarehouse;
    private readonly structureWarehouse;
    private readonly verticalFormationWarehouse;
    private readonly structureId;
    private readonly rowSelectionTypeArchive;
    private readonly searchWarehouse;
    private readonly schemaRowClassArchive;
    private readonly schemaRowStyleArchive;
    source: Array<ItemEntity>;
    columns: Array<CellTemplateWithAccessor>;
    editMode: boolean;
    cellEditing: CellEditorManager;
    rowHeight: number;
    searchPhrase: string;
    highlighting: boolean;
    phrase: boolean;
    rowDetailOpened: number;
    checkboxSelection: boolean;
    schemaRowClass: SchemaRowClass;
    schemaRowStyle: SchemaRowStyle;
    constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, formationCommandInvoker: FormationPublisher, structureEditModeArchive: StructureEditModeArchive, formationWarehouse: FormationWarehouse, structureWarehouse: StructureWarehouse, verticalFormationWarehouse: VerticalFormationWarehouse, structureId: StructureId, // REfactor
    rowSelectionTypeArchive: RowSelectionTypeArchive, searchWarehouse: SearchWarehouse, schemaRowClassArchive: SchemaRowClassArchive, schemaRowStyleArchive: SchemaRowStyleArchive);
    ngOnInit(): void;
    trackByFn(): number;
    translateY(index: number): string;
    toggleSelectedRow(entity: ItemEntity): void;
    protected getSelectorName(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<StructureContentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StructureContentComponent, "div[gui-structure-content]", never, { "source": "source"; "columns": "columns"; }, {}, never, never>;
}
