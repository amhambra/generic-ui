import { ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';
import { CellTemplateWithContext } from '../../../../composition/core/domain-read/definition/cell-template-with-context';
import { SmartComponent } from '../../../../common/cdk/component/smart-component';
import { CompositionWarehouse } from '../../../../composition/core/api/composition.warehouse';
import { FieldWarehouse } from '../../../field/core/api/field.warehouse';
import { StructureId } from '../../../core/api/structure.id';
import { FieldReadModel } from '../../../field/core/api/read/field.read-model';
import { FilterWarehouse } from '../../core/api/filter.warehouse';
import { FilterTypeMap } from '../../core/api/type/filter-type-map';
import { FilterTypeReadModel } from '../../core/api/type/filter-type.read-model';
import { FilterTypeId } from '../../core/domain/type/filter-type.id';
import { FilterCommandInvoker } from '../../core/api/filter.command-invoker';
import { ActiveFilterReadModel } from '../../core/api/active/active-filter.read-model';
import { CompositionId } from '../../../../composition/core/api/composition.id';
import { FilterId } from '../../core/api/filter.id';
export declare class FilterMenuComponent extends SmartComponent implements OnInit {
    private readonly structureId;
    private readonly compositionId;
    private readonly fieldWarehouse;
    private readonly filterWarehouse;
    private readonly filterCommandInvoker;
    private readonly compositionWarehouse;
    selectedColumn: CellTemplateWithContext;
    columns: Array<CellTemplateWithContext>;
    selectedField: FieldReadModel;
    fields: Array<FieldReadModel>;
    filterTypeMap: FilterTypeMap;
    filterTypes: Array<FilterTypeReadModel>;
    selectedFilterTypeId: FilterTypeId;
    selectedValue: string;
    activeFilters: Array<ActiveFilterReadModel>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, structureId: StructureId, compositionId: CompositionId, fieldWarehouse: FieldWarehouse, filterWarehouse: FilterWarehouse, filterCommandInvoker: FilterCommandInvoker, compositionWarehouse: CompositionWarehouse);
    ngOnInit(): void;
    onFieldSelect(field: FieldReadModel): void;
    onFilterTypeSelect(filterTypeId: FilterTypeId): void;
    removeAllFilters(): void;
    onValueChanged(value: string): void;
    addFilter(): void;
    onRemovedFilter(filterId: FilterId): void;
    removeFilter(): void;
    clearAddFilterForm(): void;
    protected getSelectorName(): string;
}
