import { ChangeDetectorRef, ElementRef } from '@angular/core';
import { SmartComponent } from '../../../../common/component/src/smart-component';
import { FieldModel } from '../../../../../core/structure/field/src/api/model/field.model';
import { FilterTypeModel } from '../../../../../core/structure/filter/src/api/type/filter-type.model';
import { FilterTypeId } from '../../../../../core/structure/filter/src/domain/type/filter-type.id';
import { FilterPublisher } from '../../../../../core/structure/filter/src/api/filter.publisher';
import { ActiveFilterModel } from '../../../../../core/structure/filter/src/api/active/active-filter.model';
import { FilterId } from '../../../../../core/structure/filter/src/api/id/filter.id';
import { CompositionTemplateModel } from '../../../../composition/src/column/composition.template.model';
import * as i0 from "@angular/core";
export declare class FilterMenuComponent extends SmartComponent {
    private readonly filterCommandInvoker;
    private readonly structureId;
    private readonly fieldWarehouse;
    private readonly filterWarehouse;
    selectedColumn: CompositionTemplateModel;
    selectedField: FieldModel;
    filterTypes: Array<FilterTypeModel>;
    selectedFilterTypeId: FilterTypeId;
    selectedValue: string;
    readonly fields$: import("@generic-ui/hermes").HermesObservable<readonly FieldModel[]>;
    readonly activeFilters$: import("@generic-ui/hermes").HermesObservable<readonly ActiveFilterModel[]>;
    constructor(changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, filterCommandInvoker: FilterPublisher);
    onFieldSelect(field: FieldModel): void;
    onFilterTypeSelect(filterTypeId: FilterTypeId): void;
    removeAllFilters(): void;
    onValueChanged(value: string): void;
    addFilter(): void;
    onRemovedFilter(filterId: FilterId): void;
    removeFilter(): void;
    clearAddFilterForm(): void;
    protected getSelectorName(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FilterMenuComponent, "div[gui-filter-menu]", never, {}, {}, never, never, false, never>;
}
