import { SchemaDispatcher } from './schema.dispatcher';
import { StructurePublisher } from '../../structure/structure-core/api/structure.publisher';
import { FabricModalThemeService, Theme } from '@generic-ui/fabric';
import { SchemaTheme } from '../api/theme/schema-theme';
import { RowColoring } from '../api/row-coloring/row-coloring';
import { SchemaRowColoring } from '../api/row-coloring/schema-row-coloring';
import { SchemaPublisher } from '../api/schema.publisher';
import { SchemaRowClassArchive } from './styling/schema.row-class.archive';
import { SchemaRowStyleArchive } from './styling/schema.row-style.archive';
export class SchemaDomainPublisher extends SchemaPublisher {
    constructor(schemaDispatcher, structurePublisher, fabricModalThemeService, schemaRowClassArchive, schemaRowStyleArchive) {
        super();
        this.schemaDispatcher = schemaDispatcher;
        this.structurePublisher = structurePublisher;
        this.fabricModalThemeService = fabricModalThemeService;
        this.schemaRowClassArchive = schemaRowClassArchive;
        this.schemaRowStyleArchive = schemaRowStyleArchive;
    }
    create(schemaId) {
        this.schemaDispatcher.create(schemaId.toAggregateId());
    }
    setTheme(theme, schemaId, structureId) {
        this.schemaDispatcher.setTheme(theme, schemaId.toAggregateId());
        this.fabricModalThemeService.changeTheme(this.toFabricTheme(theme)); // TODO github #2162
        this.structurePublisher.setRowHeightBasedOnTheme(theme, structureId);
    }
    setRowColoring(rowColoring, schemaId) {
        const schemaRowColoring = this.toSchemaRowColoring(rowColoring);
        this.schemaDispatcher.setRowColoring(schemaRowColoring, schemaId.toAggregateId());
    }
    setVerticalGrid(verticalGrid, schemaId) {
        this.schemaDispatcher.setVerticalGrid(verticalGrid, schemaId.toAggregateId());
    }
    setHorizontalGrid(horizontalGrid, schemaId) {
        this.schemaDispatcher.setHorizontalGrid(horizontalGrid, schemaId.toAggregateId());
    }
    setRowClass(schemaRowClass, schemaId) {
        return this.schemaRowClassArchive.next(schemaId.toAggregateId(), schemaRowClass);
    }
    setRowStyle(rowStyle, schemaId) {
        return this.schemaRowStyleArchive.next(schemaId.toAggregateId(), rowStyle);
    }
    // move to function
    toSchemaRowColoring(coloring) {
        switch (coloring) {
            case RowColoring.NONE:
                return SchemaRowColoring.NONE;
            case RowColoring.ODD:
                return SchemaRowColoring.ODD;
            case RowColoring.EVEN:
                return SchemaRowColoring.EVEN;
            default:
                return SchemaRowColoring.NONE;
        }
    }
    // move to function
    toFabricTheme(schemaTheme) {
        switch (schemaTheme) {
            case SchemaTheme.DARK: {
                return Theme.DARK;
            }
            case SchemaTheme.FABRIC: {
                return Theme.FABRIC;
            }
            case SchemaTheme.GENERIC: {
                return Theme.GENERIC;
            }
            case SchemaTheme.LIGHT: {
                return Theme.LIGHT;
            }
            case SchemaTheme.MATERIAL: {
                return Theme.MATERIAL;
            }
            default:
                return Theme.FABRIC;
        }
    }
}
SchemaDomainPublisher.services = [
    SchemaDispatcher,
    StructurePublisher,
    FabricModalThemeService,
    SchemaRowClassArchive,
    SchemaRowStyleArchive
];
//# sourceMappingURL=data:application/json;base64,