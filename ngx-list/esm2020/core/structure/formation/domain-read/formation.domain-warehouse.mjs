import { hermesMap, Optional } from '@generic-ui/hermes';
import { SourceWarehouse } from '../../source/api/source.warehouse';
import { FormationWarehouse } from '../api/formation.warehouse';
import { RowSelectedArchive } from '../api/row-selected/row-selected.archive';
import { RowSelectionModeArchive } from '../api/mode/row-selection-mode.archive';
import { SelectedRow } from '../api/row-selected/selected-row';
export class FormationDomainWarehouse extends FormationWarehouse {
    constructor(rowSelectedRepository, rowSelectionModeRepository, sourceWarehouse) {
        super();
        this.rowSelectedRepository = rowSelectedRepository;
        this.rowSelectionModeRepository = rowSelectionModeRepository;
        this.sourceWarehouse = sourceWarehouse;
    }
    findSelectedRows(structureId) {
        const items = this.sourceWarehouse.findPreparedEntities(structureId), selectedItemIds = this.findSelectedItemIds(structureId).getValueOrNullOrThrowError();
        const selectedItems = [], length = items.length;
        for (let i = 0; i < length; i += 1) {
            const item = items[i];
            if (selectedItemIds.some((itemId) => itemId === item.getId().toString())) {
                selectedItems.push(new SelectedRow(item.getSourceItem(), i, item.getId()));
            }
        }
        return Optional.of(selectedItems);
    }
    onRowSelectedReadModel(structureId) {
        return this.rowSelectedRepository
            .on(structureId);
    }
    findSelectedItemIds(structureId) {
        return this.rowSelectedRepository
            .find(structureId)
            .map((r) => {
            return r.getAll();
        });
    }
    onSelectedRows(structureId) {
        return this.rowSelectedRepository
            .on(structureId)
            .pipe(hermesMap((rm) => {
            return rm.getAll();
        }));
    }
    onMode(structureId) {
        return this.rowSelectionModeRepository.on(structureId);
    }
}
FormationDomainWarehouse.services = [
    RowSelectedArchive,
    RowSelectionModeArchive,
    SourceWarehouse
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0aW9uLmRvbWFpbi13YXJlaG91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2Zvcm1hdGlvbi9kb21haW4tcmVhZC9mb3JtYXRpb24uZG9tYWluLXdhcmVob3VzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUczRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDOUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBSy9ELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxrQkFBa0I7SUFFL0QsWUFBNkIscUJBQXlDLEVBQ2xELDBCQUFtRCxFQUNuRCxlQUFnQztRQUNuRCxLQUFLLEVBQUUsQ0FBQztRQUhvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQW9CO1FBQ2xELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBeUI7UUFDbkQsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBRXBELENBQUM7SUFRRCxnQkFBZ0IsQ0FBQyxXQUF3QjtRQUV4QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxFQUNuRSxlQUFlLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFFdEYsTUFBTSxhQUFhLEdBQUcsRUFBRSxFQUN2QixNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFFbkMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXRCLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO2dCQUNqRixhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMzRTtTQUNEO1FBQ0QsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxXQUF3QjtRQUM5QyxPQUFPLElBQUksQ0FBQyxxQkFBcUI7YUFDM0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxXQUF3QjtRQUMzQyxPQUFPLElBQUksQ0FBQyxxQkFBcUI7YUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUNqQixHQUFHLENBQUMsQ0FBQyxDQUF1QixFQUFFLEVBQUU7WUFDaEMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRUQsY0FBYyxDQUFDLFdBQXdCO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQjthQUMzQixFQUFFLENBQUMsV0FBVyxDQUFDO2FBQ2YsSUFBSSxDQUNKLFNBQVMsQ0FBQyxDQUFDLEVBQXdCLEVBQUUsRUFBRTtZQUN0QyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ1IsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUF3QjtRQUM5QixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7QUFsRGUsaUNBQVEsR0FBRztJQUMxQixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGVBQWU7Q0FDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGVybWVzTWFwLCBIZXJtZXNPYnNlcnZhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmltcG9ydCB7IFN0cnVjdHVyZUlkIH0gZnJvbSAnLi4vLi4vY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBTb3VyY2VXYXJlaG91c2UgfSBmcm9tICcuLi8uLi9zb3VyY2UvYXBpL3NvdXJjZS53YXJlaG91c2UnO1xuaW1wb3J0IHsgRm9ybWF0aW9uV2FyZWhvdXNlIH0gZnJvbSAnLi4vYXBpL2Zvcm1hdGlvbi53YXJlaG91c2UnO1xuaW1wb3J0IHsgUm93U2VsZWN0ZWRBcmNoaXZlIH0gZnJvbSAnLi4vYXBpL3Jvdy1zZWxlY3RlZC9yb3ctc2VsZWN0ZWQuYXJjaGl2ZSc7XG5pbXBvcnQgeyBSb3dTZWxlY3Rpb25Nb2RlQXJjaGl2ZSB9IGZyb20gJy4uL2FwaS9tb2RlL3Jvdy1zZWxlY3Rpb24tbW9kZS5hcmNoaXZlJztcbmltcG9ydCB7IFNlbGVjdGVkUm93IH0gZnJvbSAnLi4vYXBpL3Jvdy1zZWxlY3RlZC9zZWxlY3RlZC1yb3cnO1xuaW1wb3J0IHsgUm93U2VsZWN0ZWRSZWFkTW9kZWwgfSBmcm9tICcuLi9hcGkvcm93LXNlbGVjdGVkL3Jvdy1zZWxlY3RlZC5yZWFkLW1vZGVsJztcbmltcG9ydCB7IFJvd1NlbGVjdGlvbk1vZGUgfSBmcm9tICcuLi9hcGkvcm93LXNlbGVjdGVkL3Jvdy1zZWxlY3Rpb24nO1xuXG5cbmV4cG9ydCBjbGFzcyBGb3JtYXRpb25Eb21haW5XYXJlaG91c2UgZXh0ZW5kcyBGb3JtYXRpb25XYXJlaG91c2Uge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcm93U2VsZWN0ZWRSZXBvc2l0b3J5OiBSb3dTZWxlY3RlZEFyY2hpdmUsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgcm93U2VsZWN0aW9uTW9kZVJlcG9zaXRvcnk6IFJvd1NlbGVjdGlvbk1vZGVBcmNoaXZlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IHNvdXJjZVdhcmVob3VzZTogU291cmNlV2FyZWhvdXNlKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdHN0YXRpYyByZWFkb25seSBzZXJ2aWNlcyA9IFtcblx0XHRSb3dTZWxlY3RlZEFyY2hpdmUsXG5cdFx0Um93U2VsZWN0aW9uTW9kZUFyY2hpdmUsXG5cdFx0U291cmNlV2FyZWhvdXNlXG5cdF07XG5cblx0ZmluZFNlbGVjdGVkUm93cyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBPcHRpb25hbDxSZWFkb25seUFycmF5PFNlbGVjdGVkUm93Pj4ge1xuXG5cdFx0Y29uc3QgaXRlbXMgPSB0aGlzLnNvdXJjZVdhcmVob3VzZS5maW5kUHJlcGFyZWRFbnRpdGllcyhzdHJ1Y3R1cmVJZCksXG5cdFx0XHRzZWxlY3RlZEl0ZW1JZHMgPSB0aGlzLmZpbmRTZWxlY3RlZEl0ZW1JZHMoc3RydWN0dXJlSWQpLmdldFZhbHVlT3JOdWxsT3JUaHJvd0Vycm9yKCk7XG5cblx0XHRjb25zdCBzZWxlY3RlZEl0ZW1zID0gW10sXG5cdFx0XHRsZW5ndGggPSBpdGVtcy5sZW5ndGg7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG5cblx0XHRcdGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcblxuXHRcdFx0aWYgKHNlbGVjdGVkSXRlbUlkcy5zb21lKChpdGVtSWQ6IHN0cmluZykgPT4gaXRlbUlkID09PSBpdGVtLmdldElkKCkudG9TdHJpbmcoKSkpIHtcblx0XHRcdFx0c2VsZWN0ZWRJdGVtcy5wdXNoKG5ldyBTZWxlY3RlZFJvdyhpdGVtLmdldFNvdXJjZUl0ZW0oKSwgaSwgaXRlbS5nZXRJZCgpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBPcHRpb25hbC5vZihzZWxlY3RlZEl0ZW1zKTtcblx0fVxuXG5cdG9uUm93U2VsZWN0ZWRSZWFkTW9kZWwoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSb3dTZWxlY3RlZFJlYWRNb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLnJvd1NlbGVjdGVkUmVwb3NpdG9yeVxuXHRcdFx0XHQgICAub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0ZmluZFNlbGVjdGVkSXRlbUlkcyhzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBPcHRpb25hbDxSZWFkb25seUFycmF5PHN0cmluZz4+IHtcblx0XHRyZXR1cm4gdGhpcy5yb3dTZWxlY3RlZFJlcG9zaXRvcnlcblx0XHRcdFx0ICAgLmZpbmQoc3RydWN0dXJlSWQpXG5cdFx0XHRcdCAgIC5tYXAoKHI6IFJvd1NlbGVjdGVkUmVhZE1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0ICAgcmV0dXJuIHIuZ2V0QWxsKCk7XG5cdFx0XHRcdCAgIH0pO1xuXHR9XG5cblx0b25TZWxlY3RlZFJvd3Moc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSZWFkb25seUFycmF5PHN0cmluZz4+IHtcblx0XHRyZXR1cm4gdGhpcy5yb3dTZWxlY3RlZFJlcG9zaXRvcnlcblx0XHRcdFx0ICAgLm9uKHN0cnVjdHVyZUlkKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKHJtOiBSb3dTZWxlY3RlZFJlYWRNb2RlbCkgPT4ge1xuXHRcdFx0XHRcdFx0ICAgcmV0dXJuIHJtLmdldEFsbCgpO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRvbk1vZGUoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSb3dTZWxlY3Rpb25Nb2RlPiB7XG5cdFx0cmV0dXJuIHRoaXMucm93U2VsZWN0aW9uTW9kZVJlcG9zaXRvcnkub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cbn1cbiJdfQ==