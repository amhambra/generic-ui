import { structureKey } from '../../structure-core/api/global/structre.key';
import { VerticalFormationFactory } from '../domain/vertical-formation.factory';
import { SetScrollPositionCommandHandler } from './scroll-position/set-scroll-position.command-handler';
import { SetVerticalScrollEnabledCommandHandler } from './set-enabled/set-vertical-scroll-enabled.command-handler';
import { SetRowHeightBasedOnThemeCommandHandler } from './set-row-height-theme/set-row-height-based-on-theme.command-handler';
import { SetRowHeightCommandHandler } from './set-row-height/set-row-height.command-handler';
import { StructureSetHeightCommandHandler } from './container/set-height/structure-set-height.command-handler';
import { ScrollBarPositionSetEventHandler } from '../core-read/scroll-bar/scroll-bar-position-set.event-handler';
import { SetScrollBarPositionCommandHandler } from './scroll-bar/set-scroll-bar-position.command-handler';
import { VerticalFormationDispatcher } from './vertical-formation.dispatcher';
export class VerticalFormationDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(VerticalFormationFactory);
        container.provide(VerticalFormationDispatcher);
    }
    registerCommandHandlers() {
        return [
            SetScrollPositionCommandHandler,
            SetVerticalScrollEnabledCommandHandler,
            SetRowHeightBasedOnThemeCommandHandler,
            SetRowHeightCommandHandler,
            StructureSetHeightCommandHandler,
            SetScrollBarPositionCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            ScrollBarPositionSetEventHandler
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVydGljYWwtZm9ybWF0aW9uLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL3ZlcnRpY2FsLWZvcm1hdGlvbi9jb3JlL3ZlcnRpY2FsLWZvcm1hdGlvbi5kb21haW4tbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUNuSCxPQUFPLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSxzRUFBc0UsQ0FBQztBQUM5SCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUMvRyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUNqSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMxRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU5RSxNQUFNLE9BQU8sNkJBQTZCO0lBRXpDLGVBQWU7UUFDZCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxXQUFXO1FBQ1YsT0FBTyxZQUFZLENBQUM7SUFDckIsQ0FBQztJQUVELGlCQUFpQixDQUFDLFNBQW9CO1FBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHVCQUF1QjtRQUN0QixPQUFPO1lBQ04sK0JBQStCO1lBQy9CLHNDQUFzQztZQUN0QyxzQ0FBc0M7WUFDdEMsMEJBQTBCO1lBQzFCLGdDQUFnQztZQUNoQyxrQ0FBa0M7U0FDbEMsQ0FBQztJQUNILENBQUM7SUFFRCwwQkFBMEI7UUFDekIsT0FBTztZQUNOLGdDQUFnQztTQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUVELCtCQUErQjtRQUM5QixPQUFPLEVBQUUsQ0FBQztJQUNYLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFnZ3JlZ2F0ZURlZmluaXRpb24sXG5cdEFnZ3JlZ2F0ZUlkLFxuXHRBZ2dyZWdhdGVSb290LFxuXHRDb21tYW5kLFxuXHRDb250YWluZXIsXG5cdERvbWFpbkV2ZW50LFxuXHREb21haW5Qcm92aWRlcnMsXG5cdE11bHRpRG9tYWluRXZlbnRIYW5kbGVyLFxuXHRUeXBlXG59IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmltcG9ydCB7IHN0cnVjdHVyZUtleSB9IGZyb20gJy4uLy4uL3N0cnVjdHVyZS1jb3JlL2FwaS9nbG9iYWwvc3RydWN0cmUua2V5JztcbmltcG9ydCB7IFZlcnRpY2FsRm9ybWF0aW9uRmFjdG9yeSB9IGZyb20gJy4uL2RvbWFpbi92ZXJ0aWNhbC1mb3JtYXRpb24uZmFjdG9yeSc7XG5pbXBvcnQgeyBTZXRTY3JvbGxQb3NpdGlvbkNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9zY3JvbGwtcG9zaXRpb24vc2V0LXNjcm9sbC1wb3NpdGlvbi5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgU2V0VmVydGljYWxTY3JvbGxFbmFibGVkQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3NldC1lbmFibGVkL3NldC12ZXJ0aWNhbC1zY3JvbGwtZW5hYmxlZC5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgU2V0Um93SGVpZ2h0QmFzZWRPblRoZW1lQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3NldC1yb3ctaGVpZ2h0LXRoZW1lL3NldC1yb3ctaGVpZ2h0LWJhc2VkLW9uLXRoZW1lLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBTZXRSb3dIZWlnaHRDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vc2V0LXJvdy1oZWlnaHQvc2V0LXJvdy1oZWlnaHQuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFN0cnVjdHVyZVNldEhlaWdodENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb250YWluZXIvc2V0LWhlaWdodC9zdHJ1Y3R1cmUtc2V0LWhlaWdodC5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgU2Nyb2xsQmFyUG9zaXRpb25TZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvc2Nyb2xsLWJhci9zY3JvbGwtYmFyLXBvc2l0aW9uLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IFNldFNjcm9sbEJhclBvc2l0aW9uQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3Njcm9sbC1iYXIvc2V0LXNjcm9sbC1iYXItcG9zaXRpb24uY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFZlcnRpY2FsRm9ybWF0aW9uRGlzcGF0Y2hlciB9IGZyb20gJy4vdmVydGljYWwtZm9ybWF0aW9uLmRpc3BhdGNoZXInO1xuXG5leHBvcnQgY2xhc3MgVmVydGljYWxGb3JtYXRpb25Eb21haW5Nb2R1bGUgaW1wbGVtZW50cyBEb21haW5Qcm92aWRlcnMge1xuXG5cdGRlZmluZUFnZ3JlZ2F0ZSgpOiBBZ2dyZWdhdGVEZWZpbml0aW9uPGFueSwgYW55LCBhbnk+IHwgbnVsbCB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZWdpc3RlcktleSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBzdHJ1Y3R1cmVLZXk7XG5cdH1cblxuXHRyZWdpc3RlclByb3ZpZGVycyhjb250YWluZXI6IENvbnRhaW5lcik6IHZvaWQge1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKFZlcnRpY2FsRm9ybWF0aW9uRmFjdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoVmVydGljYWxGb3JtYXRpb25EaXNwYXRjaGVyKTtcblx0fVxuXG5cdHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0U2V0U2Nyb2xsUG9zaXRpb25Db21tYW5kSGFuZGxlcixcblx0XHRcdFNldFZlcnRpY2FsU2Nyb2xsRW5hYmxlZENvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0Um93SGVpZ2h0QmFzZWRPblRoZW1lQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRTZXRSb3dIZWlnaHRDb21tYW5kSGFuZGxlcixcblx0XHRcdFN0cnVjdHVyZVNldEhlaWdodENvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0U2Nyb2xsQmFyUG9zaXRpb25Db21tYW5kSGFuZGxlclxuXHRcdF07XG5cdH1cblxuXHRyZWdpc3RlckRvbWFpbkV2ZW50SGFuZGxlcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4oKTogQXJyYXk8YW55PiB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdFNjcm9sbEJhclBvc2l0aW9uU2V0RXZlbnRIYW5kbGVyXG5cdFx0XTtcblx0fVxuXG5cdHJlZ2lzdGVyTXVsdGlEb21haW5FdmVudEhhbmRsZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KCk6IEFycmF5PFR5cGU8TXVsdGlEb21haW5FdmVudEhhbmRsZXI8SSwgRT4+PiB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cbn1cblxuIl19