import { CoreContainer, DomainEventBus, hermesFilter, hermesMap, hermesSwitchMap } from '@generic-ui/hermes';
import { PagingWarehouse } from '../api/paging.warehouse';
import { PrevPageEvent } from '../domain/prev-page/prev-page.event';
import { NextPageEvent } from '../domain/next-page/next-page.event';
import { PageChangedEvent } from '../domain/page/page-changed.event';
import { PagesizeChangedEvent } from '../domain/change-pagesize/pagesize-changed.event';
import { PagingEventRepository } from '../api/paging.event-repository';
export class PagingDomainEventRepository extends PagingEventRepository {
    constructor(pagingWarehouse) {
        super();
        this.pagingWarehouse = pagingWarehouse;
        this.eventBusToRemove = CoreContainer.resolve(DomainEventBus);
    }
    onPageChange(structureId) {
        return this.eventBusToRemove
            .ofEvents([
            PrevPageEvent,
            NextPageEvent,
            PageChangedEvent
        ])
            .pipe(hermesFilter((event) => event.getAggregateId().toString() === structureId.toAggregateId().toString()), hermesSwitchMap((event) => {
            return this.pagingWarehouse
                .oncePaging(structureId.toAggregateId())
                .pipe(hermesMap((paging) => paging.getPage()));
        }));
    }
    onPageSizeChange(structureId) {
        return this.eventBusToRemove
            .ofEvents([
            PagesizeChangedEvent
        ])
            .pipe(hermesFilter((event) => event.getAggregateId().toString() === structureId.toAggregateId().toString()), hermesSwitchMap((event) => {
            return this.pagingWarehouse
                .oncePaging(structureId.toAggregateId())
                .pipe(hermesMap((paging) => paging.getPageSize()));
        }));
    }
}
PagingDomainEventRepository.services = [PagingWarehouse];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5nLmRvbWFpbi5ldmVudC1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1saXN0L3NyYy9jb3JlL3N0cnVjdHVyZS9wYWdpbmcvZG9tYWluLXJlYWQvcGFnaW5nLmRvbWFpbi5ldmVudC1yZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWUsY0FBYyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQW9CLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzVJLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBR3ZFLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxxQkFBcUI7SUFJckUsWUFBNkIsZUFBZ0M7UUFDNUQsS0FBSyxFQUFFLENBQUM7UUFEb0Isb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBRjVDLHFCQUFnQixHQUFtQixhQUFhLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBSTFGLENBQUM7SUFJRCxZQUFZLENBQUMsV0FBcUM7UUFFakQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3RCLFFBQVEsQ0FBQztZQUNSLGFBQW9CO1lBQ3BCLGFBQW9CO1lBQ3BCLGdCQUF1QjtTQUN2QixDQUNEO2FBQ0EsSUFBSSxDQUNKLFlBQVksQ0FBQyxDQUFDLEtBQStCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDL0gsZUFBZSxDQUFDLENBQUMsS0FBK0IsRUFBRSxFQUFFO1lBRW5ELE9BQU8sSUFBSSxDQUFDLGVBQWU7aUJBQ3hCLFVBQVUsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7aUJBQ3ZDLElBQUksQ0FDSixTQUFTLENBQUMsQ0FBQyxNQUFtQixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDcEQsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDUixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsV0FBcUM7UUFFckQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCO2FBQ3RCLFFBQVEsQ0FBQztZQUNSLG9CQUEyQjtTQUMzQixDQUNEO2FBQ0EsSUFBSSxDQUNKLFlBQVksQ0FBQyxDQUFDLEtBQStCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDL0gsZUFBZSxDQUFDLENBQUMsS0FBK0IsRUFBRSxFQUFFO1lBRW5ELE9BQU8sSUFBSSxDQUFDLGVBQWU7aUJBQ3hCLFVBQVUsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7aUJBQ3ZDLElBQUksQ0FDSixTQUFTLENBQUMsQ0FBQyxNQUFtQixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FDeEQsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUNGLENBQUM7SUFDUixDQUFDOztBQTFDZSxvQ0FBUSxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3JlQ29udGFpbmVyLCBEb21haW5FdmVudCwgRG9tYWluRXZlbnRCdXMsIGhlcm1lc0ZpbHRlciwgaGVybWVzTWFwLCBIZXJtZXNPYnNlcnZhYmxlLCBoZXJtZXNTd2l0Y2hNYXAgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuaW1wb3J0IHsgU3RydWN0dXJlUmVhZE1vZGVsUm9vdElkIH0gZnJvbSAnLi4vLi4vY29yZS9hcGkvcmVhZC9zdHJ1Y3R1cmUucmVhZC1tb2RlbC1yb290LWlkJztcbmltcG9ydCB7IFN0cnVjdHVyZUlkIH0gZnJvbSAnLi4vLi4vY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBQYWdpbmdXYXJlaG91c2UgfSBmcm9tICcuLi9hcGkvcGFnaW5nLndhcmVob3VzZSc7XG5pbXBvcnQgeyBQcmV2UGFnZUV2ZW50IH0gZnJvbSAnLi4vZG9tYWluL3ByZXYtcGFnZS9wcmV2LXBhZ2UuZXZlbnQnO1xuaW1wb3J0IHsgTmV4dFBhZ2VFdmVudCB9IGZyb20gJy4uL2RvbWFpbi9uZXh0LXBhZ2UvbmV4dC1wYWdlLmV2ZW50JztcbmltcG9ydCB7IFBhZ2VDaGFuZ2VkRXZlbnQgfSBmcm9tICcuLi9kb21haW4vcGFnZS9wYWdlLWNoYW5nZWQuZXZlbnQnO1xuaW1wb3J0IHsgUGFnaW5nTW9kZWwgfSBmcm9tICcuLi9hcGkvbW9kZWwvcGFnaW5nLm1vZGVsJztcbmltcG9ydCB7IFBhZ2VzaXplQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vZG9tYWluL2NoYW5nZS1wYWdlc2l6ZS9wYWdlc2l6ZS1jaGFuZ2VkLmV2ZW50JztcbmltcG9ydCB7IFBhZ2luZ0V2ZW50UmVwb3NpdG9yeSB9IGZyb20gJy4uL2FwaS9wYWdpbmcuZXZlbnQtcmVwb3NpdG9yeSc7XG5cblxuZXhwb3J0IGNsYXNzIFBhZ2luZ0RvbWFpbkV2ZW50UmVwb3NpdG9yeSBleHRlbmRzIFBhZ2luZ0V2ZW50UmVwb3NpdG9yeSB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBldmVudEJ1c1RvUmVtb3ZlOiBEb21haW5FdmVudEJ1cyA9IENvcmVDb250YWluZXIucmVzb2x2ZShEb21haW5FdmVudEJ1cyk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwYWdpbmdXYXJlaG91c2U6IFBhZ2luZ1dhcmVob3VzZSkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRzdGF0aWMgcmVhZG9ubHkgc2VydmljZXMgPSBbUGFnaW5nV2FyZWhvdXNlXTtcblxuXHRvblBhZ2VDaGFuZ2Uoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZVJlYWRNb2RlbFJvb3RJZCk6IEhlcm1lc09ic2VydmFibGU8bnVtYmVyPiB7XG5cblx0XHRyZXR1cm4gdGhpcy5ldmVudEJ1c1RvUmVtb3ZlXG5cdFx0XHRcdCAgIC5vZkV2ZW50cyhbXG5cdFx0XHRcdFx0XHQgICBQcmV2UGFnZUV2ZW50IGFzIGFueSxcblx0XHRcdFx0XHRcdCAgIE5leHRQYWdlRXZlbnQgYXMgYW55LFxuXHRcdFx0XHRcdFx0ICAgUGFnZUNoYW5nZWRFdmVudCBhcyBhbnlcblx0XHRcdFx0XHQgICBdXG5cdFx0XHRcdCAgIClcblx0XHRcdFx0ICAgLnBpcGUoXG5cdFx0XHRcdFx0ICAgaGVybWVzRmlsdGVyKChldmVudDogRG9tYWluRXZlbnQ8U3RydWN0dXJlSWQ+KSA9PiBldmVudC5nZXRBZ2dyZWdhdGVJZCgpLnRvU3RyaW5nKCkgPT09IHN0cnVjdHVyZUlkLnRvQWdncmVnYXRlSWQoKS50b1N0cmluZygpKSxcblx0XHRcdFx0XHQgICBoZXJtZXNTd2l0Y2hNYXAoKGV2ZW50OiBEb21haW5FdmVudDxTdHJ1Y3R1cmVJZD4pID0+IHtcblxuXHRcdFx0XHRcdFx0ICAgcmV0dXJuIHRoaXMucGFnaW5nV2FyZWhvdXNlXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5vbmNlUGFnaW5nKHN0cnVjdHVyZUlkLnRvQWdncmVnYXRlSWQoKSlcblx0XHRcdFx0XHRcdFx0XHRcdCAgLnBpcGUoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgaGVybWVzTWFwKChwYWdpbmc6IFBhZ2luZ01vZGVsKSA9PiBwYWdpbmcuZ2V0UGFnZSgpKVxuXHRcdFx0XHRcdFx0XHRcdFx0ICApO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRvblBhZ2VTaXplQ2hhbmdlKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVSZWFkTW9kZWxSb290SWQpOiBIZXJtZXNPYnNlcnZhYmxlPG51bWJlcj4ge1xuXG5cdFx0cmV0dXJuIHRoaXMuZXZlbnRCdXNUb1JlbW92ZVxuXHRcdFx0XHQgICAub2ZFdmVudHMoW1xuXHRcdFx0XHRcdFx0ICAgUGFnZXNpemVDaGFuZ2VkRXZlbnQgYXMgYW55XG5cdFx0XHRcdFx0ICAgXVxuXHRcdFx0XHQgICApXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc0ZpbHRlcigoZXZlbnQ6IERvbWFpbkV2ZW50PFN0cnVjdHVyZUlkPikgPT4gZXZlbnQuZ2V0QWdncmVnYXRlSWQoKS50b1N0cmluZygpID09PSBzdHJ1Y3R1cmVJZC50b0FnZ3JlZ2F0ZUlkKCkudG9TdHJpbmcoKSksXG5cdFx0XHRcdFx0ICAgaGVybWVzU3dpdGNoTWFwKChldmVudDogRG9tYWluRXZlbnQ8U3RydWN0dXJlSWQ+KSA9PiB7XG5cblx0XHRcdFx0XHRcdCAgIHJldHVybiB0aGlzLnBhZ2luZ1dhcmVob3VzZVxuXHRcdFx0XHRcdFx0XHRcdFx0ICAub25jZVBhZ2luZyhzdHJ1Y3R1cmVJZC50b0FnZ3JlZ2F0ZUlkKCkpXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5waXBlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgIGhlcm1lc01hcCgocGFnaW5nOiBQYWdpbmdNb2RlbCkgPT4gcGFnaW5nLmdldFBhZ2VTaXplKCkpXG5cdFx0XHRcdFx0XHRcdFx0XHQgICk7XG5cdFx0XHRcdFx0ICAgfSlcblx0XHRcdFx0ICAgKTtcblx0fVxuXG59XG4iXX0=