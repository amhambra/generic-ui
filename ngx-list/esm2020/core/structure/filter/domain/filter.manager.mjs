import { Filter } from './filter';
import { FilterSettings } from './filter.settings';
import { FilterTypeManager } from './type/filter-type.manager';
import { FilterIdGenerator } from '../core/filter.id-generator';
import { ActiveFilterModel } from '../api/active/active-filter.model';
export class FilterManager {
    constructor() {
        this.filterSettings = new FilterSettings();
        // string -> FilterId
        this.filters = new Map();
        this.activeFilters = [];
    }
    getSettings() {
        return this.filterSettings;
    }
    getAll() {
        return Array.from(this.filters)
            .map((arr) => arr[1]);
    }
    getAllActiveFilters(fields) {
        return this.activeFilters
            .map((af) => {
            return new ActiveFilterModel(af.getFilterId(), (fields.get(af.getFieldId().toString())).getName(), this.filterTypeManager.getFilterType(af.getFilterTypeId()).getName(), af.getFilterValue());
        });
    }
    getFilterTypes() {
        return this.filterTypeManager.getFieldIdsToFilterTypes();
    }
    assignFilterTypes(fields) {
        this.filterTypeManager = new FilterTypeManager(fields);
    }
    add(fieldId, filterTypeId, value) {
        const filter = new Filter(FilterIdGenerator.generateId(), fieldId, filterTypeId, value);
        this.activeFilters.push(filter);
    }
    filter(entities, fields) {
        let filteredEntities = Array.from(entities);
        for (const filter of this.activeFilters) {
            const filterTypeId = filter.getFilterTypeId(), filterType = this.getFilterType(filterTypeId), value = filter.getFilterValue();
            filteredEntities = filterType.filterMany(filteredEntities, fields.get(filter.getFieldId().toString()), value);
        }
        return filteredEntities;
    }
    removeAll() {
        this.activeFilters.length = 0;
    }
    remove(filterId) {
        this.activeFilters =
            this.activeFilters.filter((filter) => {
                return filter.getFilterId() !== filterId;
            });
    }
    getFilterType(filterTypeId) {
        return this.filterTypeManager.getFilterType(filterTypeId);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLm1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9kb21haW4vZmlsdGVyLm1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFJdEUsTUFBTSxPQUFPLGFBQWE7SUFXekI7UUFUaUIsbUJBQWMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBRXZELHFCQUFxQjtRQUNKLFlBQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztRQUU3QyxrQkFBYSxHQUFrQixFQUFFLENBQUM7SUFLMUMsQ0FBQztJQUVELFdBQVc7UUFDVixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU07UUFDTCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUMzQixHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxNQUFnQztRQUNuRCxPQUFPLElBQUksQ0FBQyxhQUFhO2FBQ25CLEdBQUcsQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxpQkFBaUIsQ0FDM0IsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUNoQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFDbEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFDcEUsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUNuQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRUQsY0FBYztRQUNiLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELGlCQUFpQixDQUFDLE1BQTBCO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZ0IsRUFBRSxZQUEwQixFQUFFLEtBQVU7UUFFM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQWlDLEVBQUUsTUFBZ0M7UUFFekUsSUFBSSxnQkFBZ0IsR0FBNEIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVyRSxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFFeEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUM1QyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsRUFDN0MsS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUVqQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUc7UUFFRCxPQUFPLGdCQUFnQixDQUFDO0lBQ3pCLENBQUM7SUFFRCxTQUFTO1FBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBa0I7UUFFeEIsSUFBSSxDQUFDLGFBQWE7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtnQkFDNUMsT0FBTyxNQUFNLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGFBQWEsQ0FBQyxZQUEwQjtRQUMvQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi9maWx0ZXInO1xuaW1wb3J0IHsgT3JpZ2luSXRlbUVudGl0eSB9IGZyb20gJy4uLy4uL3NvdXJjZS9kb21haW4vb3JpZ2luL29yaWdpbi1pdGVtLWVudGl0eSc7XG5pbXBvcnQgeyBGaWx0ZXJTZXR0aW5ncyB9IGZyb20gJy4vZmlsdGVyLnNldHRpbmdzJztcbmltcG9ydCB7IEZpZWxkRW50aXR5IH0gZnJvbSAnLi4vLi4vZmllbGQvZG9tYWluL2ZpZWxkL2ZpZWxkLmVudGl0eSc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlSWQgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgRmllbGRJZCB9IGZyb20gJy4uLy4uL2ZpZWxkL2RvbWFpbi9maWVsZC9maWVsZC5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlTWFuYWdlciB9IGZyb20gJy4vdHlwZS9maWx0ZXItdHlwZS5tYW5hZ2VyJztcbmltcG9ydCB7IEZpbHRlclR5cGVNb2RlbCB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLm1vZGVsJztcbmltcG9ydCB7IEJhc2VGaWx0ZXJUeXBlIH0gZnJvbSAnLi90eXBlL2Jhc2UtZmlsdGVyLXR5cGUnO1xuaW1wb3J0IHsgRmlsdGVySWRHZW5lcmF0b3IgfSBmcm9tICcuLi9jb3JlL2ZpbHRlci5pZC1nZW5lcmF0b3InO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyTW9kZWwgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVySWQgfSBmcm9tICcuLi9hcGkvaWQvZmlsdGVyLmlkJztcblxuXG5leHBvcnQgY2xhc3MgRmlsdGVyTWFuYWdlciB7XG5cblx0cHJpdmF0ZSByZWFkb25seSBmaWx0ZXJTZXR0aW5ncyA9IG5ldyBGaWx0ZXJTZXR0aW5ncygpO1xuXG5cdC8vIHN0cmluZyAtPiBGaWx0ZXJJZFxuXHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlcnMgPSBuZXcgTWFwPHN0cmluZywgRmlsdGVyPigpO1xuXG5cdHByaXZhdGUgYWN0aXZlRmlsdGVyczogQXJyYXk8RmlsdGVyPiA9IFtdO1xuXG5cdHByaXZhdGUgZmlsdGVyVHlwZU1hbmFnZXI6IEZpbHRlclR5cGVNYW5hZ2VyO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHR9XG5cblx0Z2V0U2V0dGluZ3MoKTogRmlsdGVyU2V0dGluZ3Mge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlclNldHRpbmdzO1xuXHR9XG5cblx0Z2V0QWxsKCk6IEFycmF5PEZpbHRlcj4ge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKHRoaXMuZmlsdGVycylcblx0XHRcdFx0XHQubWFwKChhcnIpID0+IGFyclsxXSk7XG5cdH1cblxuXHRnZXRBbGxBY3RpdmVGaWx0ZXJzKGZpZWxkczogTWFwPHN0cmluZywgRmllbGRFbnRpdHk+KTogUmVhZG9ubHlBcnJheTxBY3RpdmVGaWx0ZXJNb2RlbD4ge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZUZpbHRlcnNcblx0XHRcdFx0ICAgLm1hcCgoYWY6IEZpbHRlcikgPT4ge1xuXHRcdFx0XHRcdCAgIHJldHVybiBuZXcgQWN0aXZlRmlsdGVyTW9kZWwoXG5cdFx0XHRcdFx0XHQgICBhZi5nZXRGaWx0ZXJJZCgpLFxuXHRcdFx0XHRcdFx0ICAgKGZpZWxkcy5nZXQoYWYuZ2V0RmllbGRJZCgpLnRvU3RyaW5nKCkpKS5nZXROYW1lKCksXG5cdFx0XHRcdFx0XHQgICB0aGlzLmZpbHRlclR5cGVNYW5hZ2VyLmdldEZpbHRlclR5cGUoYWYuZ2V0RmlsdGVyVHlwZUlkKCkpLmdldE5hbWUoKSxcblx0XHRcdFx0XHRcdCAgIGFmLmdldEZpbHRlclZhbHVlKClcblx0XHRcdFx0XHQgICApO1xuXHRcdFx0XHQgICB9KTtcblx0fVxuXG5cdGdldEZpbHRlclR5cGVzKCk6IE1hcDxzdHJpbmcsIEFycmF5PEZpbHRlclR5cGVNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlTWFuYWdlci5nZXRGaWVsZElkc1RvRmlsdGVyVHlwZXMoKTtcblx0fVxuXG5cdGFzc2lnbkZpbHRlclR5cGVzKGZpZWxkczogQXJyYXk8RmllbGRFbnRpdHk+KSB7XG5cdFx0dGhpcy5maWx0ZXJUeXBlTWFuYWdlciA9IG5ldyBGaWx0ZXJUeXBlTWFuYWdlcihmaWVsZHMpO1xuXHR9XG5cblx0YWRkKGZpZWxkSWQ6IEZpZWxkSWQsIGZpbHRlclR5cGVJZDogRmlsdGVyVHlwZUlkLCB2YWx1ZTogYW55KTogdm9pZCB7XG5cblx0XHRjb25zdCBmaWx0ZXIgPSBuZXcgRmlsdGVyKEZpbHRlcklkR2VuZXJhdG9yLmdlbmVyYXRlSWQoKSwgZmllbGRJZCwgZmlsdGVyVHlwZUlkLCB2YWx1ZSk7XG5cblx0XHR0aGlzLmFjdGl2ZUZpbHRlcnMucHVzaChmaWx0ZXIpO1xuXHR9XG5cblx0ZmlsdGVyKGVudGl0aWVzOiBBcnJheTxPcmlnaW5JdGVtRW50aXR5PiwgZmllbGRzOiBNYXA8c3RyaW5nLCBGaWVsZEVudGl0eT4pOiBBcnJheTxPcmlnaW5JdGVtRW50aXR5PiB7XG5cblx0XHRsZXQgZmlsdGVyZWRFbnRpdGllczogQXJyYXk8T3JpZ2luSXRlbUVudGl0eT4gPSBBcnJheS5mcm9tKGVudGl0aWVzKTtcblxuXHRcdGZvciAoY29uc3QgZmlsdGVyIG9mIHRoaXMuYWN0aXZlRmlsdGVycykge1xuXG5cdFx0XHRjb25zdCBmaWx0ZXJUeXBlSWQgPSBmaWx0ZXIuZ2V0RmlsdGVyVHlwZUlkKCksXG5cdFx0XHRcdGZpbHRlclR5cGUgPSB0aGlzLmdldEZpbHRlclR5cGUoZmlsdGVyVHlwZUlkKSxcblx0XHRcdFx0dmFsdWUgPSBmaWx0ZXIuZ2V0RmlsdGVyVmFsdWUoKTtcblxuXHRcdFx0ZmlsdGVyZWRFbnRpdGllcyA9IGZpbHRlclR5cGUuZmlsdGVyTWFueShmaWx0ZXJlZEVudGl0aWVzLCBmaWVsZHMuZ2V0KGZpbHRlci5nZXRGaWVsZElkKCkudG9TdHJpbmcoKSksIHZhbHVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmlsdGVyZWRFbnRpdGllcztcblx0fVxuXG5cdHJlbW92ZUFsbCgpOiB2b2lkIHtcblx0XHR0aGlzLmFjdGl2ZUZpbHRlcnMubGVuZ3RoID0gMDtcblx0fVxuXG5cdHJlbW92ZShmaWx0ZXJJZDogRmlsdGVySWQpOiB2b2lkIHtcblxuXHRcdHRoaXMuYWN0aXZlRmlsdGVycyA9XG5cdFx0XHR0aGlzLmFjdGl2ZUZpbHRlcnMuZmlsdGVyKChmaWx0ZXI6IEZpbHRlcikgPT4ge1xuXHRcdFx0XHRyZXR1cm4gZmlsdGVyLmdldEZpbHRlcklkKCkgIT09IGZpbHRlcklkO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGdldEZpbHRlclR5cGUoZmlsdGVyVHlwZUlkOiBGaWx0ZXJUeXBlSWQpOiBCYXNlRmlsdGVyVHlwZTxhbnk+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJUeXBlTWFuYWdlci5nZXRGaWx0ZXJUeXBlKGZpbHRlclR5cGVJZCk7XG5cdH1cblxuXG59XG4iXX0=