import { ToggleFilterCommandHandler } from './toggle/toggle-filter.command-handler';
import { AddFilterCommandHandler } from './core/add/add-filter.command-handler';
import { RemoveAllFiltersCommandHandler } from './core/remove-all/remove-all-filters.command-handler';
import { RemoveFilterCommandHandler } from './core/remove/remove-filter.command-handler';
import { SetConfigFilterCommandHandler } from './config/set-config-filter.command-handler';
import { SetConfigQuickFilterCommandHandler } from './quick/set-config-quick-filter.command-handler';
import { FilterManagerFactory } from './filter.manager-factory';
import { ConfigQuickFilterSetEventHandler } from '../domain-read/quick-filter/config-quick-filter-set.event-handler';
import { ConfigFilterSetEventHandler } from '../domain-read/config/config-filter-set.event-handler';
import { FilterTypeConfigFilterSetEventHandler } from '../domain-read/type/filter-type.config-filter-set.event-handler';
import { ActiveFiltersSetEventHandler } from '../domain-read/active/active-filters-set.event-handler';
import { UniqueFilterCalculatedEventHandler } from '../domain-read/unique/unique-filter-calculated.event-handler';
import { FilterTypeFieldsInitedEventHandler } from './type/init/filter-type.fields-inited.event-handler';
import { UnselectAllUniqueFilterCommandHandler } from './unique/unselect-all/unselect-all-unique-filter.command-handler';
import { UnselectUniqueFilterCommandHandler } from './unique/unselect/unselect-unique-filter.command-handler';
import { SelectAllUniqueFilterCommandHandler } from './unique/select-all/select-all-unique-filter.command-handler';
import { SelectUniqueFilterCommandHandler } from './unique/select/select-unique-filter.command-handler';
import { structureKey } from '../../core/api/global/structre.key';
import { FilterDispatcher } from './filter.dispatcher';
export class FilterDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(FilterManagerFactory);
        container.provide(FilterDispatcher);
    }
    registerCommandHandlers() {
        return [
            SetConfigFilterCommandHandler,
            SetConfigQuickFilterCommandHandler,
            ToggleFilterCommandHandler,
            AddFilterCommandHandler,
            RemoveAllFiltersCommandHandler,
            RemoveFilterCommandHandler,
            SelectUniqueFilterCommandHandler,
            SelectAllUniqueFilterCommandHandler,
            UnselectUniqueFilterCommandHandler,
            UnselectAllUniqueFilterCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            ConfigQuickFilterSetEventHandler,
            ConfigFilterSetEventHandler,
            FilterTypeConfigFilterSetEventHandler,
            ActiveFiltersSetEventHandler,
            UniqueFilterCalculatedEventHandler,
            FilterTypeFieldsInitedEventHandler
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9kb21haW4vZmlsdGVyLmRvbWFpbi1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDaEYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDdEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDekYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0YsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDckcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sbUVBQW1FLENBQUM7QUFDckgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDcEcsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFDeEgsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sOERBQThELENBQUM7QUFDbEgsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDekcsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sa0VBQWtFLENBQUM7QUFDekgsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDOUcsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sOERBQThELENBQUM7QUFDbkgsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDeEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3ZELE1BQU0sT0FBTyxrQkFBa0I7SUFFOUIsZUFBZTtRQUNkLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELFdBQVc7UUFDVixPQUFPLFlBQVksQ0FBQztJQUNyQixDQUFDO0lBRUQsaUJBQWlCLENBQUMsU0FBb0I7UUFDckMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3hDLFNBQVMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsdUJBQXVCO1FBQ3RCLE9BQU87WUFDTiw2QkFBNkI7WUFDN0Isa0NBQWtDO1lBQ2xDLDBCQUEwQjtZQUMxQix1QkFBdUI7WUFDdkIsOEJBQThCO1lBQzlCLDBCQUEwQjtZQUMxQixnQ0FBZ0M7WUFDaEMsbUNBQW1DO1lBQ25DLGtDQUFrQztZQUNsQyxxQ0FBcUM7U0FDckMsQ0FBQztJQUNILENBQUM7SUFFRCwwQkFBMEI7UUFDekIsT0FBTztZQUNOLGdDQUFnQztZQUNoQywyQkFBMkI7WUFDM0IscUNBQXFDO1lBQ3JDLDRCQUE0QjtZQUM1QixrQ0FBa0M7WUFDbEMsa0NBQWtDO1NBQ2xDLENBQUM7SUFDSCxDQUFDO0lBRUQsK0JBQStCO1FBQzlCLE9BQU8sRUFBRSxDQUFDO0lBQ1gsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdncmVnYXRlRGVmaW5pdGlvbiwgQWdncmVnYXRlSWQsIEFnZ3JlZ2F0ZVJvb3QsIENvbW1hbmQsIENvbnRhaW5lciwgRG9tYWluRXZlbnQsIERvbWFpblByb3ZpZGVycyB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5cbmltcG9ydCB7IFRvZ2dsZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi90b2dnbGUvdG9nZ2xlLWZpbHRlci5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgQWRkRmlsdGVyQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2NvcmUvYWRkL2FkZC1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFJlbW92ZUFsbEZpbHRlcnNDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29yZS9yZW1vdmUtYWxsL3JlbW92ZS1hbGwtZmlsdGVycy5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgUmVtb3ZlRmlsdGVyQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2NvcmUvcmVtb3ZlL3JlbW92ZS1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNldENvbmZpZ0ZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb25maWcvc2V0LWNvbmZpZy1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNldENvbmZpZ1F1aWNrRmlsdGVyQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3F1aWNrL3NldC1jb25maWctcXVpY2stZmlsdGVyLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBGaWx0ZXJNYW5hZ2VyRmFjdG9yeSB9IGZyb20gJy4vZmlsdGVyLm1hbmFnZXItZmFjdG9yeSc7XG5pbXBvcnQgeyBDb25maWdRdWlja0ZpbHRlclNldEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL3F1aWNrLWZpbHRlci9jb25maWctcXVpY2stZmlsdGVyLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IENvbmZpZ0ZpbHRlclNldEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL2NvbmZpZy9jb25maWctZmlsdGVyLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEZpbHRlclR5cGVDb25maWdGaWx0ZXJTZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9kb21haW4tcmVhZC90eXBlL2ZpbHRlci10eXBlLmNvbmZpZy1maWx0ZXItc2V0LmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyc1NldEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2RvbWFpbi1yZWFkL2FjdGl2ZS9hY3RpdmUtZmlsdGVycy1zZXQuZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBVbmlxdWVGaWx0ZXJDYWxjdWxhdGVkRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vZG9tYWluLXJlYWQvdW5pcXVlL3VuaXF1ZS1maWx0ZXItY2FsY3VsYXRlZC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEZpbHRlclR5cGVGaWVsZHNJbml0ZWRFdmVudEhhbmRsZXIgfSBmcm9tICcuL3R5cGUvaW5pdC9maWx0ZXItdHlwZS5maWVsZHMtaW5pdGVkLmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgVW5zZWxlY3RBbGxVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5pcXVlL3Vuc2VsZWN0LWFsbC91bnNlbGVjdC1hbGwtdW5pcXVlLWZpbHRlci5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgVW5zZWxlY3RVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5pcXVlL3Vuc2VsZWN0L3Vuc2VsZWN0LXVuaXF1ZS1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdEFsbFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi91bmlxdWUvc2VsZWN0LWFsbC9zZWxlY3QtYWxsLXVuaXF1ZS1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi91bmlxdWUvc2VsZWN0L3NlbGVjdC11bmlxdWUtZmlsdGVyLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBzdHJ1Y3R1cmVLZXkgfSBmcm9tICcuLi8uLi9jb3JlL2FwaS9nbG9iYWwvc3RydWN0cmUua2V5JztcbmltcG9ydCB7IEZpbHRlckRpc3BhdGNoZXIgfSBmcm9tICcuL2ZpbHRlci5kaXNwYXRjaGVyJztcblxuXG5leHBvcnQgY2xhc3MgRmlsdGVyRG9tYWluTW9kdWxlIGltcGxlbWVudHMgRG9tYWluUHJvdmlkZXJzIHtcblxuXHRkZWZpbmVBZ2dyZWdhdGUoKTogQWdncmVnYXRlRGVmaW5pdGlvbjxhbnksIGFueSwgYW55PiB8IG51bGwge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmVnaXN0ZXJLZXkoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gc3RydWN0dXJlS2V5O1xuXHR9XG5cblx0cmVnaXN0ZXJQcm92aWRlcnMoY29udGFpbmVyOiBDb250YWluZXIpOiB2b2lkIHtcblx0XHRjb250YWluZXIucHJvdmlkZShGaWx0ZXJNYW5hZ2VyRmFjdG9yeSk7XG5cdFx0Y29udGFpbmVyLnByb3ZpZGUoRmlsdGVyRGlzcGF0Y2hlcik7XG5cdH1cblxuXHRyZWdpc3RlckNvbW1hbmRIYW5kbGVyczxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEEgZXh0ZW5kcyBBZ2dyZWdhdGVSb290PEk+LCBDIGV4dGVuZHMgQ29tbWFuZDxJPj4oKTogQXJyYXk8YW55PiB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdFNldENvbmZpZ0ZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2V0Q29uZmlnUXVpY2tGaWx0ZXJDb21tYW5kSGFuZGxlcixcblx0XHRcdFRvZ2dsZUZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0QWRkRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRSZW1vdmVBbGxGaWx0ZXJzQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRSZW1vdmVGaWx0ZXJDb21tYW5kSGFuZGxlcixcblx0XHRcdFNlbGVjdFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2VsZWN0QWxsVW5pcXVlRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRVbnNlbGVjdFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0VW5zZWxlY3RBbGxVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlclxuXHRcdF07XG5cdH1cblxuXHRyZWdpc3RlckRvbWFpbkV2ZW50SGFuZGxlcjxJIGV4dGVuZHMgQWdncmVnYXRlSWQsIEUgZXh0ZW5kcyBEb21haW5FdmVudDxJPj4oKTogQXJyYXk8YW55PiB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdENvbmZpZ1F1aWNrRmlsdGVyU2V0RXZlbnRIYW5kbGVyLFxuXHRcdFx0Q29uZmlnRmlsdGVyU2V0RXZlbnRIYW5kbGVyLFxuXHRcdFx0RmlsdGVyVHlwZUNvbmZpZ0ZpbHRlclNldEV2ZW50SGFuZGxlcixcblx0XHRcdEFjdGl2ZUZpbHRlcnNTZXRFdmVudEhhbmRsZXIsXG5cdFx0XHRVbmlxdWVGaWx0ZXJDYWxjdWxhdGVkRXZlbnRIYW5kbGVyLFxuXHRcdFx0RmlsdGVyVHlwZUZpZWxkc0luaXRlZEV2ZW50SGFuZGxlclxuXHRcdF07XG5cdH1cblxuXHRyZWdpc3Rlck11bHRpRG9tYWluRXZlbnRIYW5kbGVyPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxufVxuIl19