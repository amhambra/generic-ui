import { FilterWarehouse } from '../api/filter.warehouse';
import { FilterEnabledArchive } from './config/filter-enabled.archive';
import { QuickFilterEnabledArchive } from './quick-filter/quick-filter-enabled.archive';
import { FilterTypeArchive } from './type/filter-type.archive';
import { UniqueValueCollectionArchive } from './unique/unique-value-collection.archive';
import { ActiveFilterArchive } from './active/active-filter.archive';
import { hermesMap, Optional, singleFromObservable } from '@generic-ui/hermes';
import { FilterDiContainer } from '../api/di/filter.di-container';
export class FilterDomainWarehouse extends FilterWarehouse {
    constructor(filterEnabledArchive, structureQuickFilterRepository, uniqueValuesArchive) {
        super();
        this.filterEnabledArchive = filterEnabledArchive;
        this.structureQuickFilterRepository = structureQuickFilterRepository;
        this.uniqueValuesArchive = uniqueValuesArchive;
        this.activeFilterArchive = FilterDiContainer.resolve(ActiveFilterArchive);
        this.filterTypeArchive = FilterDiContainer.resolve(FilterTypeArchive);
    }
    onFilteringEnabled(structureId) {
        return this.filterEnabledArchive.on(structureId);
    }
    onQuickFiltersEnabled(structureId) {
        return this.structureQuickFilterRepository.on(structureId);
    }
    onFilterTypes(structureId) {
        return this.filterTypeArchive.on(structureId);
    }
    onFilterTypesForFieldId(fieldId, structureId) {
        return this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            return map.getFilterTypes(fieldId);
        }));
    }
    onActiveFilters(structureId) {
        return this.activeFilterArchive.on(structureId);
    }
    findFilters(structureId) {
        return this.activeFilterArchive.find(structureId);
    }
    onUniqueValues(structureId) {
        return this.uniqueValuesArchive.on(structureId);
    }
    onceFilterTypeId(fieldId, filterTypeName, structureId) {
        return singleFromObservable(this.onFilterTypes(structureId)
            .pipe(hermesMap((map) => {
            const filterTypes = map.getFilterTypes(fieldId);
            const filterType = filterTypes.find((fieldType) => fieldType.getName() === filterTypeName);
            if (filterType === undefined) {
                return Optional.empty();
            }
            else {
                return Optional.of(filterType.getId());
            }
        })));
    }
}
FilterDomainWarehouse.services = [FilterEnabledArchive, QuickFilterEnabledArchive, UniqueValueCollectionArchive];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi13YXJlaG91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9kb21haW4tcmVhZC9maWx0ZXIuZG9tYWluLXdhcmVob3VzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDeEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDeEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFckUsT0FBTyxFQUFFLFNBQVMsRUFBa0MsUUFBUSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFPL0csT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFHbEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7SUFNekQsWUFBNkIsb0JBQTBDLEVBQ25ELDhCQUF5RCxFQUN6RCxtQkFBaUQ7UUFDcEUsS0FBSyxFQUFFLENBQUM7UUFIb0IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUNuRCxtQ0FBOEIsR0FBOUIsOEJBQThCLENBQTJCO1FBQ3pELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBOEI7UUFOcEQsd0JBQW1CLEdBQXdCLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTFGLHNCQUFpQixHQUFzQixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQU1yRyxDQUFDO0lBSUQsa0JBQWtCLENBQUMsV0FBd0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxXQUF3QjtRQUM3QyxPQUFPLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELGFBQWEsQ0FBQyxXQUF3QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELHVCQUF1QixDQUFDLE9BQWdCLEVBQUUsV0FBd0I7UUFDakUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUNoQyxJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsR0FBOEIsRUFBRSxFQUFFO1lBQzVDLE9BQU8sR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ1IsQ0FBQztJQUVELGVBQWUsQ0FBQyxXQUF3QjtRQUN2QyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFdBQVcsQ0FBQyxXQUF3QjtRQUNuQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELGNBQWMsQ0FBQyxXQUF3QjtRQUN0QyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQWdCLEVBQUUsY0FBc0IsRUFBRSxXQUF3QjtRQUNsRixPQUFPLG9CQUFvQixDQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUM3QixJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsR0FBOEIsRUFBRSxFQUFFO1lBQzVDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFaEQsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBRTNGLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtnQkFDN0IsT0FBTyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDeEI7aUJBQU07Z0JBQ04sT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO1FBQ0YsQ0FBQyxDQUFDLENBQ0YsQ0FDRixDQUFDO0lBRUgsQ0FBQzs7QUFyRGUsOEJBQVEsR0FBRyxDQUFDLG9CQUFvQixFQUFFLHlCQUF5QixFQUFFLDRCQUE0QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJXYXJlaG91c2UgfSBmcm9tICcuLi9hcGkvZmlsdGVyLndhcmVob3VzZSc7XG5pbXBvcnQgeyBGaWx0ZXJFbmFibGVkQXJjaGl2ZSB9IGZyb20gJy4vY29uZmlnL2ZpbHRlci1lbmFibGVkLmFyY2hpdmUnO1xuaW1wb3J0IHsgUXVpY2tGaWx0ZXJFbmFibGVkQXJjaGl2ZSB9IGZyb20gJy4vcXVpY2stZmlsdGVyL3F1aWNrLWZpbHRlci1lbmFibGVkLmFyY2hpdmUnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUFyY2hpdmUgfSBmcm9tICcuL3R5cGUvZmlsdGVyLXR5cGUuYXJjaGl2ZSc7XG5pbXBvcnQgeyBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25BcmNoaXZlIH0gZnJvbSAnLi91bmlxdWUvdW5pcXVlLXZhbHVlLWNvbGxlY3Rpb24uYXJjaGl2ZSc7XG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJBcmNoaXZlIH0gZnJvbSAnLi9hY3RpdmUvYWN0aXZlLWZpbHRlci5hcmNoaXZlJztcbmltcG9ydCB7IFN0cnVjdHVyZUlkIH0gZnJvbSAnLi4vLi4vY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBoZXJtZXNNYXAsIEhlcm1lc09ic2VydmFibGUsIEhlcm1lc1NpbmdsZSwgT3B0aW9uYWwsIHNpbmdsZUZyb21PYnNlcnZhYmxlIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcbmltcG9ydCB7IEZpbHRlclR5cGVDb2xsZWN0aW9uTW9kZWwgfSBmcm9tICcuLi9hcGkvdHlwZS9maWx0ZXItdHlwZS1jb2xsZWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlck1vZGVsIH0gZnJvbSAnLi4vYXBpL2FjdGl2ZS9hY3RpdmUtZmlsdGVyLm1vZGVsJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlQ29sbGVjdGlvbk1vZGVsIH0gZnJvbSAnLi4vYXBpL3VuaXF1ZS91bmlxdWUtdmFsdWUtY29sbGVjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBGaWVsZElkIH0gZnJvbSAnLi4vLi4vZmllbGQvZG9tYWluL2ZpZWxkL2ZpZWxkLmlkJztcbmltcG9ydCB7IEZpbHRlclR5cGVNb2RlbCB9IGZyb20gJy4uL2FwaS90eXBlL2ZpbHRlci10eXBlLm1vZGVsJztcbmltcG9ydCB7IEZpbHRlclR5cGVJZCB9IGZyb20gJy4uL2RvbWFpbi90eXBlL2ZpbHRlci10eXBlLmlkJztcbmltcG9ydCB7IEZpbHRlckRpQ29udGFpbmVyIH0gZnJvbSAnLi4vYXBpL2RpL2ZpbHRlci5kaS1jb250YWluZXInO1xuXG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJEb21haW5XYXJlaG91c2UgZXh0ZW5kcyBGaWx0ZXJXYXJlaG91c2Uge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlRmlsdGVyQXJjaGl2ZTogQWN0aXZlRmlsdGVyQXJjaGl2ZSA9IEZpbHRlckRpQ29udGFpbmVyLnJlc29sdmUoQWN0aXZlRmlsdGVyQXJjaGl2ZSk7XG5cblx0cHJpdmF0ZSByZWFkb25seSBmaWx0ZXJUeXBlQXJjaGl2ZTogRmlsdGVyVHlwZUFyY2hpdmUgPSBGaWx0ZXJEaUNvbnRhaW5lci5yZXNvbHZlKEZpbHRlclR5cGVBcmNoaXZlKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbHRlckVuYWJsZWRBcmNoaXZlOiBGaWx0ZXJFbmFibGVkQXJjaGl2ZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBzdHJ1Y3R1cmVRdWlja0ZpbHRlclJlcG9zaXRvcnk6IFF1aWNrRmlsdGVyRW5hYmxlZEFyY2hpdmUsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgdW5pcXVlVmFsdWVzQXJjaGl2ZTogVW5pcXVlVmFsdWVDb2xsZWN0aW9uQXJjaGl2ZSkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRzdGF0aWMgcmVhZG9ubHkgc2VydmljZXMgPSBbRmlsdGVyRW5hYmxlZEFyY2hpdmUsIFF1aWNrRmlsdGVyRW5hYmxlZEFyY2hpdmUsIFVuaXF1ZVZhbHVlQ29sbGVjdGlvbkFyY2hpdmVdO1xuXG5cdG9uRmlsdGVyaW5nRW5hYmxlZChzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXJFbmFibGVkQXJjaGl2ZS5vbihzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRvblF1aWNrRmlsdGVyc0VuYWJsZWQoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cdFx0cmV0dXJuIHRoaXMuc3RydWN0dXJlUXVpY2tGaWx0ZXJSZXBvc2l0b3J5Lm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uRmlsdGVyVHlwZXMoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxGaWx0ZXJUeXBlQ29sbGVjdGlvbk1vZGVsPiB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyVHlwZUFyY2hpdmUub24oc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0b25GaWx0ZXJUeXBlc0ZvckZpZWxkSWQoZmllbGRJZDogRmllbGRJZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzT2JzZXJ2YWJsZTxSZWFkb25seUFycmF5PEZpbHRlclR5cGVNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5vbkZpbHRlclR5cGVzKHN0cnVjdHVyZUlkKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKG1hcDogRmlsdGVyVHlwZUNvbGxlY3Rpb25Nb2RlbCkgPT4ge1xuXHRcdFx0XHRcdFx0ICAgcmV0dXJuIG1hcC5nZXRGaWx0ZXJUeXBlcyhmaWVsZElkKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0b25BY3RpdmVGaWx0ZXJzKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8UmVhZG9ubHlBcnJheTxBY3RpdmVGaWx0ZXJNb2RlbD4+IHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmVGaWx0ZXJBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdGZpbmRGaWx0ZXJzKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IE9wdGlvbmFsPFJlYWRvbmx5QXJyYXk8QWN0aXZlRmlsdGVyTW9kZWw+PiB7XG5cdFx0cmV0dXJuIHRoaXMuYWN0aXZlRmlsdGVyQXJjaGl2ZS5maW5kKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uVW5pcXVlVmFsdWVzKHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEhlcm1lc09ic2VydmFibGU8VW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWw+IHtcblx0XHRyZXR1cm4gdGhpcy51bmlxdWVWYWx1ZXNBcmNoaXZlLm9uKHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdG9uY2VGaWx0ZXJUeXBlSWQoZmllbGRJZDogRmllbGRJZCwgZmlsdGVyVHlwZU5hbWU6IHN0cmluZywgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogSGVybWVzU2luZ2xlPE9wdGlvbmFsPEZpbHRlclR5cGVJZD4+IHtcblx0XHRyZXR1cm4gc2luZ2xlRnJvbU9ic2VydmFibGUoXG5cdFx0XHR0aGlzLm9uRmlsdGVyVHlwZXMoc3RydWN0dXJlSWQpXG5cdFx0XHRcdC5waXBlKFxuXHRcdFx0XHRcdGhlcm1lc01hcCgobWFwOiBGaWx0ZXJUeXBlQ29sbGVjdGlvbk1vZGVsKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBmaWx0ZXJUeXBlcyA9IG1hcC5nZXRGaWx0ZXJUeXBlcyhmaWVsZElkKTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZmlsdGVyVHlwZSA9IGZpbHRlclR5cGVzLmZpbmQoKGZpZWxkVHlwZSkgPT4gZmllbGRUeXBlLmdldE5hbWUoKSA9PT0gZmlsdGVyVHlwZU5hbWUpO1xuXG5cdFx0XHRcdFx0XHRpZiAoZmlsdGVyVHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBPcHRpb25hbC5lbXB0eSgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIE9wdGlvbmFsLm9mKGZpbHRlclR5cGUuZ2V0SWQoKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0KVxuXHRcdCk7XG5cblx0fVxuXG59XG4iXX0=