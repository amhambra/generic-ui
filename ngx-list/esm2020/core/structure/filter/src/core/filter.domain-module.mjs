import { ToggleFilterCommandHandler } from './toggle/toggle-filter.command-handler';
import { AddFilterCommandHandler } from './add/add-filter.command-handler';
import { RemoveAllFiltersCommandHandler } from './remove-all/remove-all-filters.command-handler';
import { RemoveFilterCommandHandler } from './remove/remove-filter.command-handler';
import { SetConfigFilterCommandHandler } from './config/set-config-filter.command-handler';
import { SetConfigQuickFilterCommandHandler } from './quick/set-config-quick-filter.command-handler';
import { FilterManagerFactory } from '../domain/filter.manager-factory';
import { ConfigQuickFilterSetEventHandler } from '../core-read/quick-filter/config-quick-filter-set.event-handler';
import { ConfigFilterSetEventHandler } from '../core-read/config/config-filter-set.event-handler';
import { FilterTypeConfigFilterSetEventHandler } from '../core-read/type/filter-type.config-filter-set.event-handler';
import { ActiveFiltersSetEventHandler } from '../core-read/active/active-filters-set.event-handler';
import { UniqueFilterCalculatedEventHandler } from '../core-read/unique/unique-filter-calculated.event-handler';
import { FilterTypeFieldsInitedEventHandler } from './type/init/filter-type.fields-inited.event-handler';
import { UnselectAllUniqueFilterCommandHandler } from './unique/unselect-all/unselect-all-unique-filter.command-handler';
import { UnselectUniqueFilterCommandHandler } from './unique/unselect/unselect-unique-filter.command-handler';
import { SelectAllUniqueFilterCommandHandler } from './unique/select-all/select-all-unique-filter.command-handler';
import { SelectUniqueFilterCommandHandler } from './unique/select/select-unique-filter.command-handler';
import { structureKey } from '../../../structure-core/src/api/global/structre.key';
import { FilterDispatcher } from './filter.dispatcher';
export class FilterDomainModule {
    defineAggregate() {
        return null;
    }
    registerKey() {
        return structureKey;
    }
    registerProviders(container) {
        container.provide(FilterManagerFactory);
        container.provide(FilterDispatcher);
    }
    registerCommandHandlers() {
        return [
            SetConfigFilterCommandHandler,
            SetConfigQuickFilterCommandHandler,
            ToggleFilterCommandHandler,
            AddFilterCommandHandler,
            RemoveAllFiltersCommandHandler,
            RemoveFilterCommandHandler,
            SelectUniqueFilterCommandHandler,
            SelectAllUniqueFilterCommandHandler,
            UnselectUniqueFilterCommandHandler,
            UnselectAllUniqueFilterCommandHandler
        ];
    }
    registerDomainEventHandler() {
        return [
            ConfigQuickFilterSetEventHandler,
            ConfigFilterSetEventHandler,
            FilterTypeConfigFilterSetEventHandler,
            ActiveFiltersSetEventHandler,
            UniqueFilterCalculatedEventHandler,
            FilterTypeFieldsInitedEventHandler
        ];
    }
    registerMultiDomainEventHandler() {
        return [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvY29yZS9maWx0ZXIuZG9tYWluLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNwRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNwRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRixPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNyRyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNsRyxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUN0SCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNwRyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUNoSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUN6RyxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxrRUFBa0UsQ0FBQztBQUN6SCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUM5RyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUNuSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUN4RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDbkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQsTUFBTSxPQUFPLGtCQUFrQjtJQUU5QixlQUFlO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsV0FBVztRQUNWLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxTQUFvQjtRQUNyQyxTQUFTLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDeEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCx1QkFBdUI7UUFDdEIsT0FBTztZQUNOLDZCQUE2QjtZQUM3QixrQ0FBa0M7WUFDbEMsMEJBQTBCO1lBQzFCLHVCQUF1QjtZQUN2Qiw4QkFBOEI7WUFDOUIsMEJBQTBCO1lBQzFCLGdDQUFnQztZQUNoQyxtQ0FBbUM7WUFDbkMsa0NBQWtDO1lBQ2xDLHFDQUFxQztTQUNyQyxDQUFDO0lBQ0gsQ0FBQztJQUVELDBCQUEwQjtRQUN6QixPQUFPO1lBQ04sZ0NBQWdDO1lBQ2hDLDJCQUEyQjtZQUMzQixxQ0FBcUM7WUFDckMsNEJBQTRCO1lBQzVCLGtDQUFrQztZQUNsQyxrQ0FBa0M7U0FDbEMsQ0FBQztJQUNILENBQUM7SUFFRCwrQkFBK0I7UUFDOUIsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZ2dyZWdhdGVEZWZpbml0aW9uLCBBZ2dyZWdhdGVJZCwgQWdncmVnYXRlUm9vdCwgQ29tbWFuZCwgQ29udGFpbmVyLCBEb21haW5FdmVudCwgRG9tYWluUHJvdmlkZXJzIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcblxuaW1wb3J0IHsgVG9nZ2xlRmlsdGVyQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL3RvZ2dsZS90b2dnbGUtZmlsdGVyLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBBZGRGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vYWRkL2FkZC1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFJlbW92ZUFsbEZpbHRlcnNDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vcmVtb3ZlLWFsbC9yZW1vdmUtYWxsLWZpbHRlcnMuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFJlbW92ZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9yZW1vdmUvcmVtb3ZlLWZpbHRlci5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgU2V0Q29uZmlnRmlsdGVyQ29tbWFuZEhhbmRsZXIgfSBmcm9tICcuL2NvbmZpZy9zZXQtY29uZmlnLWZpbHRlci5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgU2V0Q29uZmlnUXVpY2tGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vcXVpY2svc2V0LWNvbmZpZy1xdWljay1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IEZpbHRlck1hbmFnZXJGYWN0b3J5IH0gZnJvbSAnLi4vZG9tYWluL2ZpbHRlci5tYW5hZ2VyLWZhY3RvcnknO1xuaW1wb3J0IHsgQ29uZmlnUXVpY2tGaWx0ZXJTZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvcXVpY2stZmlsdGVyL2NvbmZpZy1xdWljay1maWx0ZXItc2V0LmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgQ29uZmlnRmlsdGVyU2V0RXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vY29yZS1yZWFkL2NvbmZpZy9jb25maWctZmlsdGVyLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEZpbHRlclR5cGVDb25maWdGaWx0ZXJTZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvdHlwZS9maWx0ZXItdHlwZS5jb25maWctZmlsdGVyLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEFjdGl2ZUZpbHRlcnNTZXRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvYWN0aXZlL2FjdGl2ZS1maWx0ZXJzLXNldC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IFVuaXF1ZUZpbHRlckNhbGN1bGF0ZWRFdmVudEhhbmRsZXIgfSBmcm9tICcuLi9jb3JlLXJlYWQvdW5pcXVlL3VuaXF1ZS1maWx0ZXItY2FsY3VsYXRlZC5ldmVudC1oYW5kbGVyJztcbmltcG9ydCB7IEZpbHRlclR5cGVGaWVsZHNJbml0ZWRFdmVudEhhbmRsZXIgfSBmcm9tICcuL3R5cGUvaW5pdC9maWx0ZXItdHlwZS5maWVsZHMtaW5pdGVkLmV2ZW50LWhhbmRsZXInO1xuaW1wb3J0IHsgVW5zZWxlY3RBbGxVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5pcXVlL3Vuc2VsZWN0LWFsbC91bnNlbGVjdC1hbGwtdW5pcXVlLWZpbHRlci5jb21tYW5kLWhhbmRsZXInO1xuaW1wb3J0IHsgVW5zZWxlY3RVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vdW5pcXVlL3Vuc2VsZWN0L3Vuc2VsZWN0LXVuaXF1ZS1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdEFsbFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi91bmlxdWUvc2VsZWN0LWFsbC9zZWxlY3QtYWxsLXVuaXF1ZS1maWx0ZXIuY29tbWFuZC1oYW5kbGVyJztcbmltcG9ydCB7IFNlbGVjdFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi91bmlxdWUvc2VsZWN0L3NlbGVjdC11bmlxdWUtZmlsdGVyLmNvbW1hbmQtaGFuZGxlcic7XG5pbXBvcnQgeyBzdHJ1Y3R1cmVLZXkgfSBmcm9tICcuLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL2dsb2JhbC9zdHJ1Y3RyZS5rZXknO1xuaW1wb3J0IHsgRmlsdGVyRGlzcGF0Y2hlciB9IGZyb20gJy4vZmlsdGVyLmRpc3BhdGNoZXInO1xuXG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJEb21haW5Nb2R1bGUgaW1wbGVtZW50cyBEb21haW5Qcm92aWRlcnMge1xuXG5cdGRlZmluZUFnZ3JlZ2F0ZSgpOiBBZ2dyZWdhdGVEZWZpbml0aW9uPGFueSwgYW55LCBhbnk+IHwgbnVsbCB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZWdpc3RlcktleSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBzdHJ1Y3R1cmVLZXk7XG5cdH1cblxuXHRyZWdpc3RlclByb3ZpZGVycyhjb250YWluZXI6IENvbnRhaW5lcik6IHZvaWQge1xuXHRcdGNvbnRhaW5lci5wcm92aWRlKEZpbHRlck1hbmFnZXJGYWN0b3J5KTtcblx0XHRjb250YWluZXIucHJvdmlkZShGaWx0ZXJEaXNwYXRjaGVyKTtcblx0fVxuXG5cdHJlZ2lzdGVyQ29tbWFuZEhhbmRsZXJzPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgQSBleHRlbmRzIEFnZ3JlZ2F0ZVJvb3Q8ST4sIEMgZXh0ZW5kcyBDb21tYW5kPEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0U2V0Q29uZmlnRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRTZXRDb25maWdRdWlja0ZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0VG9nZ2xlRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRBZGRGaWx0ZXJDb21tYW5kSGFuZGxlcixcblx0XHRcdFJlbW92ZUFsbEZpbHRlcnNDb21tYW5kSGFuZGxlcixcblx0XHRcdFJlbW92ZUZpbHRlckNvbW1hbmRIYW5kbGVyLFxuXHRcdFx0U2VsZWN0VW5pcXVlRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRTZWxlY3RBbGxVbmlxdWVGaWx0ZXJDb21tYW5kSGFuZGxlcixcblx0XHRcdFVuc2VsZWN0VW5pcXVlRmlsdGVyQ29tbWFuZEhhbmRsZXIsXG5cdFx0XHRVbnNlbGVjdEFsbFVuaXF1ZUZpbHRlckNvbW1hbmRIYW5kbGVyXG5cdFx0XTtcblx0fVxuXG5cdHJlZ2lzdGVyRG9tYWluRXZlbnRIYW5kbGVyPEkgZXh0ZW5kcyBBZ2dyZWdhdGVJZCwgRSBleHRlbmRzIERvbWFpbkV2ZW50PEk+PigpOiBBcnJheTxhbnk+IHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0Q29uZmlnUXVpY2tGaWx0ZXJTZXRFdmVudEhhbmRsZXIsXG5cdFx0XHRDb25maWdGaWx0ZXJTZXRFdmVudEhhbmRsZXIsXG5cdFx0XHRGaWx0ZXJUeXBlQ29uZmlnRmlsdGVyU2V0RXZlbnRIYW5kbGVyLFxuXHRcdFx0QWN0aXZlRmlsdGVyc1NldEV2ZW50SGFuZGxlcixcblx0XHRcdFVuaXF1ZUZpbHRlckNhbGN1bGF0ZWRFdmVudEhhbmRsZXIsXG5cdFx0XHRGaWx0ZXJUeXBlRmllbGRzSW5pdGVkRXZlbnRIYW5kbGVyXG5cdFx0XTtcblx0fVxuXG5cdHJlZ2lzdGVyTXVsdGlEb21haW5FdmVudEhhbmRsZXI8SSBleHRlbmRzIEFnZ3JlZ2F0ZUlkLCBFIGV4dGVuZHMgRG9tYWluRXZlbnQ8ST4+KCk6IEFycmF5PGFueT4ge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXG59XG4iXX0=