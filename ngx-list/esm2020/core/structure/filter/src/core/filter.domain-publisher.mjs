import { FilterPublisher } from '../api/filter.publisher';
import { FilterDispatcher } from './filter.dispatcher';
export class FilterDomainPublisher extends FilterPublisher {
    constructor(filterDispatcher) {
        super();
        this.filterDispatcher = filterDispatcher;
    }
    setConfig(config, structureId) {
        this.filterDispatcher.setConfig(config, structureId);
    }
    add(fieldId, filterTypeId, value, structureId) {
        this.filterDispatcher.add(fieldId, filterTypeId, value, structureId);
    }
    removeAll(structureId) {
        this.filterDispatcher.removeAll(structureId);
    }
    remove(filterId, structureId) {
        this.filterDispatcher.remove(filterId, structureId);
    }
    selectAllUniqueFilter(fieldId, structureId) {
        this.filterDispatcher.selectAllUniqueFilter(fieldId, structureId);
    }
    unselectAllUniqueFilter(fieldId, structureId) {
        this.filterDispatcher.unselectAllUniqueFilter(fieldId, structureId);
    }
    selectUniqueFilter(fieldId, uniqueValueId, structureId) {
        this.filterDispatcher.selectUniqueFilter(fieldId, uniqueValueId, structureId);
    }
    unselectUniqueFilter(fieldId, uniqueValueId, structureId) {
        this.filterDispatcher.unselectUniqueFilter(fieldId, uniqueValueId, structureId);
    }
}
FilterDomainPublisher.services = [FilterDispatcher];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRvbWFpbi1wdWJsaXNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9zcmMvY29yZS9maWx0ZXIuZG9tYWluLXB1Ymxpc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFPMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWU7SUFFekQsWUFBNkIsZ0JBQWtDO1FBQzlELEtBQUssRUFBRSxDQUFDO1FBRG9CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFFL0QsQ0FBQztJQUlELFNBQVMsQ0FBQyxNQUFvQixFQUFFLFdBQXdCO1FBQ3ZELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZ0IsRUFBRSxZQUEwQixFQUFFLEtBQVUsRUFBRSxXQUF3QjtRQUNyRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxTQUFTLENBQUMsV0FBd0I7UUFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQWtCLEVBQUUsV0FBd0I7UUFDbEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELHFCQUFxQixDQUFDLE9BQWdCLEVBQUUsV0FBd0I7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsdUJBQXVCLENBQUMsT0FBZ0IsRUFBRSxXQUF3QjtRQUNqRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxPQUFnQixFQUFFLGFBQTRCLEVBQUUsV0FBd0I7UUFDMUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELG9CQUFvQixDQUFDLE9BQWdCLEVBQUUsYUFBNEIsRUFBRSxXQUF3QjtRQUM1RixJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNqRixDQUFDOztBQWhDZSw4QkFBUSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbHRlclB1Ymxpc2hlciB9IGZyb20gJy4uL2FwaS9maWx0ZXIucHVibGlzaGVyJztcbmltcG9ydCB7IEZpbHRlckNvbmZpZyB9IGZyb20gJy4uL2FwaS9jb25maWcvZmlsdGVyLmNvbmZpZyc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVJZCB9IGZyb20gJy4uLy4uLy4uL3N0cnVjdHVyZS1jb3JlL3NyYy9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBGaWVsZElkIH0gZnJvbSAnLi4vLi4vLi4vZmllbGQvc3JjL2RvbWFpbi9maWVsZC9maWVsZC5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJUeXBlSWQgfSBmcm9tICcuLi9kb21haW4vdHlwZS9maWx0ZXItdHlwZS5pZCc7XG5pbXBvcnQgeyBGaWx0ZXJJZCB9IGZyb20gJy4uL2FwaS9pZC9maWx0ZXIuaWQnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVJZCB9IGZyb20gJy4uL2RvbWFpbi91bmlxdWUvdW5pcXVlLXZhbHVlLWlkJztcbmltcG9ydCB7IEZpbHRlckRpc3BhdGNoZXIgfSBmcm9tICcuL2ZpbHRlci5kaXNwYXRjaGVyJztcblxuXG5leHBvcnQgY2xhc3MgRmlsdGVyRG9tYWluUHVibGlzaGVyIGV4dGVuZHMgRmlsdGVyUHVibGlzaGVyIHtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZpbHRlckRpc3BhdGNoZXI6IEZpbHRlckRpc3BhdGNoZXIpIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0c3RhdGljIHJlYWRvbmx5IHNlcnZpY2VzID0gW0ZpbHRlckRpc3BhdGNoZXJdO1xuXG5cdHNldENvbmZpZyhjb25maWc6IEZpbHRlckNvbmZpZywgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLnNldENvbmZpZyhjb25maWcsIHN0cnVjdHVyZUlkKTtcblx0fVxuXG5cdGFkZChmaWVsZElkOiBGaWVsZElkLCBmaWx0ZXJUeXBlSWQ6IEZpbHRlclR5cGVJZCwgdmFsdWU6IGFueSwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLmFkZChmaWVsZElkLCBmaWx0ZXJUeXBlSWQsIHZhbHVlLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRyZW1vdmVBbGwoc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLnJlbW92ZUFsbChzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRyZW1vdmUoZmlsdGVySWQ6IEZpbHRlcklkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIucmVtb3ZlKGZpbHRlcklkLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHRzZWxlY3RBbGxVbmlxdWVGaWx0ZXIoZmllbGRJZDogRmllbGRJZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLnNlbGVjdEFsbFVuaXF1ZUZpbHRlcihmaWVsZElkLCBzdHJ1Y3R1cmVJZCk7XG5cdH1cblxuXHR1bnNlbGVjdEFsbFVuaXF1ZUZpbHRlcihmaWVsZElkOiBGaWVsZElkLCBzdHJ1Y3R1cmVJZDogU3RydWN0dXJlSWQpOiB2b2lkIHtcblx0XHR0aGlzLmZpbHRlckRpc3BhdGNoZXIudW5zZWxlY3RBbGxVbmlxdWVGaWx0ZXIoZmllbGRJZCwgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0c2VsZWN0VW5pcXVlRmlsdGVyKGZpZWxkSWQ6IEZpZWxkSWQsIHVuaXF1ZVZhbHVlSWQ6IFVuaXF1ZVZhbHVlSWQsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IHZvaWQge1xuXHRcdHRoaXMuZmlsdGVyRGlzcGF0Y2hlci5zZWxlY3RVbmlxdWVGaWx0ZXIoZmllbGRJZCwgdW5pcXVlVmFsdWVJZCwgc3RydWN0dXJlSWQpO1xuXHR9XG5cblx0dW5zZWxlY3RVbmlxdWVGaWx0ZXIoZmllbGRJZDogRmllbGRJZCwgdW5pcXVlVmFsdWVJZDogVW5pcXVlVmFsdWVJZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogdm9pZCB7XG5cdFx0dGhpcy5maWx0ZXJEaXNwYXRjaGVyLnVuc2VsZWN0VW5pcXVlRmlsdGVyKGZpZWxkSWQsIHVuaXF1ZVZhbHVlSWQsIHN0cnVjdHVyZUlkKTtcblx0fVxufVxuIl19