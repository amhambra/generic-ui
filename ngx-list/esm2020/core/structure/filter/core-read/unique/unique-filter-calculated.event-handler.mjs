import { UniqueFilterCalculatedEvent } from '../../core/unique/calculate/unique-filter-calculated.event';
import { UniqueValueCollectionArchive } from './unique-value-collection.archive';
import { UniqueValueCollectionModel } from '../../api/unique/unique-value-collection.model';
import { UniqueValueModel } from '../../api/unique/unique-value.model';
export class UniqueFilterCalculatedEventHandler {
    constructor(uniqueValuesRepository) {
        this.uniqueValuesRepository = uniqueValuesRepository;
    }
    forEvent() {
        return UniqueFilterCalculatedEvent;
    }
    handle(calculatedEvent) {
        if (calculatedEvent.ofMessageType('UniqueFilterCalculatedEvent')) {
            const uvRM = new Map();
            calculatedEvent.getUniqueValues()
                .forEach((values, key) => {
                const valuesRM = values.map((uv) => {
                    return new UniqueValueModel(uv.getId(), uv.getDisplayValue(), uv.isEnabled());
                });
                uvRM.set(key, valuesRM);
            });
            const uniqueValues = new UniqueValueCollectionModel(uvRM);
            this.uniqueValuesRepository.next(calculatedEvent.getAggregateId(), uniqueValues);
        }
    }
}
UniqueFilterCalculatedEventHandler.services = [UniqueValueCollectionArchive];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pcXVlLWZpbHRlci1jYWxjdWxhdGVkLmV2ZW50LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL2ZpbHRlci9jb3JlLXJlYWQvdW5pcXVlL3VuaXF1ZS1maWx0ZXItY2FsY3VsYXRlZC5ldmVudC1oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRTVGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBR3ZFLE1BQU0sT0FBTyxrQ0FBa0M7SUFFOUMsWUFBNkIsc0JBQW9EO1FBQXBELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBOEI7SUFDakYsQ0FBQztJQUlELFFBQVE7UUFDUCxPQUFPLDJCQUEyQixDQUFDO0lBQ3BDLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBNEM7UUFFbEQsSUFBSSxlQUFlLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLEVBQUU7WUFFakUsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUV2QixlQUFlLENBQUMsZUFBZSxFQUFFO2lCQUMxQixPQUFPLENBQUMsQ0FBQyxNQUEwQixFQUFFLEdBQVcsRUFBRSxFQUFFO2dCQUVwRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBZSxFQUFFLEVBQUU7b0JBQy9DLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRSxDQUFDLENBQUMsQ0FBQztnQkFFSCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQztZQUdULE1BQU0sWUFBWSxHQUFHLElBQUksMEJBQTBCLENBQ2xELElBQUksQ0FDSixDQUFDO1lBRUYsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDakY7SUFDRixDQUFDOztBQTdCZSwyQ0FBUSxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbWFpbkV2ZW50SGFuZGxlciwgRG9tYWluRXZlbnRUeXBlIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcblxuaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi8uLi9zdHJ1Y3R1cmUtY29yZS9hcGkvZ2xvYmFsL3N0cnVjdHVyZS5pZCc7XG5pbXBvcnQgeyBVbmlxdWVGaWx0ZXJDYWxjdWxhdGVkRXZlbnQgfSBmcm9tICcuLi8uLi9jb3JlL3VuaXF1ZS9jYWxjdWxhdGUvdW5pcXVlLWZpbHRlci1jYWxjdWxhdGVkLmV2ZW50JztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlQ29sbGVjdGlvbkFyY2hpdmUgfSBmcm9tICcuL3VuaXF1ZS12YWx1ZS1jb2xsZWN0aW9uLmFyY2hpdmUnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWwgfSBmcm9tICcuLi8uLi9hcGkvdW5pcXVlL3VuaXF1ZS12YWx1ZS1jb2xsZWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IFVuaXF1ZVZhbHVlIH0gZnJvbSAnLi4vLi4vZG9tYWluL3VuaXF1ZS91bmlxdWUtdmFsdWUnO1xuaW1wb3J0IHsgVW5pcXVlVmFsdWVNb2RlbCB9IGZyb20gJy4uLy4uL2FwaS91bmlxdWUvdW5pcXVlLXZhbHVlLm1vZGVsJztcblxuXG5leHBvcnQgY2xhc3MgVW5pcXVlRmlsdGVyQ2FsY3VsYXRlZEV2ZW50SGFuZGxlciBpbXBsZW1lbnRzIERvbWFpbkV2ZW50SGFuZGxlcjxTdHJ1Y3R1cmVJZCwgVW5pcXVlRmlsdGVyQ2FsY3VsYXRlZEV2ZW50PiB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB1bmlxdWVWYWx1ZXNSZXBvc2l0b3J5OiBVbmlxdWVWYWx1ZUNvbGxlY3Rpb25BcmNoaXZlKSB7XG5cdH1cblxuXHRzdGF0aWMgcmVhZG9ubHkgc2VydmljZXMgPSBbVW5pcXVlVmFsdWVDb2xsZWN0aW9uQXJjaGl2ZV07XG5cblx0Zm9yRXZlbnQoKTogRG9tYWluRXZlbnRUeXBlPFVuaXF1ZUZpbHRlckNhbGN1bGF0ZWRFdmVudD4ge1xuXHRcdHJldHVybiBVbmlxdWVGaWx0ZXJDYWxjdWxhdGVkRXZlbnQ7XG5cdH1cblxuXHRoYW5kbGUoY2FsY3VsYXRlZEV2ZW50OiBVbmlxdWVGaWx0ZXJDYWxjdWxhdGVkRXZlbnQpOiB2b2lkIHtcblxuXHRcdGlmIChjYWxjdWxhdGVkRXZlbnQub2ZNZXNzYWdlVHlwZSgnVW5pcXVlRmlsdGVyQ2FsY3VsYXRlZEV2ZW50JykpIHtcblxuXHRcdFx0Y29uc3QgdXZSTSA9IG5ldyBNYXAoKTtcblxuXHRcdFx0Y2FsY3VsYXRlZEV2ZW50LmdldFVuaXF1ZVZhbHVlcygpXG5cdFx0XHRcdFx0XHQgICAuZm9yRWFjaCgodmFsdWVzOiBBcnJheTxVbmlxdWVWYWx1ZT4sIGtleTogc3RyaW5nKSA9PiB7XG5cblx0XHRcdFx0XHRcdFx0ICAgY29uc3QgdmFsdWVzUk0gPSB2YWx1ZXMubWFwKCh1djogVW5pcXVlVmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdFx0XHQgICByZXR1cm4gbmV3IFVuaXF1ZVZhbHVlTW9kZWwodXYuZ2V0SWQoKSwgdXYuZ2V0RGlzcGxheVZhbHVlKCksIHV2LmlzRW5hYmxlZCgpKTtcblx0XHRcdFx0XHRcdFx0ICAgfSk7XG5cblx0XHRcdFx0XHRcdFx0ICAgdXZSTS5zZXQoa2V5LCB2YWx1ZXNSTSk7XG5cdFx0XHRcdFx0XHQgICB9KTtcblxuXG5cdFx0XHRjb25zdCB1bmlxdWVWYWx1ZXMgPSBuZXcgVW5pcXVlVmFsdWVDb2xsZWN0aW9uTW9kZWwoXG5cdFx0XHRcdHV2Uk1cblx0XHRcdCk7XG5cblx0XHRcdHRoaXMudW5pcXVlVmFsdWVzUmVwb3NpdG9yeS5uZXh0KGNhbGN1bGF0ZWRFdmVudC5nZXRBZ2dyZWdhdGVJZCgpLCB1bmlxdWVWYWx1ZXMpO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=