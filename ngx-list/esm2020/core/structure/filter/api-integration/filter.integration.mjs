import { CompositionWarehouse } from '../../../composition/api/composition.warehouse';
import { hermesFilter, hermesMap, hermesSwitchMap, hermesTake } from '@generic-ui/hermes';
import { FilterWarehouse } from '../api/filter.warehouse';
import { FieldId } from '../../field/domain/field/field.id';
import { FilterPublisher } from '../api/filter.publisher';
export class FilterIntegration {
    constructor(compositionWarehouse, filterCommandInvoker, filterWarehouse) {
        this.compositionWarehouse = compositionWarehouse;
        this.filterCommandInvoker = filterCommandInvoker;
        this.filterWarehouse = filterWarehouse;
    }
    findFilterTypes(columnName, compositionId, structureId) {
        let filterTypes = [];
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onFilterTypesForFieldId(new FieldId(col.columnFieldId.getId()), structureId);
        }))
            .subscribe((types) => {
            filterTypes = types.map((type) => type.getName());
        });
        return filterTypes;
    }
    findFilters(compositionId, structureId) {
        const filters = this.filterWarehouse.findFilters(structureId).getValueOrNullOrThrowError();
        const columnNames = this.compositionWarehouse.findColumnNames(compositionId);
        const obj = {};
        for (let i = 0; i < columnNames.length; i += 1) {
            obj[columnNames[i]] = filters.filter((filter) => {
                return filter.getFieldName() === columnNames[i];
            })
                .map((filter) => {
                return {
                    columnName: filter.getFieldName(),
                    filterId: filter.getFilterId().toString(),
                    type: filter.getFilterTypeName(),
                    value: filter.getValue()
                };
            });
        }
        return obj;
    }
    filter(columnName, filterType, value, compositionId, structureId) {
        this.compositionWarehouse
            .onTemplateColumns(compositionId)
            .pipe(hermesMap((cols) => {
            return cols.find((col) => {
                return col.getName() === columnName;
            });
        }), hermesFilter((col) => {
            return col !== undefined;
        }), hermesTake(1), hermesSwitchMap((col) => {
            return this.filterWarehouse
                .onceFilterTypeId(new FieldId(col.columnFieldId.getId()), filterType, structureId)
                .pipe(hermesMap((filterTypeId) => {
                return {
                    fieldId: new FieldId(col.columnFieldId.getId()),
                    filterTypeId: filterTypeId
                };
            }));
        }))
            .subscribe((params) => {
            const { fieldId, filterTypeId } = params;
            filterTypeId.ifPresent((ftId) => {
                this.filterCommandInvoker.add(fieldId, ftId, value, structureId);
            });
        });
    }
}
FilterIntegration.services = [CompositionWarehouse, FilterPublisher, FilterWarehouse];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmludGVncmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vYnVpbGQtY2xpL3Byb2plY3RzL25neC1saXN0L3NyYy9jb3JlL3N0cnVjdHVyZS9maWx0ZXIvYXBpLWludGVncmF0aW9uL2ZpbHRlci5pbnRlZ3JhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUd0RixPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFZLE1BQU0sb0JBQW9CLENBQUM7QUFDcEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTFELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNMUQsTUFBTSxPQUFPLGlCQUFpQjtJQUU3QixZQUE2QixvQkFBMEMsRUFDbkQsb0JBQXFDLEVBQ3JDLGVBQWdDO1FBRnZCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDbkQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFpQjtRQUNyQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFDcEQsQ0FBQztJQUlELGVBQWUsQ0FBQyxVQUFrQixFQUFFLGFBQTRCLEVBQUUsV0FBd0I7UUFFekYsSUFBSSxXQUFXLEdBQWtCLEVBQUUsQ0FBQztRQUVwQyxJQUFJLENBQUMsb0JBQW9CO2FBQ3ZCLGlCQUFpQixDQUFDLGFBQWEsQ0FBQzthQUNoQyxJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsSUFBNkMsRUFBRSxFQUFFO1lBQzNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQTZCLEVBQUUsRUFBRTtnQkFDbEQsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssVUFBVSxDQUFDO1lBQ3JD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QUNqRixJQUFJLENBQ0osU0FBUyxDQUFDLENBQUMsWUFBb0MsRUFBRSxFQUFFO2dCQUNsRCxPQUFPO29CQUNOLE9BQU8sRUFBRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUMvQyxZQUFZLEVBQUUsWUFBWTtpQkFDMUIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUNGLENBQUM7UUFDUixDQUFDLENBQUMsQ0FDRjthQUNBLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBRXJCLE1BQU0sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBRXpDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFrQixFQUFFLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzVCLE9BQU8sRUFDUCxJQUFJLEVBQ0osS0FBSyxFQUNMLFdBQVcsQ0FDWCxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBdEdlLDBCQUFRLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsZUFBZSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb3NpdGlvbldhcmVob3VzZSB9IGZyb20gJy4uLy4uLy4uL2NvbXBvc2l0aW9uL2FwaS9jb21wb3NpdGlvbi53YXJlaG91c2UnO1xuaW1wb3J0IHsgQ29tcG9zaXRpb25JZCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvc2l0aW9uL2FwaS9nbG9iYWwvY29tcG9zaXRpb24uaWQnO1xuaW1wb3J0IHsgQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9zaXRpb24vZG9tYWluLXJlYWQvZGVmaW5pdGlvbi9jZWxsLXRlbXBsYXRlLXdpdGgtYWNjZXNzb3InO1xuaW1wb3J0IHsgaGVybWVzRmlsdGVyLCBoZXJtZXNNYXAsIGhlcm1lc1N3aXRjaE1hcCwgaGVybWVzVGFrZSwgT3B0aW9uYWwgfSBmcm9tICdAZ2VuZXJpYy11aS9oZXJtZXMnO1xuaW1wb3J0IHsgRmlsdGVyV2FyZWhvdXNlIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi9jb3JlL2FwaS9nbG9iYWwvc3RydWN0dXJlLmlkJztcbmltcG9ydCB7IEZpZWxkSWQgfSBmcm9tICcuLi8uLi9maWVsZC9kb21haW4vZmllbGQvZmllbGQuaWQnO1xuaW1wb3J0IHsgRmlsdGVyVHlwZU1vZGVsIH0gZnJvbSAnLi4vYXBpL3R5cGUvZmlsdGVyLXR5cGUubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyUHVibGlzaGVyIH0gZnJvbSAnLi4vYXBpL2ZpbHRlci5wdWJsaXNoZXInO1xuaW1wb3J0IHsgRmlsdGVyVHlwZUlkIH0gZnJvbSAnLi4vZG9tYWluL3R5cGUvZmlsdGVyLXR5cGUuaWQnO1xuaW1wb3J0IHsgQWN0aXZlRmlsdGVyTW9kZWwgfSBmcm9tICcuLi9hcGkvYWN0aXZlL2FjdGl2ZS1maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyRm9yQ29sdW1uIH0gZnJvbSAnLi9maWx0ZXItaW50ZWdyYXRpb24uYXBpJztcblxuXG5leHBvcnQgY2xhc3MgRmlsdGVySW50ZWdyYXRpb24ge1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29tcG9zaXRpb25XYXJlaG91c2U6IENvbXBvc2l0aW9uV2FyZWhvdXNlLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGZpbHRlckNvbW1hbmRJbnZva2VyOiBGaWx0ZXJQdWJsaXNoZXIsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgZmlsdGVyV2FyZWhvdXNlOiBGaWx0ZXJXYXJlaG91c2UpIHtcblx0fVxuXG5cdHN0YXRpYyByZWFkb25seSBzZXJ2aWNlcyA9IFtDb21wb3NpdGlvbldhcmVob3VzZSwgRmlsdGVyUHVibGlzaGVyLCBGaWx0ZXJXYXJlaG91c2VdO1xuXG5cdGZpbmRGaWx0ZXJUeXBlcyhjb2x1bW5OYW1lOiBzdHJpbmcsIGNvbXBvc2l0aW9uSWQ6IENvbXBvc2l0aW9uSWQsIHN0cnVjdHVyZUlkOiBTdHJ1Y3R1cmVJZCk6IEFycmF5PHN0cmluZz4ge1xuXG5cdFx0bGV0IGZpbHRlclR5cGVzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cblx0XHR0aGlzLmNvbXBvc2l0aW9uV2FyZWhvdXNlXG5cdFx0XHQub25UZW1wbGF0ZUNvbHVtbnMoY29tcG9zaXRpb25JZClcblx0XHRcdC5waXBlKFxuXHRcdFx0XHRoZXJtZXNNYXAoKGNvbHM6IFJlYWRvbmx5QXJyYXk8Q2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yPikgPT4ge1xuXHRcdFx0XHRcdHJldHVybiBjb2xzLmZpbmQoKGNvbDogQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yKSA9PiB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29sLmdldE5hbWUoKSA9PT0gY29sdW1uTmFtZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdGhlcm1lc0ZpbHRlcigoY29sOiBDZWxsVGVtcGxhdGVXaXRoQWNjZXNzb3IpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gY29sICE9PSB1bmRlZmluZWQ7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRoZXJtZXNUYWtlKDEpLFxuXHRcdFx0XHRoZXJtZXNTd2l0Y2hNYXAoKGNvbDogQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZmlsdGVyV2FyZWhvdXNlXG5cdFx0XHRcdFx0XHRcdCAgIC5vbkZpbHRlclR5cGVzRm9yRmllbGRJZChuZXcgRmllbGRJZChjb2wuY29sdW1uRmllbGRJZC5nZXRJZCgpKSwgc3RydWN0dXJlSWQpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgodHlwZXM6IEFycmF5PEZpbHRlclR5cGVNb2RlbD4pID0+IHtcblx0XHRcdFx0ZmlsdGVyVHlwZXMgPSB0eXBlcy5tYXAoKHR5cGUpID0+IHR5cGUuZ2V0TmFtZSgpKTtcblx0XHRcdH0pO1xuXG5cdFx0cmV0dXJuIGZpbHRlclR5cGVzO1xuXHR9XG5cblx0ZmluZEZpbHRlcnMoY29tcG9zaXRpb25JZDogQ29tcG9zaXRpb25JZCwgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkKTogeyBba2V5OiBzdHJpbmddOiBSZWFkb25seUFycmF5PEZpbHRlckZvckNvbHVtbj4gfSB7XG5cblx0XHRjb25zdCBmaWx0ZXJzID0gdGhpcy5maWx0ZXJXYXJlaG91c2UuZmluZEZpbHRlcnMoc3RydWN0dXJlSWQpLmdldFZhbHVlT3JOdWxsT3JUaHJvd0Vycm9yKCk7XG5cblx0XHRjb25zdCBjb2x1bW5OYW1lcyA9IHRoaXMuY29tcG9zaXRpb25XYXJlaG91c2UuZmluZENvbHVtbk5hbWVzKGNvbXBvc2l0aW9uSWQpO1xuXG5cdFx0Y29uc3Qgb2JqID0ge307XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbk5hbWVzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0XHRvYmpbY29sdW1uTmFtZXNbaV1dID0gZmlsdGVycy5maWx0ZXIoKGZpbHRlcjogQWN0aXZlRmlsdGVyTW9kZWwpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgcmV0dXJuIGZpbHRlci5nZXRGaWVsZE5hbWUoKSA9PT0gY29sdW1uTmFtZXNbaV07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCB9KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgLm1hcCgoZmlsdGVyOiBBY3RpdmVGaWx0ZXJNb2RlbCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCByZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0IGNvbHVtbk5hbWU6IGZpbHRlci5nZXRGaWVsZE5hbWUoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCBmaWx0ZXJJZDogZmlsdGVyLmdldEZpbHRlcklkKCkudG9TdHJpbmcoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCB0eXBlOiBmaWx0ZXIuZ2V0RmlsdGVyVHlwZU5hbWUoKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCB2YWx1ZTogZmlsdGVyLmdldFZhbHVlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgfTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0IH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHRmaWx0ZXIoXG5cdFx0Y29sdW1uTmFtZTogc3RyaW5nLFxuXHRcdGZpbHRlclR5cGU6IHN0cmluZyxcblx0XHR2YWx1ZTogYW55LFxuXHRcdGNvbXBvc2l0aW9uSWQ6IENvbXBvc2l0aW9uSWQsXG5cdFx0c3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkXG5cdCk6IHZvaWQge1xuXG5cdFx0dGhpcy5jb21wb3NpdGlvbldhcmVob3VzZVxuXHRcdFx0Lm9uVGVtcGxhdGVDb2x1bW5zKGNvbXBvc2l0aW9uSWQpXG5cdFx0XHQucGlwZShcblx0XHRcdFx0aGVybWVzTWFwKChjb2xzOiBSZWFkb25seUFycmF5PENlbGxUZW1wbGF0ZVdpdGhBY2Nlc3Nvcj4pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gY29scy5maW5kKChjb2w6IENlbGxUZW1wbGF0ZVdpdGhBY2Nlc3NvcikgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbC5nZXROYW1lKCkgPT09IGNvbHVtbk5hbWU7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRoZXJtZXNGaWx0ZXIoKGNvbDogQ2VsbFRlbXBsYXRlV2l0aEFjY2Vzc29yKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbCAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0aGVybWVzVGFrZSgxKSxcblx0XHRcdFx0aGVybWVzU3dpdGNoTWFwKChjb2w6IENlbGxUZW1wbGF0ZVdpdGhBY2Nlc3NvcikgPT4ge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZmlsdGVyV2FyZWhvdXNlXG5cdFx0XHRcdFx0XHRcdCAgIC5vbmNlRmlsdGVyVHlwZUlkKG5ldyBGaWVsZElkKGNvbC5jb2x1bW5GaWVsZElkLmdldElkKCkpLCBmaWx0ZXJUeXBlLCBzdHJ1Y3R1cmVJZClcblx0XHRcdFx0XHRcdFx0ICAgLnBpcGUoXG5cdFx0XHRcdFx0XHRcdFx0ICAgaGVybWVzTWFwKChmaWx0ZXJUeXBlSWQ6IE9wdGlvbmFsPEZpbHRlclR5cGVJZD4pID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdCAgIHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCAgIGZpZWxkSWQ6IG5ldyBGaWVsZElkKGNvbC5jb2x1bW5GaWVsZElkLmdldElkKCkpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQgICBmaWx0ZXJUeXBlSWQ6IGZpbHRlclR5cGVJZFxuXHRcdFx0XHRcdFx0XHRcdFx0ICAgfTtcblx0XHRcdFx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHRcdFx0XHQgICApO1xuXHRcdFx0XHR9KVxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgocGFyYW1zKSA9PiB7XG5cblx0XHRcdFx0Y29uc3QgeyBmaWVsZElkLCBmaWx0ZXJUeXBlSWQgfSA9IHBhcmFtcztcblxuXHRcdFx0XHRmaWx0ZXJUeXBlSWQuaWZQcmVzZW50KChmdElkOiBGaWx0ZXJUeXBlSWQpID0+IHtcblx0XHRcdFx0XHR0aGlzLmZpbHRlckNvbW1hbmRJbnZva2VyLmFkZChcblx0XHRcdFx0XHRcdGZpZWxkSWQsXG5cdFx0XHRcdFx0XHRmdElkLFxuXHRcdFx0XHRcdFx0dmFsdWUsXG5cdFx0XHRcdFx0XHRzdHJ1Y3R1cmVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH1cblxufVxuIl19