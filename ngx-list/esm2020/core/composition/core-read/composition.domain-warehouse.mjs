import { CompositionReadModelRootRepository } from './composition.read-model-root-repository';
import { CompositionGroupArchive } from './group/composition-group.archive';
import { CompositionWarehouse } from '../api/composition.warehouse';
import { hermesFilter, hermesMap } from '@generic-ui/hermes';
import { ColumnHighlightArchive } from '../domain/highlight/column-highlight.archive';
export class CompositionDomainWarehouse extends CompositionWarehouse {
    constructor(compositionRepository, compositionGroupArchive, columnHighlightArchive) {
        super();
        this.compositionRepository = compositionRepository;
        this.compositionGroupArchive = compositionGroupArchive;
        this.columnHighlightArchive = columnHighlightArchive;
    }
    onWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getWidth()));
    }
    onContainerWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getContainerWidth()));
    }
    onWidthForEachColumn(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getAllColumns().map(c => c.width)));
    }
    onHeaderColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getActiveHeaderColumns()));
    }
    onAllColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getHeaderColumns()));
    }
    onSortOrder(fieldId, compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getActiveHeaderColumns()), hermesMap((columns) => {
            return columns.filter((c) => c.getFieldId().equals(fieldId));
        }), hermesFilter((columns) => {
            return columns.length > 0;
        }), hermesMap(columns => columns[0].getSortStatus()));
    }
    onTemplateColumns(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.getTemplateColumns()));
    }
    onResizeWidth(compositionId) {
        return this.compositionRepository
            .on(compositionId)
            .pipe(hermesMap((composition) => composition.isResizeWidthEnabled()));
    }
    onGroups(compositionId) {
        return this.compositionGroupArchive.on(compositionId);
    }
    onHighlightedColumn(columnId, compositionId) {
        return this.columnHighlightArchive
            .on(compositionId)
            .pipe(hermesMap((manager) => manager.isHighlighted(columnId)));
    }
    findColumnNames(compositionId) {
        let names = [];
        this.compositionRepository
            .find(compositionId)
            .ifPresent((value) => {
            names = value.getAllColumns().map((cd) => cd.getName());
        });
        return names;
    }
}
CompositionDomainWarehouse.services = [
    CompositionReadModelRootRepository,
    CompositionGroupArchive,
    ColumnHighlightArchive
];
//# sourceMappingURL=data:application/json;base64,