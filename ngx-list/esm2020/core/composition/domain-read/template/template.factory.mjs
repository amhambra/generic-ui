import { Injector } from '@angular/core';
export class TemplateFactory {
    constructor(templatesComponentDefinition, componentFactoryResolver) {
        this.templatesComponentDefinition = templatesComponentDefinition;
        this.componentFactoryResolver = componentFactoryResolver;
        this.templates = new Map();
        this.templatesComponent = null;
        this.createTemplatesComponent();
    }
    getTemplates() {
        return this.templates;
    }
    destroy() {
        if (this.templatesComponent) {
            this.templatesComponent.destroy();
            this.templatesComponent = null;
        }
    }
    createTemplatesComponent() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.templatesComponentDefinition);
        const injector = Injector.create({ providers: [] });
        this.templatesComponent = componentFactory.create(injector);
        this.generateMap();
    }
    generateMap() {
        this.generateMapKeys()
            .forEach((type) => {
            this.findAndSetTemplate(type);
        });
    }
    ;
    findAndSetTemplate(dt) {
        const template = this.templatesComponent.instance.getTemplate(dt);
        this.templates.set(dt, template);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2J1aWxkLWNsaS9wcm9qZWN0cy9uZ3gtbGlzdC9zcmMvY29yZS9jb21wb3NpdGlvbi9kb21haW4tcmVhZC90ZW1wbGF0ZS90ZW1wbGF0ZS5mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBMEMsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQU1wRyxNQUFNLE9BQWdCLGVBQWU7SUFNcEMsWUFBdUMsNEJBQXFDLEVBQ3BELHdCQUFrRDtRQURuQyxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQVM7UUFDcEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUxsRSxjQUFTLEdBQStDLElBQUksR0FBRyxFQUF5QyxDQUFDO1FBRXpHLHVCQUFrQixHQUFvQixJQUFJLENBQUM7UUFJbEQsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUlELFlBQVk7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDdkIsQ0FBQztJQUVELE9BQU87UUFDTixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFFTyx3QkFBd0I7UUFFL0IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFbEgsTUFBTSxRQUFRLEdBQWEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTyxXQUFXO1FBQ2xCLElBQUksQ0FBQyxlQUFlLEVBQUU7YUFDcEIsT0FBTyxDQUFDLENBQUMsSUFBeUIsRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0lBRU0sa0JBQWtCLENBQUMsRUFBdUI7UUFFakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBJbmplY3RvciwgVGVtcGxhdGVSZWYsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbXBsYXRlc0NvbXBvbmVudCB9IGZyb20gJy4vdGVtcGxhdGVzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uLy4uLy4uL3N0cnVjdHVyZS9maWVsZC9kb21haW4vZmllbGQvZGF0YS9kYXRhLXR5cGUnO1xuaW1wb3J0IHsgQ2VsbFZpZXcgfSBmcm9tICcuLi8uLi9kb21haW4vY29sdW1uL2NlbGwtdmlldyc7XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRlbXBsYXRlRmFjdG9yeTxUIGV4dGVuZHMgVGVtcGxhdGVzQ29tcG9uZW50PiB7XG5cblx0cHJpdmF0ZSB0ZW1wbGF0ZXM6IE1hcDxEYXRhVHlwZSB8IENlbGxWaWV3LCBUZW1wbGF0ZVJlZjxhbnk+PiA9IG5ldyBNYXA8RGF0YVR5cGUgfCBDZWxsVmlldywgVGVtcGxhdGVSZWY8YW55Pj4oKTtcblxuXHRwcml2YXRlIHRlbXBsYXRlc0NvbXBvbmVudDogQ29tcG9uZW50UmVmPFQ+ID0gbnVsbDtcblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZXNDb21wb25lbnREZWZpbml0aW9uOiBUeXBlPFQ+LFxuXHRcdFx0XHRcdFx0ICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XG5cdFx0dGhpcy5jcmVhdGVUZW1wbGF0ZXNDb21wb25lbnQoKTtcblx0fVxuXG5cdGFic3RyYWN0IGdlbmVyYXRlTWFwS2V5cygpOiBBcnJheTxEYXRhVHlwZSB8IENlbGxWaWV3PjtcblxuXHRnZXRUZW1wbGF0ZXMoKTogTWFwPERhdGFUeXBlIHwgQ2VsbFZpZXcsIFRlbXBsYXRlUmVmPGFueT4+IHtcblx0XHRyZXR1cm4gdGhpcy50ZW1wbGF0ZXM7XG5cdH1cblxuXHRkZXN0cm95KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLnRlbXBsYXRlc0NvbXBvbmVudCkge1xuXHRcdFx0dGhpcy50ZW1wbGF0ZXNDb21wb25lbnQuZGVzdHJveSgpO1xuXHRcdFx0dGhpcy50ZW1wbGF0ZXNDb21wb25lbnQgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlVGVtcGxhdGVzQ29tcG9uZW50KCk6IHZvaWQge1xuXG5cdFx0Y29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHRoaXMudGVtcGxhdGVzQ29tcG9uZW50RGVmaW5pdGlvbik7XG5cblx0XHRjb25zdCBpbmplY3RvcjogSW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoeyBwcm92aWRlcnM6IFtdIH0pO1xuXG5cdFx0dGhpcy50ZW1wbGF0ZXNDb21wb25lbnQgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZShpbmplY3Rvcik7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWFwKCk7XG5cdH1cblxuXHRwcml2YXRlIGdlbmVyYXRlTWFwKCk6IHZvaWQge1xuXHRcdHRoaXMuZ2VuZXJhdGVNYXBLZXlzKClcblx0XHRcdC5mb3JFYWNoKCh0eXBlOiBEYXRhVHlwZSB8IENlbGxWaWV3KSA9PiB7XG5cdFx0XHRcdHRoaXMuZmluZEFuZFNldFRlbXBsYXRlKHR5cGUpO1xuXHRcdFx0fSk7XG5cdH07XG5cblx0cHJpdmF0ZSBmaW5kQW5kU2V0VGVtcGxhdGUoZHQ6IERhdGFUeXBlIHwgQ2VsbFZpZXcpOiB2b2lkIHtcblxuXHRcdGNvbnN0IHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZXNDb21wb25lbnQuaW5zdGFuY2UuZ2V0VGVtcGxhdGUoZHQpO1xuXG5cdFx0dGhpcy50ZW1wbGF0ZXMuc2V0KGR0LCB0ZW1wbGF0ZSk7XG5cdH1cblxufVxuIl19