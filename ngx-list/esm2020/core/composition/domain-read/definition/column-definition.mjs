import { ReadModelEntity } from '@generic-ui/hermes';
import { SortOrder } from '../../domain/column/sort/sort-order';
import { CellTemplateWithContext } from './cell-template-with-context';
import { CellContext } from './cell-context';
import { FieldId } from '../../../structure/field/domain/field/field.id';
import { CellTemplateWithAccessor } from './cell-template-with-accessor';
import { CellValue } from './cell-value';
export class ColumnDefinition extends ReadModelEntity {
    constructor(field, columnDefinitionId, // REFACTOR Id first argument
    name, enabled, type, // REFACTOR
    view, // REFACTOR
    align, // REFACTOR
    header, cellEditingEnabled, cssClasses, styles, sort = SortOrder.NONE, sortable = true) {
        super(columnDefinitionId);
        this.name = name;
        this.type = type;
        this.view = view;
        this.align = align;
        this.cssClasses = cssClasses;
        this.styles = styles;
        this.sortable = true;
        this.field = field;
        this.columnDefinitionId = columnDefinitionId;
        this.enabled = enabled;
        this.header = header;
        this.cellEditingEnabled = cellEditingEnabled;
        this.sortStatus = sort;
        this.sortable = sortable;
    }
    getName() {
        return this.name;
    }
    isEnabled() {
        return this.enabled;
    }
    setHeader(header) {
        this.header = header;
    }
    setField(field) {
        this.field = field;
    }
    setTemplateFunction(templateFun) {
        this.templateFunction = templateFun;
    }
    setFormatterFunction(formatter) {
        this.formatterFunction = formatter;
    }
    toHeaderCellTemplateWithContext(index) {
        const header = this.header || '';
        let headerCellContext;
        if (typeof header === 'string') {
            headerCellContext = new CellContext(CellValue.text(header));
        }
        else if (typeof header === 'function') {
            headerCellContext = new CellContext(CellValue.text(header(index)));
        }
        const fieldId = new FieldId(this.field.getId().getId());
        return new CellTemplateWithContext(this.headerTemplate, this.editTemplate, headerCellContext, this.width, fieldId, this.columnDefinitionId, this.sortStatus, this.enabled, this.cssClasses, this.styles, this.sortable, this.align);
    }
    toContentCellTemplateWithAccessor() {
        const accessor = (entity) => {
            return this.field.getAccessor()(entity);
        }, searchAccessor = (entity) => {
            return this.field.getSearchAccessor()(entity);
        };
        return new CellTemplateWithAccessor(this.columnDefinitionId, this.name, this.cellTemplate, this.editTemplate, true, this.templateFunction, this.formatterFunction, accessor, searchAccessor, this.width, this.field.getId(), this.align, this.cellEditingEnabled, this.type, this.view);
    }
}
//# sourceMappingURL=data:application/json;base64,