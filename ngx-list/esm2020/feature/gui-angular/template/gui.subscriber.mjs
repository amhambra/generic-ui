import { hermesDistinctUntilChanged, HermesReplaySubject, hermesTakeUntil } from '@generic-ui/hermes';
export class GuiSubscriber {
    constructor() {
        this.destroy$ = new HermesReplaySubject(1);
    }
    subscribe(obs$, next) {
        if (this.subscription !== undefined) {
            this.subscription.unsubscribe();
        }
        this.subscription =
            obs$
                .pipe(hermesDistinctUntilChanged(), hermesTakeUntil(this.destroy$))
                .subscribe((v) => next(v), (error) => this.onError(error), () => this.onComplete());
    }
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onError(_error) {
    }
    onComplete() {
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpLnN1YnNjcmliZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2ZlYXR1cmUvZ3VpLWFuZ3VsYXIvdGVtcGxhdGUvZ3VpLnN1YnNjcmliZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFvQixtQkFBbUIsRUFBc0IsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFNUksTUFBTSxPQUFPLGFBQWE7SUFBMUI7UUFFa0IsYUFBUSxHQUFHLElBQUksbUJBQW1CLENBQU8sQ0FBQyxDQUFDLENBQUM7SUF1QzlELENBQUM7SUFuQ0EsU0FBUyxDQUNSLElBQTJCLEVBQzNCLElBQXNCO1FBR3RCLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNoQztRQUVELElBQUksQ0FBQyxZQUFZO1lBQ2hCLElBQUk7aUJBQ0YsSUFBSSxDQUNKLDBCQUEwQixFQUFFLEVBQzVCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzlCO2lCQUNBLFNBQVMsQ0FDVCxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNuQixDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDbkMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUN2QixDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU87UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUFXO0lBRW5CLENBQUM7SUFFRCxVQUFVO0lBRVYsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGVybWVzRGlzdGluY3RVbnRpbENoYW5nZWQsIEhlcm1lc09ic2VydmFibGUsIEhlcm1lc1JlcGxheVN1YmplY3QsIEhlcm1lc1N1YnNjcmlwdGlvbiwgaGVybWVzVGFrZVVudGlsIH0gZnJvbSAnQGdlbmVyaWMtdWkvaGVybWVzJztcblxuZXhwb3J0IGNsYXNzIEd1aVN1YnNjcmliZXIge1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgSGVybWVzUmVwbGF5U3ViamVjdDx2b2lkPigxKTtcblxuXHRwcml2YXRlIHN1YnNjcmlwdGlvbjogSGVybWVzU3Vic2NyaXB0aW9uO1xuXG5cdHN1YnNjcmliZShcblx0XHRvYnMkOiBIZXJtZXNPYnNlcnZhYmxlPGFueT4sXG5cdFx0bmV4dDogKHY6IGFueSkgPT4gdm9pZFxuXHQpOiB2b2lkIHtcblxuXHRcdGlmICh0aGlzLnN1YnNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3Vic2NyaXB0aW9uID1cblx0XHRcdG9icyRcblx0XHRcdFx0LnBpcGUoXG5cdFx0XHRcdFx0aGVybWVzRGlzdGluY3RVbnRpbENoYW5nZWQoKSxcblx0XHRcdFx0XHRoZXJtZXNUYWtlVW50aWwodGhpcy5kZXN0cm95JClcblx0XHRcdFx0KVxuXHRcdFx0XHQuc3Vic2NyaWJlKFxuXHRcdFx0XHRcdCh2OiBhbnkpID0+IG5leHQodiksXG5cdFx0XHRcdFx0KGVycm9yOiBhbnkpID0+IHRoaXMub25FcnJvcihlcnJvciksXG5cdFx0XHRcdFx0KCkgPT4gdGhpcy5vbkNvbXBsZXRlKClcblx0XHRcdFx0KTtcblx0fVxuXG5cdGRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5kZXN0cm95JC5uZXh0KCk7XG5cdFx0dGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xuXHR9XG5cblx0b25FcnJvcihfZXJyb3I6IGFueSk6IHZvaWQge1xuXG5cdH1cblxuXHRvbkNvbXBsZXRlKCk6IHZvaWQge1xuXG5cdH1cblxufVxuIl19