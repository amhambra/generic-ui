var _a;
import { StyleName } from './style-name';
import { Modifier } from '../core/modifier';
export class StyleModifier extends Modifier {
    constructor(htmlElement) {
        super(htmlElement);
        this.htmlElement = htmlElement;
    }
    createModifier(htmlElement) {
        return new StyleModifier.StyleModifier(htmlElement);
    }
}
// eslint-disable-next-line
StyleModifier.StyleModifier = (_a = class {
        constructor(htmlElement) {
            this.htmlElement = htmlElement;
        }
        setStyleByName(name, value) {
            this.set(name, value);
        }
        setWidth(value) {
            this.set(StyleName.WIDTH, this.toPx(value));
        }
        setHeight(value) {
            this.set(StyleName.HEIGHT, this.toPx(value));
        }
        setPaddingTop(value) {
            this.set(StyleName.PADDING_TOP, this.toPx(value));
        }
        remove(styleName) {
            this.htmlElement[StyleModifier.StyleModifier.STYLE][styleName] = '';
        }
        removeStyleByName(name) {
            this.htmlElement[StyleModifier.StyleModifier.STYLE][name] = '';
        }
        clear() {
            this.htmlElement.removeAttribute(StyleModifier.StyleModifier.STYLE);
        }
        set(name, value) {
            this.htmlElement[StyleModifier.StyleModifier.STYLE][name] = value;
        }
        toPx(value) {
            return value > 0 ? `${value}px` : `${value}`;
        }
    },
    _a.STYLE = 'style',
    _a);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtbW9kaWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2ZlYXR1cmUvY29tbW9uL2Nkay9kb20vc3R5bGUvc3R5bGUtbW9kaWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzVDLE1BQU0sT0FBTyxhQUFjLFNBQVEsUUFBMEI7SUFFNUQsWUFDa0IsV0FBeUI7UUFFMUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRkYsZ0JBQVcsR0FBWCxXQUFXLENBQWM7SUFHM0MsQ0FBQztJQUVTLGNBQWMsQ0FBQyxXQUF3QjtRQUNoRCxPQUFPLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyRCxDQUFDOztBQUVELDJCQUEyQjtBQUNILDJCQUFhLFNBQUc7UUFJdkMsWUFDa0IsV0FBd0I7WUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFFMUMsQ0FBQztRQUVELGNBQWMsQ0FBQyxJQUFZLEVBQUUsS0FBYTtZQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDO1FBRUQsUUFBUSxDQUFDLEtBQWE7WUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBRUQsU0FBUyxDQUFDLEtBQWE7WUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBRUQsYUFBYSxDQUFDLEtBQWE7WUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBRUQsTUFBTSxDQUFDLFNBQW9CO1lBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckUsQ0FBQztRQUVELGlCQUFpQixDQUFDLElBQVk7WUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoRSxDQUFDO1FBRUQsS0FBSztZQUNKLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUVPLEdBQUcsQ0FBQyxJQUFZLEVBQUUsS0FBYTtZQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ25FLENBQUM7UUFFTyxJQUFJLENBQUMsS0FBYTtZQUN6QixPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDOUMsQ0FBQztLQUVEO0lBM0N3QixRQUFLLEdBQUcsT0FBUTtRQTJDdkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHlsZU1vZGlmaWVyQXBpIH0gZnJvbSAnLi9zdHlsZS1tb2RpZmllci1hcGknO1xuaW1wb3J0IHsgU3R5bGVOYW1lIH0gZnJvbSAnLi9zdHlsZS1uYW1lJztcbmltcG9ydCB7IE1vZGlmaWVyIH0gZnJvbSAnLi4vY29yZS9tb2RpZmllcic7XG5cblxuZXhwb3J0IGNsYXNzIFN0eWxlTW9kaWZpZXIgZXh0ZW5kcyBNb2RpZmllcjxTdHlsZU1vZGlmaWVyQXBpPiB7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSByZWFkb25seSBodG1sRWxlbWVudD86IEhUTUxFbGVtZW50XG5cdCkge1xuXHRcdHN1cGVyKGh0bWxFbGVtZW50KTtcblx0fVxuXG5cdHByb3RlY3RlZCBjcmVhdGVNb2RpZmllcihodG1sRWxlbWVudDogSFRNTEVsZW1lbnQpOiBTdHlsZU1vZGlmaWVyQXBpIHtcblx0XHRyZXR1cm4gbmV3IFN0eWxlTW9kaWZpZXIuU3R5bGVNb2RpZmllcihodG1sRWxlbWVudCk7XG5cdH1cblxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU3R5bGVNb2RpZmllciA9IGNsYXNzIGltcGxlbWVudHMgU3R5bGVNb2RpZmllckFwaSB7XG5cblx0XHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBTVFlMRSA9ICdzdHlsZSc7XG5cblx0XHRjb25zdHJ1Y3Rvcihcblx0XHRcdHByaXZhdGUgcmVhZG9ubHkgaHRtbEVsZW1lbnQ6IEhUTUxFbGVtZW50XG5cdFx0KSB7XG5cdFx0fVxuXG5cdFx0c2V0U3R5bGVCeU5hbWUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0XHR0aGlzLnNldChuYW1lLCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0c2V0V2lkdGgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuXHRcdFx0dGhpcy5zZXQoU3R5bGVOYW1lLldJRFRILCB0aGlzLnRvUHgodmFsdWUpKTtcblx0XHR9XG5cblx0XHRzZXRIZWlnaHQodmFsdWU6IG51bWJlcik6IHZvaWQge1xuXHRcdFx0dGhpcy5zZXQoU3R5bGVOYW1lLkhFSUdIVCwgdGhpcy50b1B4KHZhbHVlKSk7XG5cdFx0fVxuXG5cdFx0c2V0UGFkZGluZ1RvcCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG5cdFx0XHR0aGlzLnNldChTdHlsZU5hbWUuUEFERElOR19UT1AsIHRoaXMudG9QeCh2YWx1ZSkpO1xuXHRcdH1cblxuXHRcdHJlbW92ZShzdHlsZU5hbWU6IFN0eWxlTmFtZSk6IHZvaWQge1xuXHRcdFx0dGhpcy5odG1sRWxlbWVudFtTdHlsZU1vZGlmaWVyLlN0eWxlTW9kaWZpZXIuU1RZTEVdW3N0eWxlTmFtZV0gPSAnJztcblx0XHR9XG5cblx0XHRyZW1vdmVTdHlsZUJ5TmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRcdHRoaXMuaHRtbEVsZW1lbnRbU3R5bGVNb2RpZmllci5TdHlsZU1vZGlmaWVyLlNUWUxFXVtuYW1lXSA9ICcnO1xuXHRcdH1cblxuXHRcdGNsZWFyKCk6IHZvaWQge1xuXHRcdFx0dGhpcy5odG1sRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoU3R5bGVNb2RpZmllci5TdHlsZU1vZGlmaWVyLlNUWUxFKTtcblx0XHR9XG5cblx0XHRwcml2YXRlIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRcdHRoaXMuaHRtbEVsZW1lbnRbU3R5bGVNb2RpZmllci5TdHlsZU1vZGlmaWVyLlNUWUxFXVtuYW1lXSA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHByaXZhdGUgdG9QeCh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcblx0XHRcdHJldHVybiB2YWx1ZSA+IDAgPyBgJHt2YWx1ZX1weGAgOiBgJHt2YWx1ZX1gO1xuXHRcdH1cblxuXHR9O1xuXG59XG4iXX0=