/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HermesModule } from '@generic-ui/hermes';
import { inMemoryStructureCommandProviders, inMemoryStructureProviders, inMemoryStructureReadProviders } from '../../../core/infrastructure/in-memory/in-memory.structure.providers';
import { StructureCommandInvoker } from '../../../core/api/structure.command-invoker';
import { StructureReadModelRootConverter } from './read/structure.read-model-root-converter';
import { StructureAggregateFactory } from '../../../core/domain/structure.aggregate-factory';
import { StructureWarehouse } from './structure.warehouse';
import { StructureCreatedEventHandler } from '../../../core/domain/create-structure/structure-created.event-handler';
import { StructureDomainCommandInvoker } from '../../../core/domain/structure.domain-command-invoker';
import { StructureInitialValuesReadyArchive } from '../../../core/api/structure.initial-values-ready.archive';
/** @type {?} */
var commandProviders = tslib_1.__spread(inMemoryStructureCommandProviders);
/** @type {?} */
var readProviders = tslib_1.__spread(inMemoryStructureReadProviders);
/** @type {?} */
export var structureCommandHandlers = [];
/** @type {?} */
export var structureDomainEventHandlers = tslib_1.__spread(HermesModule.registerDomainEventHandler(StructureCreatedEventHandler));
/** @type {?} */
export var structureProviders = tslib_1.__spread(inMemoryStructureProviders, commandProviders, readProviders, [
    StructureAggregateFactory,
    StructureReadModelRootConverter,
    StructureWarehouse,
    {
        provide: StructureCommandInvoker,
        useClass: StructureDomainCommandInvoker
    },
    StructureInitialValuesReadyArchive
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BnZW5lcmljLXVpL25neC1saXN0LyIsInNvdXJjZXMiOlsic3RydWN0dXJlL2dyaWQvY29yZS9hcGkvc3RydWN0dXJlLnByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRCxPQUFPLEVBQ04saUNBQWlDLEVBQ2pDLDBCQUEwQixFQUMxQiw4QkFBOEIsRUFDOUIsTUFBTSxzRUFBc0UsQ0FBQztBQUM5RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN0RixPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUM3RixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx1RUFBdUUsQ0FBQztBQUNySCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN0RyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSwwREFBMEQsQ0FBQzs7SUFHeEcsZ0JBQWdCLG9CQUNsQixpQ0FBaUMsQ0FDcEM7O0lBRUssYUFBYSxvQkFDZiw4QkFBOEIsQ0FDakM7O0FBRUQsTUFBTSxLQUFPLHdCQUF3QixHQUFvQixFQUFFOztBQUUzRCxNQUFNLEtBQU8sNEJBQTRCLG9CQUVyQyxZQUFZLENBQUMsMEJBQTBCLENBQUMsNEJBQTRCLENBQUMsQ0FDeEU7O0FBRUQsTUFBTSxLQUFPLGtCQUFrQixvQkFDM0IsMEJBQTBCLEVBRTFCLGdCQUFnQixFQUNoQixhQUFhO0lBRWhCLHlCQUF5QjtJQUN6QiwrQkFBK0I7SUFFL0Isa0JBQWtCO0lBQ2xCO1FBQ0MsT0FBTyxFQUFFLHVCQUF1QjtRQUNoQyxRQUFRLEVBQUUsNkJBQTZCO0tBQ3ZDO0lBRUQsa0NBQWtDO0VBRWxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhlcm1lc01vZHVsZSB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQge1xuXHRpbk1lbW9yeVN0cnVjdHVyZUNvbW1hbmRQcm92aWRlcnMsXG5cdGluTWVtb3J5U3RydWN0dXJlUHJvdmlkZXJzLFxuXHRpbk1lbW9yeVN0cnVjdHVyZVJlYWRQcm92aWRlcnNcbn0gZnJvbSAnLi4vLi4vLi4vY29yZS9pbmZyYXN0cnVjdHVyZS9pbi1tZW1vcnkvaW4tbWVtb3J5LnN0cnVjdHVyZS5wcm92aWRlcnMnO1xuaW1wb3J0IHsgU3RydWN0dXJlQ29tbWFuZEludm9rZXIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2FwaS9zdHJ1Y3R1cmUuY29tbWFuZC1pbnZva2VyJztcbmltcG9ydCB7IFN0cnVjdHVyZVJlYWRNb2RlbFJvb3RDb252ZXJ0ZXIgfSBmcm9tICcuL3JlYWQvc3RydWN0dXJlLnJlYWQtbW9kZWwtcm9vdC1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgU3RydWN0dXJlQWdncmVnYXRlRmFjdG9yeSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZG9tYWluL3N0cnVjdHVyZS5hZ2dyZWdhdGUtZmFjdG9yeSc7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVXYXJlaG91c2UgfSBmcm9tICcuL3N0cnVjdHVyZS53YXJlaG91c2UnO1xuaW1wb3J0IHsgU3RydWN0dXJlQ3JlYXRlZEV2ZW50SGFuZGxlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZG9tYWluL2NyZWF0ZS1zdHJ1Y3R1cmUvc3RydWN0dXJlLWNyZWF0ZWQuZXZlbnQtaGFuZGxlcic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVEb21haW5Db21tYW5kSW52b2tlciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZG9tYWluL3N0cnVjdHVyZS5kb21haW4tY29tbWFuZC1pbnZva2VyJztcbmltcG9ydCB7IFN0cnVjdHVyZUluaXRpYWxWYWx1ZXNSZWFkeUFyY2hpdmUgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2FwaS9zdHJ1Y3R1cmUuaW5pdGlhbC12YWx1ZXMtcmVhZHkuYXJjaGl2ZSc7XG5cblxuY29uc3QgY29tbWFuZFByb3ZpZGVycyA9IFtcblx0Li4uaW5NZW1vcnlTdHJ1Y3R1cmVDb21tYW5kUHJvdmlkZXJzXG5dO1xuXG5jb25zdCByZWFkUHJvdmlkZXJzID0gW1xuXHQuLi5pbk1lbW9yeVN0cnVjdHVyZVJlYWRQcm92aWRlcnNcbl07XG5cbmV4cG9ydCBjb25zdCBzdHJ1Y3R1cmVDb21tYW5kSGFuZGxlcnM6IEFycmF5PFByb3ZpZGVyPiA9IFtdO1xuXG5leHBvcnQgY29uc3Qgc3RydWN0dXJlRG9tYWluRXZlbnRIYW5kbGVycyA9IFtcblxuXHQuLi5IZXJtZXNNb2R1bGUucmVnaXN0ZXJEb21haW5FdmVudEhhbmRsZXIoU3RydWN0dXJlQ3JlYXRlZEV2ZW50SGFuZGxlcilcbl07XG5cbmV4cG9ydCBjb25zdCBzdHJ1Y3R1cmVQcm92aWRlcnMgPSBbXG5cdC4uLmluTWVtb3J5U3RydWN0dXJlUHJvdmlkZXJzLFxuXG5cdC4uLmNvbW1hbmRQcm92aWRlcnMsXG5cdC4uLnJlYWRQcm92aWRlcnMsXG5cblx0U3RydWN0dXJlQWdncmVnYXRlRmFjdG9yeSxcblx0U3RydWN0dXJlUmVhZE1vZGVsUm9vdENvbnZlcnRlcixcblxuXHRTdHJ1Y3R1cmVXYXJlaG91c2UsXG5cdHtcblx0XHRwcm92aWRlOiBTdHJ1Y3R1cmVDb21tYW5kSW52b2tlcixcblx0XHR1c2VDbGFzczogU3RydWN0dXJlRG9tYWluQ29tbWFuZEludm9rZXJcblx0fSxcblxuXHRTdHJ1Y3R1cmVJbml0aWFsVmFsdWVzUmVhZHlBcmNoaXZlXG5cbl07XG4iXX0=