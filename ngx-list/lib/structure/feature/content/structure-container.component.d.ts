import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ResizeDetector } from '@generic-ui/fabric';
import { SmartComponent } from '../../../../common/cdk/smart-component';
import { CellTemplateWithAccessor } from '../../../composition/domain-api/read/definition/cell-template-with-accessor';
import { SchemaRowColoring } from '../../../../schema/domain/coloring/schema-row-coloring';
import { StructureId } from '../../domain/structure.id';
import { StructureCommandDispatcher } from '../../domain-api/structure.command-dispatcher';
import { StructureWarehouse } from '../../domain-api/structure.warehouse';
import { StructureSourceWarehouse } from '../../domain-api/source/structure-source.warehouse';
import { CompositionCommandDispatcher } from '../../../composition/domain-api/composition.command-dispatcher';
import { CompositionWarehouse } from '../../../composition/domain-api/composition.warehouse';
import { StructureFormationWarehouse } from '../../domain-api/formation/structure-formation.warehouse';
import { ItemEntity } from '../../domain/source/item.entity';
import { StructureVerticalFormationWarehouse } from '../../domain-api/vertical-formation/structure-vertical-formation.warehouse';
export declare class StructureContainerComponent extends SmartComponent implements OnInit, AfterViewInit, OnDestroy {
    private readonly elementRef;
    private readonly renderer;
    private readonly changeDetectorRef;
    private readonly ngZone;
    private readonly structureId;
    private readonly structureCommandService;
    private readonly structureReadModelWarehouse;
    private readonly structureVerticalFormationWarehouse;
    private readonly structureSourceWarehouse;
    private readonly compositionCommandService;
    private readonly compositionWarehouse;
    private readonly structureFormationWarehouse;
    private readonly resizeDetector;
    private readonly structureParent;
    sourceCollectionRef: ElementRef;
    columns: Array<CellTemplateWithAccessor>;
    source: Array<ItemEntity>;
    height: number;
    rowColoring: SchemaRowColoring;
    private autoResizeWidthEnabled;
    private scrollObservation$;
    constructor(elementRef: ElementRef, renderer: Renderer2, changeDetectorRef: ChangeDetectorRef, ngZone: NgZone, structureId: StructureId, structureCommandService: StructureCommandDispatcher, structureReadModelWarehouse: StructureWarehouse, structureVerticalFormationWarehouse: StructureVerticalFormationWarehouse, structureSourceWarehouse: StructureSourceWarehouse, compositionCommandService: CompositionCommandDispatcher, compositionWarehouse: CompositionWarehouse, structureFormationWarehouse: StructureFormationWarehouse, resizeDetector: ResizeDetector, structureParent: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private setContainerHeight;
    private setSourceHeight;
    private recalculateContainer;
    private enableScrollObservation;
    private disableScrollObservation;
}
