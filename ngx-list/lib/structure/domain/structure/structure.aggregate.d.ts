import { Type } from '@angular/core';
import { AggregateEvent, AggregateRoot } from '@generic-ui/hermes';
import { PagingManager } from '../../../../structure/paging/domain/paging.manager';
import { SourceManager } from '../source/source.manager';
import { VerticalFormation } from './vertical-formation/vertical-formation';
import { SummariesManager } from './summaries/summaries.manager';
import { SorterCollection } from '../../../../structure/sorting/domain/sorter.collection';
import { FilterManager } from './filter/filter.manager';
import { FieldCollection } from '../../../../structure/field/domain/field.collection';
import { FormationAggregate } from '../formation/formation-aggregate';
import { StructureId } from '../structure.id';
import { StructureEditSourceItemParams } from '../source/origin/edit/structure.edit-source-item.params';
import { PagingConfig } from '../../../../structure/paging/domain-api/paging-config';
import { OriginItemEntity } from '../source/origin/origin-item-entity';
import { SortingConfig } from '../../../../structure/sorting/domain-api/sorting-config';
import { FieldId } from '../../../../structure/field/domain/data-type/field.id';
import { StructureSorter } from '../../../../structure/sorting/domain/structure.sorter';
import { FilterConfig } from '../../domain-api/filter/filter-config';
import { QuickFiltersConfig } from '../../domain-api/filter/quick-filters.config';
import { SearchConfig } from '../../../../structure/search/domain-api/search-config';
import { SearchManager } from '../../../../structure/search/domain/search.manager';
import { SortOrder } from '../../../composition/domain/column/sort/sort-order';
import { SchemaTheme } from '../../../../schema/domain/theme/schema-theme';
import { FieldConfig } from '../../../../structure/field/domain-api/field.config';
export declare class StructureAggregate extends AggregateRoot<StructureId> {
    private formationAggregate;
    private pagingManager;
    private sourceManager;
    private sorterCollection;
    private filterManager;
    private searchManager;
    private verticalFormation;
    private fieldCollection;
    private summariesManager;
    constructor(structureId: StructureId, pagingAggregate: PagingManager, formationAggregate: FormationAggregate, sourceManager: SourceManager, verticalFormation: VerticalFormation, summariesManager: SummariesManager, sorterCollection: SorterCollection, filterCollection: FilterManager, searchManager: SearchManager, fieldCollection: FieldCollection);
    createEvent(): Type<AggregateEvent<StructureId>>;
    init(): void;
    setVerticalFormationEnabled(enabled: boolean): void;
    getVerticalFormation(): VerticalFormation;
    setSummariesEnabled(enabled: boolean): ReadonlyArray<AggregateEvent<StructureId>>;
    setOrigin(items: Array<any>): ReadonlyArray<AggregateEvent<StructureId>>;
    editItem(editParams: StructureEditSourceItemParams): ReadonlyArray<AggregateEvent<StructureId>>;
    setHeight(height: number): void;
    setTheme(theme: SchemaTheme): void;
    setFormation(formation: FormationAggregate): void;
    setScrollPosition(position: number): void;
    getFormation(): FormationAggregate;
    getPaging(): PagingManager;
    changePaging(config: PagingConfig): void;
    setPaging(paging: PagingManager): void;
    nextPage(): void;
    prevPage(): void;
    changePageSize(pageSize: number): ReadonlyArray<AggregateEvent<StructureId>>;
    getEntities(): Array<OriginItemEntity>;
    getSource(): SourceManager;
    createFields(fieldConfigs: Array<FieldConfig>): ReadonlyArray<AggregateEvent<StructureId>>;
    setSortingConfig(config: SortingConfig): void;
    toggleSort(fieldId: FieldId): Array<StructureSorter>;
    setSortOrder(fieldId: FieldId, sortOrder: SortOrder): Array<StructureSorter>;
    setFilterConfig(config: FilterConfig): void;
    setQuickFiltersConfig(config: QuickFiltersConfig): void;
    toggleFilter(fieldId: FieldId, externalFilterId: string, filterValue: string): Array<AggregateEvent<StructureId>>;
    setSearchingConfig(config: SearchConfig): void;
    addSearchPhrase(phrase: string): Array<AggregateEvent<StructureId>>;
    removeSearchPhrase(): Array<AggregateEvent<StructureId>>;
    clearEvents(): void;
    private calculateSource;
    private calculateSourceBasedOnVirtualScroll;
    private initTheme;
}
