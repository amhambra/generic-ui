export class GuiClassManager {
    nativeElement;
    classes = new Set();
    constructor(nativeElement) {
        this.nativeElement = nativeElement;
    }
    update(newClasses) {
        const actualClasses = Array.from(this.classes);
        const classesToAdd = [];
        const classesToRemove = [];
        for (const clazz of newClasses) {
            if (!actualClasses.some((actualClass) => actualClass === clazz)) {
                classesToAdd.push(clazz);
            }
        }
        for (const actualClass of actualClasses) {
            if (!newClasses.some((newClass) => actualClass === newClass)) {
                classesToRemove.push(actualClass);
            }
        }
        this.remove(...classesToRemove);
        this.add(...classesToAdd);
        this.classes = new Set(newClasses);
    }
    add(...classes) {
        this.addClassToDomElement(this.nativeElement, classes);
    }
    remove(...classes) {
        this.removeClassFromDomElement(this.nativeElement, classes);
    }
    addClassToDomElement(htmlElement, classes) {
        for (let i = 0; i < classes.length; i++) {
            htmlElement.classList.add(classes[i]);
        }
    }
    removeClassFromDomElement(htmlElement, classes) {
        for (let i = 0; i < classes.length; i++) {
            htmlElement.classList.remove(classes[i]);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpLmNsYXNzLm1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2ZlYXR1cmUvZ3VpLWFuZ3VsYXIvdGVtcGxhdGUvY2xhc3MvZ3VpLmNsYXNzLm1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLGVBQWU7SUFLVDtJQUhWLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBRXBDLFlBQ2tCLGFBQTBCO1FBQTFCLGtCQUFhLEdBQWIsYUFBYSxDQUFhO0lBRTVDLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBeUI7UUFFL0IsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0MsTUFBTSxZQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUN2QyxNQUFNLGVBQWUsR0FBa0IsRUFBRSxDQUFDO1FBRTFDLEtBQUssTUFBTSxLQUFLLElBQUksVUFBVSxFQUFFO1lBRS9CLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssS0FBSyxDQUFDLEVBQUU7Z0JBQ2hFLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekI7U0FDRDtRQUVELEtBQUssTUFBTSxXQUFXLElBQUksYUFBYSxFQUFFO1lBRXhDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssUUFBUSxDQUFDLEVBQUU7Z0JBQzdELGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEM7U0FDRDtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU8sR0FBRyxDQUFDLEdBQUcsT0FBc0I7UUFDcEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxHQUFHLE9BQXNCO1FBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxXQUF3QixFQUFFLE9BQXNCO1FBQzVFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0YsQ0FBQztJQUVPLHlCQUF5QixDQUFDLFdBQXdCLEVBQUUsT0FBc0I7UUFDakYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekM7SUFDRixDQUFDO0NBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgR3VpQ2xhc3NNYW5hZ2VyIHtcblxuXHRwcml2YXRlIGNsYXNzZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50XG5cdCkge1xuXHR9XG5cblx0dXBkYXRlKG5ld0NsYXNzZXM6IEFycmF5PHN0cmluZz4pIHtcblxuXHRcdGNvbnN0IGFjdHVhbENsYXNzZXMgPSBBcnJheS5mcm9tKHRoaXMuY2xhc3Nlcyk7XG5cblx0XHRjb25zdCBjbGFzc2VzVG9BZGQ6IEFycmF5PHN0cmluZz4gPSBbXTtcblx0XHRjb25zdCBjbGFzc2VzVG9SZW1vdmU6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuXHRcdGZvciAoY29uc3QgY2xhenogb2YgbmV3Q2xhc3Nlcykge1xuXG5cdFx0XHRpZiAoIWFjdHVhbENsYXNzZXMuc29tZSgoYWN0dWFsQ2xhc3MpID0+IGFjdHVhbENsYXNzID09PSBjbGF6eikpIHtcblx0XHRcdFx0Y2xhc3Nlc1RvQWRkLnB1c2goY2xhenopO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgYWN0dWFsQ2xhc3Mgb2YgYWN0dWFsQ2xhc3Nlcykge1xuXG5cdFx0XHRpZiAoIW5ld0NsYXNzZXMuc29tZSgobmV3Q2xhc3MpID0+IGFjdHVhbENsYXNzID09PSBuZXdDbGFzcykpIHtcblx0XHRcdFx0Y2xhc3Nlc1RvUmVtb3ZlLnB1c2goYWN0dWFsQ2xhc3MpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMucmVtb3ZlKC4uLmNsYXNzZXNUb1JlbW92ZSk7XG5cdFx0dGhpcy5hZGQoLi4uY2xhc3Nlc1RvQWRkKTtcblxuXHRcdHRoaXMuY2xhc3NlcyA9IG5ldyBTZXQobmV3Q2xhc3Nlcyk7XG5cdH1cblxuXHRwcml2YXRlIGFkZCguLi5jbGFzc2VzOiBBcnJheTxzdHJpbmc+KTogdm9pZCB7XG5cdFx0dGhpcy5hZGRDbGFzc1RvRG9tRWxlbWVudCh0aGlzLm5hdGl2ZUVsZW1lbnQsIGNsYXNzZXMpO1xuXHR9XG5cblx0cHJpdmF0ZSByZW1vdmUoLi4uY2xhc3NlczogQXJyYXk8c3RyaW5nPik6IHZvaWQge1xuXHRcdHRoaXMucmVtb3ZlQ2xhc3NGcm9tRG9tRWxlbWVudCh0aGlzLm5hdGl2ZUVsZW1lbnQsIGNsYXNzZXMpO1xuXHR9XG5cblx0cHJpdmF0ZSBhZGRDbGFzc1RvRG9tRWxlbWVudChodG1sRWxlbWVudDogSFRNTEVsZW1lbnQsIGNsYXNzZXM6IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGh0bWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSByZW1vdmVDbGFzc0Zyb21Eb21FbGVtZW50KGh0bWxFbGVtZW50OiBIVE1MRWxlbWVudCwgY2xhc3NlczogQXJyYXk8c3RyaW5nPik6IHZvaWQge1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aHRtbEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzW2ldKTtcblx0XHR9XG5cdH1cblxufVxuIl19