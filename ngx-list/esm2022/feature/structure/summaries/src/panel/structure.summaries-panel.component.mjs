import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';
import { SmartComponent } from '../../../../common/component/src/smart-component';
import { SummariesTranslations } from '../structure.summaries-translations';
import { RowSelectionType } from '../../../../../core/structure/formation/src/api/row-selected/row-selection';
import { hermesMap } from '@generic-ui/hermes';
import { GuiState } from '../../../../../feature/gui-angular/state/gui.state';
import * as i0 from "@angular/core";
import * as i1 from "../../../../../feature/gui-angular/state/gui.state";
import * as i2 from "../../../../../core/structure/structure-core/src/api/global/structure.id";
import * as i3 from "../../../../../core/composition/src/api/global/composition.id";
import * as i4 from "../../../../../core/structure/summaries/src/api/summaries.event-repository";
import * as i5 from "../../../../../core/l10n/src/api/translation.facade";
import * as i6 from "../../../../../core/structure/source/src/api/source.warehouse";
import * as i7 from "../../../../../core/structure/formation/src/api/formation.warehouse";
import * as i8 from "../../../../composition/src/column/composition.template-warehouse";
import * as i9 from "@angular/common";
import * as i10 from "@generic-ui/fabric";
import * as i11 from "../../../../gui-angular/template/let/gui.let.directive";
import * as i12 from "../../../../l10n/src/translation.pipe";
import * as i13 from "../../../../gui-angular/template/push/gui.push.pipe";
export class StructureSummariesPanelComponent extends SmartComponent {
    guiState;
    structureId;
    compositionId;
    structureSummariesEventRepository;
    translationService;
    sourceWarehouse;
    formationWarehouse;
    compositionTemplateWarehouse;
    enabled;
    // @ts-ignore
    headerColumns$ = this.compositionTemplateWarehouse.onHeaderCols(this.compositionId);
    // @ts-ignore
    state$ = this.guiState.select();
    checkboxSelection$ = this.selectCheckboxSelection();
    constructor(changeDetectorRef, elementRef, guiState, structureId, compositionId, structureSummariesEventRepository, translationService, sourceWarehouse, formationWarehouse, compositionTemplateWarehouse) {
        super(changeDetectorRef, elementRef);
        this.guiState = guiState;
        this.structureId = structureId;
        this.compositionId = compositionId;
        this.structureSummariesEventRepository = structureSummariesEventRepository;
        this.translationService = translationService;
        this.sourceWarehouse = sourceWarehouse;
        this.formationWarehouse = formationWarehouse;
        this.compositionTemplateWarehouse = compositionTemplateWarehouse;
        this.addClassToHost('gui-flex');
        this.guiState.connect('summariesTranslations', this.selectSummariesTranslations());
        this.guiState.connect('sourceEmpty', this.selectSourceEmpty());
        this.guiState.connect('summaries', this.selectSummaries());
    }
    isSummariesTypePresent(summaries) {
        return summaries !== undefined && summaries !== null;
    }
    getSelectorName() {
        return 'gui-structure-summaries-panel';
    }
    selectCheckboxSelection() {
        return this.formationWarehouse
            .onType(this.structureId)
            .pipe(hermesMap((type) => {
            return type === RowSelectionType.CHECKBOX;
        }));
    }
    selectSourceEmpty() {
        return this.sourceWarehouse
            .onItemsSize(this.structureId)
            .pipe(hermesMap((size) => {
            return size === 0;
        }));
    }
    selectSummariesTranslations() {
        return this.translationService
            .onTranslation()
            .pipe(hermesMap((translation) => {
            return new SummariesTranslations(translation.summariesDistinctValuesTooltip, translation.summariesAverageTooltip, translation.summariesMinTooltip, translation.summariesMaxTooltip, translation.summariesMedTooltip, translation.summariesCountTooltip);
        }));
    }
    selectSummaries() {
        return this.structureSummariesEventRepository
            .onSummariesChanged(this.structureId.toReadModelRootId())
            .pipe(hermesMap((event) => {
            return event.getSummaries();
        }));
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StructureSummariesPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.GuiState }, { token: i2.StructureId }, { token: i3.CompositionId }, { token: i4.SummariesEventRepository }, { token: i5.TranslationFacade }, { token: i6.SourceWarehouse }, { token: i7.FormationWarehouse }, { token: i8.CompositionTemplateWarehouse }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: StructureSummariesPanelComponent, selector: "div[gui-structure-summaries-panel][enabled]", inputs: { enabled: "enabled" }, providers: [
            GuiState
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *guiLet=\"state$; let localState\">\n\t<ng-container *ngIf=\"enabled && localState.summaries && !localState.sourceEmpty\">\n\n\t\t<div *ngIf=\"checkboxSelection$ | guiPush\"\n\t\t\t class=\"gui-structure-summaries-cell gui-row-checkbox gui-flex gui-justify-between\n\t gui-overflow-hidden gui-relative gui-py-0 gui-px-6 gui-box-border\n\t gui-leading-4 gui-whitespace-nowrap gui-overflow-ellipsis\">\n\t\t</div>\n\n\t\t<div *ngFor=\"let column of headerColumns$ | guiPush\"\n\t\t\t [style.width.px]=\"column.width\"\n\t\t\t class=\"gui-structure-summaries-cell\">\n\n\t\t\t<ng-container *ngIf=\"localState.summaries && !!localState.summaries.get(column.getFieldId().getId())\">\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).count)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.countTooltip\">{{'summariesCount' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).distinct)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.distinctTooltip\">{{'summariesDist' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).sum)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t<span [gui-tooltip]=\"'Sum'\" -->\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t\t  class=\"gui-math-symbol\">&sum;</span>-->\n\t\t\t\t\t\t\t{{'summariesSum' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).sum }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).average)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Average'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-mean\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>_</span><span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.averageTooltip\">{{'summariesAvg' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).average }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).min)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Min'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&and;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.minTooltip\">\n\t\t\t\t\t\t\t{{'summariesMin' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).min }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).max)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Max'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&or;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.maxTooltip\">\n\t\t\t\t\t\t\t{{'summariesMax' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).max }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).median)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Median'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-median\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>~</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.medTooltip\">{{'summariesMed' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).truthy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesTruthy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).falsy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesFalsy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t</div>\n\n\t\t\t</ng-container>\n\t\t</div>\n\n\t</ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i10.FabricTooltipDirective, selector: "[gui-tooltip]", inputs: ["gui-tooltip"], exportAs: ["guiTooltip"] }, { kind: "directive", type: i11.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }, { kind: "pipe", type: i12.TranslationPipe, name: "guiTranslate" }, { kind: "pipe", type: i13.GuiPushPipe, name: "guiPush" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: StructureSummariesPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-summaries-panel][enabled]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<ng-container *guiLet=\"state$; let localState\">\n\t<ng-container *ngIf=\"enabled && localState.summaries && !localState.sourceEmpty\">\n\n\t\t<div *ngIf=\"checkboxSelection$ | guiPush\"\n\t\t\t class=\"gui-structure-summaries-cell gui-row-checkbox gui-flex gui-justify-between\n\t gui-overflow-hidden gui-relative gui-py-0 gui-px-6 gui-box-border\n\t gui-leading-4 gui-whitespace-nowrap gui-overflow-ellipsis\">\n\t\t</div>\n\n\t\t<div *ngFor=\"let column of headerColumns$ | guiPush\"\n\t\t\t [style.width.px]=\"column.width\"\n\t\t\t class=\"gui-structure-summaries-cell\">\n\n\t\t\t<ng-container *ngIf=\"localState.summaries && !!localState.summaries.get(column.getFieldId().getId())\">\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).count)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.countTooltip\">{{'summariesCount' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).count }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).distinct)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.distinctTooltip\">{{'summariesDist' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).distinct }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).sum)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t<span [gui-tooltip]=\"'Sum'\" -->\n\t\t\t\t\t\t\t<!--\t\t\t\t\t\t\t\t  class=\"gui-math-symbol\">&sum;</span>-->\n\t\t\t\t\t\t\t{{'summariesSum' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).sum }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).average)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Average'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-mean\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>_</span><span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.averageTooltip\">{{'summariesAvg' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).average }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).min)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Min'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&and;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.minTooltip\">\n\t\t\t\t\t\t\t{{'summariesMin' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).min }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\" isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).max)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Max'\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span class=\"gui-math-symbol\">&or;</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.maxTooltip\">\n\t\t\t\t\t\t\t{{'summariesMax' | guiTranslate}}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).max }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).median)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\n\t\t\t\t\t<!--\t\t\t\t\t\t<div [gui-tooltip]=\"'Median'\"-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t class=\"gui-median\">-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>~</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t\t<span>X</span>-->\n\t\t\t\t\t<!--\t\t\t\t\t\t</div>-->\n\n\t\t\t\t\t<span [gui-tooltip]=\"localState.summariesTranslations.medTooltip\">{{'summariesMed' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).median }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).truthy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesTruthy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).truthy }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"isSummariesTypePresent(localState.summaries.get(column.getFieldId().getId()).falsy)\"\n\t\t\t\t\t class=\"gui-structure-summaries-value\">\n\t\t\t\t\t<span>{{'summariesFalsy' | guiTranslate}}</span>\n\t\t\t\t\t<span class=\"gui-summaries-value\">{{ localState.summaries.get(column.getFieldId().getId()).falsy }}</span>\n\t\t\t\t</div>\n\n\t\t\t</ng-container>\n\t\t</div>\n\n\t</ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.GuiState }, { type: i2.StructureId }, { type: i3.CompositionId }, { type: i4.SummariesEventRepository }, { type: i5.TranslationFacade }, { type: i6.SourceWarehouse }, { type: i7.FormationWarehouse }, { type: i8.CompositionTemplateWarehouse }]; }, propDecorators: { enabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0dXJlLnN1bW1hcmllcy1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2ZlYXR1cmUvc3RydWN0dXJlL3N1bW1hcmllcy9zcmMvcGFuZWwvc3RydWN0dXJlLnN1bW1hcmllcy1wYW5lbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2ZlYXR1cmUvc3RydWN0dXJlL3N1bW1hcmllcy9zcmMvcGFuZWwvc3RydWN0dXJlLnN1bW1hcmllcy1wYW5lbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQXFCLFNBQVMsRUFBYyxLQUFLLEVBQVUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJcEksT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBSWxGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRFQUE0RSxDQUFDO0FBSTlHLE9BQU8sRUFBRSxTQUFTLEVBQW9CLE1BQU0sb0JBQW9CLENBQUM7QUFDakUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9EQUFvRCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUFxQjlFLE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxjQUFjO0lBZS9DO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFuQnBCLE9BQU8sQ0FBVztJQUVsQixhQUFhO0lBQ2IsY0FBYyxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXBGLGFBQWE7SUFDSixNQUFNLEdBQUcsSUFBSSxDQUFDLFFB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Qzt3R0FwRlcsZ0NBQWdDOzRGQUFoQyxnQ0FBZ0Msc0dBSmpDO1lBQ1YsUUFBUTtTQUNSLGlEQ2pDRixrMEtBeUdBOzs0RkR0RWEsZ0NBQWdDO2tCQVQ1QyxTQUFTOytCQUNDLDZDQUE2QyxtQkFFdEMsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSSxhQUMxQjt3QkFDVixRQUFRO3FCQUNSOytYQUtELE9BQU87c0JBRE4sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RydWN0dXJlSWQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL3N0cnVjdHVyZS9zdHJ1Y3R1cmUtY29yZS9zcmMvYXBpL2dsb2JhbC9zdHJ1Y3R1cmUuaWQnO1xuaW1wb3J0IHsgU3VtbWFyaWVzRXZlbnRSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29yZS9zdHJ1Y3R1cmUvc3VtbWFyaWVzL3NyYy9hcGkvc3VtbWFyaWVzLmV2ZW50LXJlcG9zaXRvcnknO1xuaW1wb3J0IHsgU3RydWN0dXJlU3VtbWFyaWVzQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29yZS9zdHJ1Y3R1cmUvc3VtbWFyaWVzL3NyYy9jb3JlL3N0cnVjdHVyZS5zdW1tYXJpZXMtY2hhbmdlZC5ldmVudCc7XG5pbXBvcnQgeyBTbWFydENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi9jb21wb25lbnQvc3JjL3NtYXJ0LWNvbXBvbmVudCc7XG5pbXBvcnQgeyBTb3VyY2VXYXJlaG91c2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL3N0cnVjdHVyZS9zb3VyY2Uvc3JjL2FwaS9zb3VyY2Uud2FyZWhvdXNlJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29yZS9sMTBuL3NyYy9hcGkvdHJhbnNsYXRpb24uZmFjYWRlJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29yZS9sMTBuL3NyYy9hcGkvdHJhbnNsYXRpb24nO1xuaW1wb3J0IHsgU3VtbWFyaWVzVHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vc3RydWN0dXJlLnN1bW1hcmllcy10cmFuc2xhdGlvbnMnO1xuaW1wb3J0IHsgUm93U2VsZWN0aW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvcmUvc3RydWN0dXJlL2Zvcm1hdGlvbi9zcmMvYXBpL3Jvdy1zZWxlY3RlZC9yb3ctc2VsZWN0aW9uJztcbmltcG9ydCB7IENvbXBvc2l0aW9uSWQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL2NvbXBvc2l0aW9uL3NyYy9hcGkvZ2xvYmFsL2NvbXBvc2l0aW9uLmlkJztcbmltcG9ydCB7IENvbXBvc2l0aW9uVGVtcGxhdGVXYXJlaG91c2UgfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb3NpdGlvbi9zcmMvY29sdW1uL2NvbXBvc2l0aW9uLnRlbXBsYXRlLXdhcmVob3VzZSc7XG5pbXBvcnQgeyBGb3JtYXRpb25XYXJlaG91c2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb3JlL3N0cnVjdHVyZS9mb3JtYXRpb24vc3JjL2FwaS9mb3JtYXRpb24ud2FyZWhvdXNlJztcbmltcG9ydCB7IGhlcm1lc01hcCwgSGVybWVzT2JzZXJ2YWJsZSB9IGZyb20gJ0BnZW5lcmljLXVpL2hlcm1lcyc7XG5pbXBvcnQgeyBHdWlTdGF0ZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUvZ3VpLWFuZ3VsYXIvc3RhdGUvZ3VpLnN0YXRlJztcblxuZXhwb3J0IGludGVyZmFjZSBTdHJ1Y3R1cmVTdW1tYXJpZXNQYW5lbENvbXBvbmVudFN0YXRlIHtcblxuXHRzdW1tYXJpZXNUcmFuc2xhdGlvbnM6IFN1bW1hcmllc1RyYW5zbGF0aW9ucztcblxuXHRzb3VyY2VFbXB0eTogYm9vbGVhbjtcblxuXHRzdW1tYXJpZXM6IE1hcDxzdHJpbmcsIGFueT47XG5cbn1cblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnZGl2W2d1aS1zdHJ1Y3R1cmUtc3VtbWFyaWVzLXBhbmVsXVtlbmFibGVkXScsXG5cdHRlbXBsYXRlVXJsOiAnLi9zdHJ1Y3R1cmUuc3VtbWFyaWVzLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcblx0Y2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG5cdGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG5cdHByb3ZpZGVyczogW1xuXHRcdEd1aVN0YXRlXG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgU3RydWN0dXJlU3VtbWFyaWVzUGFuZWxDb21wb25lbnQgZXh0ZW5kcyBTbWFydENvbXBvbmVudCB7XG5cblx0QElucHV0KClcblx0ZW5hYmxlZCE6IGJvb2xlYW47XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRoZWFkZXJDb2x1bW5zJCA9IHRoaXMuY29tcG9zaXRpb25UZW1wbGF0ZVdhcmVob3VzZS5vbkhlYWRlckNvbHModGhpcy5jb21wb3NpdGlvbklkKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdHJlYWRvbmx5IHN0YXRlJCA9IHRoaXMuZ3VpU3RhdGUuc2VsZWN0KCk7XG5cblx0cmVhZG9ubHkgY2hlY2tib3hTZWxlY3Rpb24kID0gdGhpcy5zZWxlY3RDaGVja2JveFNlbGVjdGlvbigpO1xuXG5cdGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRcdFx0ZWxlbWVudFJlZjogRWxlbWVudFJlZixcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBndWlTdGF0ZTogR3VpU3RhdGU8U3RydWN0dXJlU3VtbWFyaWVzUGFuZWxDb21wb25lbnRTdGF0ZT4sXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgc3RydWN0dXJlSWQ6IFN0cnVjdHVyZUlkLFxuXHRcdFx0XHRwcml2YXRlIHJlYWRvbmx5IGNvbXBvc2l0aW9uSWQ6IENvbXBvc2l0aW9uSWQsXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgc3RydWN0dXJlU3VtbWFyaWVzRXZlbnRSZXBvc2l0b3J5OiBTdW1tYXJpZXNFdmVudFJlcG9zaXRvcnksXG5cdFx0XHRcdHByaXZhdGUgcmVhZG9ubHkgdHJhbnNsYXRpb25TZXJ2aWNlOiBUcmFuc2xhdGlvbkZhY2FkZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBzb3VyY2VXYXJlaG91c2U6IFNvdXJjZVdhcmVob3VzZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBmb3JtYXRpb25XYXJlaG91c2U6IEZvcm1hdGlvbldhcmVob3VzZSxcblx0XHRcdFx0cHJpdmF0ZSByZWFkb25seSBjb21wb3NpdGlvblRlbXBsYXRlV2FyZWhvdXNlOiBDb21wb3NpdGlvblRlbXBsYXRlV2FyZWhvdXNlKSB7XG5cdFx0c3VwZXIoY2hhbmdlRGV0ZWN0b3JSZWYsIGVsZW1lbnRSZWYpO1xuXG5cdFx0dGhpcy5hZGRDbGFzc1RvSG9zdCgnZ3VpLWZsZXgnKTtcblxuXHRcdHRoaXMuZ3VpU3RhdGUuY29ubmVjdCgnc3VtbWFyaWVzVHJhbnNsYXRpb25zJywgdGhpcy5zZWxlY3RTdW1tYXJpZXNUcmFuc2xhdGlvbnMoKSk7XG5cdFx0dGhpcy5ndWlTdGF0ZS5jb25uZWN0KCdzb3VyY2VFbXB0eScsIHRoaXMuc2VsZWN0U291cmNlRW1wdHkoKSk7XG5cdFx0dGhpcy5ndWlTdGF0ZS5jb25uZWN0KCdzdW1tYXJpZXMnLCB0aGlzLnNlbGVjdFN1bW1hcmllcygpKTtcblx0fVxuXG5cdGlzU3VtbWFyaWVzVHlwZVByZXNlbnQoc3VtbWFyaWVzOiBudW1iZXIpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gc3VtbWFyaWVzICE9PSB1bmRlZmluZWQgJiYgc3VtbWFyaWVzICE9PSBudWxsO1xuXHR9XG5cblx0cHJvdGVjdGVkIGdldFNlbGVjdG9yTmFtZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiAnZ3VpLXN0cnVjdHVyZS1zdW1tYXJpZXMtcGFuZWwnO1xuXHR9XG5cblx0cHJpdmF0ZSBzZWxlY3RDaGVja2JveFNlbGVjdGlvbigpOiBIZXJtZXNPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5mb3JtYXRpb25XYXJlaG91c2Vcblx0XHRcdFx0ICAgLm9uVHlwZSh0aGlzLnN0cnVjdHVyZUlkKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKHR5cGU6IFJvd1NlbGVjdGlvblR5cGUpID0+IHtcblx0XHRcdFx0XHRcdCAgIHJldHVybiB0eXBlID09PSBSb3dTZWxlY3Rpb25UeXBlLkNIRUNLQk9YO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRwcml2YXRlIHNlbGVjdFNvdXJjZUVtcHR5KCk6IEhlcm1lc09ic2VydmFibGU8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiB0aGlzLnNvdXJjZVdhcmVob3VzZVxuXHRcdFx0XHQgICAub25JdGVtc1NpemUodGhpcy5zdHJ1Y3R1cmVJZClcblx0XHRcdFx0ICAgLnBpcGUoXG5cdFx0XHRcdFx0ICAgaGVybWVzTWFwKChzaXplOiBudW1iZXIpID0+IHtcblx0XHRcdFx0XHRcdCAgIHJldHVybiBzaXplID09PSAwO1xuXHRcdFx0XHRcdCAgIH0pXG5cdFx0XHRcdCAgICk7XG5cdH1cblxuXHRwcml2YXRlIHNlbGVjdFN1bW1hcmllc1RyYW5zbGF0aW9ucygpOiBIZXJtZXNPYnNlcnZhYmxlPFN1bW1hcmllc1RyYW5zbGF0aW9ucz4ge1xuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0aW9uU2VydmljZVxuXHRcdFx0XHQgICAub25UcmFuc2xhdGlvbigpXG5cdFx0XHRcdCAgIC5waXBlKFxuXHRcdFx0XHRcdCAgIGhlcm1lc01hcCgodHJhbnNsYXRpb246IFRyYW5zbGF0aW9uKSA9PiB7XG5cdFx0XHRcdFx0XHQgICByZXR1cm4gbmV3IFN1bW1hcmllc1RyYW5zbGF0aW9ucyhcblx0XHRcdFx0XHRcdFx0ICAgdHJhbnNsYXRpb24uc3VtbWFyaWVzRGlzdGluY3RWYWx1ZXNUb29sdGlwLFxuXHRcdFx0XHRcdFx0XHQgICB0cmFuc2xhdGlvbi5zdW1tYXJpZXNBdmVyYWdlVG9vbHRpcCxcblx0XHRcdFx0XHRcdFx0ICAgdHJhbnNsYXRpb24uc3VtbWFyaWVzTWluVG9vbHRpcCxcblx0XHRcdFx0XHRcdFx0ICAgdHJhbnNsYXRpb24uc3VtbWFyaWVzTWF4VG9vbHRpcCxcblx0XHRcdFx0XHRcdFx0ICAgdHJhbnNsYXRpb24uc3VtbWFyaWVzTWVkVG9vbHRpcCxcblx0XHRcdFx0XHRcdFx0ICAgdHJhbnNsYXRpb24uc3VtbWFyaWVzQ291bnRUb29sdGlwKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG5cblx0cHJpdmF0ZSBzZWxlY3RTdW1tYXJpZXMoKTogSGVybWVzT2JzZXJ2YWJsZTxNYXA8c3RyaW5nLCBhbnk+PiB7XG5cdFx0cmV0dXJuIHRoaXMuc3RydWN0dXJlU3VtbWFyaWVzRXZlbnRSZXBvc2l0b3J5XG5cdFx0XHRcdCAgIC5vblN1bW1hcmllc0NoYW5nZWQodGhpcy5zdHJ1Y3R1cmVJZC50b1JlYWRNb2RlbFJvb3RJZCgpKVxuXHRcdFx0XHQgICAucGlwZShcblx0XHRcdFx0XHQgICBoZXJtZXNNYXAoKGV2ZW50OiBTdHJ1Y3R1cmVTdW1tYXJpZXNDaGFuZ2VkRXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdCAgIHJldHVybiBldmVudC5nZXRTdW1tYXJpZXMoKTtcblx0XHRcdFx0XHQgICB9KVxuXHRcdFx0XHQgICApO1xuXHR9XG59XG4iLCI8bmctY29udGFpbmVyICpndWlMZXQ9XCJzdGF0ZSQ7IGxldCBsb2NhbFN0YXRlXCI+XG5cdDxuZy1jb250YWluZXIgKm5nSWY9XCJlbmFibGVkICYmIGxvY2FsU3RhdGUuc3VtbWFyaWVzICYmICFsb2NhbFN0YXRlLnNvdXJjZUVtcHR5XCI+XG5cblx0XHQ8ZGl2ICpuZ0lmPVwiY2hlY2tib3hTZWxlY3Rpb24kIHwgZ3VpUHVzaFwiXG5cdFx0XHQgY2xhc3M9XCJndWktc3RydWN0dXJlLXN1bW1hcmllcy1jZWxsIGd1aS1yb3ctY2hlY2tib3ggZ3VpLWZsZXggZ3VpLWp1c3RpZnktYmV0d2VlblxuXHQgZ3VpLW92ZXJmbG93LWhpZGRlbiBndWktcmVsYXRpdmUgZ3VpLXB5LTAgZ3VpLXB4LTYgZ3VpLWJveC1ib3JkZXJcblx0IGd1aS1sZWFkaW5nLTQgZ3VpLXdoaXRlc3BhY2Utbm93cmFwIGd1aS1vdmVyZmxvdy1lbGxpcHNpc1wiPlxuXHRcdDwvZGl2PlxuXG5cdFx0PGRpdiAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGhlYWRlckNvbHVtbnMkIHwgZ3VpUHVzaFwiXG5cdFx0XHQgW3N0eWxlLndpZHRoLnB4XT1cImNvbHVtbi53aWR0aFwiXG5cdFx0XHQgY2xhc3M9XCJndWktc3RydWN0dXJlLXN1bW1hcmllcy1jZWxsXCI+XG5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCJsb2NhbFN0YXRlLnN1bW1hcmllcyAmJiAhIWxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpXCI+XG5cblx0XHRcdFx0PGRpdiAqbmdJZj1cImlzU3VtbWFyaWVzVHlwZVByZXNlbnQobG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuY291bnQpXCJcblx0XHRcdFx0XHQgY2xhc3M9XCJndWktc3RydWN0dXJlLXN1bW1hcmllcy12YWx1ZVwiPlxuXHRcdFx0XHRcdDxzcGFuIFtndWktdG9vbHRpcF09XCJsb2NhbFN0YXRlLnN1bW1hcmllc1RyYW5zbGF0aW9ucy5jb3VudFRvb2x0aXBcIj57eydzdW1tYXJpZXNDb3VudCcgfCBndWlUcmFuc2xhdGV9fTwvc3Bhbj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImd1aS1zdW1tYXJpZXMtdmFsdWVcIj57eyBsb2NhbFN0YXRlLnN1bW1hcmllcy5nZXQoY29sdW1uLmdldEZpZWxkSWQoKS5nZXRJZCgpKS5jb3VudCB9fTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiAqbmdJZj1cImlzU3VtbWFyaWVzVHlwZVByZXNlbnQobG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuZGlzdGluY3QpXCJcblx0XHRcdFx0XHQgY2xhc3M9XCJndWktc3RydWN0dXJlLXN1bW1hcmllcy12YWx1ZVwiPlxuXHRcdFx0XHRcdDxzcGFuIFtndWktdG9vbHRpcF09XCJsb2NhbFN0YXRlLnN1bW1hcmllc1RyYW5zbGF0aW9ucy5kaXN0aW5jdFRvb2x0aXBcIj57eydzdW1tYXJpZXNEaXN0JyB8IGd1aVRyYW5zbGF0ZX19PC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZ3VpLXN1bW1hcmllcy12YWx1ZVwiPnt7IGxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpLmRpc3RpbmN0IH19PC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiIGlzU3VtbWFyaWVzVHlwZVByZXNlbnQobG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuc3VtKVwiXG5cdFx0XHRcdFx0IGNsYXNzPVwiZ3VpLXN0cnVjdHVyZS1zdW1tYXJpZXMtdmFsdWVcIj5cblxuXHRcdFx0XHRcdFx0PHNwYW4+XG5cdFx0XHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHRcdDxzcGFuIFtndWktdG9vbHRpcF09XCInU3VtJ1wiIC0tPlxuXHRcdFx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHRcdCAgY2xhc3M9XCJndWktbWF0aC1zeW1ib2xcIj4mc3VtOzwvc3Bhbj4tLT5cblx0XHRcdFx0XHRcdFx0e3snc3VtbWFyaWVzU3VtJyB8IGd1aVRyYW5zbGF0ZX19XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJndWktc3VtbWFyaWVzLXZhbHVlXCI+e3sgbG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuc3VtIH19PC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiaXNTdW1tYXJpZXNUeXBlUHJlc2VudChsb2NhbFN0YXRlLnN1bW1hcmllcy5nZXQoY29sdW1uLmdldEZpZWxkSWQoKS5nZXRJZCgpKS5hdmVyYWdlKVwiXG5cdFx0XHRcdFx0IGNsYXNzPVwiZ3VpLXN0cnVjdHVyZS1zdW1tYXJpZXMtdmFsdWVcIj5cblxuXHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHQ8ZGl2IFtndWktdG9vbHRpcF09XCInQXZlcmFnZSdcIi0tPlxuXHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHRcdCBjbGFzcz1cImd1aS1tZWFuXCI+LS0+XG5cdFx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdFx0PHNwYW4+Xzwvc3Bhbj48c3Bhbj5YPC9zcGFuPi0tPlxuXHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHQ8L2Rpdj4tLT5cblx0XHRcdFx0XHQ8c3BhbiBbZ3VpLXRvb2x0aXBdPVwibG9jYWxTdGF0ZS5zdW1tYXJpZXNUcmFuc2xhdGlvbnMuYXZlcmFnZVRvb2x0aXBcIj57eydzdW1tYXJpZXNBdmcnIHwgZ3VpVHJhbnNsYXRlfX08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJndWktc3VtbWFyaWVzLXZhbHVlXCI+e3sgbG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuYXZlcmFnZSB9fTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiAqbmdJZj1cIiBpc1N1bW1hcmllc1R5cGVQcmVzZW50KGxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpLm1pbilcIlxuXHRcdFx0XHRcdCBjbGFzcz1cImd1aS1zdHJ1Y3R1cmUtc3VtbWFyaWVzLXZhbHVlXCI+XG5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0PGRpdiBbZ3VpLXRvb2x0aXBdPVwiJ01pbidcIj4tLT5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImd1aS1tYXRoLXN5bWJvbFwiPiZhbmQ7PC9zcGFuPi0tPlxuXHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHQ8L2Rpdj4tLT5cblx0XHRcdFx0XHQ8c3BhbiBbZ3VpLXRvb2x0aXBdPVwibG9jYWxTdGF0ZS5zdW1tYXJpZXNUcmFuc2xhdGlvbnMubWluVG9vbHRpcFwiPlxuXHRcdFx0XHRcdFx0XHR7eydzdW1tYXJpZXNNaW4nIHwgZ3VpVHJhbnNsYXRlfX1cblx0XHRcdFx0XHRcdDwvc3Bhbj5cblxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZ3VpLXN1bW1hcmllcy12YWx1ZVwiPnt7IGxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpLm1pbiB9fTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiAqbmdJZj1cIiBpc1N1bW1hcmllc1R5cGVQcmVzZW50KGxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpLm1heClcIlxuXHRcdFx0XHRcdCBjbGFzcz1cImd1aS1zdHJ1Y3R1cmUtc3VtbWFyaWVzLXZhbHVlXCI+XG5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0PGRpdiBbZ3VpLXRvb2x0aXBdPVwiJ01heCdcIj4tLT5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImd1aS1tYXRoLXN5bWJvbFwiPiZvcjs8L3NwYW4+LS0+XG5cdFx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdDwvZGl2Pi0tPlxuXG5cdFx0XHRcdFx0PHNwYW4gW2d1aS10b29sdGlwXT1cImxvY2FsU3RhdGUuc3VtbWFyaWVzVHJhbnNsYXRpb25zLm1heFRvb2x0aXBcIj5cblx0XHRcdFx0XHRcdFx0e3snc3VtbWFyaWVzTWF4JyB8IGd1aVRyYW5zbGF0ZX19XG5cdFx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJndWktc3VtbWFyaWVzLXZhbHVlXCI+e3sgbG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkubWF4IH19PC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiaXNTdW1tYXJpZXNUeXBlUHJlc2VudChsb2NhbFN0YXRlLnN1bW1hcmllcy5nZXQoY29sdW1uLmdldEZpZWxkSWQoKS5nZXRJZCgpKS5tZWRpYW4pXCJcblx0XHRcdFx0XHQgY2xhc3M9XCJndWktc3RydWN0dXJlLXN1bW1hcmllcy12YWx1ZVwiPlxuXG5cdFx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdDxkaXYgW2d1aS10b29sdGlwXT1cIidNZWRpYW4nXCItLT5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHQgY2xhc3M9XCJndWktbWVkaWFuXCI+LS0+XG5cdFx0XHRcdFx0PCEtLVx0XHRcdFx0XHRcdFx0PHNwYW4+fjwvc3Bhbj4tLT5cblx0XHRcdFx0XHQ8IS0tXHRcdFx0XHRcdFx0XHQ8c3Bhbj5YPC9zcGFuPi0tPlxuXHRcdFx0XHRcdDwhLS1cdFx0XHRcdFx0XHQ8L2Rpdj4tLT5cblxuXHRcdFx0XHRcdDxzcGFuIFtndWktdG9vbHRpcF09XCJsb2NhbFN0YXRlLnN1bW1hcmllc1RyYW5zbGF0aW9ucy5tZWRUb29sdGlwXCI+e3snc3VtbWFyaWVzTWVkJyB8IGd1aVRyYW5zbGF0ZX19PC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiZ3VpLXN1bW1hcmllcy12YWx1ZVwiPnt7IGxvY2FsU3RhdGUuc3VtbWFyaWVzLmdldChjb2x1bW4uZ2V0RmllbGRJZCgpLmdldElkKCkpLm1lZGlhbiB9fTwvc3Bhbj5cblx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0PGRpdiAqbmdJZj1cImlzU3VtbWFyaWVzVHlwZVByZXNlbnQobG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkudHJ1dGh5KVwiXG5cdFx0XHRcdFx0IGNsYXNzPVwiZ3VpLXN0cnVjdHVyZS1zdW1tYXJpZXMtdmFsdWVcIj5cblx0XHRcdFx0XHQ8c3Bhbj57eydzdW1tYXJpZXNUcnV0aHknIHwgZ3VpVHJhbnNsYXRlfX08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJndWktc3VtbWFyaWVzLXZhbHVlXCI+e3sgbG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkudHJ1dGh5IH19PC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblxuXHRcdFx0XHQ8ZGl2ICpuZ0lmPVwiaXNTdW1tYXJpZXNUeXBlUHJlc2VudChsb2NhbFN0YXRlLnN1bW1hcmllcy5nZXQoY29sdW1uLmdldEZpZWxkSWQoKS5nZXRJZCgpKS5mYWxzeSlcIlxuXHRcdFx0XHRcdCBjbGFzcz1cImd1aS1zdHJ1Y3R1cmUtc3VtbWFyaWVzLXZhbHVlXCI+XG5cdFx0XHRcdFx0PHNwYW4+e3snc3VtbWFyaWVzRmFsc3knIHwgZ3VpVHJhbnNsYXRlfX08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJndWktc3VtbWFyaWVzLXZhbHVlXCI+e3sgbG9jYWxTdGF0ZS5zdW1tYXJpZXMuZ2V0KGNvbHVtbi5nZXRGaWVsZElkKCkuZ2V0SWQoKSkuZmFsc3kgfX08L3NwYW4+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHQ8L25nLWNvbnRhaW5lcj5cblx0XHQ8L2Rpdj5cblxuXHQ8L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuIl19