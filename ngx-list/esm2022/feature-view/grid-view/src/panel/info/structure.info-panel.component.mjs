import { ChangeDetectionStrategy, Component, ViewEncapsulation, inject } from '@angular/core';
import { SmartComponent } from '../../../../../feature/common/component/src/smart-component';
import { StructureInfoModalComponent } from './info-modal/structure-info-modal.component';
import { SourceWarehouse } from '../../../../../core/structure/source/src/api/source.warehouse';
import { StructureId } from '../../../../../core/structure/structure-core/src/api/global/structure.id';
import { hermesMap } from '@generic-ui/hermes';
import { GuiState } from '../../../../../feature/gui-angular/state/gui.state';
import * as i0 from "@angular/core";
import * as i1 from "@generic-ui/fabric";
import * as i2 from "../../../../../core/composition/src/api/global/composition.id";
import * as i3 from "../../../../../core/schema/src/api/global/schema.read-model-root-id";
import * as i4 from "../../column-manager/dialog/structure.dialog-column-manager.service";
import * as i5 from "../../../../../core/l10n/src/api/translation.facade";
import * as i6 from "../../../../../feature/schema/src/manager/dialog/structure.dialog-schema-manager.service";
import * as i7 from "../../../../../core/structure/structure-core/src/api/panel/info/structure.info-panel.archive";
import * as i8 from "@angular/common";
import * as i9 from "../../column-manager/icon/structure.column-manager-icon.component";
import * as i10 from "../../../../../feature/schema/src/manager/manager-icon/structure.schema-manager-icon.component";
import * as i11 from "../../../../../feature/structure/source/src/counter/filter/active-filter-menu-trigger.directive";
import * as i12 from "../../../../../feature/gui-angular/template/let/gui.let.directive";
import * as i13 from "./icon/structure.info-icon.component";
import * as i14 from "../../../../../feature/common/cdk/src/number-formatter/number-formatter.pipe";
import * as i15 from "../../../../../feature/l10n/src/translation.pipe";
export class StructureInfoPanelComponent extends SmartComponent {
    injector;
    dialog;
    compositionId;
    schemaReadModelRootId;
    menuColumnManagerService;
    translationService;
    schemaManagerService;
    structureInfoPanelArchive;
    state = inject((GuiState));
    sourceWarehouse = inject(SourceWarehouse);
    structureId = inject(StructureId);
    state$ = this.state.select();
    totalItemsSize$ = this.sourceWarehouse.onOriginSize(this.structureId);
    infoModal = StructureInfoModalComponent;
    constructor(changeDetectorRef, elementRef, injector, dialog, compositionId, schemaReadModelRootId, menuColumnManagerService, translationService, schemaManagerService, structureInfoPanelArchive) {
        super(changeDetectorRef, elementRef);
        this.injector = injector;
        this.dialog = dialog;
        this.compositionId = compositionId;
        this.schemaReadModelRootId = schemaReadModelRootId;
        this.menuColumnManagerService = menuColumnManagerService;
        this.translationService = translationService;
        this.schemaManagerService = schemaManagerService;
        this.structureInfoPanelArchive = structureInfoPanelArchive;
        this.state.connect('infoPanelConfig', this.structureInfoPanelArchive.on());
        this.state.connect('preparedItemsSize', this.sourceWarehouse
            .onPreparedItems(this.structureId)
            .pipe(hermesMap(items => items.length)));
        this.state.connect('translations', this.translationService.onTranslation());
    }
    openInfo() {
        this.dialog.open({ component: this.infoModal });
    }
    openColumnManager() {
        this.menuColumnManagerService.open(this.compositionId, this.schemaReadModelRootId, this.injector);
    }
    openSchemaManager() {
        this.schemaManagerService.open(this.schemaReadModelRootId, this.injector);
    }
    getSelectorName() {
        return 'gui-structure-info-panel';
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureInfoPanelComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.Injector }, { token: i1.FabricDialogService }, { token: i2.CompositionId }, { token: i3.SchemaReadModelRootId }, { token: i4.StructureDialogColumnManagerService }, { token: i5.TranslationFacade }, { token: i6.StructureDialogSchemaManagerService }, { token: i7.StructureInfoPanelArchive }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.2", type: StructureInfoPanelComponent, selector: "div[gui-structure-info-panel]", providers: [
            GuiState
        ], usesInheritance: true, ngImport: i0, template: "<ng-container *guiLet=\"state$; let localState\">\n\n\t<div *guiLet=\"totalItemsSize$; let totalItemsSize\">\n\t\t<div *ngIf=\"localState.infoPanelConfig.isSourceSizeEnabled()\">\n\t\t\t<ng-container *ngIf=\"localState.preparedItemsSize !== undefined && totalItemsSize !== undefined\">\n\n\t\t\t\t<ng-container *ngIf=\"localState.preparedItemsSize === totalItemsSize\">\n\t\t\t\t\t{{'infoPanelShowing' | guiTranslate}}\n\t\t\t\t\t<b>{{totalItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelItems' | guiTranslate}}\n\t\t\t\t</ng-container>\n\n\t\t\t\t<span *ngIf=\"localState.preparedItemsSize !== totalItemsSize\"\n\t\t\t\t\t  gui-active-filter-menu-trigger>\n\t\t\t\t\t\t{{'infoPanelShowing' | guiTranslate}}\n\t\t\t\t\t<b>{{localState.preparedItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelOutOf' | guiTranslate}}\n\t\t\t\t\t<b>{{totalItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelItems' | guiTranslate}}\n\t\t\t</span>\n\n\t\t\t</ng-container>\n\n\t\t</div>\n\t</div>\n\n\t<div>\n\t\t<div class=\"gui-right-section\">\n\n\t\t\t<div (click)=\"openSchemaManager()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isSchemaManagerEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelThemeMangerTooltipText\" gui-structure-schema-manager-icon></div>\n\t\t\t</div>\n\n\t\t\t<div (click)=\"openColumnManager()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isColumnsManagerEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelColumnManagerTooltipText\" gui-structure-column-manager-icon></div>\n\t\t\t</div>\n\n\t\t\t<div (click)=\"openInfo()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isInfoDialogEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelInfoTooltipText\" gui-structure-info-icon></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</ng-container>\n", dependencies: [{ kind: "directive", type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.FabricTooltipDirective, selector: "[gui-tooltip]", inputs: ["gui-tooltip"], exportAs: ["guiTooltip"] }, { kind: "component", type: i9.StructureColumnManagerIconComponent, selector: "div[gui-structure-column-manager-icon]" }, { kind: "component", type: i10.StructureSchemaManagerIconComponent, selector: "div[gui-structure-schema-manager-icon]" }, { kind: "directive", type: i11.ActiveFilterMenuTriggerDirective, selector: "[gui-active-filter-menu-trigger]" }, { kind: "directive", type: i12.GuiLetDirective, selector: "[guiLet]", inputs: ["guiLet"] }, { kind: "component", type: i13.StructureInfoIconComponent, selector: "div[gui-structure-info-icon]" }, { kind: "pipe", type: i14.NumberFormatterPipe, name: "numberFormatter" }, { kind: "pipe", type: i15.TranslationPipe, name: "guiTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: StructureInfoPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[gui-structure-info-panel]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        GuiState
                    ], template: "<ng-container *guiLet=\"state$; let localState\">\n\n\t<div *guiLet=\"totalItemsSize$; let totalItemsSize\">\n\t\t<div *ngIf=\"localState.infoPanelConfig.isSourceSizeEnabled()\">\n\t\t\t<ng-container *ngIf=\"localState.preparedItemsSize !== undefined && totalItemsSize !== undefined\">\n\n\t\t\t\t<ng-container *ngIf=\"localState.preparedItemsSize === totalItemsSize\">\n\t\t\t\t\t{{'infoPanelShowing' | guiTranslate}}\n\t\t\t\t\t<b>{{totalItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelItems' | guiTranslate}}\n\t\t\t\t</ng-container>\n\n\t\t\t\t<span *ngIf=\"localState.preparedItemsSize !== totalItemsSize\"\n\t\t\t\t\t  gui-active-filter-menu-trigger>\n\t\t\t\t\t\t{{'infoPanelShowing' | guiTranslate}}\n\t\t\t\t\t<b>{{localState.preparedItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelOutOf' | guiTranslate}}\n\t\t\t\t\t<b>{{totalItemsSize | numberFormatter}}</b>\n\t\t\t\t\t{{'infoPanelItems' | guiTranslate}}\n\t\t\t</span>\n\n\t\t\t</ng-container>\n\n\t\t</div>\n\t</div>\n\n\t<div>\n\t\t<div class=\"gui-right-section\">\n\n\t\t\t<div (click)=\"openSchemaManager()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isSchemaManagerEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelThemeMangerTooltipText\" gui-structure-schema-manager-icon></div>\n\t\t\t</div>\n\n\t\t\t<div (click)=\"openColumnManager()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isColumnsManagerEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelColumnManagerTooltipText\" gui-structure-column-manager-icon></div>\n\t\t\t</div>\n\n\t\t\t<div (click)=\"openInfo()\"\n\t\t\t\t *ngIf=\"localState.infoPanelConfig.isInfoDialogEnabled()\">\n\t\t\t\t<div [gui-tooltip]=\"localState.translations.infoPanelInfoTooltipText\" gui-structure-info-icon></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.Injector }, { type: i1.FabricDialogService }, { type: i2.CompositionId }, { type: i3.SchemaReadModelRootId }, { type: i4.StructureDialogColumnManagerService }, { type: i5.TranslationFacade }, { type: i6.StructureDialogSchemaManagerService }, { type: i7.StructureInfoPanelArchive }] });
//# sourceMappingURL=data:application/json;base64,