import { DataType } from '../../../field/src/domain/field/data/data-type';
export class SearchManager {
    searchFields = [];
    searchPhrase;
    enabledDataTypes = [
        DataType.STRING
    ];
    addSearchPhrase(fields, searchPhrase) {
        if (!searchPhrase) {
            this.searchFields = [];
            return;
        }
        const searchableFields = fields.filter((field) => {
            return this.enabledDataTypes.some((dt) => dt === field.getDataType());
        });
        if (searchableFields.length === 0) {
            return;
        }
        this.searchFields = searchableFields;
        this.searchPhrase = searchPhrase;
    }
    removeSearchFilters() {
        this.searchFields = [];
    }
    search(entities) {
        if (entities.length === 0 || this.searchFields.length === 0) {
            return entities;
        }
        const searchedItems = new Set();
        for (let i = 0; i < entities.length; i += 1) {
            this.searchFields
                .filter((field) => field.search(entities[i], this.searchPhrase))
                .forEach(() => {
                searchedItems.add(entities[i]);
            });
        }
        return Array.from(searchedItems);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLm1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9idWlsZC1jbGkvcHJvamVjdHMvbmd4LWxpc3Qvc3JjL2NvcmUvc3RydWN0dXJlL3NlYXJjaC9zcmMvZG9tYWluL3NlYXJjaC5tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUkxRSxNQUFNLE9BQU8sYUFBYTtJQUVqQixZQUFZLEdBQXVCLEVBQUUsQ0FBQztJQUV0QyxZQUFZLENBQVM7SUFFckIsZ0JBQWdCLEdBQW9CO1FBQzNDLFFBQVEsQ0FBQyxNQUFNO0tBQ2YsQ0FBQztJQUVGLGVBQWUsQ0FBQyxNQUEwQixFQUFFLFlBQW9CO1FBRS9ELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDdkIsT0FBTztTQUNQO1FBRUQsTUFBTSxnQkFBZ0IsR0FDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRTtZQUNwQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNqRixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsQyxPQUFPO1NBQ1A7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDO1FBRXJDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxtQkFBbUI7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUEyQjtRQUVqQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1RCxPQUFPLFFBQVEsQ0FBQztTQUNoQjtRQUVELE1BQU0sYUFBYSxHQUFHLElBQUksR0FBRyxFQUFjLENBQUM7UUFFNUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUU1QyxJQUFJLENBQUMsWUFBWTtpQkFDZixNQUFNLENBQUMsQ0FBQyxLQUFrQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQzVFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZW1FbnRpdHkgfSBmcm9tICcuLi8uLi8uLi9zb3VyY2Uvc3JjL2RvbWFpbi9pdGVtL2l0ZW0uZW50aXR5JztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZmllbGQvc3JjL2RvbWFpbi9maWVsZC9kYXRhL2RhdGEtdHlwZSc7XG5pbXBvcnQgeyBGaWVsZEVudGl0eSB9IGZyb20gJy4uLy4uLy4uL2ZpZWxkL3NyYy9kb21haW4vZmllbGQvZmllbGQuZW50aXR5JztcblxuXG5leHBvcnQgY2xhc3MgU2VhcmNoTWFuYWdlciB7XG5cblx0cHJpdmF0ZSBzZWFyY2hGaWVsZHM6IEFycmF5PEZpZWxkRW50aXR5PiA9IFtdO1xuXG5cdHByaXZhdGUgc2VhcmNoUGhyYXNlOiBzdHJpbmc7XG5cblx0cHJpdmF0ZSBlbmFibGVkRGF0YVR5cGVzOiBBcnJheTxEYXRhVHlwZT4gPSBbXG5cdFx0RGF0YVR5cGUuU1RSSU5HXG5cdF07XG5cblx0YWRkU2VhcmNoUGhyYXNlKGZpZWxkczogQXJyYXk8RmllbGRFbnRpdHk+LCBzZWFyY2hQaHJhc2U6IHN0cmluZyk6IHZvaWQge1xuXG5cdFx0aWYgKCFzZWFyY2hQaHJhc2UpIHtcblx0XHRcdHRoaXMuc2VhcmNoRmllbGRzID0gW107XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2VhcmNoYWJsZUZpZWxkcyA9XG5cdFx0XHRmaWVsZHMuZmlsdGVyKChmaWVsZDogRmllbGRFbnRpdHkpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZW5hYmxlZERhdGFUeXBlcy5zb21lKChkdDogRGF0YVR5cGUpID0+IGR0ID09PSBmaWVsZC5nZXREYXRhVHlwZSgpKTtcblx0XHRcdH0pO1xuXG5cdFx0aWYgKHNlYXJjaGFibGVGaWVsZHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5zZWFyY2hGaWVsZHMgPSBzZWFyY2hhYmxlRmllbGRzO1xuXG5cdFx0dGhpcy5zZWFyY2hQaHJhc2UgPSBzZWFyY2hQaHJhc2U7XG5cdH1cblxuXHRyZW1vdmVTZWFyY2hGaWx0ZXJzKCk6IHZvaWQge1xuXHRcdHRoaXMuc2VhcmNoRmllbGRzID0gW107XG5cdH1cblxuXHRzZWFyY2goZW50aXRpZXM6IEFycmF5PEl0ZW1FbnRpdHk+KTogQXJyYXk8SXRlbUVudGl0eT4ge1xuXG5cdFx0aWYgKGVudGl0aWVzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnNlYXJjaEZpZWxkcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBlbnRpdGllcztcblx0XHR9XG5cblx0XHRjb25zdCBzZWFyY2hlZEl0ZW1zID0gbmV3IFNldDxJdGVtRW50aXR5PigpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBlbnRpdGllcy5sZW5ndGg7IGkgKz0gMSkge1xuXG5cdFx0XHR0aGlzLnNlYXJjaEZpZWxkc1xuXHRcdFx0XHQuZmlsdGVyKChmaWVsZDogRmllbGRFbnRpdHkpID0+IGZpZWxkLnNlYXJjaChlbnRpdGllc1tpXSwgdGhpcy5zZWFyY2hQaHJhc2UpKVxuXHRcdFx0XHQuZm9yRWFjaCgoKSA9PiB7XG5cdFx0XHRcdFx0c2VhcmNoZWRJdGVtcy5hZGQoZW50aXRpZXNbaV0pO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gQXJyYXkuZnJvbShzZWFyY2hlZEl0ZW1zKTtcblx0fVxuXG59XG4iXX0=